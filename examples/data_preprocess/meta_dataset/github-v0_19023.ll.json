{
  "program_id": "github-v0_19023.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 15,
    "onePredOneSuc": 9,
    "onePredTwoSuc": 3,
    "oneSuccessor": 13,
    "twoPred": 6,
    "twoPredOneSuc": 3,
    "twoEach": 3,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 24,
    "BeginPhi": 0,
    "BranchCount": 20,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 27,
    "const32Bit": 40,
    "const64Bit": 37,
    "numConstZeroes": 43,
    "numConstOnes": 19,
    "UncondBranches": 13,
    "binaryConstArg": 17,
    "NumAShrInst": 0,
    "NumAddInst": 7,
    "NumAllocaInst": 12,
    "NumAndInst": 5,
    "BlockMid": 6,
    "BlockLow": 18,
    "NumBitCastInst": 0,
    "NumBrInst": 20,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 26,
    "NumICmpInst": 7,
    "NumLShrInst": 0,
    "NumLoadInst": 46,
    "NumMulInst": 1,
    "NumOrInst": 5,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 5,
    "NumStoreInst": 21,
    "NumSubInst": 2,
    "NumTruncInst": 9,
    "NumXorInst": 0,
    "NumZExtInst": 31,
    "TotalBlocks": 24,
    "TotalInsts": 211,
    "TotalMemInst": 112,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 101
  },
  "baseline_oz_instcount": 211,
  "knowledge_base_entry": [
    "--ipconstprop",
    "--aggressive-instcombine",
    "--load-store-vectorizer",
    "--correlated-propagation",
    "--reassociate",
    "--aggressive-instcombine",
    "--bdce",
    "--loop-simplifycfg",
    "--slsr"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--called-value-propagation",
          "--guard-widening",
          "--aggressive-instcombine",
          "--argpromotion",
          "--sroa",
          "--gvn",
          "--partially-inline-libcalls",
          "--lcssa",
          "--scalarizer",
          "--loop-rotate",
          "--flattencfg",
          "--loweratomic",
          "--name-anon-globals",
          "--redundant-dbg-inst-elim",
          "--elim-avail-extern",
          "--early-cse-memssa",
          "--licm",
          "--simple-loop-unswitch",
          "--inject-tli-mappings",
          "--lowerinvoke",
          "--dse",
          "--loop-interchange",
          "--loop-unroll",
          "--forceattrs"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--called-value-propagation",
      "--guard-widening",
      "--aggressive-instcombine",
      "--argpromotion",
      "--sroa",
      "--gvn",
      "--partially-inline-libcalls",
      "--lcssa",
      "--scalarizer",
      "--loop-rotate",
      "--flattencfg",
      "--loweratomic",
      "--name-anon-globals",
      "--redundant-dbg-inst-elim",
      "--elim-avail-extern",
      "--early-cse-memssa",
      "--licm",
      "--simple-loop-unswitch",
      "--inject-tli-mappings",
      "--lowerinvoke",
      "--dse",
      "--loop-interchange",
      "--loop-unroll",
      "--forceattrs"
    ],
    "performance_vs_Oz": "+3.3%"
  }
}
{
  "program_id": "linux-v0_492.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 58,
    "onePredOneSuc": 41,
    "onePredTwoSuc": 16,
    "oneSuccessor": 52,
    "twoPred": 18,
    "twoPredOneSuc": 6,
    "twoEach": 5,
    "twoSuccessor": 27,
    "morePreds": 5,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 111,
    "BeginPhi": 0,
    "BranchCount": 79,
    "returnInt": 37,
    "CriticalCount": 14,
    "NumEdges": 116,
    "const32Bit": 436,
    "const64Bit": 14,
    "numConstZeroes": 202,
    "numConstOnes": 137,
    "UncondBranches": 52,
    "binaryConstArg": 11,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 99,
    "NumAndInst": 1,
    "BlockMid": 21,
    "BlockLow": 90,
    "NumBitCastInst": 36,
    "NumBrInst": 79,
    "NumCallInst": 73,
    "NumGetElementPtrInst": 124,
    "NumICmpInst": 27,
    "NumLShrInst": 1,
    "NumLoadInst": 297,
    "NumMulInst": 0,
    "NumOrInst": 2,
    "NumPHIInst": 0,
    "NumRetInst": 30,
    "NumSExtInst": 8,
    "NumSelectInst": 1,
    "NumShlInst": 1,
    "NumStoreInst": 147,
    "NumSubInst": 5,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 4,
    "TotalBlocks": 111,
    "TotalInsts": 939,
    "TotalMemInst": 740,
    "TotalFuncs": 53,
    "ArgsPhi": 0,
    "testUnary": 444
  },
  "baseline_oz_instcount": 938,
  "knowledge_base_entry": [
    "--indvars",
    "--simplifycfg",
    "--mergefunc",
    "--slp-vectorizer",
    "--instcombine",
    "--ipsccp",
    "--flattencfg",
    "--early-cse-memssa",
    "--mem2reg",
    "--mergefunc",
    "--loop-reroll",
    "--early-cse",
    "--mergefunc",
    "--lower-constant-intrinsics"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--lcssa",
          "--loop-instsimplify",
          "--instsimplify",
          "--inject-tli-mappings",
          "--elim-avail-extern",
          "--licm",
          "--mergefunc",
          "--ee-instrument",
          "--loop-unroll-and-jam",
          "--early-cse",
          "--mergeicmps",
          "--loop-versioning",
          "--correlated-propagation",
          "--loop-interchange",
          "--barrier",
          "--insert-gcov-profiling",
          "--add-discriminators",
          "--lower-expect",
          "--ipsccp",
          "--loop-idiom",
          "--slsr"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--lcssa",
      "--loop-instsimplify",
      "--instsimplify",
      "--inject-tli-mappings",
      "--elim-avail-extern",
      "--licm",
      "--mergefunc",
      "--ee-instrument",
      "--loop-unroll-and-jam",
      "--early-cse",
      "--mergeicmps",
      "--loop-versioning",
      "--correlated-propagation",
      "--loop-interchange",
      "--barrier",
      "--insert-gcov-profiling",
      "--add-discriminators",
      "--lower-expect",
      "--ipsccp",
      "--loop-idiom",
      "--slsr"
    ],
    "performance_vs_Oz": "+1.2%"
  }
}
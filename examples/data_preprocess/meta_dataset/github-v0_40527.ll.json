{
  "program_id": "github-v0_40527.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 13,
    "onePredOneSuc": 9,
    "onePredTwoSuc": 1,
    "oneSuccessor": 11,
    "twoPred": 5,
    "twoPredOneSuc": 1,
    "twoEach": 4,
    "twoSuccessor": 6,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 21,
    "BeginPhi": 0,
    "BranchCount": 17,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 23,
    "const32Bit": 32,
    "const64Bit": 19,
    "numConstZeroes": 23,
    "numConstOnes": 22,
    "UncondBranches": 11,
    "binaryConstArg": 10,
    "NumAShrInst": 0,
    "NumAddInst": 7,
    "NumAllocaInst": 12,
    "NumAndInst": 1,
    "BlockMid": 4,
    "BlockLow": 17,
    "NumBitCastInst": 0,
    "NumBrInst": 17,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 13,
    "NumICmpInst": 6,
    "NumLShrInst": 0,
    "NumLoadInst": 27,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 18,
    "NumSubInst": 1,
    "NumTruncInst": 5,
    "NumXorInst": 0,
    "NumZExtInst": 12,
    "TotalBlocks": 21,
    "TotalInsts": 136,
    "TotalMemInst": 77,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 59
  },
  "baseline_oz_instcount": 136,
  "knowledge_base_entry": [
    "--memcpyopt",
    "--newgvn",
    "--globalopt",
    "--aggressive-instcombine",
    "--flattencfg",
    "--simplifycfg",
    "--loop-instsimplify",
    "--aggressive-instcombine",
    "--load-store-vectorizer",
    "--early-cse-memssa",
    "--loop-rotate",
    "--sroa",
    "--adce",
    "--instcombine",
    "--dce",
    "--mergefunc",
    "--elim-avail-extern",
    "--dse"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--correlated-propagation",
          "--loop-simplifycfg",
          "--sancov",
          "--coro-split",
          "--simplifycfg",
          "--strip-nondebug",
          "--aggressive-instcombine",
          "--loop-load-elim",
          "--callsite-splitting",
          "--strip",
          "--scalarizer",
          "--lcssa",
          "--canonicalize-aliases",
          "--dce",
          "--slp-vectorizer",
          "--gvn-hoist",
          "--deadargelim",
          "--cross-dso-cfi",
          "--elim-avail-extern",
          "--add-discriminators",
          "--called-value-propagation",
          "--lowerswitch"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--correlated-propagation",
      "--loop-simplifycfg",
      "--sancov",
      "--coro-split",
      "--simplifycfg",
      "--strip-nondebug",
      "--aggressive-instcombine",
      "--loop-load-elim",
      "--callsite-splitting",
      "--strip",
      "--scalarizer",
      "--lcssa",
      "--canonicalize-aliases",
      "--dce",
      "--slp-vectorizer",
      "--gvn-hoist",
      "--deadargelim",
      "--cross-dso-cfi",
      "--elim-avail-extern",
      "--add-discriminators",
      "--called-value-propagation",
      "--lowerswitch"
    ],
    "performance_vs_Oz": "+2.9%"
  }
}
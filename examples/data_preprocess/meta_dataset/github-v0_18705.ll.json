{
  "program_id": "github-v0_18705.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 11,
    "onePredOneSuc": 8,
    "onePredTwoSuc": 1,
    "oneSuccessor": 9,
    "twoPred": 4,
    "twoPredOneSuc": 1,
    "twoEach": 2,
    "twoSuccessor": 5,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 18,
    "BeginPhi": 0,
    "BranchCount": 14,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 19,
    "const32Bit": 33,
    "const64Bit": 54,
    "numConstZeroes": 54,
    "numConstOnes": 26,
    "UncondBranches": 9,
    "binaryConstArg": 7,
    "NumAShrInst": 0,
    "NumAddInst": 5,
    "NumAllocaInst": 13,
    "NumAndInst": 1,
    "BlockMid": 5,
    "BlockLow": 13,
    "NumBitCastInst": 12,
    "NumBrInst": 14,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 37,
    "NumICmpInst": 5,
    "NumLShrInst": 0,
    "NumLoadInst": 30,
    "NumMulInst": 2,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 23,
    "NumSubInst": 0,
    "NumTruncInst": 4,
    "NumXorInst": 0,
    "NumZExtInst": 7,
    "TotalBlocks": 18,
    "TotalInsts": 167,
    "TotalMemInst": 110,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 69
  },
  "baseline_oz_instcount": 167,
  "knowledge_base_entry": [
    "--mergereturn",
    "--jump-threading",
    "--globalopt",
    "--jump-threading",
    "--flattencfg",
    "--load-store-vectorizer",
    "--aggressive-instcombine",
    "--lower-expect",
    "--aggressive-instcombine",
    "--load-store-vectorizer",
    "--inline",
    "--jump-threading",
    "--lower-expect",
    "--elim-avail-extern",
    "--instcombine",
    "--lower-expect",
    "--aggressive-instcombine",
    "--lower-expect",
    "--aggressive-instcombine",
    "--load-store-vectorizer",
    "--loop-reroll",
    "--mergefunc",
    "--simplifycfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--globalopt",
          "--functionattrs",
          "--forceattrs",
          "--prune-eh",
          "--nary-reassociate",
          "--loop-sink",
          "--loop-unroll",
          "--aggressive-instcombine",
          "--constprop",
          "--mergefunc",
          "--memcpyopt",
          "--strip-debug-declare",
          "--loop-simplify",
          "--libcalls-shrinkwrap",
          "--loop-versioning-licm",
          "--loop-simplifycfg",
          "--div-rem-pairs",
          "--loop-idiom"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+4.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--globalopt",
      "--functionattrs",
      "--forceattrs",
      "--prune-eh",
      "--nary-reassociate",
      "--loop-sink",
      "--loop-unroll",
      "--aggressive-instcombine",
      "--constprop",
      "--mergefunc",
      "--memcpyopt",
      "--strip-debug-declare",
      "--loop-simplify",
      "--libcalls-shrinkwrap",
      "--loop-versioning-licm",
      "--loop-simplifycfg",
      "--div-rem-pairs",
      "--loop-idiom"
    ],
    "performance_vs_Oz": "+4.2%"
  }
}
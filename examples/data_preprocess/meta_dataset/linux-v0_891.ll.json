{
  "program_id": "linux-v0_891.ll",
  "autophase_features": {
    "BBNumArgsHi": 2,
    "BBNumArgsLo": 0,
    "onePred": 27,
    "onePredOneSuc": 15,
    "onePredTwoSuc": 12,
    "oneSuccessor": 17,
    "twoPred": 9,
    "twoPredOneSuc": 2,
    "twoEach": 4,
    "twoSuccessor": 23,
    "morePreds": 4,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 56,
    "BeginPhi": 2,
    "BranchCount": 40,
    "returnInt": 10,
    "CriticalCount": 21,
    "NumEdges": 63,
    "const32Bit": 194,
    "const64Bit": 7,
    "numConstZeroes": 97,
    "numConstOnes": 77,
    "UncondBranches": 17,
    "binaryConstArg": 24,
    "NumAShrInst": 1,
    "NumAddInst": 0,
    "NumAllocaInst": 49,
    "NumAndInst": 9,
    "BlockMid": 9,
    "BlockLow": 49,
    "NumBitCastInst": 13,
    "NumBrInst": 40,
    "NumCallInst": 45,
    "NumGetElementPtrInst": 56,
    "NumICmpInst": 20,
    "NumLShrInst": 0,
    "NumLoadInst": 134,
    "NumMulInst": 0,
    "NumOrInst": 6,
    "NumPHIInst": 2,
    "NumRetInst": 18,
    "NumSExtInst": 5,
    "NumSelectInst": 3,
    "NumShlInst": 2,
    "NumStoreInst": 64,
    "NumSubInst": 3,
    "NumTruncInst": 9,
    "NumXorInst": 6,
    "NumZExtInst": 28,
    "TotalBlocks": 58,
    "TotalInsts": 515,
    "TotalMemInst": 348,
    "TotalFuncs": 27,
    "ArgsPhi": 12,
    "testUnary": 240
  },
  "baseline_oz_instcount": 515,
  "knowledge_base_entry": [
    "--inline",
    "--aggressive-instcombine",
    "--dse",
    "--early-cse-memssa",
    "--prune-eh",
    "--aggressive-instcombine",
    "--dse",
    "--early-cse-memssa",
    "--prune-eh",
    "--aggressive-instcombine",
    "--lower-constant-intrinsics",
    "--loop-rotate",
    "--newgvn",
    "--early-cse",
    "--memcpyopt",
    "--mergefunc",
    "--loop-instsimplify"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--deadargelim",
          "--gvn-hoist",
          "--loop-data-prefetch",
          "--aggressive-instcombine",
          "--loop-idiom",
          "--sancov",
          "--loop-unroll",
          "--canonicalize-aliases",
          "--name-anon-globals",
          "--loop-load-elim",
          "--argpromotion",
          "--always-inline",
          "--post-inline-ee-instrument",
          "--globalopt",
          "--libcalls-shrinkwrap",
          "--gvn",
          "--nary-reassociate"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--deadargelim",
      "--gvn-hoist",
      "--loop-data-prefetch",
      "--aggressive-instcombine",
      "--loop-idiom",
      "--sancov",
      "--loop-unroll",
      "--canonicalize-aliases",
      "--name-anon-globals",
      "--loop-load-elim",
      "--argpromotion",
      "--always-inline",
      "--post-inline-ee-instrument",
      "--globalopt",
      "--libcalls-shrinkwrap",
      "--gvn",
      "--nary-reassociate"
    ],
    "performance_vs_Oz": "+2.5%"
  }
}
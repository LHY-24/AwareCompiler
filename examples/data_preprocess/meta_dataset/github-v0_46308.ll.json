{
  "program_id": "github-v0_46308.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 10,
    "onePredOneSuc": 8,
    "onePredTwoSuc": 2,
    "oneSuccessor": 9,
    "twoPred": 3,
    "twoPredOneSuc": 1,
    "twoEach": 1,
    "twoSuccessor": 4,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 16,
    "BeginPhi": 0,
    "BranchCount": 13,
    "returnInt": 3,
    "CriticalCount": 2,
    "NumEdges": 20,
    "const32Bit": 31,
    "const64Bit": 3,
    "numConstZeroes": 11,
    "numConstOnes": 15,
    "UncondBranches": 9,
    "binaryConstArg": 3,
    "NumAShrInst": 1,
    "NumAddInst": 1,
    "NumAllocaInst": 10,
    "NumAndInst": 1,
    "BlockMid": 2,
    "BlockLow": 14,
    "NumBitCastInst": 0,
    "NumBrInst": 13,
    "NumCallInst": 13,
    "NumGetElementPtrInst": 3,
    "NumICmpInst": 4,
    "NumLShrInst": 0,
    "NumLoadInst": 19,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 2,
    "NumSExtInst": 0,
    "NumSelectInst": 1,
    "NumShlInst": 0,
    "NumStoreInst": 15,
    "NumSubInst": 0,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 9,
    "TotalBlocks": 16,
    "TotalInsts": 95,
    "TotalMemInst": 60,
    "TotalFuncs": 10,
    "ArgsPhi": 0,
    "testUnary": 40
  },
  "baseline_oz_instcount": 93,
  "knowledge_base_entry": [
    "--mergefunc",
    "--instcombine",
    "--mldst-motion",
    "--instcombine",
    "--aggressive-instcombine",
    "--globaldce",
    "--ipsccp",
    "--newgvn",
    "--early-cse-memssa",
    "--load-store-vectorizer",
    "--mergefunc",
    "--load-store-vectorizer",
    "--sroa",
    "--dce",
    "--licm",
    "--dse",
    "--bdce",
    "--gvn",
    "--mergefunc",
    "--mergefunc"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--aggressive-instcombine",
          "--nary-reassociate",
          "--sink",
          "--slp-vectorizer",
          "--lowerinvoke",
          "--newgvn",
          "--lower-matrix-intrinsics",
          "--indvars",
          "--loop-guard-widening",
          "--instnamer",
          "--lower-constant-intrinsics",
          "--early-cse",
          "--div-rem-pairs",
          "--gvn-hoist",
          "--irce",
          "--scalarizer",
          "--loop-reroll",
          "--called-value-propagation",
          "--globalsplit",
          "--ipsccp"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--aggressive-instcombine",
      "--nary-reassociate",
      "--sink",
      "--slp-vectorizer",
      "--lowerinvoke",
      "--newgvn",
      "--lower-matrix-intrinsics",
      "--indvars",
      "--loop-guard-widening",
      "--instnamer",
      "--lower-constant-intrinsics",
      "--early-cse",
      "--div-rem-pairs",
      "--gvn-hoist",
      "--irce",
      "--scalarizer",
      "--loop-reroll",
      "--called-value-propagation",
      "--globalsplit",
      "--ipsccp"
    ],
    "performance_vs_Oz": "+2.2%"
  }
}
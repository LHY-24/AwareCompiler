{
  "program_id": "poj104-v1_14_47.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 16,
    "onePredOneSuc": 12,
    "onePredTwoSuc": 3,
    "oneSuccessor": 16,
    "twoPred": 7,
    "twoPredOneSuc": 3,
    "twoEach": 4,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 27,
    "BeginPhi": 0,
    "BranchCount": 23,
    "returnInt": 7,
    "CriticalCount": 2,
    "NumEdges": 30,
    "const32Bit": 94,
    "const64Bit": 12,
    "numConstZeroes": 47,
    "numConstOnes": 29,
    "UncondBranches": 16,
    "binaryConstArg": 18,
    "NumAShrInst": 0,
    "NumAddInst": 16,
    "NumAllocaInst": 10,
    "NumAndInst": 0,
    "BlockMid": 6,
    "BlockLow": 21,
    "NumBitCastInst": 12,
    "NumBrInst": 23,
    "NumCallInst": 23,
    "NumGetElementPtrInst": 60,
    "NumICmpInst": 7,
    "NumLShrInst": 0,
    "NumLoadInst": 68,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 4,
    "NumSExtInst": 30,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 24,
    "NumSubInst": 5,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 1,
    "TotalBlocks": 27,
    "TotalInsts": 283,
    "TotalMemInst": 185,
    "TotalFuncs": 14,
    "ArgsPhi": 0,
    "testUnary": 121
  },
  "baseline_oz_instcount": 161,
  "knowledge_base_entry": [
    "--sccp",
    "--instcombine",
    "--gvn",
    "--simplifycfg",
    "--mergefunc",
    "--correlated-propagation",
    "--loop-reroll",
    "--memcpyopt",
    "--lower-constant-intrinsics",
    "--mergefunc",
    "--dse",
    "--simplifycfg",
    "--die",
    "--newgvn",
    "--gvn-hoist",
    "--aggressive-instcombine",
    "--lower-expect",
    "--dce",
    "--early-cse-memssa",
    "--slp-vectorizer",
    "--simplifycfg",
    "--correlated-propagation",
    "--jump-threading",
    "--slsr",
    "--slp-vectorizer",
    "--indvars",
    "--nary-reassociate",
    "--gvn-hoist",
    "--instsimplify",
    "--sccp",
    "--jump-threading",
    "--slsr",
    "--slp-vectorizer",
    "--mem2reg",
    "--dse",
    "--reassociate",
    "--sccp",
    "--early-cse-memssa",
    "--memcpyopt",
    "--gvn",
    "--newgvn",
    "--jump-threading",
    "--slsr",
    "--slp-vectorizer",
    "--indvars",
    "--nary-reassociate",
    "--gvn-hoist",
    "--lower-constant-intrinsics",
    "--globalopt",
    "--loweratomic",
    "--early-cse",
    "--slp-vectorizer",
    "--nary-reassociate",
    "--instsimplify",
    "--gvn",
    "--loop-simplifycfg",
    "--aggressive-instcombine",
    "--loop-simplifycfg",
    "--globalopt",
    "--newgvn",
    "--sroa",
    "--reassociate",
    "--dse",
    "--dse",
    "--nary-reassociate",
    "--correlated-propagation",
    "--mergefunc",
    "--correlated-propagation",
    "--reassociate",
    "--adce",
    "--sroa",
    "--gvn-hoist",
    "--elim-avail-extern",
    "--newgvn",
    "--instsimplify",
    "--slp-vectorizer",
    "--dse",
    "--simplifycfg",
    "--die",
    "--newgvn",
    "--gvn-hoist",
    "--aggressive-instcombine",
    "--lower-expect",
    "--dce",
    "--early-cse-memssa",
    "--slp-vectorizer",
    "--simplifycfg",
    "--correlated-propagation",
    "--jump-threading",
    "--instsimplify",
    "--dse",
    "--reassociate",
    "--sccp",
    "--early-cse-memssa",
    "--memcpyopt",
    "--gvn",
    "--newgvn",
    "--jump-threading",
    "--slsr",
    "--slp-vectorizer",
    "--indvars",
    "--nary-reassociate",
    "--gvn-hoist",
    "--instsimplify",
    "--sccp",
    "--jump-threading",
    "--slsr",
    "--slp-vectorizer",
    "--mem2reg",
    "--dse",
    "--gvn-hoist",
    "--dse",
    "--early-cse",
    "--dce",
    "--slp-vectorizer",
    "--simplifycfg",
    "--instcombine",
    "--early-cse-memssa",
    "--reassociate",
    "--early-cse",
    "--jump-threading",
    "--elim-avail-extern",
    "--bdce",
    "--inline",
    "--ipsccp",
    "--mergefunc",
    "--instcombine",
    "--gvn",
    "--newgvn",
    "--newgvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--sccp",
          "--adce",
          "--instcombine",
          "--pgo-memop-opt",
          "--loop-unroll",
          "--alignment-from-assumptions",
          "--called-value-propagation",
          "--newgvn",
          "--indvars",
          "--lcssa",
          "--inferattrs",
          "--die",
          "--float2int",
          "--mem2reg",
          "--gvn",
          "--loop-idiom",
          "--always-inline",
          "--early-cse-memssa",
          "--guard-widening",
          "--forceattrs"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+40.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--sccp",
      "--adce",
      "--instcombine",
      "--pgo-memop-opt",
      "--loop-unroll",
      "--alignment-from-assumptions",
      "--called-value-propagation",
      "--newgvn",
      "--indvars",
      "--lcssa",
      "--inferattrs",
      "--die",
      "--float2int",
      "--mem2reg",
      "--gvn",
      "--loop-idiom",
      "--always-inline",
      "--early-cse-memssa",
      "--guard-widening",
      "--forceattrs"
    ],
    "performance_vs_Oz": "+40.4%"
  }
}
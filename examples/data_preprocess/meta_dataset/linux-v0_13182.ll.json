{
  "program_id": "linux-v0_13182.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 33,
    "onePredOneSuc": 24,
    "onePredTwoSuc": 8,
    "oneSuccessor": 32,
    "twoPred": 14,
    "twoPredOneSuc": 4,
    "twoEach": 5,
    "twoSuccessor": 16,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 66,
    "BeginPhi": 0,
    "BranchCount": 48,
    "returnInt": 8,
    "CriticalCount": 8,
    "NumEdges": 64,
    "const32Bit": 361,
    "const64Bit": 9,
    "numConstZeroes": 143,
    "numConstOnes": 88,
    "UncondBranches": 32,
    "binaryConstArg": 28,
    "NumAShrInst": 2,
    "NumAddInst": 9,
    "NumAllocaInst": 42,
    "NumAndInst": 7,
    "BlockMid": 6,
    "BlockLow": 60,
    "NumBitCastInst": 4,
    "NumBrInst": 48,
    "NumCallInst": 57,
    "NumGetElementPtrInst": 117,
    "NumICmpInst": 18,
    "NumLShrInst": 0,
    "NumLoadInst": 218,
    "NumMulInst": 6,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 18,
    "NumSExtInst": 6,
    "NumSelectInst": 1,
    "NumShlInst": 1,
    "NumStoreInst": 54,
    "NumSubInst": 0,
    "NumTruncInst": 9,
    "NumXorInst": 6,
    "NumZExtInst": 18,
    "TotalBlocks": 66,
    "TotalInsts": 646,
    "TotalMemInst": 488,
    "TotalFuncs": 28,
    "ArgsPhi": 0,
    "testUnary": 297
  },
  "baseline_oz_instcount": 646,
  "knowledge_base_entry": [
    "--loop-versioning-licm",
    "--gvn",
    "--aggressive-instcombine",
    "--elim-avail-extern",
    "--sroa",
    "--instcombine",
    "--loop-simplifycfg",
    "--reassociate",
    "--jump-threading",
    "--adce",
    "--ipsccp",
    "--elim-avail-extern",
    "--licm",
    "--aggressive-instcombine",
    "--dce",
    "--mem2reg",
    "--die",
    "--early-cse",
    "--lower-expect"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-predication",
          "--ee-instrument",
          "--lower-widenable-condition",
          "--lower-constant-intrinsics",
          "--add-discriminators",
          "--attributor",
          "--nary-reassociate",
          "--loop-data-prefetch",
          "--aggressive-instcombine",
          "--reassociate",
          "--elim-avail-extern",
          "--load-store-vectorizer",
          "--sancov",
          "--partially-inline-libcalls",
          "--globalsplit",
          "--lower-guard-intrinsic",
          "--guard-widening",
          "--simplifycfg",
          "--libcalls-shrinkwrap",
          "--gvn",
          "--strip",
          "--jump-threading",
          "--loop-simplify",
          "--loop-instsimplify",
          "--consthoist"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-predication",
      "--ee-instrument",
      "--lower-widenable-condition",
      "--lower-constant-intrinsics",
      "--add-discriminators",
      "--attributor",
      "--nary-reassociate",
      "--loop-data-prefetch",
      "--aggressive-instcombine",
      "--reassociate",
      "--elim-avail-extern",
      "--load-store-vectorizer",
      "--sancov",
      "--partially-inline-libcalls",
      "--globalsplit",
      "--lower-guard-intrinsic",
      "--guard-widening",
      "--simplifycfg",
      "--libcalls-shrinkwrap",
      "--gvn",
      "--strip",
      "--jump-threading",
      "--loop-simplify",
      "--loop-instsimplify",
      "--consthoist"
    ],
    "performance_vs_Oz": "+0.3%"
  }
}
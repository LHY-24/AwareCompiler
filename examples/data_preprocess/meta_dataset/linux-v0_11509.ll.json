{
  "program_id": "linux-v0_11509.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 3,
    "onePred": 73,
    "onePredOneSuc": 53,
    "onePredTwoSuc": 20,
    "oneSuccessor": 59,
    "twoPred": 19,
    "twoPredOneSuc": 5,
    "twoEach": 10,
    "twoSuccessor": 38,
    "morePreds": 5,
    "BB03Phi": 3,
    "BBHiPhi": 0,
    "BBNoPhi": 118,
    "BeginPhi": 3,
    "BranchCount": 97,
    "returnInt": 28,
    "CriticalCount": 18,
    "NumEdges": 135,
    "const32Bit": 362,
    "const64Bit": 23,
    "numConstZeroes": 167,
    "numConstOnes": 105,
    "UncondBranches": 59,
    "binaryConstArg": 13,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 79,
    "NumAndInst": 6,
    "BlockMid": 14,
    "BlockLow": 107,
    "NumBitCastInst": 18,
    "NumBrInst": 97,
    "NumCallInst": 82,
    "NumGetElementPtrInst": 108,
    "NumICmpInst": 36,
    "NumLShrInst": 0,
    "NumLoadInst": 239,
    "NumMulInst": 0,
    "NumOrInst": 3,
    "NumPHIInst": 3,
    "NumRetInst": 24,
    "NumSExtInst": 5,
    "NumSelectInst": 1,
    "NumShlInst": 0,
    "NumStoreInst": 130,
    "NumSubInst": 0,
    "NumTruncInst": 14,
    "NumXorInst": 6,
    "NumZExtInst": 20,
    "TotalBlocks": 121,
    "TotalInsts": 875,
    "TotalMemInst": 638,
    "TotalFuncs": 59,
    "ArgsPhi": 6,
    "testUnary": 379
  },
  "baseline_oz_instcount": 875,
  "knowledge_base_entry": [
    "--aggressive-instcombine",
    "--early-cse-memssa",
    "--loop-fusion",
    "--gvn-hoist",
    "--newgvn",
    "--bdce",
    "--correlated-propagation",
    "--adce",
    "--lower-constant-intrinsics"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--jump-threading",
          "--globalopt",
          "--elim-avail-extern",
          "--loop-versioning",
          "--correlated-propagation",
          "--sroa",
          "--lower-constant-intrinsics",
          "--loop-guard-widening",
          "--early-cse-memssa",
          "--aggressive-instcombine",
          "--gvn-hoist",
          "--loop-load-elim",
          "--loop-data-prefetch",
          "--argpromotion",
          "--add-discriminators",
          "--simple-loop-unswitch",
          "--lower-expect",
          "--lowerinvoke",
          "--loop-predication",
          "--mergefunc",
          "--inject-tli-mappings",
          "--loop-vectorize",
          "--strip-debug-declare",
          "--separate-const-offset-from-gep",
          "--strip",
          "--inline",
          "--loop-deletion"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--jump-threading",
      "--globalopt",
      "--elim-avail-extern",
      "--loop-versioning",
      "--correlated-propagation",
      "--sroa",
      "--lower-constant-intrinsics",
      "--loop-guard-widening",
      "--early-cse-memssa",
      "--aggressive-instcombine",
      "--gvn-hoist",
      "--loop-load-elim",
      "--loop-data-prefetch",
      "--argpromotion",
      "--add-discriminators",
      "--simple-loop-unswitch",
      "--lower-expect",
      "--lowerinvoke",
      "--loop-predication",
      "--mergefunc",
      "--inject-tli-mappings",
      "--loop-vectorize",
      "--strip-debug-declare",
      "--separate-const-offset-from-gep",
      "--strip",
      "--inline",
      "--loop-deletion"
    ],
    "performance_vs_Oz": "+0.5%"
  }
}
{
  "program_id": "linux-v0_3367.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 64,
    "onePredOneSuc": 51,
    "onePredTwoSuc": 13,
    "oneSuccessor": 63,
    "twoPred": 21,
    "twoPredOneSuc": 10,
    "twoEach": 6,
    "twoSuccessor": 23,
    "morePreds": 1,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 97,
    "BeginPhi": 2,
    "BranchCount": 86,
    "returnInt": 10,
    "CriticalCount": 16,
    "NumEdges": 109,
    "const32Bit": 150,
    "const64Bit": 24,
    "numConstZeroes": 54,
    "numConstOnes": 105,
    "UncondBranches": 63,
    "binaryConstArg": 26,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 68,
    "NumAndInst": 5,
    "BlockMid": 7,
    "BlockLow": 92,
    "NumBitCastInst": 0,
    "NumBrInst": 86,
    "NumCallInst": 34,
    "NumGetElementPtrInst": 27,
    "NumICmpInst": 31,
    "NumLShrInst": 0,
    "NumLoadInst": 128,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 2,
    "NumRetInst": 13,
    "NumSExtInst": 7,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 77,
    "NumSubInst": 0,
    "NumTruncInst": 2,
    "NumXorInst": 20,
    "NumZExtInst": 15,
    "TotalBlocks": 99,
    "TotalInsts": 519,
    "TotalMemInst": 334,
    "TotalFuncs": 21,
    "ArgsPhi": 4,
    "testUnary": 222
  },
  "baseline_oz_instcount": 513,
  "knowledge_base_entry": [
    "--loop-unroll",
    "--newgvn",
    "--die",
    "--ipsccp",
    "--early-cse-memssa",
    "--simplifycfg",
    "--mergefunc",
    "--inline",
    "--slp-vectorizer",
    "--licm",
    "--globalopt",
    "--correlated-propagation"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--rpo-functionattrs",
          "--ipsccp",
          "--elim-avail-extern",
          "--sccp",
          "--mergefunc",
          "--prune-eh",
          "--loop-interchange",
          "--licm",
          "--name-anon-globals",
          "--loop-load-elim",
          "--canonicalize-aliases",
          "--cross-dso-cfi",
          "--consthoist",
          "--instnamer",
          "--indvars",
          "--lower-matrix-intrinsics",
          "--inject-tli-mappings",
          "--sroa",
          "--coro-early",
          "--die",
          "--always-inline",
          "--loop-reroll",
          "--callsite-splitting",
          "--loop-simplify",
          "--aggressive-instcombine",
          "--globalopt",
          "--loop-simplifycfg",
          "--add-discriminators",
          "--pgo-memop-opt",
          "--insert-gcov-profiling"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--rpo-functionattrs",
      "--ipsccp",
      "--elim-avail-extern",
      "--sccp",
      "--mergefunc",
      "--prune-eh",
      "--loop-interchange",
      "--licm",
      "--name-anon-globals",
      "--loop-load-elim",
      "--canonicalize-aliases",
      "--cross-dso-cfi",
      "--consthoist",
      "--instnamer",
      "--indvars",
      "--lower-matrix-intrinsics",
      "--inject-tli-mappings",
      "--sroa",
      "--coro-early",
      "--die",
      "--always-inline",
      "--loop-reroll",
      "--callsite-splitting",
      "--loop-simplify",
      "--aggressive-instcombine",
      "--globalopt",
      "--loop-simplifycfg",
      "--add-discriminators",
      "--pgo-memop-opt",
      "--insert-gcov-profiling"
    ],
    "performance_vs_Oz": "+1.8%"
  }
}
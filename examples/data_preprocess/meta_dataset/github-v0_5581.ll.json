{
  "program_id": "github-v0_5581.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 16,
    "onePredOneSuc": 14,
    "onePredTwoSuc": 1,
    "oneSuccessor": 16,
    "twoPred": 6,
    "twoPredOneSuc": 1,
    "twoEach": 4,
    "twoSuccessor": 6,
    "morePreds": 0,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 23,
    "BeginPhi": 1,
    "BranchCount": 22,
    "returnInt": 0,
    "CriticalCount": 0,
    "NumEdges": 28,
    "const32Bit": 38,
    "const64Bit": 13,
    "numConstZeroes": 14,
    "numConstOnes": 30,
    "UncondBranches": 16,
    "binaryConstArg": 15,
    "NumAShrInst": 0,
    "NumAddInst": 6,
    "NumAllocaInst": 21,
    "NumAndInst": 0,
    "BlockMid": 7,
    "BlockLow": 17,
    "NumBitCastInst": 2,
    "NumBrInst": 22,
    "NumCallInst": 2,
    "NumGetElementPtrInst": 38,
    "NumICmpInst": 6,
    "NumLShrInst": 0,
    "NumLoadInst": 114,
    "NumMulInst": 1,
    "NumOrInst": 0,
    "NumPHIInst": 1,
    "NumRetInst": 2,
    "NumSExtInst": 8,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 35,
    "NumSubInst": 6,
    "NumTruncInst": 1,
    "NumXorInst": 0,
    "NumZExtInst": 21,
    "TotalBlocks": 24,
    "TotalInsts": 308,
    "TotalMemInst": 210,
    "TotalFuncs": 4,
    "ArgsPhi": 2,
    "testUnary": 167
  },
  "baseline_oz_instcount": 308,
  "knowledge_base_entry": [
    "--loop-unswitch",
    "--early-cse",
    "--aggressive-instcombine",
    "--load-store-vectorizer",
    "--licm",
    "--bdce",
    "--gvn",
    "--prune-eh",
    "--early-cse-memssa",
    "--loop-fusion",
    "--loop-reroll",
    "--slp-vectorizer",
    "--instcombine",
    "--early-cse",
    "--early-cse-memssa",
    "--slsr",
    "--indvars",
    "--loop-fusion",
    "--simplifycfg",
    "--slp-vectorizer",
    "--licm",
    "--nary-reassociate"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-data-prefetch",
          "--lowerswitch",
          "--mem2reg",
          "-loop-reduce",
          "--load-store-vectorizer",
          "--aggressive-instcombine",
          "--flattencfg",
          "--loop-fusion",
          "--lower-expect",
          "--name-anon-globals",
          "--add-discriminators",
          "--strip-dead-prototypes",
          "--loop-versioning",
          "--post-inline-ee-instrument",
          "--float2int",
          "--hotcoldsplit",
          "--loweratomic",
          "--loop-deletion",
          "--loop-unroll-and-jam",
          "--forceattrs",
          "--loop-unroll",
          "--irce"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-data-prefetch",
      "--lowerswitch",
      "--mem2reg",
      "-loop-reduce",
      "--load-store-vectorizer",
      "--aggressive-instcombine",
      "--flattencfg",
      "--loop-fusion",
      "--lower-expect",
      "--name-anon-globals",
      "--add-discriminators",
      "--strip-dead-prototypes",
      "--loop-versioning",
      "--post-inline-ee-instrument",
      "--float2int",
      "--hotcoldsplit",
      "--loweratomic",
      "--loop-deletion",
      "--loop-unroll-and-jam",
      "--forceattrs",
      "--loop-unroll",
      "--irce"
    ],
    "performance_vs_Oz": "+0.6%"
  }
}
{
  "program_id": "github-v0_42963.ll",
  "autophase_features": {
    "BBNumArgsHi": 2,
    "BBNumArgsLo": 4,
    "onePred": 8,
    "onePredOneSuc": 7,
    "onePredTwoSuc": 1,
    "oneSuccessor": 7,
    "twoPred": 10,
    "twoPredOneSuc": 0,
    "twoEach": 9,
    "twoSuccessor": 12,
    "morePreds": 1,
    "BB03Phi": 6,
    "BBHiPhi": 0,
    "BBNoPhi": 17,
    "BeginPhi": 6,
    "BranchCount": 19,
    "returnInt": 12,
    "CriticalCount": 16,
    "NumEdges": 31,
    "const32Bit": 62,
    "const64Bit": 16,
    "numConstZeroes": 31,
    "numConstOnes": 31,
    "UncondBranches": 7,
    "binaryConstArg": 34,
    "NumAShrInst": 3,
    "NumAddInst": 31,
    "NumAllocaInst": 0,
    "NumAndInst": 1,
    "BlockMid": 5,
    "BlockLow": 18,
    "NumBitCastInst": 6,
    "NumBrInst": 19,
    "NumCallInst": 34,
    "NumGetElementPtrInst": 19,
    "NumICmpInst": 11,
    "NumLShrInst": 4,
    "NumLoadInst": 23,
    "NumMulInst": 6,
    "NumOrInst": 1,
    "NumPHIInst": 13,
    "NumRetInst": 4,
    "NumSExtInst": 18,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 11,
    "NumSubInst": 3,
    "NumTruncInst": 8,
    "NumXorInst": 0,
    "NumZExtInst": 7,
    "TotalBlocks": 23,
    "TotalInsts": 304,
    "TotalMemInst": 87,
    "TotalFuncs": 14,
    "ArgsPhi": 26,
    "testUnary": 73
  },
  "baseline_oz_instcount": 302,
  "knowledge_base_entry": [
    "--loop-unswitch",
    "--gvn",
    "--nary-reassociate",
    "--loop-reroll",
    "--gvn-hoist",
    "--gvn",
    "--nary-reassociate",
    "--loop-reroll",
    "--gvn-hoist",
    "-loop-reduce",
    "--slp-vectorizer",
    "--instcombine",
    "--mergefunc",
    "--loop-instsimplify",
    "--load-store-vectorizer",
    "--jump-threading",
    "--licm",
    "--lower-constant-intrinsics",
    "--nary-reassociate",
    "--simplifycfg",
    "--instsimplify",
    "--early-cse"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--hotcoldsplit",
          "--ee-instrument",
          "--slp-vectorizer",
          "--instcombine",
          "--ipconstprop",
          "--loop-reroll",
          "--aggressive-instcombine",
          "--loop-simplifycfg",
          "--canonicalize-aliases",
          "--lowerinvoke",
          "--simplifycfg",
          "--lower-expect",
          "--nary-reassociate",
          "--loop-sink",
          "-loop-reduce",
          "--forceattrs",
          "--loweratomic",
          "--constmerge",
          "--jump-threading",
          "--sroa",
          "--newgvn",
          "--instnamer",
          "--loop-unroll-and-jam",
          "--mldst-motion",
          "--post-inline-ee-instrument",
          "--alignment-from-assumptions",
          "--instsimplify",
          "--correlated-propagation"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--hotcoldsplit",
      "--ee-instrument",
      "--slp-vectorizer",
      "--instcombine",
      "--ipconstprop",
      "--loop-reroll",
      "--aggressive-instcombine",
      "--loop-simplifycfg",
      "--canonicalize-aliases",
      "--lowerinvoke",
      "--simplifycfg",
      "--lower-expect",
      "--nary-reassociate",
      "--loop-sink",
      "-loop-reduce",
      "--forceattrs",
      "--loweratomic",
      "--constmerge",
      "--jump-threading",
      "--sroa",
      "--newgvn",
      "--instnamer",
      "--loop-unroll-and-jam",
      "--mldst-motion",
      "--post-inline-ee-instrument",
      "--alignment-from-assumptions",
      "--instsimplify",
      "--correlated-propagation"
    ],
    "performance_vs_Oz": "+3.6%"
  }
}
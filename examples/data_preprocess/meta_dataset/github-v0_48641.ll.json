{
  "program_id": "github-v0_48641.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 17,
    "onePredOneSuc": 10,
    "onePredTwoSuc": 4,
    "oneSuccessor": 15,
    "twoPred": 7,
    "twoPredOneSuc": 4,
    "twoEach": 3,
    "twoSuccessor": 8,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 27,
    "BeginPhi": 0,
    "BranchCount": 23,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 31,
    "const32Bit": 35,
    "const64Bit": 43,
    "numConstZeroes": 46,
    "numConstOnes": 23,
    "UncondBranches": 15,
    "binaryConstArg": 11,
    "NumAShrInst": 1,
    "NumAddInst": 7,
    "NumAllocaInst": 13,
    "NumAndInst": 1,
    "BlockMid": 6,
    "BlockLow": 21,
    "NumBitCastInst": 4,
    "NumBrInst": 23,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 32,
    "NumICmpInst": 8,
    "NumLShrInst": 0,
    "NumLoadInst": 48,
    "NumMulInst": 1,
    "NumOrInst": 2,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 22,
    "NumSubInst": 1,
    "NumTruncInst": 7,
    "NumXorInst": 1,
    "NumZExtInst": 30,
    "TotalBlocks": 27,
    "TotalInsts": 217,
    "TotalMemInst": 122,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 105
  },
  "baseline_oz_instcount": 217,
  "knowledge_base_entry": [
    "--early-cse",
    "--aggressive-instcombine",
    "--lower-constant-intrinsics",
    "--loop-rotate",
    "--lower-constant-intrinsics",
    "--loop-simplifycfg",
    "--lower-expect",
    "--instcombine",
    "--slsr",
    "--nary-reassociate",
    "--inline",
    "--sroa",
    "--dse"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--libcalls-shrinkwrap",
          "--instnamer",
          "--bdce",
          "--globaldce",
          "--partially-inline-libcalls",
          "--loop-simplifycfg",
          "--mem2reg",
          "--strip-nondebug",
          "--loop-predication",
          "--scalarizer",
          "--irce",
          "--lcssa",
          "--add-discriminators",
          "--ee-instrument",
          "--mldst-motion",
          "-loop-reduce",
          "--loop-distribute",
          "--infer-address-spaces",
          "--sroa",
          "--aggressive-instcombine",
          "--simplifycfg",
          "--coro-split",
          "--separate-const-offset-from-gep",
          "--coro-cleanup",
          "--early-cse",
          "--loop-fusion",
          "--lower-widenable-condition"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+5.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--libcalls-shrinkwrap",
      "--instnamer",
      "--bdce",
      "--globaldce",
      "--partially-inline-libcalls",
      "--loop-simplifycfg",
      "--mem2reg",
      "--strip-nondebug",
      "--loop-predication",
      "--scalarizer",
      "--irce",
      "--lcssa",
      "--add-discriminators",
      "--ee-instrument",
      "--mldst-motion",
      "-loop-reduce",
      "--loop-distribute",
      "--infer-address-spaces",
      "--sroa",
      "--aggressive-instcombine",
      "--simplifycfg",
      "--coro-split",
      "--separate-const-offset-from-gep",
      "--coro-cleanup",
      "--early-cse",
      "--loop-fusion",
      "--lower-widenable-condition"
    ],
    "performance_vs_Oz": "+5.1%"
  }
}
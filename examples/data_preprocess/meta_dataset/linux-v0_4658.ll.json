{
  "program_id": "linux-v0_4658.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 76,
    "onePredOneSuc": 58,
    "onePredTwoSuc": 16,
    "oneSuccessor": 68,
    "twoPred": 16,
    "twoPredOneSuc": 6,
    "twoEach": 3,
    "twoSuccessor": 29,
    "morePreds": 7,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 119,
    "BeginPhi": 1,
    "BranchCount": 97,
    "returnInt": 8,
    "CriticalCount": 18,
    "NumEdges": 136,
    "const32Bit": 281,
    "const64Bit": 36,
    "numConstZeroes": 119,
    "numConstOnes": 128,
    "UncondBranches": 68,
    "binaryConstArg": 40,
    "NumAShrInst": 0,
    "NumAddInst": 3,
    "NumAllocaInst": 93,
    "NumAndInst": 12,
    "BlockMid": 18,
    "BlockLow": 102,
    "NumBitCastInst": 34,
    "NumBrInst": 97,
    "NumCallInst": 72,
    "NumGetElementPtrInst": 73,
    "NumICmpInst": 40,
    "NumLShrInst": 1,
    "NumLoadInst": 234,
    "NumMulInst": 0,
    "NumOrInst": 3,
    "NumPHIInst": 1,
    "NumRetInst": 21,
    "NumSExtInst": 11,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 114,
    "NumSubInst": 2,
    "NumTruncInst": 1,
    "NumXorInst": 24,
    "NumZExtInst": 15,
    "TotalBlocks": 120,
    "TotalInsts": 861,
    "TotalMemInst": 586,
    "TotalFuncs": 36,
    "ArgsPhi": 2,
    "testUnary": 394
  },
  "baseline_oz_instcount": 861,
  "knowledge_base_entry": [
    "--strip",
    "--mergefunc",
    "--gvn-hoist",
    "--globalopt",
    "--newgvn",
    "--load-store-vectorizer",
    "--gvn-hoist",
    "--elim-avail-extern",
    "--loop-instsimplify",
    "--die",
    "--dse",
    "--gvn-hoist",
    "--mldst-motion",
    "--instcombine",
    "--licm",
    "--mergefunc",
    "--inline",
    "--mergefunc",
    "--instsimplify"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--float2int",
          "--constprop",
          "--mergefunc",
          "--ipconstprop",
          "--instsimplify",
          "--mem2reg",
          "--lower-matrix-intrinsics",
          "--loop-simplifycfg",
          "--loop-unroll",
          "--simple-loop-unswitch",
          "--coro-cleanup",
          "--globalopt",
          "--callsite-splitting",
          "--loop-simplify",
          "--load-store-vectorizer",
          "--attributor",
          "--inject-tli-mappings",
          "--lowerinvoke",
          "--die",
          "--pgo-memop-opt",
          "--sroa",
          "--add-discriminators",
          "--bdce",
          "--slsr",
          "--dse",
          "--loop-vectorize"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--float2int",
      "--constprop",
      "--mergefunc",
      "--ipconstprop",
      "--instsimplify",
      "--mem2reg",
      "--lower-matrix-intrinsics",
      "--loop-simplifycfg",
      "--loop-unroll",
      "--simple-loop-unswitch",
      "--coro-cleanup",
      "--globalopt",
      "--callsite-splitting",
      "--loop-simplify",
      "--load-store-vectorizer",
      "--attributor",
      "--inject-tli-mappings",
      "--lowerinvoke",
      "--die",
      "--pgo-memop-opt",
      "--sroa",
      "--add-discriminators",
      "--bdce",
      "--slsr",
      "--dse",
      "--loop-vectorize"
    ],
    "performance_vs_Oz": "+0.1%"
  }
}
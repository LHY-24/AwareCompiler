{
  "program_id": "github-v0_45843.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 6,
    "onePred": 57,
    "onePredOneSuc": 37,
    "onePredTwoSuc": 20,
    "oneSuccessor": 53,
    "twoPred": 35,
    "twoPredOneSuc": 13,
    "twoEach": 17,
    "twoSuccessor": 42,
    "morePreds": 3,
    "BB03Phi": 6,
    "BBHiPhi": 0,
    "BBNoPhi": 95,
    "BeginPhi": 6,
    "BranchCount": 95,
    "returnInt": 6,
    "CriticalCount": 30,
    "NumEdges": 137,
    "const32Bit": 182,
    "const64Bit": 2,
    "numConstZeroes": 93,
    "numConstOnes": 54,
    "UncondBranches": 53,
    "binaryConstArg": 22,
    "NumAShrInst": 0,
    "NumAddInst": 25,
    "NumAllocaInst": 28,
    "NumAndInst": 2,
    "BlockMid": 10,
    "BlockLow": 91,
    "NumBitCastInst": 4,
    "NumBrInst": 95,
    "NumCallInst": 10,
    "NumGetElementPtrInst": 92,
    "NumICmpInst": 44,
    "NumLShrInst": 0,
    "NumLoadInst": 256,
    "NumMulInst": 2,
    "NumOrInst": 0,
    "NumPHIInst": 6,
    "NumRetInst": 6,
    "NumSExtInst": 39,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 65,
    "NumSubInst": 4,
    "NumTruncInst": 2,
    "NumXorInst": 4,
    "NumZExtInst": 4,
    "TotalBlocks": 101,
    "TotalInsts": 688,
    "TotalMemInst": 451,
    "TotalFuncs": 11,
    "ArgsPhi": 13,
    "testUnary": 333
  },
  "baseline_oz_instcount": 688,
  "knowledge_base_entry": [
    "--loop-load-elim",
    "--early-cse",
    "--aggressive-instcombine",
    "--sroa",
    "--bdce",
    "--simplifycfg",
    "--dse",
    "--loop-rotate",
    "--elim-avail-extern",
    "--loop-simplifycfg",
    "--mem2reg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-sink",
          "--globaldce",
          "--rewrite-statepoints-for-gc",
          "--always-inline",
          "--lower-guard-intrinsic",
          "--nary-reassociate",
          "--cross-dso-cfi",
          "--ipconstprop",
          "--partially-inline-libcalls",
          "--rpo-functionattrs",
          "--simplifycfg",
          "--sroa",
          "--reassociate",
          "--aggressive-instcombine",
          "--loop-interchange",
          "--speculative-execution",
          "--early-cse",
          "--infer-address-spaces",
          "--loop-unroll-and-jam",
          "--mem2reg",
          "--callsite-splitting",
          "--inject-tli-mappings",
          "--coro-split",
          "--post-inline-ee-instrument",
          "--redundant-dbg-inst-elim",
          "--inline"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-sink",
      "--globaldce",
      "--rewrite-statepoints-for-gc",
      "--always-inline",
      "--lower-guard-intrinsic",
      "--nary-reassociate",
      "--cross-dso-cfi",
      "--ipconstprop",
      "--partially-inline-libcalls",
      "--rpo-functionattrs",
      "--simplifycfg",
      "--sroa",
      "--reassociate",
      "--aggressive-instcombine",
      "--loop-interchange",
      "--speculative-execution",
      "--early-cse",
      "--infer-address-spaces",
      "--loop-unroll-and-jam",
      "--mem2reg",
      "--callsite-splitting",
      "--inject-tli-mappings",
      "--coro-split",
      "--post-inline-ee-instrument",
      "--redundant-dbg-inst-elim",
      "--inline"
    ],
    "performance_vs_Oz": "+0.3%"
  }
}
{
  "program_id": "github-v0_39808.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 2,
    "onePredOneSuc": 2,
    "onePredTwoSuc": 0,
    "oneSuccessor": 2,
    "twoPred": 2,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 2,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 7,
    "BeginPhi": 0,
    "BranchCount": 4,
    "returnInt": 8,
    "CriticalCount": 2,
    "NumEdges": 6,
    "const32Bit": 38,
    "const64Bit": 0,
    "numConstZeroes": 1,
    "numConstOnes": 12,
    "UncondBranches": 2,
    "binaryConstArg": 3,
    "NumAShrInst": 1,
    "NumAddInst": 0,
    "NumAllocaInst": 9,
    "NumAndInst": 1,
    "BlockMid": 2,
    "BlockLow": 5,
    "NumBitCastInst": 0,
    "NumBrInst": 4,
    "NumCallInst": 24,
    "NumGetElementPtrInst": 0,
    "NumICmpInst": 3,
    "NumLShrInst": 0,
    "NumLoadInst": 11,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 11,
    "NumSubInst": 0,
    "NumTruncInst": 4,
    "NumXorInst": 0,
    "NumZExtInst": 7,
    "TotalBlocks": 7,
    "TotalInsts": 80,
    "TotalMemInst": 55,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 31
  },
  "baseline_oz_instcount": 80,
  "knowledge_base_entry": [
    "--aggressive-instcombine",
    "--dse",
    "--aggressive-instcombine",
    "--mergefunc",
    "--dse",
    "--jump-threading",
    "--sccp",
    "--instsimplify",
    "--loop-instsimplify",
    "--early-cse-memssa",
    "--loop-simplifycfg",
    "--mldst-motion",
    "--load-store-vectorizer",
    "--gvn",
    "--dce",
    "--mem2reg",
    "--ipsccp",
    "--lower-expect",
    "--slp-vectorizer"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--globalopt",
          "--canonicalize-aliases",
          "--flattencfg",
          "--indvars",
          "--nary-reassociate",
          "--mergereturn",
          "--loop-sink",
          "--loop-simplify",
          "--pgo-memop-opt",
          "--constmerge",
          "--adce",
          "--globaldce",
          "--slp-vectorizer",
          "--aggressive-instcombine",
          "--slsr",
          "--separate-const-offset-from-gep",
          "--rpo-functionattrs",
          "--loop-instsimplify",
          "--load-store-vectorizer",
          "--bdce",
          "--loop-deletion"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--globalopt",
      "--canonicalize-aliases",
      "--flattencfg",
      "--indvars",
      "--nary-reassociate",
      "--mergereturn",
      "--loop-sink",
      "--loop-simplify",
      "--pgo-memop-opt",
      "--constmerge",
      "--adce",
      "--globaldce",
      "--slp-vectorizer",
      "--aggressive-instcombine",
      "--slsr",
      "--separate-const-offset-from-gep",
      "--rpo-functionattrs",
      "--loop-instsimplify",
      "--load-store-vectorizer",
      "--bdce",
      "--loop-deletion"
    ],
    "performance_vs_Oz": "+2.5%"
  }
}
{
  "program_id": "github-v0_40737.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 17,
    "onePredOneSuc": 10,
    "onePredTwoSuc": 4,
    "oneSuccessor": 15,
    "twoPred": 7,
    "twoPredOneSuc": 4,
    "twoEach": 3,
    "twoSuccessor": 8,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 27,
    "BeginPhi": 0,
    "BranchCount": 23,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 31,
    "const32Bit": 42,
    "const64Bit": 35,
    "numConstZeroes": 41,
    "numConstOnes": 21,
    "UncondBranches": 15,
    "binaryConstArg": 19,
    "NumAShrInst": 2,
    "NumAddInst": 4,
    "NumAllocaInst": 12,
    "NumAndInst": 5,
    "BlockMid": 5,
    "BlockLow": 22,
    "NumBitCastInst": 0,
    "NumBrInst": 23,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 23,
    "NumICmpInst": 8,
    "NumLShrInst": 0,
    "NumLoadInst": 40,
    "NumMulInst": 0,
    "NumOrInst": 6,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 4,
    "NumSelectInst": 0,
    "NumShlInst": 6,
    "NumStoreInst": 19,
    "NumSubInst": 2,
    "NumTruncInst": 8,
    "NumXorInst": 0,
    "NumZExtInst": 25,
    "TotalBlocks": 27,
    "TotalInsts": 198,
    "TotalMemInst": 101,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 89
  },
  "baseline_oz_instcount": 198,
  "knowledge_base_entry": [
    "--early-cse",
    "--lower-expect",
    "--globalopt",
    "--aggressive-instcombine",
    "--reassociate",
    "--loop-instsimplify",
    "--jump-threading",
    "--die",
    "--mem2reg",
    "--loop-rotate",
    "--lower-constant-intrinsics",
    "--bdce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--always-inline",
          "--loop-interchange",
          "--loop-unswitch",
          "--strip-debug-declare",
          "--libcalls-shrinkwrap",
          "--aggressive-instcombine",
          "--functionattrs",
          "--float2int",
          "--speculative-execution",
          "--sccp",
          "--prune-eh",
          "--loop-versioning",
          "--indvars",
          "--loop-sink",
          "--loop-guard-widening",
          "--simple-loop-unswitch",
          "--globalsplit",
          "--consthoist",
          "--barrier",
          "--attributor",
          "--cross-dso-cfi",
          "--ipsccp",
          "--strip-dead-prototypes",
          "--loop-deletion",
          "--instnamer",
          "--globaldce",
          "--add-discriminators",
          "--instcombine"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.0%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--always-inline",
      "--loop-interchange",
      "--loop-unswitch",
      "--strip-debug-declare",
      "--libcalls-shrinkwrap",
      "--aggressive-instcombine",
      "--functionattrs",
      "--float2int",
      "--speculative-execution",
      "--sccp",
      "--prune-eh",
      "--loop-versioning",
      "--indvars",
      "--loop-sink",
      "--loop-guard-widening",
      "--simple-loop-unswitch",
      "--globalsplit",
      "--consthoist",
      "--barrier",
      "--attributor",
      "--cross-dso-cfi",
      "--ipsccp",
      "--strip-dead-prototypes",
      "--loop-deletion",
      "--instnamer",
      "--globaldce",
      "--add-discriminators",
      "--instcombine"
    ],
    "performance_vs_Oz": "+2.0%"
  }
}
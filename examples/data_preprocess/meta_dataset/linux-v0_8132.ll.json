{
  "program_id": "linux-v0_8132.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 18,
    "onePredOneSuc": 14,
    "onePredTwoSuc": 3,
    "oneSuccessor": 15,
    "twoPred": 6,
    "twoPredOneSuc": 0,
    "twoEach": 4,
    "twoSuccessor": 10,
    "morePreds": 1,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 41,
    "BeginPhi": 1,
    "BranchCount": 25,
    "returnInt": 16,
    "CriticalCount": 2,
    "NumEdges": 35,
    "const32Bit": 123,
    "const64Bit": 13,
    "numConstZeroes": 57,
    "numConstOnes": 40,
    "UncondBranches": 15,
    "binaryConstArg": 1,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 36,
    "NumAndInst": 1,
    "BlockMid": 6,
    "BlockLow": 36,
    "NumBitCastInst": 5,
    "NumBrInst": 25,
    "NumCallInst": 37,
    "NumGetElementPtrInst": 37,
    "NumICmpInst": 9,
    "NumLShrInst": 0,
    "NumLoadInst": 109,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 1,
    "NumRetInst": 17,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 47,
    "NumSubInst": 0,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 4,
    "TotalBlocks": 42,
    "TotalInsts": 330,
    "TotalMemInst": 266,
    "TotalFuncs": 35,
    "ArgsPhi": 2,
    "testUnary": 156
  },
  "baseline_oz_instcount": 329,
  "knowledge_base_entry": [
    "--globalopt",
    "--ipsccp",
    "--early-cse-memssa",
    "--mem2reg",
    "--lower-expect",
    "--simplifycfg",
    "--mergefunc",
    "--adce",
    "--loop-instsimplify"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-load-elim",
          "--flattencfg",
          "-loop-reduce",
          "--coro-early",
          "--name-anon-globals",
          "--forceattrs",
          "--canonicalize-aliases",
          "--argpromotion",
          "--mergefunc",
          "--ipsccp",
          "--strip",
          "--loop-distribute",
          "--load-store-vectorizer",
          "--mergeicmps",
          "--instnamer",
          "--ipconstprop",
          "--sink",
          "--loop-rotate",
          "--loop-unroll-and-jam",
          "--hotcoldsplit",
          "--early-cse",
          "--correlated-propagation",
          "--loop-idiom",
          "--simplifycfg",
          "--inline",
          "--functionattrs",
          "--insert-gcov-profiling",
          "--prune-eh",
          "--globalopt"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-load-elim",
      "--flattencfg",
      "-loop-reduce",
      "--coro-early",
      "--name-anon-globals",
      "--forceattrs",
      "--canonicalize-aliases",
      "--argpromotion",
      "--mergefunc",
      "--ipsccp",
      "--strip",
      "--loop-distribute",
      "--load-store-vectorizer",
      "--mergeicmps",
      "--instnamer",
      "--ipconstprop",
      "--sink",
      "--loop-rotate",
      "--loop-unroll-and-jam",
      "--hotcoldsplit",
      "--early-cse",
      "--correlated-propagation",
      "--loop-idiom",
      "--simplifycfg",
      "--inline",
      "--functionattrs",
      "--insert-gcov-profiling",
      "--prune-eh",
      "--globalopt"
    ],
    "performance_vs_Oz": "+0.3%"
  }
}
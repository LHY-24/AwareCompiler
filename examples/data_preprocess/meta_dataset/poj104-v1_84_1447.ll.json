{
  "program_id": "poj104-v1_84_1447.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 6,
    "onePredOneSuc": 3,
    "onePredTwoSuc": 2,
    "oneSuccessor": 5,
    "twoPred": 3,
    "twoPredOneSuc": 1,
    "twoEach": 2,
    "twoSuccessor": 5,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 13,
    "BeginPhi": 0,
    "BranchCount": 10,
    "returnInt": 4,
    "CriticalCount": 4,
    "NumEdges": 15,
    "const32Bit": 13,
    "const64Bit": 14,
    "numConstZeroes": 2,
    "numConstOnes": 10,
    "UncondBranches": 5,
    "binaryConstArg": 2,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 8,
    "NumAndInst": 0,
    "BlockMid": 2,
    "BlockLow": 11,
    "NumBitCastInst": 14,
    "NumBrInst": 10,
    "NumCallInst": 20,
    "NumGetElementPtrInst": 0,
    "NumICmpInst": 5,
    "NumLShrInst": 0,
    "NumLoadInst": 20,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 10,
    "NumSubInst": 1,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 13,
    "TotalInsts": 92,
    "TotalMemInst": 58,
    "TotalFuncs": 10,
    "ArgsPhi": 0,
    "testUnary": 42
  },
  "baseline_oz_instcount": 58,
  "knowledge_base_entry": [
    "--early-cse-memssa",
    "--loop-instsimplify",
    "--inline",
    "--mem2reg",
    "--dse",
    "--sccp",
    "--early-cse",
    "--jump-threading",
    "--inline",
    "--licm",
    "--die",
    "--elim-avail-extern"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--always-inline",
          "--gvn",
          "--canonicalize-aliases",
          "--called-value-propagation",
          "--loop-fusion",
          "--consthoist",
          "--separate-const-offset-from-gep",
          "--instcombine",
          "--licm",
          "--lowerinvoke",
          "--div-rem-pairs",
          "--loop-vectorize",
          "--loop-versioning-licm",
          "--aggressive-instcombine",
          "--load-store-vectorizer",
          "--coro-cleanup",
          "--early-cse",
          "--loop-predication",
          "--coro-split",
          "--loop-versioning",
          "--partially-inline-libcalls",
          "--deadargelim",
          "--correlated-propagation",
          "--alignment-from-assumptions",
          "--inline",
          "--speculative-execution",
          "--slp-vectorizer",
          "--float2int"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--always-inline",
      "--gvn",
      "--canonicalize-aliases",
      "--called-value-propagation",
      "--loop-fusion",
      "--consthoist",
      "--separate-const-offset-from-gep",
      "--instcombine",
      "--licm",
      "--lowerinvoke",
      "--div-rem-pairs",
      "--loop-vectorize",
      "--loop-versioning-licm",
      "--aggressive-instcombine",
      "--load-store-vectorizer",
      "--coro-cleanup",
      "--early-cse",
      "--loop-predication",
      "--coro-split",
      "--loop-versioning",
      "--partially-inline-libcalls",
      "--deadargelim",
      "--correlated-propagation",
      "--alignment-from-assumptions",
      "--inline",
      "--speculative-execution",
      "--slp-vectorizer",
      "--float2int"
    ],
    "performance_vs_Oz": "+3.4%"
  }
}
{
  "program_id": "linux-v0_949.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 6,
    "onePredOneSuc": 6,
    "onePredTwoSuc": 0,
    "oneSuccessor": 6,
    "twoPred": 3,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 3,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 13,
    "BeginPhi": 0,
    "BranchCount": 9,
    "returnInt": 3,
    "CriticalCount": 0,
    "NumEdges": 12,
    "const32Bit": 54,
    "const64Bit": 7,
    "numConstZeroes": 37,
    "numConstOnes": 21,
    "UncondBranches": 6,
    "binaryConstArg": 1,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 18,
    "NumAndInst": 0,
    "BlockMid": 2,
    "BlockLow": 11,
    "NumBitCastInst": 1,
    "NumBrInst": 9,
    "NumCallInst": 9,
    "NumGetElementPtrInst": 15,
    "NumICmpInst": 4,
    "NumLShrInst": 0,
    "NumLoadInst": 31,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 4,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 23,
    "NumSubInst": 0,
    "NumTruncInst": 1,
    "NumXorInst": 1,
    "NumZExtInst": 1,
    "TotalBlocks": 13,
    "TotalInsts": 117,
    "TotalMemInst": 96,
    "TotalFuncs": 12,
    "ArgsPhi": 0,
    "testUnary": 52
  },
  "baseline_oz_instcount": 117,
  "knowledge_base_entry": [
    "--aggressive-instcombine",
    "--die",
    "--load-store-vectorizer",
    "--gvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--lcssa",
          "--loop-simplify",
          "--loweratomic",
          "--aggressive-instcombine",
          "--partial-inliner",
          "--ee-instrument",
          "--die",
          "--float2int",
          "--mldst-motion",
          "--loop-instsimplify",
          "--ipsccp",
          "--coro-elide",
          "--lower-guard-intrinsic"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--lcssa",
      "--loop-simplify",
      "--loweratomic",
      "--aggressive-instcombine",
      "--partial-inliner",
      "--ee-instrument",
      "--die",
      "--float2int",
      "--mldst-motion",
      "--loop-instsimplify",
      "--ipsccp",
      "--coro-elide",
      "--lower-guard-intrinsic"
    ],
    "performance_vs_Oz": "+0.9%"
  }
}
{
  "program_id": "github-v0_2340.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 18,
    "onePredOneSuc": 18,
    "onePredTwoSuc": 0,
    "oneSuccessor": 18,
    "twoPred": 1,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 1,
    "morePreds": 1,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 21,
    "BeginPhi": 1,
    "BranchCount": 19,
    "returnInt": 0,
    "CriticalCount": 1,
    "NumEdges": 37,
    "const32Bit": 21,
    "const64Bit": 0,
    "numConstZeroes": 3,
    "numConstOnes": 4,
    "UncondBranches": 18,
    "binaryConstArg": 0,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 3,
    "NumAndInst": 0,
    "BlockMid": 0,
    "BlockLow": 22,
    "NumBitCastInst": 0,
    "NumBrInst": 19,
    "NumCallInst": 0,
    "NumGetElementPtrInst": 0,
    "NumICmpInst": 2,
    "NumLShrInst": 0,
    "NumLoadInst": 4,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 1,
    "NumRetInst": 2,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 20,
    "NumSubInst": 0,
    "NumTruncInst": 1,
    "NumXorInst": 0,
    "NumZExtInst": 4,
    "TotalBlocks": 22,
    "TotalInsts": 57,
    "TotalMemInst": 27,
    "TotalFuncs": 2,
    "ArgsPhi": 2,
    "testUnary": 12
  },
  "baseline_oz_instcount": 57,
  "knowledge_base_entry": [
    "--prune-eh",
    "--instsimplify",
    "--ipsccp",
    "--instcombine",
    "--aggressive-instcombine",
    "--globaldce",
    "--mergefunc",
    "--correlated-propagation",
    "--lower-constant-intrinsics",
    "--gvn-hoist"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--sccp",
          "--early-cse-memssa",
          "--aggressive-instcombine",
          "--loop-reroll",
          "--rpo-functionattrs",
          "--nary-reassociate",
          "--load-store-vectorizer",
          "--insert-gcov-profiling",
          "--mem2reg",
          "--sink"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--sccp",
      "--early-cse-memssa",
      "--aggressive-instcombine",
      "--loop-reroll",
      "--rpo-functionattrs",
      "--nary-reassociate",
      "--load-store-vectorizer",
      "--insert-gcov-profiling",
      "--mem2reg",
      "--sink"
    ],
    "performance_vs_Oz": "+1.8%"
  }
}
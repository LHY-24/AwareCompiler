{
  "program_id": "github-v0_19628.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 27,
    "onePredOneSuc": 20,
    "onePredTwoSuc": 5,
    "oneSuccessor": 25,
    "twoPred": 16,
    "twoPredOneSuc": 5,
    "twoEach": 9,
    "twoSuccessor": 17,
    "morePreds": 0,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 46,
    "BeginPhi": 1,
    "BranchCount": 41,
    "returnInt": 24,
    "CriticalCount": 9,
    "NumEdges": 59,
    "const32Bit": 114,
    "const64Bit": 6,
    "numConstZeroes": 66,
    "numConstOnes": 28,
    "UncondBranches": 25,
    "binaryConstArg": 5,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 16,
    "NumAndInst": 3,
    "BlockMid": 3,
    "BlockLow": 44,
    "NumBitCastInst": 5,
    "NumBrInst": 41,
    "NumCallInst": 33,
    "NumGetElementPtrInst": 44,
    "NumICmpInst": 16,
    "NumLShrInst": 0,
    "NumLoadInst": 76,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 1,
    "NumRetInst": 3,
    "NumSExtInst": 4,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 22,
    "NumSubInst": 0,
    "NumTruncInst": 1,
    "NumXorInst": 0,
    "NumZExtInst": 6,
    "TotalBlocks": 47,
    "TotalInsts": 276,
    "TotalMemInst": 191,
    "TotalFuncs": 11,
    "ArgsPhi": 2,
    "testUnary": 108
  },
  "baseline_oz_instcount": 275,
  "knowledge_base_entry": [
    "--strip-nondebug",
    "--mergefunc",
    "--bdce",
    "--mem2reg",
    "--ipsccp",
    "--dce",
    "--reassociate",
    "--reassociate",
    "--elim-avail-extern",
    "--lower-expect",
    "--die",
    "--jump-threading",
    "-loop-reduce",
    "--simplifycfg",
    "--early-cse-memssa",
    "--simplifycfg",
    "--nary-reassociate",
    "--early-cse-memssa",
    "--dse",
    "--lower-expect",
    "--prune-eh",
    "--sroa",
    "--instsimplify",
    "--prune-eh",
    "--reassociate",
    "--lower-expect",
    "--ipsccp",
    "--licm",
    "--load-store-vectorizer",
    "--early-cse-memssa"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loweratomic",
          "--sink",
          "--dce",
          "--loop-unroll-and-jam",
          "--tailcallelim",
          "--ipsccp",
          "--sroa",
          "--canonicalize-aliases",
          "-loop-reduce",
          "--lower-guard-intrinsic",
          "--callsite-splitting",
          "--constprop",
          "--nary-reassociate",
          "--div-rem-pairs",
          "--loop-deletion",
          "--deadargelim"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loweratomic",
      "--sink",
      "--dce",
      "--loop-unroll-and-jam",
      "--tailcallelim",
      "--ipsccp",
      "--sroa",
      "--canonicalize-aliases",
      "-loop-reduce",
      "--lower-guard-intrinsic",
      "--callsite-splitting",
      "--constprop",
      "--nary-reassociate",
      "--div-rem-pairs",
      "--loop-deletion",
      "--deadargelim"
    ],
    "performance_vs_Oz": "+0.4%"
  }
}
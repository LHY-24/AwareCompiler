{
  "program_id": "linux-v0_12753.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 46,
    "onePredOneSuc": 31,
    "onePredTwoSuc": 15,
    "oneSuccessor": 38,
    "twoPred": 11,
    "twoPredOneSuc": 4,
    "twoEach": 3,
    "twoSuccessor": 23,
    "morePreds": 4,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 78,
    "BeginPhi": 1,
    "BranchCount": 61,
    "returnInt": 19,
    "CriticalCount": 6,
    "NumEdges": 84,
    "const32Bit": 279,
    "const64Bit": 18,
    "numConstZeroes": 148,
    "numConstOnes": 88,
    "UncondBranches": 38,
    "binaryConstArg": 39,
    "NumAShrInst": 0,
    "NumAddInst": 5,
    "NumAllocaInst": 61,
    "NumAndInst": 14,
    "BlockMid": 11,
    "BlockLow": 68,
    "NumBitCastInst": 20,
    "NumBrInst": 61,
    "NumCallInst": 44,
    "NumGetElementPtrInst": 91,
    "NumICmpInst": 24,
    "NumLShrInst": 2,
    "NumLoadInst": 192,
    "NumMulInst": 4,
    "NumOrInst": 6,
    "NumPHIInst": 1,
    "NumRetInst": 18,
    "NumSExtInst": 14,
    "NumSelectInst": 0,
    "NumShlInst": 7,
    "NumStoreInst": 97,
    "NumSubInst": 1,
    "NumTruncInst": 8,
    "NumXorInst": 6,
    "NumZExtInst": 15,
    "TotalBlocks": 79,
    "TotalInsts": 695,
    "TotalMemInst": 485,
    "TotalFuncs": 31,
    "ArgsPhi": 2,
    "testUnary": 314
  },
  "baseline_oz_instcount": 696,
  "knowledge_base_entry": [
    "--hotcoldsplit",
    "--mergefunc",
    "--dce",
    "--mem2reg",
    "--ipsccp",
    "--dse",
    "--elim-avail-extern",
    "--aggressive-instcombine",
    "--dse",
    "--early-cse",
    "--adce",
    "--reassociate"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--simple-loop-unswitch",
          "--inline",
          "--loop-unroll-and-jam",
          "--lowerinvoke",
          "--guard-widening",
          "--coro-elide",
          "--aggressive-instcombine",
          "--loop-unroll",
          "--rewrite-statepoints-for-gc",
          "--scalarizer",
          "--nary-reassociate",
          "--globalsplit",
          "--canonicalize-aliases",
          "--strip-debug-declare",
          "--inject-tli-mappings",
          "--loop-rotate",
          "--consthoist",
          "--insert-gcov-profiling",
          "--coro-early",
          "--slsr",
          "--loop-guard-widening",
          "--separate-const-offset-from-gep",
          "--correlated-propagation",
          "--lower-guard-intrinsic",
          "--instsimplify",
          "--loop-fusion",
          "--globaldce"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--simple-loop-unswitch",
      "--inline",
      "--loop-unroll-and-jam",
      "--lowerinvoke",
      "--guard-widening",
      "--coro-elide",
      "--aggressive-instcombine",
      "--loop-unroll",
      "--rewrite-statepoints-for-gc",
      "--scalarizer",
      "--nary-reassociate",
      "--globalsplit",
      "--canonicalize-aliases",
      "--strip-debug-declare",
      "--inject-tli-mappings",
      "--loop-rotate",
      "--consthoist",
      "--insert-gcov-profiling",
      "--coro-early",
      "--slsr",
      "--loop-guard-widening",
      "--separate-const-offset-from-gep",
      "--correlated-propagation",
      "--lower-guard-intrinsic",
      "--instsimplify",
      "--loop-fusion",
      "--globaldce"
    ],
    "performance_vs_Oz": "+0.6%"
  }
}
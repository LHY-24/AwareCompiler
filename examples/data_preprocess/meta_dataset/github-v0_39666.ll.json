{
  "program_id": "github-v0_39666.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 36,
    "onePredOneSuc": 28,
    "onePredTwoSuc": 5,
    "oneSuccessor": 39,
    "twoPred": 13,
    "twoPredOneSuc": 5,
    "twoEach": 2,
    "twoSuccessor": 11,
    "morePreds": 4,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 70,
    "BeginPhi": 0,
    "BranchCount": 50,
    "returnInt": 0,
    "CriticalCount": 15,
    "NumEdges": 90,
    "const32Bit": 205,
    "const64Bit": 3,
    "numConstZeroes": 61,
    "numConstOnes": 88,
    "UncondBranches": 39,
    "binaryConstArg": 26,
    "NumAShrInst": 6,
    "NumAddInst": 8,
    "NumAllocaInst": 53,
    "NumAndInst": 19,
    "BlockMid": 14,
    "BlockLow": 56,
    "NumBitCastInst": 1,
    "NumBrInst": 50,
    "NumCallInst": 34,
    "NumGetElementPtrInst": 59,
    "NumICmpInst": 11,
    "NumLShrInst": 0,
    "NumLoadInst": 202,
    "NumMulInst": 0,
    "NumOrInst": 6,
    "NumPHIInst": 0,
    "NumRetInst": 17,
    "NumSExtInst": 8,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 87,
    "NumSubInst": 0,
    "NumTruncInst": 24,
    "NumXorInst": 2,
    "NumZExtInst": 68,
    "TotalBlocks": 70,
    "TotalInsts": 660,
    "TotalMemInst": 435,
    "TotalFuncs": 17,
    "ArgsPhi": 0,
    "testUnary": 356
  },
  "baseline_oz_instcount": 660,
  "knowledge_base_entry": [
    "--hotcoldsplit",
    "--mergefunc",
    "--mem2reg",
    "--dce",
    "--mem2reg",
    "--sccp",
    "--dse",
    "--bdce",
    "--aggressive-instcombine",
    "--inline",
    "--elim-avail-extern",
    "--loop-instsimplify",
    "--early-cse",
    "--loop-simplifycfg",
    "--loop-rotate",
    "--aggressive-instcombine",
    "--inline",
    "--prune-eh"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-deletion",
          "--called-value-propagation",
          "--cross-dso-cfi",
          "--mergereturn",
          "--loop-reroll",
          "--inferattrs",
          "--gvn-hoist",
          "--functionattrs",
          "--dse",
          "--float2int",
          "--loop-versioning-licm",
          "--flattencfg",
          "--sroa",
          "--aggressive-instcombine",
          "--reassociate",
          "--loop-data-prefetch",
          "--strip",
          "-loop-reduce",
          "--globaldce",
          "--irce",
          "--adce",
          "--tailcallelim",
          "--loop-predication"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+6.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-deletion",
      "--called-value-propagation",
      "--cross-dso-cfi",
      "--mergereturn",
      "--loop-reroll",
      "--inferattrs",
      "--gvn-hoist",
      "--functionattrs",
      "--dse",
      "--float2int",
      "--loop-versioning-licm",
      "--flattencfg",
      "--sroa",
      "--aggressive-instcombine",
      "--reassociate",
      "--loop-data-prefetch",
      "--strip",
      "-loop-reduce",
      "--globaldce",
      "--irce",
      "--adce",
      "--tailcallelim",
      "--loop-predication"
    ],
    "performance_vs_Oz": "+6.1%"
  }
}
{
  "program_id": "linux-v0_3804.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 46,
    "onePredOneSuc": 28,
    "onePredTwoSuc": 18,
    "oneSuccessor": 32,
    "twoPred": 9,
    "twoPredOneSuc": 4,
    "twoEach": 4,
    "twoSuccessor": 26,
    "morePreds": 3,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 64,
    "BeginPhi": 0,
    "BranchCount": 58,
    "returnInt": 4,
    "CriticalCount": 7,
    "NumEdges": 84,
    "const32Bit": 132,
    "const64Bit": 0,
    "numConstZeroes": 40,
    "numConstOnes": 51,
    "UncondBranches": 32,
    "binaryConstArg": 21,
    "NumAShrInst": 3,
    "NumAddInst": 11,
    "NumAllocaInst": 26,
    "NumAndInst": 5,
    "BlockMid": 6,
    "BlockLow": 58,
    "NumBitCastInst": 0,
    "NumBrInst": 58,
    "NumCallInst": 6,
    "NumGetElementPtrInst": 31,
    "NumICmpInst": 26,
    "NumLShrInst": 0,
    "NumLoadInst": 115,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 6,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 84,
    "NumSubInst": 6,
    "NumTruncInst": 8,
    "NumXorInst": 0,
    "NumZExtInst": 10,
    "TotalBlocks": 64,
    "TotalInsts": 399,
    "TotalMemInst": 262,
    "TotalFuncs": 8,
    "ArgsPhi": 0,
    "testUnary": 162
  },
  "baseline_oz_instcount": 399,
  "knowledge_base_entry": [
    "--mem2reg",
    "--memcpyopt",
    "--elim-avail-extern",
    "--loop-deletion",
    "--jump-threading",
    "--dce",
    "--aggressive-instcombine",
    "--globaldce",
    "--mergefunc",
    "--licm",
    "--early-cse",
    "--gvn",
    "--nary-reassociate",
    "--load-store-vectorizer",
    "--mldst-motion",
    "--instcombine",
    "--lower-constant-intrinsics"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--coro-elide",
          "--inferattrs",
          "--aggressive-instcombine",
          "--alignment-from-assumptions",
          "--jump-threading",
          "--redundant-dbg-inst-elim",
          "--loop-idiom",
          "--gvn",
          "--indvars",
          "--loop-reroll",
          "--elim-avail-extern",
          "--adce",
          "--mergefunc",
          "--called-value-propagation"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--coro-elide",
      "--inferattrs",
      "--aggressive-instcombine",
      "--alignment-from-assumptions",
      "--jump-threading",
      "--redundant-dbg-inst-elim",
      "--loop-idiom",
      "--gvn",
      "--indvars",
      "--loop-reroll",
      "--elim-avail-extern",
      "--adce",
      "--mergefunc",
      "--called-value-propagation"
    ],
    "performance_vs_Oz": "+0.5%"
  }
}
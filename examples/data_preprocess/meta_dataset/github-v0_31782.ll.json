{
  "program_id": "github-v0_31782.ll",
  "autophase_features": {
    "BBNumArgsHi": 1,
    "BBNumArgsLo": 3,
    "onePred": 4,
    "onePredOneSuc": 3,
    "onePredTwoSuc": 1,
    "oneSuccessor": 4,
    "twoPred": 6,
    "twoPredOneSuc": 1,
    "twoEach": 4,
    "twoSuccessor": 6,
    "morePreds": 0,
    "BB03Phi": 4,
    "BBHiPhi": 0,
    "BBNoPhi": 7,
    "BeginPhi": 4,
    "BranchCount": 10,
    "returnInt": 0,
    "CriticalCount": 8,
    "NumEdges": 16,
    "const32Bit": 17,
    "const64Bit": 0,
    "numConstZeroes": 10,
    "numConstOnes": 5,
    "UncondBranches": 4,
    "binaryConstArg": 6,
    "NumAShrInst": 0,
    "NumAddInst": 14,
    "NumAllocaInst": 0,
    "NumAndInst": 1,
    "BlockMid": 1,
    "BlockLow": 10,
    "NumBitCastInst": 0,
    "NumBrInst": 10,
    "NumCallInst": 0,
    "NumGetElementPtrInst": 7,
    "NumICmpInst": 6,
    "NumLShrInst": 0,
    "NumLoadInst": 6,
    "NumMulInst": 7,
    "NumOrInst": 1,
    "NumPHIInst": 7,
    "NumRetInst": 1,
    "NumSExtInst": 7,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 4,
    "NumSubInst": 1,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 11,
    "TotalInsts": 72,
    "TotalMemInst": 17,
    "TotalFuncs": 1,
    "ArgsPhi": 14,
    "testUnary": 13
  },
  "baseline_oz_instcount": 72,
  "knowledge_base_entry": [
    "--newgvn",
    "--correlated-propagation",
    "--gvn",
    "--mem2reg",
    "--loop-simplifycfg",
    "--loop-rotate",
    "--early-cse",
    "--jump-threading",
    "--elim-avail-extern",
    "--inline",
    "--dce",
    "--lower-expect",
    "--slp-vectorizer",
    "--sroa",
    "--flattencfg",
    "--newgvn",
    "--loop-rotate",
    "--dse",
    "--mldst-motion",
    "--instcombine",
    "-loop-reduce",
    "--instcombine",
    "--adce",
    "--simplifycfg",
    "--gvn-hoist"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--slp-vectorizer",
          "--name-anon-globals",
          "--flattencfg",
          "--separate-const-offset-from-gep",
          "--loop-vectorize",
          "-loop-reduce",
          "--loop-sink",
          "--lowerswitch",
          "--attributor",
          "--loop-interchange",
          "--div-rem-pairs",
          "--aggressive-instcombine",
          "--loop-distribute",
          "--infer-address-spaces",
          "--early-cse",
          "--loop-simplify",
          "--inferattrs",
          "--insert-gcov-profiling",
          "--loop-load-elim",
          "--instcombine",
          "--mergeicmps",
          "--coro-split",
          "--nary-reassociate",
          "--loweratomic"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--slp-vectorizer",
      "--name-anon-globals",
      "--flattencfg",
      "--separate-const-offset-from-gep",
      "--loop-vectorize",
      "-loop-reduce",
      "--loop-sink",
      "--lowerswitch",
      "--attributor",
      "--loop-interchange",
      "--div-rem-pairs",
      "--aggressive-instcombine",
      "--loop-distribute",
      "--infer-address-spaces",
      "--early-cse",
      "--loop-simplify",
      "--inferattrs",
      "--insert-gcov-profiling",
      "--loop-load-elim",
      "--instcombine",
      "--mergeicmps",
      "--coro-split",
      "--nary-reassociate",
      "--loweratomic"
    ],
    "performance_vs_Oz": "+2.8%"
  }
}
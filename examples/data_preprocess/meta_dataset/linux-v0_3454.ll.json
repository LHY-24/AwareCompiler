{
  "program_id": "linux-v0_3454.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 54,
    "onePredOneSuc": 41,
    "onePredTwoSuc": 11,
    "oneSuccessor": 46,
    "twoPred": 16,
    "twoPredOneSuc": 4,
    "twoEach": 6,
    "twoSuccessor": 26,
    "morePreds": 5,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 99,
    "BeginPhi": 2,
    "BranchCount": 72,
    "returnInt": 28,
    "CriticalCount": 10,
    "NumEdges": 107,
    "const32Bit": 304,
    "const64Bit": 19,
    "numConstZeroes": 119,
    "numConstOnes": 108,
    "UncondBranches": 46,
    "binaryConstArg": 22,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 84,
    "NumAndInst": 10,
    "BlockMid": 12,
    "BlockLow": 89,
    "NumBitCastInst": 18,
    "NumBrInst": 72,
    "NumCallInst": 59,
    "NumGetElementPtrInst": 71,
    "NumICmpInst": 34,
    "NumLShrInst": 0,
    "NumLoadInst": 205,
    "NumMulInst": 0,
    "NumOrInst": 9,
    "NumPHIInst": 2,
    "NumRetInst": 26,
    "NumSExtInst": 6,
    "NumSelectInst": 3,
    "NumShlInst": 0,
    "NumStoreInst": 129,
    "NumSubInst": 1,
    "NumTruncInst": 1,
    "NumXorInst": 4,
    "NumZExtInst": 16,
    "TotalBlocks": 101,
    "TotalInsts": 760,
    "TotalMemInst": 548,
    "TotalFuncs": 46,
    "ArgsPhi": 4,
    "testUnary": 334
  },
  "baseline_oz_instcount": 761,
  "knowledge_base_entry": [
    "--scalarizer",
    "--instcombine",
    "--mergefunc",
    "--reassociate",
    "--dse",
    "--mem2reg",
    "--slp-vectorizer",
    "--sroa",
    "--inline",
    "--adce",
    "--lower-expect",
    "--ipsccp",
    "--jump-threading",
    "--instsimplify",
    "--correlated-propagation",
    "--dse"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--memcpyopt",
          "--constprop",
          "--coro-elide",
          "--called-value-propagation",
          "--simplifycfg",
          "--loop-unroll-and-jam",
          "--gvn-hoist",
          "--bdce",
          "--name-anon-globals",
          "--globalopt"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--memcpyopt",
      "--constprop",
      "--coro-elide",
      "--called-value-propagation",
      "--simplifycfg",
      "--loop-unroll-and-jam",
      "--gvn-hoist",
      "--bdce",
      "--name-anon-globals",
      "--globalopt"
    ],
    "performance_vs_Oz": "+0.1%"
  }
}
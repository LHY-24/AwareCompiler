{
  "program_id": "github-v0_23824.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 4,
    "onePredOneSuc": 2,
    "onePredTwoSuc": 0,
    "oneSuccessor": 4,
    "twoPred": 2,
    "twoPredOneSuc": 0,
    "twoEach": 1,
    "twoSuccessor": 2,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 12,
    "BeginPhi": 0,
    "BranchCount": 6,
    "returnInt": 6,
    "CriticalCount": 0,
    "NumEdges": 8,
    "const32Bit": 100,
    "const64Bit": 40,
    "numConstZeroes": 79,
    "numConstOnes": 46,
    "UncondBranches": 4,
    "binaryConstArg": 0,
    "NumAShrInst": 0,
    "NumAddInst": 3,
    "NumAllocaInst": 32,
    "NumAndInst": 0,
    "BlockMid": 5,
    "BlockLow": 7,
    "NumBitCastInst": 38,
    "NumBrInst": 6,
    "NumCallInst": 28,
    "NumGetElementPtrInst": 43,
    "NumICmpInst": 2,
    "NumLShrInst": 0,
    "NumLoadInst": 35,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 27,
    "NumSubInst": 0,
    "NumTruncInst": 3,
    "NumXorInst": 0,
    "NumZExtInst": 21,
    "TotalBlocks": 12,
    "TotalInsts": 244,
    "TotalMemInst": 165,
    "TotalFuncs": 11,
    "ArgsPhi": 0,
    "testUnary": 129
  },
  "baseline_oz_instcount": 240,
  "knowledge_base_entry": [
    "--loop-versioning-licm",
    "--gvn-hoist",
    "--sccp",
    "--dse",
    "--aggressive-instcombine",
    "--instcombine",
    "--ipsccp",
    "--gvn",
    "--newgvn",
    "--indvars",
    "--simplifycfg",
    "--prune-eh",
    "--inline",
    "--loop-instsimplify",
    "--adce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--nary-reassociate",
          "--loop-deletion",
          "--inferattrs",
          "--mergeicmps",
          "--lower-widenable-condition",
          "--lower-expect",
          "--constmerge",
          "--rewrite-statepoints-for-gc",
          "--loop-guard-widening",
          "--sink",
          "--lowerinvoke",
          "--early-cse-memssa",
          "--loop-versioning",
          "--mldst-motion",
          "--mem2reg",
          "--aggressive-instcombine",
          "--loop-load-elim",
          "--gvn-hoist",
          "--adce",
          "--redundant-dbg-inst-elim",
          "--tailcallelim",
          "--loop-unswitch",
          "--prune-eh",
          "--loop-distribute",
          "--loop-simplify",
          "--ipsccp",
          "--globaldce"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--nary-reassociate",
      "--loop-deletion",
      "--inferattrs",
      "--mergeicmps",
      "--lower-widenable-condition",
      "--lower-expect",
      "--constmerge",
      "--rewrite-statepoints-for-gc",
      "--loop-guard-widening",
      "--sink",
      "--lowerinvoke",
      "--early-cse-memssa",
      "--loop-versioning",
      "--mldst-motion",
      "--mem2reg",
      "--aggressive-instcombine",
      "--loop-load-elim",
      "--gvn-hoist",
      "--adce",
      "--redundant-dbg-inst-elim",
      "--tailcallelim",
      "--loop-unswitch",
      "--prune-eh",
      "--loop-distribute",
      "--loop-simplify",
      "--ipsccp",
      "--globaldce"
    ],
    "performance_vs_Oz": "+3.8%"
  }
}
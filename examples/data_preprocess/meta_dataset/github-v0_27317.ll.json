{
  "program_id": "github-v0_27317.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 22,
    "onePredOneSuc": 13,
    "onePredTwoSuc": 9,
    "oneSuccessor": 20,
    "twoPred": 11,
    "twoPredOneSuc": 6,
    "twoEach": 5,
    "twoSuccessor": 15,
    "morePreds": 2,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 35,
    "BeginPhi": 1,
    "BranchCount": 35,
    "returnInt": 2,
    "CriticalCount": 9,
    "NumEdges": 50,
    "const32Bit": 103,
    "const64Bit": 0,
    "numConstZeroes": 42,
    "numConstOnes": 30,
    "UncondBranches": 20,
    "binaryConstArg": 7,
    "NumAShrInst": 0,
    "NumAddInst": 5,
    "NumAllocaInst": 19,
    "NumAndInst": 3,
    "BlockMid": 6,
    "BlockLow": 30,
    "NumBitCastInst": 1,
    "NumBrInst": 35,
    "NumCallInst": 3,
    "NumGetElementPtrInst": 30,
    "NumICmpInst": 15,
    "NumLShrInst": 0,
    "NumLoadInst": 89,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 1,
    "NumRetInst": 1,
    "NumSExtInst": 1,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 39,
    "NumSubInst": 5,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 1,
    "TotalBlocks": 36,
    "TotalInsts": 250,
    "TotalMemInst": 180,
    "TotalFuncs": 5,
    "ArgsPhi": 2,
    "testUnary": 111
  },
  "baseline_oz_instcount": 252,
  "knowledge_base_entry": [
    "--dce",
    "--early-cse",
    "--prune-eh",
    "--sroa",
    "--lower-constant-intrinsics",
    "--jump-threading",
    "--newgvn",
    "--early-cse-memssa",
    "--aggressive-instcombine",
    "--load-store-vectorizer"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--always-inline",
          "--div-rem-pairs",
          "--prune-eh",
          "--strip",
          "--callsite-splitting",
          "--correlated-propagation",
          "--loop-unroll-and-jam",
          "--redundant-dbg-inst-elim",
          "--mergereturn",
          "--strip-debug-declare",
          "--functionattrs",
          "--lower-constant-intrinsics",
          "--float2int",
          "--gvn-hoist"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--always-inline",
      "--div-rem-pairs",
      "--prune-eh",
      "--strip",
      "--callsite-splitting",
      "--correlated-propagation",
      "--loop-unroll-and-jam",
      "--redundant-dbg-inst-elim",
      "--mergereturn",
      "--strip-debug-declare",
      "--functionattrs",
      "--lower-constant-intrinsics",
      "--float2int",
      "--gvn-hoist"
    ],
    "performance_vs_Oz": "+0.8%"
  }
}
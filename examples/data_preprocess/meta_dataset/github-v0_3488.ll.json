{
  "program_id": "github-v0_3488.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 9,
    "onePredOneSuc": 7,
    "onePredTwoSuc": 0,
    "oneSuccessor": 9,
    "twoPred": 4,
    "twoPredOneSuc": 0,
    "twoEach": 3,
    "twoSuccessor": 4,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 17,
    "BeginPhi": 0,
    "BranchCount": 13,
    "returnInt": 0,
    "CriticalCount": 1,
    "NumEdges": 17,
    "const32Bit": 63,
    "const64Bit": 14,
    "numConstZeroes": 39,
    "numConstOnes": 22,
    "UncondBranches": 9,
    "binaryConstArg": 8,
    "NumAShrInst": 0,
    "NumAddInst": 3,
    "NumAllocaInst": 9,
    "NumAndInst": 0,
    "BlockMid": 3,
    "BlockLow": 14,
    "NumBitCastInst": 4,
    "NumBrInst": 13,
    "NumCallInst": 4,
    "NumGetElementPtrInst": 30,
    "NumICmpInst": 4,
    "NumLShrInst": 0,
    "NumLoadInst": 48,
    "NumMulInst": 1,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 4,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 3,
    "NumStoreInst": 20,
    "NumSubInst": 1,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 8,
    "TotalBlocks": 17,
    "TotalInsts": 152,
    "TotalMemInst": 111,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 69
  },
  "baseline_oz_instcount": 153,
  "knowledge_base_entry": [
    "--gvn-hoist",
    "--aggressive-instcombine",
    "--inline",
    "--ipsccp",
    "--mem2reg",
    "--dce",
    "--jump-threading",
    "--dce",
    "--dse",
    "--newgvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--dce",
          "--scalarizer",
          "--sancov",
          "--gvn",
          "--inline",
          "--lower-guard-intrinsic",
          "--slp-vectorizer",
          "--early-cse-memssa",
          "--bdce",
          "--partial-inliner"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--dce",
      "--scalarizer",
      "--sancov",
      "--gvn",
      "--inline",
      "--lower-guard-intrinsic",
      "--slp-vectorizer",
      "--early-cse-memssa",
      "--bdce",
      "--partial-inliner"
    ],
    "performance_vs_Oz": "+0.7%"
  }
}
{
  "program_id": "github-v0_20487.ll",
  "autophase_features": {
    "BBNumArgsHi": 11,
    "BBNumArgsLo": 37,
    "onePred": 53,
    "onePredOneSuc": 37,
    "onePredTwoSuc": 16,
    "oneSuccessor": 40,
    "twoPred": 60,
    "twoPredOneSuc": 3,
    "twoEach": 55,
    "twoSuccessor": 83,
    "morePreds": 10,
    "BB03Phi": 48,
    "BBHiPhi": 0,
    "BBNoPhi": 80,
    "BeginPhi": 48,
    "BranchCount": 123,
    "returnInt": 47,
    "CriticalCount": 113,
    "NumEdges": 206,
    "const32Bit": 164,
    "const64Bit": 36,
    "numConstZeroes": 98,
    "numConstOnes": 53,
    "UncondBranches": 40,
    "binaryConstArg": 80,
    "NumAShrInst": 0,
    "NumAddInst": 86,
    "NumAllocaInst": 0,
    "NumAndInst": 20,
    "BlockMid": 15,
    "BlockLow": 113,
    "NumBitCastInst": 12,
    "NumBrInst": 123,
    "NumCallInst": 80,
    "NumGetElementPtrInst": 74,
    "NumICmpInst": 82,
    "NumLShrInst": 2,
    "NumLoadInst": 67,
    "NumMulInst": 20,
    "NumOrInst": 10,
    "NumPHIInst": 81,
    "NumRetInst": 5,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 3,
    "NumStoreInst": 27,
    "NumSubInst": 17,
    "NumTruncInst": 36,
    "NumXorInst": 0,
    "NumZExtInst": 68,
    "TotalBlocks": 128,
    "TotalInsts": 828,
    "TotalMemInst": 248,
    "TotalFuncs": 13,
    "ArgsPhi": 169,
    "testUnary": 183
  },
  "baseline_oz_instcount": 825,
  "knowledge_base_entry": [
    "--globaldce",
    "--aggressive-instcombine",
    "--sroa",
    "--dce",
    "--simplifycfg",
    "--load-store-vectorizer",
    "--inline",
    "--prune-eh",
    "--instcombine",
    "--correlated-propagation",
    "--newgvn",
    "--gvn-hoist",
    "--globalopt",
    "--globaldce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--forceattrs",
          "--loop-load-elim",
          "--sancov",
          "--lower-constant-intrinsics",
          "--canonicalize-aliases",
          "--libcalls-shrinkwrap",
          "--loop-distribute",
          "--loop-instsimplify",
          "--loop-idiom",
          "--float2int",
          "--loop-fusion",
          "--strip",
          "--loop-unroll",
          "--slsr",
          "--add-discriminators",
          "--loop-simplify",
          "--die",
          "--loop-predication",
          "--guard-widening",
          "--simplifycfg",
          "--lower-guard-intrinsic",
          "--lower-expect"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--forceattrs",
      "--loop-load-elim",
      "--sancov",
      "--lower-constant-intrinsics",
      "--canonicalize-aliases",
      "--libcalls-shrinkwrap",
      "--loop-distribute",
      "--loop-instsimplify",
      "--loop-idiom",
      "--float2int",
      "--loop-fusion",
      "--strip",
      "--loop-unroll",
      "--slsr",
      "--add-discriminators",
      "--loop-simplify",
      "--die",
      "--loop-predication",
      "--guard-widening",
      "--simplifycfg",
      "--lower-guard-intrinsic",
      "--lower-expect"
    ],
    "performance_vs_Oz": "+1.9%"
  }
}
{
  "program_id": "github-v0_29609.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 15,
    "onePredOneSuc": 10,
    "onePredTwoSuc": 3,
    "oneSuccessor": 13,
    "twoPred": 6,
    "twoPredOneSuc": 3,
    "twoEach": 2,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 24,
    "BeginPhi": 0,
    "BranchCount": 20,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 27,
    "const32Bit": 45,
    "const64Bit": 82,
    "numConstZeroes": 78,
    "numConstOnes": 37,
    "UncondBranches": 13,
    "binaryConstArg": 20,
    "NumAShrInst": 8,
    "NumAddInst": 3,
    "NumAllocaInst": 14,
    "NumAndInst": 7,
    "BlockMid": 7,
    "BlockLow": 17,
    "NumBitCastInst": 16,
    "NumBrInst": 20,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 51,
    "NumICmpInst": 7,
    "NumLShrInst": 0,
    "NumLoadInst": 39,
    "NumMulInst": 0,
    "NumOrInst": 4,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 6,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 28,
    "NumSubInst": 0,
    "NumTruncInst": 9,
    "NumXorInst": 0,
    "NumZExtInst": 13,
    "TotalBlocks": 24,
    "TotalInsts": 237,
    "TotalMemInst": 139,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 97
  },
  "baseline_oz_instcount": 237,
  "knowledge_base_entry": [
    "--gvn-hoist",
    "--sccp",
    "--gvn",
    "--adce",
    "--reassociate",
    "--slp-vectorizer",
    "--dse",
    "--aggressive-instcombine",
    "--early-cse",
    "--prune-eh",
    "--early-cse-memssa",
    "--mldst-motion",
    "--jump-threading"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--slp-vectorizer",
          "--inject-tli-mappings",
          "--cross-dso-cfi",
          "--strip",
          "--lower-expect",
          "--float2int",
          "--dce",
          "--loop-rotate",
          "--coro-early",
          "--loop-unswitch",
          "--slsr",
          "--globalopt",
          "--partial-inliner",
          "--reassociate",
          "--loop-deletion",
          "--flattencfg",
          "--ipconstprop",
          "--infer-address-spaces",
          "--mem2reg",
          "--attributor",
          "--load-store-vectorizer",
          "--adce",
          "--guard-widening",
          "--mldst-motion",
          "--div-rem-pairs",
          "--reg2mem",
          "--loop-distribute",
          "--aggressive-instcombine",
          "--strip-debug-declare"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--slp-vectorizer",
      "--inject-tli-mappings",
      "--cross-dso-cfi",
      "--strip",
      "--lower-expect",
      "--float2int",
      "--dce",
      "--loop-rotate",
      "--coro-early",
      "--loop-unswitch",
      "--slsr",
      "--globalopt",
      "--partial-inliner",
      "--reassociate",
      "--loop-deletion",
      "--flattencfg",
      "--ipconstprop",
      "--infer-address-spaces",
      "--mem2reg",
      "--attributor",
      "--load-store-vectorizer",
      "--adce",
      "--guard-widening",
      "--mldst-motion",
      "--div-rem-pairs",
      "--reg2mem",
      "--loop-distribute",
      "--aggressive-instcombine",
      "--strip-debug-declare"
    ],
    "performance_vs_Oz": "+3.4%"
  }
}
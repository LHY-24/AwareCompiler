{
  "program_id": "linux-v0_5476.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 21,
    "onePredOneSuc": 15,
    "onePredTwoSuc": 6,
    "oneSuccessor": 17,
    "twoPred": 7,
    "twoPredOneSuc": 2,
    "twoEach": 1,
    "twoSuccessor": 12,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 50,
    "BeginPhi": 0,
    "BranchCount": 29,
    "returnInt": 30,
    "CriticalCount": 3,
    "NumEdges": 41,
    "const32Bit": 355,
    "const64Bit": 54,
    "numConstZeroes": 164,
    "numConstOnes": 112,
    "UncondBranches": 17,
    "binaryConstArg": 22,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 52,
    "NumAndInst": 9,
    "BlockMid": 13,
    "BlockLow": 37,
    "NumBitCastInst": 12,
    "NumBrInst": 29,
    "NumCallInst": 87,
    "NumGetElementPtrInst": 168,
    "NumICmpInst": 16,
    "NumLShrInst": 8,
    "NumLoadInst": 251,
    "NumMulInst": 0,
    "NumOrInst": 3,
    "NumPHIInst": 0,
    "NumRetInst": 21,
    "NumSExtInst": 1,
    "NumSelectInst": 4,
    "NumShlInst": 0,
    "NumStoreInst": 91,
    "NumSubInst": 0,
    "NumTruncInst": 5,
    "NumXorInst": 2,
    "NumZExtInst": 8,
    "TotalBlocks": 50,
    "TotalInsts": 771,
    "TotalMemInst": 649,
    "TotalFuncs": 41,
    "ArgsPhi": 0,
    "testUnary": 333
  },
  "baseline_oz_instcount": 771,
  "knowledge_base_entry": [
    "--loop-sink",
    "--jump-threading",
    "--loop-instsimplify",
    "--loop-simplifycfg",
    "--mldst-motion",
    "--instsimplify",
    "--gvn",
    "--globalopt",
    "--inline",
    "--aggressive-instcombine",
    "--mem2reg",
    "--licm",
    "--instcombine",
    "--loop-simplifycfg",
    "--bdce",
    "--load-store-vectorizer"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--aggressive-instcombine",
          "--strip-nondebug",
          "--loop-idiom",
          "--loop-data-prefetch",
          "--div-rem-pairs",
          "--called-value-propagation",
          "--loop-unroll-and-jam",
          "--ipsccp",
          "--lowerinvoke",
          "--gvn",
          "--loop-predication",
          "--ee-instrument",
          "--callsite-splitting",
          "--cross-dso-cfi",
          "--load-store-vectorizer",
          "--correlated-propagation",
          "--strip-dead-prototypes",
          "--barrier",
          "--separate-const-offset-from-gep",
          "--insert-gcov-profiling",
          "--flattencfg",
          "--inferattrs",
          "--early-cse-memssa",
          "--canonicalize-aliases",
          "--post-inline-ee-instrument"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--aggressive-instcombine",
      "--strip-nondebug",
      "--loop-idiom",
      "--loop-data-prefetch",
      "--div-rem-pairs",
      "--called-value-propagation",
      "--loop-unroll-and-jam",
      "--ipsccp",
      "--lowerinvoke",
      "--gvn",
      "--loop-predication",
      "--ee-instrument",
      "--callsite-splitting",
      "--cross-dso-cfi",
      "--load-store-vectorizer",
      "--correlated-propagation",
      "--strip-dead-prototypes",
      "--barrier",
      "--separate-const-offset-from-gep",
      "--insert-gcov-profiling",
      "--flattencfg",
      "--inferattrs",
      "--early-cse-memssa",
      "--canonicalize-aliases",
      "--post-inline-ee-instrument"
    ],
    "performance_vs_Oz": "+0.3%"
  }
}
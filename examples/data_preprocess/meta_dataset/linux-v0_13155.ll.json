{
  "program_id": "linux-v0_13155.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 7,
    "onePredOneSuc": 6,
    "onePredTwoSuc": 0,
    "oneSuccessor": 8,
    "twoPred": 4,
    "twoPredOneSuc": 1,
    "twoEach": 1,
    "twoSuccessor": 2,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 23,
    "BeginPhi": 0,
    "BranchCount": 10,
    "returnInt": 1,
    "CriticalCount": 1,
    "NumEdges": 15,
    "const32Bit": 25,
    "const64Bit": 3,
    "numConstZeroes": 5,
    "numConstOnes": 20,
    "UncondBranches": 8,
    "binaryConstArg": 3,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 12,
    "NumAndInst": 0,
    "BlockMid": 0,
    "BlockLow": 23,
    "NumBitCastInst": 0,
    "NumBrInst": 10,
    "NumCallInst": 6,
    "NumGetElementPtrInst": 2,
    "NumICmpInst": 3,
    "NumLShrInst": 0,
    "NumLoadInst": 11,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 12,
    "NumSExtInst": 1,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 14,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 2,
    "NumZExtInst": 1,
    "TotalBlocks": 23,
    "TotalInsts": 76,
    "TotalMemInst": 45,
    "TotalFuncs": 13,
    "ArgsPhi": 0,
    "testUnary": 25
  },
  "baseline_oz_instcount": 76,
  "knowledge_base_entry": [
    "--strip-nondebug",
    "--mergefunc",
    "--globaldce",
    "--mergefunc",
    "--adce",
    "--load-store-vectorizer",
    "--loop-fusion",
    "--early-cse",
    "--jump-threading",
    "--lower-expect",
    "--die",
    "--gvn-hoist",
    "--slsr",
    "--newgvn",
    "--simplifycfg",
    "--flattencfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--mergefunc",
          "--float2int",
          "--insert-gcov-profiling",
          "--always-inline",
          "--sccp",
          "--loop-reroll",
          "--loop-vectorize",
          "--loop-distribute",
          "--sancov",
          "--indvars",
          "--attributor",
          "--lcssa",
          "--loop-simplify",
          "--name-anon-globals",
          "--loop-versioning",
          "--strip-nondebug",
          "--strip",
          "--dse",
          "--aggressive-instcombine",
          "--coro-elide",
          "--newgvn",
          "--coro-cleanup",
          "--add-discriminators",
          "--inline",
          "--mergereturn",
          "--strip-dead-prototypes",
          "--canonicalize-aliases",
          "--licm",
          "--callsite-splitting"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+10.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--mergefunc",
      "--float2int",
      "--insert-gcov-profiling",
      "--always-inline",
      "--sccp",
      "--loop-reroll",
      "--loop-vectorize",
      "--loop-distribute",
      "--sancov",
      "--indvars",
      "--attributor",
      "--lcssa",
      "--loop-simplify",
      "--name-anon-globals",
      "--loop-versioning",
      "--strip-nondebug",
      "--strip",
      "--dse",
      "--aggressive-instcombine",
      "--coro-elide",
      "--newgvn",
      "--coro-cleanup",
      "--add-discriminators",
      "--inline",
      "--mergereturn",
      "--strip-dead-prototypes",
      "--canonicalize-aliases",
      "--licm",
      "--callsite-splitting"
    ],
    "performance_vs_Oz": "+10.5%"
  }
}
{
  "program_id": "github-v0_30367.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 12,
    "onePredOneSuc": 8,
    "onePredTwoSuc": 4,
    "oneSuccessor": 9,
    "twoPred": 3,
    "twoPredOneSuc": 1,
    "twoEach": 2,
    "twoSuccessor": 7,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 17,
    "BeginPhi": 0,
    "BranchCount": 16,
    "returnInt": 0,
    "CriticalCount": 3,
    "NumEdges": 23,
    "const32Bit": 85,
    "const64Bit": 7,
    "numConstZeroes": 69,
    "numConstOnes": 14,
    "UncondBranches": 9,
    "binaryConstArg": 6,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 10,
    "NumAndInst": 3,
    "BlockMid": 3,
    "BlockLow": 14,
    "NumBitCastInst": 0,
    "NumBrInst": 16,
    "NumCallInst": 28,
    "NumGetElementPtrInst": 34,
    "NumICmpInst": 7,
    "NumLShrInst": 0,
    "NumLoadInst": 27,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 1,
    "NumSExtInst": 1,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 6,
    "NumSubInst": 3,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 6,
    "TotalBlocks": 17,
    "TotalInsts": 145,
    "TotalMemInst": 105,
    "TotalFuncs": 13,
    "ArgsPhi": 0,
    "testUnary": 46
  },
  "baseline_oz_instcount": 145,
  "knowledge_base_entry": [
    "--elim-avail-extern",
    "--aggressive-instcombine",
    "--lower-constant-intrinsics",
    "--elim-avail-extern",
    "--newgvn",
    "--loop-instsimplify",
    "--sccp",
    "--loop-instsimplify",
    "--ipsccp"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--lowerinvoke",
          "--canonicalize-aliases",
          "--insert-gcov-profiling",
          "--cross-dso-cfi",
          "--gvn",
          "--deadargelim",
          "--always-inline",
          "--dce",
          "--ee-instrument",
          "--loop-simplifycfg",
          "--hotcoldsplit",
          "--aggressive-instcombine",
          "--mergereturn",
          "--sccp",
          "--bdce",
          "--scalarizer",
          "--sroa",
          "--lower-guard-intrinsic"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--lowerinvoke",
      "--canonicalize-aliases",
      "--insert-gcov-profiling",
      "--cross-dso-cfi",
      "--gvn",
      "--deadargelim",
      "--always-inline",
      "--dce",
      "--ee-instrument",
      "--loop-simplifycfg",
      "--hotcoldsplit",
      "--aggressive-instcombine",
      "--mergereturn",
      "--sccp",
      "--bdce",
      "--scalarizer",
      "--sroa",
      "--lower-guard-intrinsic"
    ],
    "performance_vs_Oz": "+2.8%"
  }
}
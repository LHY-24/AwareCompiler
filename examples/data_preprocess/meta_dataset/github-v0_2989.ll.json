{
  "program_id": "github-v0_2989.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 5,
    "onePred": 69,
    "onePredOneSuc": 48,
    "onePredTwoSuc": 21,
    "oneSuccessor": 50,
    "twoPred": 10,
    "twoPredOneSuc": 2,
    "twoEach": 8,
    "twoSuccessor": 32,
    "morePreds": 3,
    "BB03Phi": 5,
    "BBHiPhi": 0,
    "BBNoPhi": 80,
    "BeginPhi": 5,
    "BranchCount": 82,
    "returnInt": 47,
    "CriticalCount": 0,
    "NumEdges": 114,
    "const32Bit": 219,
    "const64Bit": 33,
    "numConstZeroes": 135,
    "numConstOnes": 81,
    "UncondBranches": 50,
    "binaryConstArg": 5,
    "NumAShrInst": 0,
    "NumAddInst": 5,
    "NumAllocaInst": 38,
    "NumAndInst": 0,
    "BlockMid": 9,
    "BlockLow": 76,
    "NumBitCastInst": 27,
    "NumBrInst": 82,
    "NumCallInst": 69,
    "NumGetElementPtrInst": 56,
    "NumICmpInst": 32,
    "NumLShrInst": 0,
    "NumLoadInst": 72,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 5,
    "NumRetInst": 3,
    "NumSExtInst": 1,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 89,
    "NumSubInst": 0,
    "NumTruncInst": 8,
    "NumXorInst": 0,
    "NumZExtInst": 25,
    "TotalBlocks": 85,
    "TotalInsts": 512,
    "TotalMemInst": 324,
    "TotalFuncs": 14,
    "ArgsPhi": 10,
    "testUnary": 171
  },
  "baseline_oz_instcount": 512,
  "knowledge_base_entry": [
    "--mergereturn",
    "--simplifycfg",
    "--aggressive-instcombine",
    "--lower-expect",
    "--bdce",
    "--lower-constant-intrinsics",
    "--loop-simplifycfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--hotcoldsplit",
          "--callsite-splitting",
          "--div-rem-pairs",
          "--loop-load-elim",
          "--flattencfg",
          "--aggressive-instcombine",
          "--loop-distribute",
          "--strip-debug-declare",
          "--mldst-motion",
          "--rpo-functionattrs",
          "--break-crit-edges",
          "--tailcallelim",
          "--mergefunc",
          "--mergereturn",
          "--coro-early",
          "--infer-address-spaces",
          "--nary-reassociate",
          "--pgo-memop-opt",
          "--barrier",
          "--irce",
          "--dse",
          "--loop-predication",
          "--add-discriminators",
          "--loop-fusion",
          "--mergeicmps",
          "--correlated-propagation",
          "--coro-split",
          "--redundant-dbg-inst-elim",
          "--float2int"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--hotcoldsplit",
      "--callsite-splitting",
      "--div-rem-pairs",
      "--loop-load-elim",
      "--flattencfg",
      "--aggressive-instcombine",
      "--loop-distribute",
      "--strip-debug-declare",
      "--mldst-motion",
      "--rpo-functionattrs",
      "--break-crit-edges",
      "--tailcallelim",
      "--mergefunc",
      "--mergereturn",
      "--coro-early",
      "--infer-address-spaces",
      "--nary-reassociate",
      "--pgo-memop-opt",
      "--barrier",
      "--irce",
      "--dse",
      "--loop-predication",
      "--add-discriminators",
      "--loop-fusion",
      "--mergeicmps",
      "--correlated-propagation",
      "--coro-split",
      "--redundant-dbg-inst-elim",
      "--float2int"
    ],
    "performance_vs_Oz": "+1.6%"
  }
}
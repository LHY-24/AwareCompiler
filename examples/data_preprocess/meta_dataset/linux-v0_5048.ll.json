{
  "program_id": "linux-v0_5048.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 26,
    "onePredOneSuc": 18,
    "onePredTwoSuc": 6,
    "oneSuccessor": 22,
    "twoPred": 5,
    "twoPredOneSuc": 1,
    "twoEach": 3,
    "twoSuccessor": 12,
    "morePreds": 4,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 43,
    "BeginPhi": 0,
    "BranchCount": 34,
    "returnInt": 4,
    "CriticalCount": 7,
    "NumEdges": 49,
    "const32Bit": 152,
    "const64Bit": 15,
    "numConstZeroes": 70,
    "numConstOnes": 58,
    "UncondBranches": 22,
    "binaryConstArg": 18,
    "NumAShrInst": 0,
    "NumAddInst": 9,
    "NumAllocaInst": 41,
    "NumAndInst": 6,
    "BlockMid": 7,
    "BlockLow": 36,
    "NumBitCastInst": 5,
    "NumBrInst": 34,
    "NumCallInst": 17,
    "NumGetElementPtrInst": 40,
    "NumICmpInst": 15,
    "NumLShrInst": 0,
    "NumLoadInst": 75,
    "NumMulInst": 4,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 8,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 51,
    "NumSubInst": 1,
    "NumTruncInst": 2,
    "NumXorInst": 2,
    "NumZExtInst": 13,
    "TotalBlocks": 43,
    "TotalInsts": 333,
    "TotalMemInst": 224,
    "TotalFuncs": 15,
    "ArgsPhi": 0,
    "testUnary": 144
  },
  "baseline_oz_instcount": 334,
  "knowledge_base_entry": [
    "--mergefunc",
    "--flattencfg",
    "--simplifycfg",
    "--prune-eh",
    "--early-cse",
    "--instsimplify",
    "--aggressive-instcombine",
    "--simplifycfg",
    "--lower-expect",
    "--dse",
    "--dse",
    "--lower-expect",
    "--ipsccp",
    "--dse",
    "--correlated-propagation",
    "--simplifycfg",
    "--nary-reassociate",
    "--lower-constant-intrinsics",
    "--load-store-vectorizer",
    "--aggressive-instcombine",
    "--simplifycfg",
    "--globalopt",
    "--inline"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-unroll-and-jam",
          "--sccp",
          "--partial-inliner",
          "--lower-constant-intrinsics",
          "--mergereturn",
          "--strip-nondebug",
          "--simple-loop-unswitch",
          "--loop-unroll",
          "--loop-idiom",
          "--aggressive-instcombine",
          "--loop-instsimplify",
          "-loop-reduce",
          "--pgo-memop-opt",
          "--coro-split",
          "--licm",
          "--lower-widenable-condition",
          "--early-cse",
          "--called-value-propagation",
          "--sink",
          "--lower-guard-intrinsic"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-unroll-and-jam",
      "--sccp",
      "--partial-inliner",
      "--lower-constant-intrinsics",
      "--mergereturn",
      "--strip-nondebug",
      "--simple-loop-unswitch",
      "--loop-unroll",
      "--loop-idiom",
      "--aggressive-instcombine",
      "--loop-instsimplify",
      "-loop-reduce",
      "--pgo-memop-opt",
      "--coro-split",
      "--licm",
      "--lower-widenable-condition",
      "--early-cse",
      "--called-value-propagation",
      "--sink",
      "--lower-guard-intrinsic"
    ],
    "performance_vs_Oz": "+0.6%"
  }
}
{
  "program_id": "linux-v0_11022.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 53,
    "onePredOneSuc": 37,
    "onePredTwoSuc": 12,
    "oneSuccessor": 47,
    "twoPred": 7,
    "twoPredOneSuc": 2,
    "twoEach": 0,
    "twoSuccessor": 16,
    "morePreds": 5,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 94,
    "BeginPhi": 0,
    "BranchCount": 63,
    "returnInt": 38,
    "CriticalCount": 3,
    "NumEdges": 89,
    "const32Bit": 293,
    "const64Bit": 31,
    "numConstZeroes": 151,
    "numConstOnes": 122,
    "UncondBranches": 47,
    "binaryConstArg": 5,
    "NumAShrInst": 1,
    "NumAddInst": 0,
    "NumAllocaInst": 95,
    "NumAndInst": 1,
    "BlockMid": 13,
    "BlockLow": 81,
    "NumBitCastInst": 63,
    "NumBrInst": 63,
    "NumCallInst": 87,
    "NumGetElementPtrInst": 95,
    "NumICmpInst": 12,
    "NumLShrInst": 0,
    "NumLoadInst": 245,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 29,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 136,
    "NumSubInst": 0,
    "NumTruncInst": 5,
    "NumXorInst": 2,
    "NumZExtInst": 3,
    "TotalBlocks": 94,
    "TotalInsts": 847,
    "TotalMemInst": 658,
    "TotalFuncs": 42,
    "ArgsPhi": 0,
    "testUnary": 418
  },
  "baseline_oz_instcount": 846,
  "knowledge_base_entry": [
    "--instsimplify",
    "--newgvn",
    "--instsimplify",
    "--inline",
    "--sccp",
    "--adce",
    "--jump-threading",
    "--lower-constant-intrinsics",
    "--instsimplify",
    "--load-store-vectorizer",
    "--gvn-hoist",
    "--ipsccp",
    "--jump-threading",
    "--nary-reassociate",
    "--lower-constant-intrinsics",
    "--simplifycfg",
    "--aggressive-instcombine",
    "--ipsccp",
    "--mergefunc",
    "--globalopt",
    "--loop-instsimplify",
    "--elim-avail-extern"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-predication",
          "--aggressive-instcombine",
          "--rpo-functionattrs",
          "--ipsccp",
          "--partially-inline-libcalls",
          "--lower-expect",
          "--add-discriminators",
          "--libcalls-shrinkwrap",
          "-loop-reduce",
          "--inferattrs",
          "--inject-tli-mappings"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-predication",
      "--aggressive-instcombine",
      "--rpo-functionattrs",
      "--ipsccp",
      "--partially-inline-libcalls",
      "--lower-expect",
      "--add-discriminators",
      "--libcalls-shrinkwrap",
      "-loop-reduce",
      "--inferattrs",
      "--inject-tli-mappings"
    ],
    "performance_vs_Oz": "+0.2%"
  }
}
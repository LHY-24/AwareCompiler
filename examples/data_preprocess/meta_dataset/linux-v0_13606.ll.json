{
  "program_id": "linux-v0_13606.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 71,
    "onePredOneSuc": 54,
    "onePredTwoSuc": 16,
    "oneSuccessor": 60,
    "twoPred": 16,
    "twoPredOneSuc": 3,
    "twoEach": 10,
    "twoSuccessor": 34,
    "morePreds": 7,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 111,
    "BeginPhi": 0,
    "BranchCount": 94,
    "returnInt": 25,
    "CriticalCount": 4,
    "NumEdges": 128,
    "const32Bit": 301,
    "const64Bit": 18,
    "numConstZeroes": 154,
    "numConstOnes": 96,
    "UncondBranches": 60,
    "binaryConstArg": 19,
    "NumAShrInst": 1,
    "NumAddInst": 6,
    "NumAllocaInst": 72,
    "NumAndInst": 7,
    "BlockMid": 19,
    "BlockLow": 92,
    "NumBitCastInst": 12,
    "NumBrInst": 94,
    "NumCallInst": 54,
    "NumGetElementPtrInst": 98,
    "NumICmpInst": 35,
    "NumLShrInst": 0,
    "NumLoadInst": 249,
    "NumMulInst": 0,
    "NumOrInst": 3,
    "NumPHIInst": 0,
    "NumRetInst": 17,
    "NumSExtInst": 19,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 119,
    "NumSubInst": 0,
    "NumTruncInst": 9,
    "NumXorInst": 2,
    "NumZExtInst": 27,
    "TotalBlocks": 111,
    "TotalInsts": 831,
    "TotalMemInst": 592,
    "TotalFuncs": 32,
    "ArgsPhi": 0,
    "testUnary": 393
  },
  "baseline_oz_instcount": 832,
  "knowledge_base_entry": [
    "--nary-reassociate",
    "--slp-vectorizer",
    "--die",
    "--elim-avail-extern",
    "--bdce",
    "--instcombine",
    "--elim-avail-extern",
    "--adce",
    "--aggressive-instcombine",
    "--loweratomic",
    "--globalopt",
    "--gvn-hoist",
    "--slp-vectorizer",
    "--die",
    "--elim-avail-extern",
    "--bdce",
    "--instcombine",
    "--elim-avail-extern",
    "--adce",
    "--aggressive-instcombine",
    "--load-store-vectorizer",
    "--adce",
    "--gvn-hoist",
    "--flattencfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--dce",
          "--partially-inline-libcalls",
          "--ipconstprop",
          "--sancov",
          "--name-anon-globals",
          "--simplifycfg",
          "--forceattrs",
          "--ipsccp",
          "--correlated-propagation",
          "--elim-avail-extern",
          "--rpo-functionattrs",
          "--tailcallelim",
          "--aggressive-instcombine",
          "--jump-threading",
          "--newgvn",
          "--loop-unroll-and-jam",
          "--slp-vectorizer",
          "--memcpyopt",
          "--globalsplit",
          "--partial-inliner",
          "--cross-dso-cfi"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--dce",
      "--partially-inline-libcalls",
      "--ipconstprop",
      "--sancov",
      "--name-anon-globals",
      "--simplifycfg",
      "--forceattrs",
      "--ipsccp",
      "--correlated-propagation",
      "--elim-avail-extern",
      "--rpo-functionattrs",
      "--tailcallelim",
      "--aggressive-instcombine",
      "--jump-threading",
      "--newgvn",
      "--loop-unroll-and-jam",
      "--slp-vectorizer",
      "--memcpyopt",
      "--globalsplit",
      "--partial-inliner",
      "--cross-dso-cfi"
    ],
    "performance_vs_Oz": "+1.3%"
  }
}
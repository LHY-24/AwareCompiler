{
  "program_id": "linux-v0_1618.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 3,
    "onePred": 51,
    "onePredOneSuc": 40,
    "onePredTwoSuc": 10,
    "oneSuccessor": 45,
    "twoPred": 12,
    "twoPredOneSuc": 4,
    "twoEach": 3,
    "twoSuccessor": 21,
    "morePreds": 5,
    "BB03Phi": 3,
    "BBHiPhi": 0,
    "BBNoPhi": 82,
    "BeginPhi": 3,
    "BranchCount": 66,
    "returnInt": 15,
    "CriticalCount": 7,
    "NumEdges": 97,
    "const32Bit": 211,
    "const64Bit": 14,
    "numConstZeroes": 89,
    "numConstOnes": 112,
    "UncondBranches": 45,
    "binaryConstArg": 17,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 83,
    "NumAndInst": 2,
    "BlockMid": 9,
    "BlockLow": 76,
    "NumBitCastInst": 41,
    "NumBrInst": 66,
    "NumCallInst": 36,
    "NumGetElementPtrInst": 41,
    "NumICmpInst": 22,
    "NumLShrInst": 0,
    "NumLoadInst": 164,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 3,
    "NumRetInst": 17,
    "NumSExtInst": 9,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 109,
    "NumSubInst": 1,
    "NumTruncInst": 7,
    "NumXorInst": 10,
    "NumZExtInst": 16,
    "TotalBlocks": 85,
    "TotalInsts": 639,
    "TotalMemInst": 433,
    "TotalFuncs": 22,
    "ArgsPhi": 6,
    "testUnary": 326
  },
  "baseline_oz_instcount": 639,
  "knowledge_base_entry": [
    "--flattencfg",
    "--gvn-hoist",
    "--bdce",
    "--gvn",
    "--indvars",
    "--loop-reroll",
    "--mergefunc",
    "--instsimplify",
    "--sccp",
    "--sroa",
    "--mem2reg",
    "--prune-eh"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-load-elim",
          "--tailcallelim",
          "--infer-address-spaces",
          "--add-discriminators",
          "--sink",
          "--mergefunc",
          "--loop-predication",
          "--coro-elide",
          "--div-rem-pairs",
          "--loop-unroll",
          "--reassociate",
          "--globaldce",
          "--partial-inliner",
          "--lower-expect",
          "--loop-simplifycfg"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-load-elim",
      "--tailcallelim",
      "--infer-address-spaces",
      "--add-discriminators",
      "--sink",
      "--mergefunc",
      "--loop-predication",
      "--coro-elide",
      "--div-rem-pairs",
      "--loop-unroll",
      "--reassociate",
      "--globaldce",
      "--partial-inliner",
      "--lower-expect",
      "--loop-simplifycfg"
    ],
    "performance_vs_Oz": "+0.8%"
  }
}
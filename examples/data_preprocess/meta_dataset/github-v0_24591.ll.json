{
  "program_id": "github-v0_24591.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 3,
    "onePred": 10,
    "onePredOneSuc": 6,
    "onePredTwoSuc": 3,
    "oneSuccessor": 10,
    "twoPred": 7,
    "twoPredOneSuc": 3,
    "twoEach": 4,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 3,
    "BBHiPhi": 0,
    "BBNoPhi": 15,
    "BeginPhi": 3,
    "BranchCount": 17,
    "returnInt": 5,
    "CriticalCount": 6,
    "NumEdges": 24,
    "const32Bit": 15,
    "const64Bit": 5,
    "numConstZeroes": 19,
    "numConstOnes": 8,
    "UncondBranches": 10,
    "binaryConstArg": 7,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 2,
    "NumAndInst": 2,
    "BlockMid": 4,
    "BlockLow": 14,
    "NumBitCastInst": 0,
    "NumBrInst": 17,
    "NumCallInst": 5,
    "NumGetElementPtrInst": 13,
    "NumICmpInst": 14,
    "NumLShrInst": 0,
    "NumLoadInst": 35,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 3,
    "NumRetInst": 1,
    "NumSExtInst": 25,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 18,
    "NumSubInst": 4,
    "NumTruncInst": 4,
    "NumXorInst": 4,
    "NumZExtInst": 7,
    "TotalBlocks": 18,
    "TotalInsts": 157,
    "TotalMemInst": 73,
    "TotalFuncs": 4,
    "ArgsPhi": 6,
    "testUnary": 73
  },
  "baseline_oz_instcount": 157,
  "knowledge_base_entry": [
    "--lowerinvoke",
    "--instcombine",
    "--memcpyopt",
    "--inline",
    "--loop-instsimplify",
    "--ipsccp",
    "--aggressive-instcombine",
    "--mergefunc",
    "--jump-threading",
    "--die",
    "--mem2reg",
    "--lower-expect",
    "--loop-instsimplify",
    "--inline",
    "--loop-rotate",
    "--sroa",
    "--loop-reroll",
    "--instcombine"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--strip-debug-declare",
          "--nary-reassociate",
          "--infer-address-spaces",
          "--coro-split",
          "--rpo-functionattrs",
          "--inline",
          "--libcalls-shrinkwrap",
          "--coro-elide",
          "--loop-fusion",
          "--indvars",
          "--mem2reg",
          "--aggressive-instcombine",
          "--loop-instsimplify",
          "--tailcallelim",
          "--irce",
          "--instcombine",
          "--div-rem-pairs",
          "--dse",
          "--loop-data-prefetch",
          "--add-discriminators",
          "--gvn-hoist",
          "--globalsplit",
          "--ipsccp"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+4.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--strip-debug-declare",
      "--nary-reassociate",
      "--infer-address-spaces",
      "--coro-split",
      "--rpo-functionattrs",
      "--inline",
      "--libcalls-shrinkwrap",
      "--coro-elide",
      "--loop-fusion",
      "--indvars",
      "--mem2reg",
      "--aggressive-instcombine",
      "--loop-instsimplify",
      "--tailcallelim",
      "--irce",
      "--instcombine",
      "--div-rem-pairs",
      "--dse",
      "--loop-data-prefetch",
      "--add-discriminators",
      "--gvn-hoist",
      "--globalsplit",
      "--ipsccp"
    ],
    "performance_vs_Oz": "+4.5%"
  }
}
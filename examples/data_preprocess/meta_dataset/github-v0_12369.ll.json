{
  "program_id": "github-v0_12369.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 31,
    "onePredOneSuc": 19,
    "onePredTwoSuc": 2,
    "oneSuccessor": 30,
    "twoPred": 14,
    "twoPredOneSuc": 1,
    "twoEach": 12,
    "twoSuccessor": 16,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 61,
    "BeginPhi": 0,
    "BranchCount": 46,
    "returnInt": 6,
    "CriticalCount": 1,
    "NumEdges": 62,
    "const32Bit": 48,
    "const64Bit": 30,
    "numConstZeroes": 9,
    "numConstOnes": 25,
    "UncondBranches": 30,
    "binaryConstArg": 16,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 21,
    "NumAndInst": 0,
    "BlockMid": 5,
    "BlockLow": 56,
    "NumBitCastInst": 23,
    "NumBrInst": 46,
    "NumCallInst": 17,
    "NumGetElementPtrInst": 17,
    "NumICmpInst": 16,
    "NumLShrInst": 0,
    "NumLoadInst": 61,
    "NumMulInst": 1,
    "NumOrInst": 14,
    "NumPHIInst": 0,
    "NumRetInst": 5,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 14,
    "NumStoreInst": 29,
    "NumSubInst": 0,
    "NumTruncInst": 3,
    "NumXorInst": 0,
    "NumZExtInst": 18,
    "TotalBlocks": 61,
    "TotalInsts": 296,
    "TotalMemInst": 145,
    "TotalFuncs": 9,
    "ArgsPhi": 0,
    "testUnary": 126
  },
  "baseline_oz_instcount": 286,
  "knowledge_base_entry": [
    "--slsr",
    "--indvars",
    "--early-cse-memssa",
    "--elim-avail-extern",
    "--globalopt",
    "--loweratomic",
    "--instcombine",
    "--early-cse-memssa",
    "--early-cse-memssa",
    "--dce",
    "--dse",
    "--early-cse",
    "--licm",
    "--early-cse",
    "--licm",
    "--early-cse",
    "--lower-expect",
    "--sroa",
    "--inline",
    "--elim-avail-extern",
    "--globalopt",
    "--loweratomic",
    "--instcombine",
    "--early-cse-memssa",
    "--adce",
    "--mergefunc",
    "--jump-threading",
    "--lower-constant-intrinsics",
    "--ipsccp"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-instsimplify",
          "--ipsccp",
          "--bdce",
          "--sink",
          "--loop-rotate",
          "--adce",
          "--callsite-splitting",
          "--strip-debug-declare",
          "--barrier",
          "--licm",
          "--early-cse",
          "--partially-inline-libcalls",
          "--always-inline",
          "--early-cse-memssa",
          "--loop-simplify",
          "--post-inline-ee-instrument",
          "--lower-constant-intrinsics",
          "--functionattrs",
          "--ee-instrument",
          "--mergefunc",
          "--gvn-hoist",
          "--sroa",
          "--strip",
          "--loop-fusion",
          "--inline",
          "--loop-unroll-and-jam",
          "--irce"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+9.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-instsimplify",
      "--ipsccp",
      "--bdce",
      "--sink",
      "--loop-rotate",
      "--adce",
      "--callsite-splitting",
      "--strip-debug-declare",
      "--barrier",
      "--licm",
      "--early-cse",
      "--partially-inline-libcalls",
      "--always-inline",
      "--early-cse-memssa",
      "--loop-simplify",
      "--post-inline-ee-instrument",
      "--lower-constant-intrinsics",
      "--functionattrs",
      "--ee-instrument",
      "--mergefunc",
      "--gvn-hoist",
      "--sroa",
      "--strip",
      "--loop-fusion",
      "--inline",
      "--loop-unroll-and-jam",
      "--irce"
    ],
    "performance_vs_Oz": "+9.1%"
  }
}
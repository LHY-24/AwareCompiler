{
  "program_id": "linux-v0_1469.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 54,
    "onePredOneSuc": 42,
    "onePredTwoSuc": 9,
    "oneSuccessor": 53,
    "twoPred": 14,
    "twoPredOneSuc": 5,
    "twoEach": 6,
    "twoSuccessor": 21,
    "morePreds": 12,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 106,
    "BeginPhi": 0,
    "BranchCount": 74,
    "returnInt": 18,
    "CriticalCount": 32,
    "NumEdges": 134,
    "const32Bit": 389,
    "const64Bit": 52,
    "numConstZeroes": 194,
    "numConstOnes": 122,
    "UncondBranches": 53,
    "binaryConstArg": 41,
    "NumAShrInst": 5,
    "NumAddInst": 4,
    "NumAllocaInst": 75,
    "NumAndInst": 10,
    "BlockMid": 18,
    "BlockLow": 88,
    "NumBitCastInst": 31,
    "NumBrInst": 74,
    "NumCallInst": 56,
    "NumGetElementPtrInst": 127,
    "NumICmpInst": 22,
    "NumLShrInst": 2,
    "NumLoadInst": 267,
    "NumMulInst": 0,
    "NumOrInst": 10,
    "NumPHIInst": 0,
    "NumRetInst": 26,
    "NumSExtInst": 4,
    "NumSelectInst": 0,
    "NumShlInst": 13,
    "NumStoreInst": 141,
    "NumSubInst": 2,
    "NumTruncInst": 11,
    "NumXorInst": 4,
    "NumZExtInst": 31,
    "TotalBlocks": 106,
    "TotalInsts": 927,
    "TotalMemInst": 666,
    "TotalFuncs": 43,
    "ArgsPhi": 0,
    "testUnary": 423
  },
  "baseline_oz_instcount": 926,
  "knowledge_base_entry": [
    "--partially-inline-libcalls",
    "--gvn",
    "--mldst-motion",
    "--early-cse-memssa",
    "--aggressive-instcombine",
    "--dce",
    "--correlated-propagation",
    "--early-cse-memssa",
    "--loop-reroll",
    "--instcombine",
    "--aggressive-instcombine",
    "--jump-threading",
    "--slp-vectorizer",
    "--jump-threading",
    "--aggressive-instcombine",
    "--prune-eh",
    "--early-cse-memssa",
    "--ipsccp",
    "--lower-constant-intrinsics",
    "--early-cse",
    "--load-store-vectorizer",
    "--jump-threading",
    "--die",
    "--inline",
    "--early-cse",
    "--adce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--rpo-functionattrs",
          "--loop-unroll",
          "--aggressive-instcombine",
          "--globalopt",
          "--loop-simplify",
          "--sccp",
          "--strip",
          "--lcssa",
          "--inline",
          "--ipsccp"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--rpo-functionattrs",
      "--loop-unroll",
      "--aggressive-instcombine",
      "--globalopt",
      "--loop-simplify",
      "--sccp",
      "--strip",
      "--lcssa",
      "--inline",
      "--ipsccp"
    ],
    "performance_vs_Oz": "+0.4%"
  }
}
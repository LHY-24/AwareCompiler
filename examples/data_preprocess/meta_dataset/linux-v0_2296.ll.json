{
  "program_id": "linux-v0_2296.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 48,
    "onePredOneSuc": 38,
    "onePredTwoSuc": 6,
    "oneSuccessor": 48,
    "twoPred": 13,
    "twoPredOneSuc": 4,
    "twoEach": 6,
    "twoSuccessor": 13,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 79,
    "BeginPhi": 0,
    "BranchCount": 61,
    "returnInt": 14,
    "CriticalCount": 3,
    "NumEdges": 74,
    "const32Bit": 246,
    "const64Bit": 9,
    "numConstZeroes": 91,
    "numConstOnes": 127,
    "UncondBranches": 48,
    "binaryConstArg": 19,
    "NumAShrInst": 0,
    "NumAddInst": 11,
    "NumAllocaInst": 100,
    "NumAndInst": 4,
    "BlockMid": 16,
    "BlockLow": 63,
    "NumBitCastInst": 14,
    "NumBrInst": 61,
    "NumCallInst": 41,
    "NumGetElementPtrInst": 60,
    "NumICmpInst": 19,
    "NumLShrInst": 0,
    "NumLoadInst": 163,
    "NumMulInst": 0,
    "NumOrInst": 3,
    "NumPHIInst": 0,
    "NumRetInst": 18,
    "NumSExtInst": 8,
    "NumSelectInst": 0,
    "NumShlInst": 5,
    "NumStoreInst": 101,
    "NumSubInst": 0,
    "NumTruncInst": 6,
    "NumXorInst": 4,
    "NumZExtInst": 30,
    "TotalBlocks": 79,
    "TotalInsts": 648,
    "TotalMemInst": 465,
    "TotalFuncs": 29,
    "ArgsPhi": 0,
    "testUnary": 321
  },
  "baseline_oz_instcount": 648,
  "knowledge_base_entry": [
    "--load-store-vectorizer",
    "--aggressive-instcombine",
    "--flattencfg",
    "--sroa",
    "--die",
    "--lower-expect",
    "--loop-rotate",
    "--gvn-hoist",
    "--adce",
    "--loop-instsimplify",
    "--simplifycfg",
    "--prune-eh",
    "--gvn",
    "--inline",
    "--dse",
    "--lower-constant-intrinsics",
    "--newgvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-simplifycfg",
          "--loop-guard-widening",
          "--jump-threading",
          "--barrier",
          "--sccp",
          "--rpo-functionattrs",
          "--aggressive-instcombine",
          "--loop-unroll-and-jam",
          "--lower-widenable-condition",
          "--ee-instrument",
          "--called-value-propagation",
          "--forceattrs",
          "--lower-guard-intrinsic",
          "--loop-unswitch",
          "--simplifycfg",
          "--lower-constant-intrinsics",
          "--prune-eh",
          "--strip",
          "--instcombine",
          "--functionattrs",
          "--alignment-from-assumptions",
          "--loop-predication",
          "--newgvn",
          "--mergeicmps",
          "--mldst-motion",
          "--slsr",
          "--mem2reg",
          "--correlated-propagation",
          "--consthoist"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-simplifycfg",
      "--loop-guard-widening",
      "--jump-threading",
      "--barrier",
      "--sccp",
      "--rpo-functionattrs",
      "--aggressive-instcombine",
      "--loop-unroll-and-jam",
      "--lower-widenable-condition",
      "--ee-instrument",
      "--called-value-propagation",
      "--forceattrs",
      "--lower-guard-intrinsic",
      "--loop-unswitch",
      "--simplifycfg",
      "--lower-constant-intrinsics",
      "--prune-eh",
      "--strip",
      "--instcombine",
      "--functionattrs",
      "--alignment-from-assumptions",
      "--loop-predication",
      "--newgvn",
      "--mergeicmps",
      "--mldst-motion",
      "--slsr",
      "--mem2reg",
      "--correlated-propagation",
      "--consthoist"
    ],
    "performance_vs_Oz": "+0.8%"
  }
}
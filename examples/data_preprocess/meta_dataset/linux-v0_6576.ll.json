{
  "program_id": "linux-v0_6576.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 16,
    "onePredOneSuc": 11,
    "onePredTwoSuc": 5,
    "oneSuccessor": 13,
    "twoPred": 4,
    "twoPredOneSuc": 1,
    "twoEach": 2,
    "twoSuccessor": 9,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 30,
    "BeginPhi": 0,
    "BranchCount": 22,
    "returnInt": 5,
    "CriticalCount": 4,
    "NumEdges": 31,
    "const32Bit": 71,
    "const64Bit": 18,
    "numConstZeroes": 38,
    "numConstOnes": 22,
    "UncondBranches": 13,
    "binaryConstArg": 16,
    "NumAShrInst": 0,
    "NumAddInst": 4,
    "NumAllocaInst": 18,
    "NumAndInst": 6,
    "BlockMid": 5,
    "BlockLow": 25,
    "NumBitCastInst": 0,
    "NumBrInst": 22,
    "NumCallInst": 9,
    "NumGetElementPtrInst": 31,
    "NumICmpInst": 8,
    "NumLShrInst": 0,
    "NumLoadInst": 55,
    "NumMulInst": 0,
    "NumOrInst": 6,
    "NumPHIInst": 0,
    "NumRetInst": 8,
    "NumSExtInst": 4,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 29,
    "NumSubInst": 0,
    "NumTruncInst": 6,
    "NumXorInst": 0,
    "NumZExtInst": 15,
    "TotalBlocks": 30,
    "TotalInsts": 222,
    "TotalMemInst": 142,
    "TotalFuncs": 11,
    "ArgsPhi": 0,
    "testUnary": 98
  },
  "baseline_oz_instcount": 222,
  "knowledge_base_entry": [
    "--irce",
    "--jump-threading",
    "--elim-avail-extern",
    "--newgvn",
    "--loop-rotate",
    "--gvn-hoist",
    "--instsimplify",
    "--ipsccp",
    "--aggressive-instcombine",
    "--inline",
    "--jump-threading",
    "--slsr"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-reroll",
          "--always-inline",
          "--rpo-functionattrs",
          "--newgvn",
          "--strip-dead-prototypes",
          "--loop-sink",
          "--aggressive-instcombine",
          "--functionattrs",
          "--called-value-propagation",
          "--loop-interchange",
          "--lower-expect",
          "--partially-inline-libcalls",
          "--load-store-vectorizer",
          "--loop-unroll-and-jam",
          "--partial-inliner",
          "--inline",
          "--flattencfg",
          "--add-discriminators",
          "--loop-simplify",
          "--lower-constant-intrinsics",
          "--licm",
          "--adce",
          "--loop-versioning-licm"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+4.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-reroll",
      "--always-inline",
      "--rpo-functionattrs",
      "--newgvn",
      "--strip-dead-prototypes",
      "--loop-sink",
      "--aggressive-instcombine",
      "--functionattrs",
      "--called-value-propagation",
      "--loop-interchange",
      "--lower-expect",
      "--partially-inline-libcalls",
      "--load-store-vectorizer",
      "--loop-unroll-and-jam",
      "--partial-inliner",
      "--inline",
      "--flattencfg",
      "--add-discriminators",
      "--loop-simplify",
      "--lower-constant-intrinsics",
      "--licm",
      "--adce",
      "--loop-versioning-licm"
    ],
    "performance_vs_Oz": "+4.5%"
  }
}
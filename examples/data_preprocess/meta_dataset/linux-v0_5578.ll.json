{
  "program_id": "linux-v0_5578.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 40,
    "onePredOneSuc": 29,
    "onePredTwoSuc": 11,
    "oneSuccessor": 33,
    "twoPred": 9,
    "twoPredOneSuc": 4,
    "twoEach": 2,
    "twoSuccessor": 21,
    "morePreds": 5,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 73,
    "BeginPhi": 1,
    "BranchCount": 54,
    "returnInt": 20,
    "CriticalCount": 6,
    "NumEdges": 75,
    "const32Bit": 234,
    "const64Bit": 6,
    "numConstZeroes": 93,
    "numConstOnes": 95,
    "UncondBranches": 33,
    "binaryConstArg": 26,
    "NumAShrInst": 1,
    "NumAddInst": 2,
    "NumAllocaInst": 71,
    "NumAndInst": 13,
    "BlockMid": 13,
    "BlockLow": 61,
    "NumBitCastInst": 14,
    "NumBrInst": 54,
    "NumCallInst": 38,
    "NumGetElementPtrInst": 58,
    "NumICmpInst": 24,
    "NumLShrInst": 3,
    "NumLoadInst": 184,
    "NumMulInst": 2,
    "NumOrInst": 4,
    "NumPHIInst": 1,
    "NumRetInst": 20,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 4,
    "NumStoreInst": 101,
    "NumSubInst": 5,
    "NumTruncInst": 8,
    "NumXorInst": 6,
    "NumZExtInst": 15,
    "TotalBlocks": 74,
    "TotalInsts": 638,
    "TotalMemInst": 452,
    "TotalFuncs": 29,
    "ArgsPhi": 2,
    "testUnary": 300
  },
  "baseline_oz_instcount": 637,
  "knowledge_base_entry": [
    "--globaldce",
    "--ipsccp",
    "--loop-simplifycfg",
    "--loop-instsimplify",
    "--mergefunc",
    "--flattencfg",
    "--simplifycfg",
    "--licm",
    "--bdce",
    "--aggressive-instcombine",
    "--inline",
    "--newgvn",
    "--dse",
    "--sccp",
    "--dce",
    "--sccp",
    "--newgvn",
    "--aggressive-instcombine",
    "--ipsccp",
    "--reassociate",
    "--mergefunc",
    "--load-store-vectorizer",
    "--gvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--lowerswitch",
          "--aggressive-instcombine",
          "--ee-instrument",
          "--tailcallelim",
          "--simplifycfg",
          "--sancov",
          "--coro-early",
          "--coro-cleanup",
          "--redundant-dbg-inst-elim",
          "--partial-inliner",
          "--inferattrs",
          "--prune-eh",
          "--elim-avail-extern",
          "--ipconstprop",
          "--loop-unswitch",
          "--infer-address-spaces",
          "--loop-deletion",
          "--reassociate",
          "--loop-load-elim",
          "--loop-sink",
          "--loop-unroll",
          "--adce",
          "--loop-idiom",
          "--dse"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--lowerswitch",
      "--aggressive-instcombine",
      "--ee-instrument",
      "--tailcallelim",
      "--simplifycfg",
      "--sancov",
      "--coro-early",
      "--coro-cleanup",
      "--redundant-dbg-inst-elim",
      "--partial-inliner",
      "--inferattrs",
      "--prune-eh",
      "--elim-avail-extern",
      "--ipconstprop",
      "--loop-unswitch",
      "--infer-address-spaces",
      "--loop-deletion",
      "--reassociate",
      "--loop-load-elim",
      "--loop-sink",
      "--loop-unroll",
      "--adce",
      "--loop-idiom",
      "--dse"
    ],
    "performance_vs_Oz": "+1.6%"
  }
}
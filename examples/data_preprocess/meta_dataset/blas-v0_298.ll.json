{
  "program_id": "blas-v0_298.ll",
  "autophase_features": {
    "BBNumArgsHi": 11,
    "BBNumArgsLo": 9,
    "onePred": 46,
    "onePredOneSuc": 22,
    "onePredTwoSuc": 24,
    "oneSuccessor": 27,
    "twoPred": 20,
    "twoPredOneSuc": 1,
    "twoEach": 19,
    "twoSuccessor": 48,
    "morePreds": 9,
    "BB03Phi": 14,
    "BBHiPhi": 6,
    "BBNoPhi": 56,
    "BeginPhi": 20,
    "BranchCount": 75,
    "returnInt": 0,
    "CriticalCount": 50,
    "NumEdges": 123,
    "const32Bit": 117,
    "const64Bit": 99,
    "numConstZeroes": 55,
    "numConstOnes": 99,
    "UncondBranches": 27,
    "binaryConstArg": 59,
    "NumAShrInst": 0,
    "NumAddInst": 62,
    "NumAllocaInst": 1,
    "NumAndInst": 6,
    "BlockMid": 18,
    "BlockLow": 58,
    "NumBitCastInst": 76,
    "NumBrInst": 75,
    "NumCallInst": 4,
    "NumGetElementPtrInst": 90,
    "NumICmpInst": 44,
    "NumLShrInst": 1,
    "NumLoadInst": 80,
    "NumMulInst": 4,
    "NumOrInst": 11,
    "NumPHIInst": 55,
    "NumRetInst": 1,
    "NumSExtInst": 12,
    "NumSelectInst": 4,
    "NumShlInst": 6,
    "NumStoreInst": 25,
    "NumSubInst": 16,
    "NumTruncInst": 11,
    "NumXorInst": 0,
    "NumZExtInst": 16,
    "TotalBlocks": 76,
    "TotalInsts": 836,
    "TotalMemInst": 200,
    "TotalFuncs": 3,
    "ArgsPhi": 119,
    "testUnary": 200
  },
  "baseline_oz_instcount": 812,
  "knowledge_base_entry": [
    "--instsimplify",
    "--load-store-vectorizer",
    "--gvn",
    "--slp-vectorizer",
    "--mldst-motion",
    "--gvn",
    "--flattencfg",
    "--load-store-vectorizer",
    "--indvars",
    "--nary-reassociate",
    "--loop-simplifycfg",
    "--correlated-propagation",
    "--globalopt",
    "--instcombine",
    "--simplifycfg",
    "--loop-reroll",
    "--indvars",
    "--slsr",
    "--simplifycfg",
    "--flattencfg",
    "--globalopt",
    "--lower-expect",
    "--gvn",
    "--adce",
    "--bdce",
    "--simplifycfg",
    "--mem2reg",
    "--mldst-motion",
    "--dse",
    "--adce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-unroll-and-jam",
          "--instnamer",
          "--flattencfg",
          "--gvn-hoist",
          "--inferattrs",
          "--loop-rotate",
          "--loop-instsimplify",
          "--loop-simplify",
          "--nary-reassociate",
          "--barrier",
          "--post-inline-ee-instrument",
          "--lower-matrix-intrinsics",
          "--coro-elide",
          "--redundant-dbg-inst-elim",
          "--loop-interchange",
          "--jump-threading",
          "--lowerinvoke"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-unroll-and-jam",
      "--instnamer",
      "--flattencfg",
      "--gvn-hoist",
      "--inferattrs",
      "--loop-rotate",
      "--loop-instsimplify",
      "--loop-simplify",
      "--nary-reassociate",
      "--barrier",
      "--post-inline-ee-instrument",
      "--lower-matrix-intrinsics",
      "--coro-elide",
      "--redundant-dbg-inst-elim",
      "--loop-interchange",
      "--jump-threading",
      "--lowerinvoke"
    ],
    "performance_vs_Oz": "+1.1%"
  }
}
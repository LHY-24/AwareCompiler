{
  "program_id": "github-v0_34136.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 38,
    "onePredOneSuc": 30,
    "onePredTwoSuc": 8,
    "oneSuccessor": 39,
    "twoPred": 23,
    "twoPredOneSuc": 4,
    "twoEach": 15,
    "twoSuccessor": 24,
    "morePreds": 1,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 66,
    "BeginPhi": 2,
    "BranchCount": 63,
    "returnInt": 0,
    "CriticalCount": 15,
    "NumEdges": 87,
    "const32Bit": 64,
    "const64Bit": 32,
    "numConstZeroes": 25,
    "numConstOnes": 52,
    "UncondBranches": 39,
    "binaryConstArg": 24,
    "NumAShrInst": 0,
    "NumAddInst": 19,
    "NumAllocaInst": 37,
    "NumAndInst": 0,
    "BlockMid": 14,
    "BlockLow": 54,
    "NumBitCastInst": 7,
    "NumBrInst": 63,
    "NumCallInst": 15,
    "NumGetElementPtrInst": 31,
    "NumICmpInst": 24,
    "NumLShrInst": 0,
    "NumLoadInst": 175,
    "NumMulInst": 1,
    "NumOrInst": 0,
    "NumPHIInst": 2,
    "NumRetInst": 5,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 88,
    "NumSubInst": 3,
    "NumTruncInst": 7,
    "NumXorInst": 6,
    "NumZExtInst": 29,
    "TotalBlocks": 68,
    "TotalInsts": 516,
    "TotalMemInst": 346,
    "TotalFuncs": 6,
    "ArgsPhi": 4,
    "testUnary": 255
  },
  "baseline_oz_instcount": 442,
  "knowledge_base_entry": [
    "--die",
    "--aggressive-instcombine",
    "--ipsccp",
    "--inline",
    "--flattencfg",
    "--gvn",
    "--dse",
    "--correlated-propagation",
    "--reassociate",
    "--mergefunc",
    "--lower-constant-intrinsics",
    "--newgvn",
    "--die"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--gvn",
          "--lcssa",
          "--aggressive-instcombine",
          "--constmerge",
          "--argpromotion",
          "--load-store-vectorizer",
          "--always-inline",
          "--jump-threading",
          "--lower-expect",
          "--mergefunc",
          "--newgvn",
          "--scalarizer",
          "--reassociate",
          "--ipsccp",
          "--slsr",
          "--speculative-execution",
          "--loop-simplify"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--gvn",
      "--lcssa",
      "--aggressive-instcombine",
      "--constmerge",
      "--argpromotion",
      "--load-store-vectorizer",
      "--always-inline",
      "--jump-threading",
      "--lower-expect",
      "--mergefunc",
      "--newgvn",
      "--scalarizer",
      "--reassociate",
      "--ipsccp",
      "--slsr",
      "--speculative-execution",
      "--loop-simplify"
    ],
    "performance_vs_Oz": "+3.2%"
  }
}
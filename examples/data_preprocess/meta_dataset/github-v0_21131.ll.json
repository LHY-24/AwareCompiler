{
  "program_id": "github-v0_21131.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 4,
    "onePredOneSuc": 4,
    "onePredTwoSuc": 0,
    "oneSuccessor": 4,
    "twoPred": 2,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 2,
    "morePreds": 0,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 7,
    "BeginPhi": 2,
    "BranchCount": 6,
    "returnInt": 1,
    "CriticalCount": 0,
    "NumEdges": 8,
    "const32Bit": 9,
    "const64Bit": 0,
    "numConstZeroes": 3,
    "numConstOnes": 3,
    "UncondBranches": 4,
    "binaryConstArg": 22,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 0,
    "NumAndInst": 2,
    "BlockMid": 3,
    "BlockLow": 6,
    "NumBitCastInst": 0,
    "NumBrInst": 6,
    "NumCallInst": 11,
    "NumGetElementPtrInst": 4,
    "NumICmpInst": 2,
    "NumLShrInst": 0,
    "NumLoadInst": 0,
    "NumMulInst": 1,
    "NumOrInst": 3,
    "NumPHIInst": 2,
    "NumRetInst": 3,
    "NumSExtInst": 4,
    "NumSelectInst": 6,
    "NumShlInst": 1,
    "NumStoreInst": 4,
    "NumSubInst": 1,
    "NumTruncInst": 1,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 9,
    "TotalInsts": 104,
    "TotalMemInst": 19,
    "TotalFuncs": 6,
    "ArgsPhi": 4,
    "testUnary": 31
  },
  "baseline_oz_instcount": 104,
  "knowledge_base_entry": [
    "--lower-constant-intrinsics",
    "--aggressive-instcombine",
    "--loop-instsimplify",
    "--sccp",
    "--reassociate",
    "--jump-threading",
    "--die",
    "--slp-vectorizer",
    "--mldst-motion",
    "--early-cse",
    "--loop-rotate",
    "--dse",
    "--load-store-vectorizer"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--alignment-from-assumptions",
          "--mergefunc",
          "--div-rem-pairs",
          "--strip-debug-declare",
          "--insert-gcov-profiling",
          "--canonicalize-aliases",
          "--loop-simplifycfg",
          "--add-discriminators",
          "--rewrite-statepoints-for-gc",
          "--globalsplit",
          "--constmerge",
          "--loop-instsimplify",
          "--loop-versioning",
          "--slp-vectorizer",
          "--partial-inliner",
          "--attributor",
          "--mldst-motion",
          "--ee-instrument",
          "--loop-data-prefetch",
          "--lower-constant-intrinsics",
          "--coro-elide",
          "--flattencfg",
          "--loop-simplify",
          "--strip",
          "--adce",
          "--lower-guard-intrinsic"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--alignment-from-assumptions",
      "--mergefunc",
      "--div-rem-pairs",
      "--strip-debug-declare",
      "--insert-gcov-profiling",
      "--canonicalize-aliases",
      "--loop-simplifycfg",
      "--add-discriminators",
      "--rewrite-statepoints-for-gc",
      "--globalsplit",
      "--constmerge",
      "--loop-instsimplify",
      "--loop-versioning",
      "--slp-vectorizer",
      "--partial-inliner",
      "--attributor",
      "--mldst-motion",
      "--ee-instrument",
      "--loop-data-prefetch",
      "--lower-constant-intrinsics",
      "--coro-elide",
      "--flattencfg",
      "--loop-simplify",
      "--strip",
      "--adce",
      "--lower-guard-intrinsic"
    ],
    "performance_vs_Oz": "+1.9%"
  }
}
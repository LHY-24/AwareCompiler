{
  "program_id": "github-v0_40625.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 15,
    "onePredOneSuc": 10,
    "onePredTwoSuc": 3,
    "oneSuccessor": 13,
    "twoPred": 6,
    "twoPredOneSuc": 3,
    "twoEach": 2,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 24,
    "BeginPhi": 0,
    "BranchCount": 20,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 27,
    "const32Bit": 51,
    "const64Bit": 94,
    "numConstZeroes": 90,
    "numConstOnes": 32,
    "UncondBranches": 13,
    "binaryConstArg": 29,
    "NumAShrInst": 0,
    "NumAddInst": 6,
    "NumAllocaInst": 13,
    "NumAndInst": 9,
    "BlockMid": 7,
    "BlockLow": 17,
    "NumBitCastInst": 12,
    "NumBrInst": 20,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 54,
    "NumICmpInst": 7,
    "NumLShrInst": 8,
    "NumLoadInst": 45,
    "NumMulInst": 0,
    "NumOrInst": 9,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 4,
    "NumStoreInst": 27,
    "NumSubInst": 2,
    "NumTruncInst": 6,
    "NumXorInst": 1,
    "NumZExtInst": 5,
    "TotalBlocks": 24,
    "TotalInsts": 242,
    "TotalMemInst": 146,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 84
  },
  "baseline_oz_instcount": 242,
  "knowledge_base_entry": [
    "--mergereturn",
    "--jump-threading",
    "--instsimplify",
    "--lower-constant-intrinsics",
    "--aggressive-instcombine",
    "--prune-eh",
    "--instcombine",
    "--die",
    "--dse",
    "--elim-avail-extern",
    "--memcpyopt",
    "--simplifycfg",
    "-loop-reduce",
    "--slp-vectorizer"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--lower-matrix-intrinsics",
          "--loop-vectorize",
          "--libcalls-shrinkwrap",
          "--separate-const-offset-from-gep",
          "--deadargelim",
          "--consthoist",
          "--tailcallelim",
          "--globalopt",
          "--cross-dso-cfi",
          "--gvn",
          "--loop-versioning",
          "--gvn-hoist",
          "--lower-widenable-condition",
          "--constmerge",
          "--globalsplit",
          "--newgvn",
          "--mergefunc",
          "--partially-inline-libcalls",
          "--licm",
          "--jump-threading",
          "--mem2reg",
          "--aggressive-instcombine",
          "--sancov",
          "--prune-eh",
          "--sccp",
          "--indvars",
          "--load-store-vectorizer",
          "--simplifycfg",
          "--insert-gcov-profiling"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+4.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--lower-matrix-intrinsics",
      "--loop-vectorize",
      "--libcalls-shrinkwrap",
      "--separate-const-offset-from-gep",
      "--deadargelim",
      "--consthoist",
      "--tailcallelim",
      "--globalopt",
      "--cross-dso-cfi",
      "--gvn",
      "--loop-versioning",
      "--gvn-hoist",
      "--lower-widenable-condition",
      "--constmerge",
      "--globalsplit",
      "--newgvn",
      "--mergefunc",
      "--partially-inline-libcalls",
      "--licm",
      "--jump-threading",
      "--mem2reg",
      "--aggressive-instcombine",
      "--sancov",
      "--prune-eh",
      "--sccp",
      "--indvars",
      "--load-store-vectorizer",
      "--simplifycfg",
      "--insert-gcov-profiling"
    ],
    "performance_vs_Oz": "+4.1%"
  }
}
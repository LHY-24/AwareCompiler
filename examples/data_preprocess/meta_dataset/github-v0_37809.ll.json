{
  "program_id": "github-v0_37809.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 2,
    "onePredOneSuc": 2,
    "onePredTwoSuc": 0,
    "oneSuccessor": 2,
    "twoPred": 2,
    "twoPredOneSuc": 0,
    "twoEach": 1,
    "twoSuccessor": 2,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 5,
    "BeginPhi": 0,
    "BranchCount": 4,
    "returnInt": 0,
    "CriticalCount": 2,
    "NumEdges": 6,
    "const32Bit": 32,
    "const64Bit": 5,
    "numConstZeroes": 21,
    "numConstOnes": 11,
    "UncondBranches": 2,
    "binaryConstArg": 7,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 2,
    "NumAndInst": 2,
    "BlockMid": 1,
    "BlockLow": 4,
    "NumBitCastInst": 0,
    "NumBrInst": 4,
    "NumCallInst": 0,
    "NumGetElementPtrInst": 13,
    "NumICmpInst": 2,
    "NumLShrInst": 3,
    "NumLoadInst": 17,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 1,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 7,
    "NumSubInst": 0,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 2,
    "TotalBlocks": 5,
    "TotalInsts": 57,
    "TotalMemInst": 39,
    "TotalFuncs": 1,
    "ArgsPhi": 0,
    "testUnary": 23
  },
  "baseline_oz_instcount": 57,
  "knowledge_base_entry": [
    "--loop-predication",
    "--early-cse",
    "--aggressive-instcombine",
    "--dce",
    "--mergefunc",
    "--lower-constant-intrinsics",
    "--mergefunc",
    "--slp-vectorizer",
    "--indvars",
    "--slsr",
    "--loop-simplifycfg",
    "--inline",
    "--globalopt",
    "--loop-deletion"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--reassociate",
          "--speculative-execution",
          "--dce",
          "--aggressive-instcombine",
          "--called-value-propagation",
          "--loop-instsimplify",
          "--cross-dso-cfi",
          "--newgvn",
          "--adce",
          "--float2int",
          "--correlated-propagation",
          "--globaldce",
          "--strip-debug-declare",
          "--insert-gcov-profiling",
          "--strip",
          "--ipconstprop",
          "--functionattrs",
          "--flattencfg",
          "--post-inline-ee-instrument",
          "--strip-dead-prototypes",
          "--licm",
          "--callsite-splitting",
          "--slp-vectorizer"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+7.0%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--reassociate",
      "--speculative-execution",
      "--dce",
      "--aggressive-instcombine",
      "--called-value-propagation",
      "--loop-instsimplify",
      "--cross-dso-cfi",
      "--newgvn",
      "--adce",
      "--float2int",
      "--correlated-propagation",
      "--globaldce",
      "--strip-debug-declare",
      "--insert-gcov-profiling",
      "--strip",
      "--ipconstprop",
      "--functionattrs",
      "--flattencfg",
      "--post-inline-ee-instrument",
      "--strip-dead-prototypes",
      "--licm",
      "--callsite-splitting",
      "--slp-vectorizer"
    ],
    "performance_vs_Oz": "+7.0%"
  }
}
{
  "program_id": "github-v0_26876.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 4,
    "onePred": 102,
    "onePredOneSuc": 63,
    "onePredTwoSuc": 36,
    "oneSuccessor": 92,
    "twoPred": 51,
    "twoPredOneSuc": 24,
    "twoEach": 19,
    "twoSuccessor": 67,
    "morePreds": 10,
    "BB03Phi": 4,
    "BBHiPhi": 0,
    "BBNoPhi": 176,
    "BeginPhi": 4,
    "BranchCount": 159,
    "returnInt": 35,
    "CriticalCount": 54,
    "NumEdges": 239,
    "const32Bit": 284,
    "const64Bit": 14,
    "numConstZeroes": 149,
    "numConstOnes": 114,
    "UncondBranches": 92,
    "binaryConstArg": 7,
    "NumAShrInst": 0,
    "NumAddInst": 7,
    "NumAllocaInst": 66,
    "NumAndInst": 0,
    "BlockMid": 4,
    "BlockLow": 176,
    "NumBitCastInst": 3,
    "NumBrInst": 159,
    "NumCallInst": 60,
    "NumGetElementPtrInst": 95,
    "NumICmpInst": 70,
    "NumLShrInst": 0,
    "NumLoadInst": 291,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 4,
    "NumRetInst": 17,
    "NumSExtInst": 20,
    "NumSelectInst": 1,
    "NumShlInst": 0,
    "NumStoreInst": 119,
    "NumSubInst": 5,
    "NumTruncInst": 8,
    "NumXorInst": 1,
    "NumZExtInst": 10,
    "TotalBlocks": 180,
    "TotalInsts": 948,
    "TotalMemInst": 631,
    "TotalFuncs": 36,
    "ArgsPhi": 8,
    "testUnary": 406
  },
  "baseline_oz_instcount": 932,
  "knowledge_base_entry": [
    "--scalarizer",
    "--early-cse",
    "--aggressive-instcombine",
    "--reassociate",
    "--aggressive-instcombine",
    "--mergefunc",
    "--dce",
    "--simplifycfg",
    "--inline",
    "--load-store-vectorizer",
    "--early-cse-memssa",
    "--sroa",
    "--bdce",
    "--jump-threading",
    "--lower-constant-intrinsics",
    "--dse",
    "--jump-threading",
    "--memcpyopt",
    "--mem2reg",
    "--mldst-motion",
    "--lower-constant-intrinsics",
    "--memcpyopt",
    "--newgvn",
    "--ipsccp",
    "--globaldce",
    "--ipsccp",
    "--gvn",
    "--correlated-propagation"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--ee-instrument",
          "--loop-sink",
          "--attributor",
          "--loop-data-prefetch",
          "--inferattrs",
          "--memcpyopt",
          "--alignment-from-assumptions",
          "--loop-unroll-and-jam",
          "--loop-simplifycfg",
          "--functionattrs",
          "--strip-nondebug",
          "--lower-constant-intrinsics",
          "--elim-avail-extern",
          "--mem2reg",
          "--loop-unswitch",
          "--dce",
          "--irce",
          "--instcombine",
          "--pgo-memop-opt",
          "--aggressive-instcombine",
          "--rewrite-statepoints-for-gc",
          "--correlated-propagation",
          "--loop-simplify",
          "--loop-vectorize",
          "--strip",
          "--sancov",
          "--early-cse",
          "--callsite-splitting",
          "--globalopt"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--ee-instrument",
      "--loop-sink",
      "--attributor",
      "--loop-data-prefetch",
      "--inferattrs",
      "--memcpyopt",
      "--alignment-from-assumptions",
      "--loop-unroll-and-jam",
      "--loop-simplifycfg",
      "--functionattrs",
      "--strip-nondebug",
      "--lower-constant-intrinsics",
      "--elim-avail-extern",
      "--mem2reg",
      "--loop-unswitch",
      "--dce",
      "--irce",
      "--instcombine",
      "--pgo-memop-opt",
      "--aggressive-instcombine",
      "--rewrite-statepoints-for-gc",
      "--correlated-propagation",
      "--loop-simplify",
      "--loop-vectorize",
      "--strip",
      "--sancov",
      "--early-cse",
      "--callsite-splitting",
      "--globalopt"
    ],
    "performance_vs_Oz": "+0.4%"
  }
}
{
  "program_id": "linux-v0_6962.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 78,
    "onePredOneSuc": 63,
    "onePredTwoSuc": 7,
    "oneSuccessor": 75,
    "twoPred": 7,
    "twoPredOneSuc": 2,
    "twoEach": 3,
    "twoSuccessor": 12,
    "morePreds": 7,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 103,
    "BeginPhi": 1,
    "BranchCount": 87,
    "returnInt": 2,
    "CriticalCount": 4,
    "NumEdges": 124,
    "const32Bit": 150,
    "const64Bit": 16,
    "numConstZeroes": 59,
    "numConstOnes": 84,
    "UncondBranches": 75,
    "binaryConstArg": 15,
    "NumAShrInst": 1,
    "NumAddInst": 3,
    "NumAllocaInst": 61,
    "NumAndInst": 3,
    "BlockMid": 10,
    "BlockLow": 94,
    "NumBitCastInst": 53,
    "NumBrInst": 87,
    "NumCallInst": 41,
    "NumGetElementPtrInst": 34,
    "NumICmpInst": 16,
    "NumLShrInst": 0,
    "NumLoadInst": 179,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 1,
    "NumRetInst": 12,
    "NumSExtInst": 7,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 87,
    "NumSubInst": 3,
    "NumTruncInst": 3,
    "NumXorInst": 9,
    "NumZExtInst": 19,
    "TotalBlocks": 104,
    "TotalInsts": 629,
    "TotalMemInst": 402,
    "TotalFuncs": 19,
    "ArgsPhi": 2,
    "testUnary": 326
  },
  "baseline_oz_instcount": 629,
  "knowledge_base_entry": [
    "--newgvn",
    "--die",
    "--gvn-hoist",
    "--early-cse",
    "--dce",
    "--mergefunc",
    "--early-cse-memssa",
    "--gvn",
    "--memcpyopt"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--instnamer",
          "--hotcoldsplit",
          "--coro-split",
          "--redundant-dbg-inst-elim",
          "--add-discriminators",
          "--partially-inline-libcalls",
          "--mergeicmps",
          "--newgvn",
          "--speculative-execution",
          "--loop-guard-widening",
          "--irce",
          "--float2int",
          "--simple-loop-unswitch",
          "--loop-simplify",
          "--loop-versioning",
          "--barrier",
          "--constprop",
          "--mergefunc",
          "--loweratomic",
          "--alignment-from-assumptions",
          "--partial-inliner",
          "--inline",
          "--insert-gcov-profiling",
          "--inferattrs",
          "--infer-address-spaces",
          "--die",
          "--simplifycfg",
          "--coro-early",
          "--argpromotion"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--instnamer",
      "--hotcoldsplit",
      "--coro-split",
      "--redundant-dbg-inst-elim",
      "--add-discriminators",
      "--partially-inline-libcalls",
      "--mergeicmps",
      "--newgvn",
      "--speculative-execution",
      "--loop-guard-widening",
      "--irce",
      "--float2int",
      "--simple-loop-unswitch",
      "--loop-simplify",
      "--loop-versioning",
      "--barrier",
      "--constprop",
      "--mergefunc",
      "--loweratomic",
      "--alignment-from-assumptions",
      "--partial-inliner",
      "--inline",
      "--insert-gcov-profiling",
      "--inferattrs",
      "--infer-address-spaces",
      "--die",
      "--simplifycfg",
      "--coro-early",
      "--argpromotion"
    ],
    "performance_vs_Oz": "+0.2%"
  }
}
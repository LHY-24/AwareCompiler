{
  "program_id": "github-v0_17776.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 37,
    "onePredOneSuc": 31,
    "onePredTwoSuc": 3,
    "oneSuccessor": 40,
    "twoPred": 13,
    "twoPredOneSuc": 5,
    "twoEach": 4,
    "twoSuccessor": 10,
    "morePreds": 4,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 59,
    "BeginPhi": 0,
    "BranchCount": 49,
    "returnInt": 8,
    "CriticalCount": 7,
    "NumEdges": 81,
    "const32Bit": 259,
    "const64Bit": 57,
    "numConstZeroes": 198,
    "numConstOnes": 76,
    "UncondBranches": 40,
    "binaryConstArg": 6,
    "NumAShrInst": 0,
    "NumAddInst": 6,
    "NumAllocaInst": 25,
    "NumAndInst": 1,
    "BlockMid": 7,
    "BlockLow": 52,
    "NumBitCastInst": 2,
    "NumBrInst": 49,
    "NumCallInst": 32,
    "NumGetElementPtrInst": 136,
    "NumICmpInst": 9,
    "NumLShrInst": 0,
    "NumLoadInst": 124,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 5,
    "NumSExtInst": 18,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 63,
    "NumSubInst": 0,
    "NumTruncInst": 5,
    "NumXorInst": 0,
    "NumZExtInst": 9,
    "TotalBlocks": 59,
    "TotalInsts": 491,
    "TotalMemInst": 380,
    "TotalFuncs": 15,
    "ArgsPhi": 0,
    "testUnary": 183
  },
  "baseline_oz_instcount": 492,
  "knowledge_base_entry": [
    "--bdce",
    "--aggressive-instcombine",
    "--loop-rotate",
    "--jump-threading",
    "--gvn",
    "--early-cse",
    "--gvn-hoist",
    "--reassociate",
    "--die",
    "--lower-expect",
    "--newgvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--aggressive-instcombine",
          "--loop-vectorize",
          "--attributor",
          "--strip-debug-declare",
          "--globalsplit",
          "--loop-data-prefetch",
          "--callsite-splitting",
          "--partial-inliner",
          "--early-cse-memssa",
          "--sink",
          "--guard-widening",
          "--pgo-memop-opt",
          "--constmerge",
          "--argpromotion",
          "--loop-versioning-licm",
          "--partially-inline-libcalls",
          "--loop-simplifycfg",
          "--simple-loop-unswitch",
          "--nary-reassociate",
          "--loop-guard-widening",
          "--reassociate",
          "--scalarizer"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--aggressive-instcombine",
      "--loop-vectorize",
      "--attributor",
      "--strip-debug-declare",
      "--globalsplit",
      "--loop-data-prefetch",
      "--callsite-splitting",
      "--partial-inliner",
      "--early-cse-memssa",
      "--sink",
      "--guard-widening",
      "--pgo-memop-opt",
      "--constmerge",
      "--argpromotion",
      "--loop-versioning-licm",
      "--partially-inline-libcalls",
      "--loop-simplifycfg",
      "--simple-loop-unswitch",
      "--nary-reassociate",
      "--loop-guard-widening",
      "--reassociate",
      "--scalarizer"
    ],
    "performance_vs_Oz": "+1.4%"
  }
}
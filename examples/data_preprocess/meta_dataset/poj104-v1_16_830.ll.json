{
  "program_id": "poj104-v1_16_830.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 13,
    "onePredOneSuc": 10,
    "onePredTwoSuc": 3,
    "oneSuccessor": 13,
    "twoPred": 4,
    "twoPredOneSuc": 3,
    "twoEach": 0,
    "twoSuccessor": 4,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 21,
    "BeginPhi": 0,
    "BranchCount": 17,
    "returnInt": 7,
    "CriticalCount": 1,
    "NumEdges": 27,
    "const32Bit": 38,
    "const64Bit": 12,
    "numConstZeroes": 1,
    "numConstOnes": 9,
    "UncondBranches": 13,
    "binaryConstArg": 16,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 7,
    "NumAndInst": 0,
    "BlockMid": 3,
    "BlockLow": 18,
    "NumBitCastInst": 12,
    "NumBrInst": 17,
    "NumCallInst": 21,
    "NumGetElementPtrInst": 0,
    "NumICmpInst": 4,
    "NumLShrInst": 0,
    "NumLoadInst": 35,
    "NumMulInst": 10,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 15,
    "NumSubInst": 10,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 21,
    "TotalInsts": 141,
    "TotalMemInst": 78,
    "TotalFuncs": 10,
    "ArgsPhi": 0,
    "testUnary": 54
  },
  "baseline_oz_instcount": 52,
  "knowledge_base_entry": [
    "--scalarizer",
    "--instcombine",
    "--mem2reg",
    "--prune-eh",
    "--gvn",
    "--licm",
    "--inline",
    "--load-store-vectorizer",
    "--gvn",
    "--load-store-vectorizer",
    "--loop-simplifycfg",
    "--instcombine",
    "--load-store-vectorizer",
    "--slp-vectorizer",
    "--correlated-propagation",
    "--adce",
    "--sccp",
    "--dce",
    "--lower-constant-intrinsics",
    "--dse",
    "--early-cse-memssa",
    "--dse",
    "--jump-threading",
    "--die",
    "--lower-constant-intrinsics",
    "--dse",
    "--early-cse-memssa",
    "--dse",
    "--jump-threading",
    "--dce",
    "--gvn-hoist",
    "--lower-expect",
    "--dse",
    "--sroa",
    "--slp-vectorizer",
    "--indvars",
    "--sroa",
    "--nary-reassociate",
    "--early-cse-memssa",
    "--slsr",
    "--indvars",
    "--newgvn",
    "--inline",
    "--instcombine",
    "--slsr",
    "--early-cse",
    "--ipsccp"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--dse",
          "--slsr",
          "--reg2mem",
          "--loop-simplifycfg",
          "--loop-predication",
          "--scalarizer",
          "--tailcallelim",
          "--memcpyopt",
          "--instcombine",
          "--inline",
          "--lowerswitch",
          "--attributor",
          "--gvn-hoist",
          "--mergereturn",
          "--lower-constant-intrinsics",
          "--alignment-from-assumptions",
          "--add-discriminators",
          "--loop-versioning",
          "--lcssa",
          "--mem2reg",
          "--jump-threading",
          "--correlated-propagation",
          "--sink",
          "--inferattrs",
          "--newgvn",
          "--sccp"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+11.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--dse",
      "--slsr",
      "--reg2mem",
      "--loop-simplifycfg",
      "--loop-predication",
      "--scalarizer",
      "--tailcallelim",
      "--memcpyopt",
      "--instcombine",
      "--inline",
      "--lowerswitch",
      "--attributor",
      "--gvn-hoist",
      "--mergereturn",
      "--lower-constant-intrinsics",
      "--alignment-from-assumptions",
      "--add-discriminators",
      "--loop-versioning",
      "--lcssa",
      "--mem2reg",
      "--jump-threading",
      "--correlated-propagation",
      "--sink",
      "--inferattrs",
      "--newgvn",
      "--sccp"
    ],
    "performance_vs_Oz": "+11.5%"
  }
}
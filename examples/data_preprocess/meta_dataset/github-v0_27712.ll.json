{
  "program_id": "github-v0_27712.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 35,
    "onePredOneSuc": 15,
    "onePredTwoSuc": 20,
    "oneSuccessor": 29,
    "twoPred": 24,
    "twoPredOneSuc": 11,
    "twoEach": 12,
    "twoSuccessor": 33,
    "morePreds": 3,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 62,
    "BeginPhi": 1,
    "BranchCount": 62,
    "returnInt": 0,
    "CriticalCount": 34,
    "NumEdges": 95,
    "const32Bit": 57,
    "const64Bit": 14,
    "numConstZeroes": 12,
    "numConstOnes": 23,
    "UncondBranches": 29,
    "binaryConstArg": 7,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 10,
    "NumAndInst": 1,
    "BlockMid": 1,
    "BlockLow": 62,
    "NumBitCastInst": 0,
    "NumBrInst": 62,
    "NumCallInst": 3,
    "NumGetElementPtrInst": 14,
    "NumICmpInst": 34,
    "NumLShrInst": 0,
    "NumLoadInst": 74,
    "NumMulInst": 1,
    "NumOrInst": 0,
    "NumPHIInst": 1,
    "NumRetInst": 1,
    "NumSExtInst": 28,
    "NumSelectInst": 1,
    "NumShlInst": 0,
    "NumStoreInst": 34,
    "NumSubInst": 4,
    "NumTruncInst": 4,
    "NumXorInst": 0,
    "NumZExtInst": 3,
    "TotalBlocks": 63,
    "TotalInsts": 278,
    "TotalMemInst": 135,
    "TotalFuncs": 3,
    "ArgsPhi": 2,
    "testUnary": 119
  },
  "baseline_oz_instcount": 278,
  "knowledge_base_entry": [
    "--loop-load-elim",
    "--early-cse-memssa",
    "--adce",
    "--sccp",
    "--gvn",
    "--loop-deletion",
    "--newgvn",
    "--loop-rotate",
    "--instsimplify",
    "--sroa",
    "--adce",
    "--gvn-hoist",
    "--loop-simplifycfg",
    "--elim-avail-extern",
    "--early-cse",
    "--loop-fusion",
    "--gvn-hoist",
    "--correlated-propagation",
    "--sroa",
    "--globalopt",
    "--ipsccp",
    "--lower-constant-intrinsics",
    "--dce",
    "--ipsccp",
    "--aggressive-instcombine",
    "--die",
    "--gvn",
    "--gvn",
    "--load-store-vectorizer",
    "--instsimplify",
    "--dce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--rewrite-statepoints-for-gc",
          "--name-anon-globals",
          "--bdce",
          "--loop-data-prefetch",
          "--lowerinvoke",
          "--gvn-hoist",
          "--memcpyopt",
          "--reassociate",
          "--aggressive-instcombine",
          "--loop-reroll",
          "--lower-matrix-intrinsics",
          "--partial-inliner",
          "--early-cse-memssa",
          "--load-store-vectorizer",
          "--attributor",
          "--instcombine",
          "--lower-widenable-condition",
          "--loop-simplify",
          "--always-inline",
          "--instsimplify",
          "--slp-vectorizer",
          "--strip-nondebug"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--rewrite-statepoints-for-gc",
      "--name-anon-globals",
      "--bdce",
      "--loop-data-prefetch",
      "--lowerinvoke",
      "--gvn-hoist",
      "--memcpyopt",
      "--reassociate",
      "--aggressive-instcombine",
      "--loop-reroll",
      "--lower-matrix-intrinsics",
      "--partial-inliner",
      "--early-cse-memssa",
      "--load-store-vectorizer",
      "--attributor",
      "--instcombine",
      "--lower-widenable-condition",
      "--loop-simplify",
      "--always-inline",
      "--instsimplify",
      "--slp-vectorizer",
      "--strip-nondebug"
    ],
    "performance_vs_Oz": "+2.2%"
  }
}
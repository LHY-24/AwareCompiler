{
  "program_id": "github-v0_5066.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 8,
    "onePredOneSuc": 3,
    "onePredTwoSuc": 1,
    "oneSuccessor": 6,
    "twoPred": 4,
    "twoPredOneSuc": 2,
    "twoEach": 2,
    "twoSuccessor": 5,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 16,
    "BeginPhi": 0,
    "BranchCount": 10,
    "returnInt": 4,
    "CriticalCount": 2,
    "NumEdges": 16,
    "const32Bit": 18,
    "const64Bit": 0,
    "numConstZeroes": 9,
    "numConstOnes": 7,
    "UncondBranches": 6,
    "binaryConstArg": 0,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 6,
    "NumAndInst": 0,
    "BlockMid": 0,
    "BlockLow": 16,
    "NumBitCastInst": 0,
    "NumBrInst": 10,
    "NumCallInst": 8,
    "NumGetElementPtrInst": 2,
    "NumICmpInst": 4,
    "NumLShrInst": 0,
    "NumLoadInst": 5,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 4,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 5,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 16,
    "TotalInsts": 46,
    "TotalMemInst": 26,
    "TotalFuncs": 8,
    "ArgsPhi": 0,
    "testUnary": 11
  },
  "baseline_oz_instcount": 47,
  "knowledge_base_entry": [
    "--loop-unroll",
    "--early-cse-memssa",
    "--instsimplify",
    "--simplifycfg",
    "--mem2reg",
    "--inline",
    "--reassociate",
    "--early-cse",
    "--gvn-hoist",
    "--elim-avail-extern",
    "--newgvn",
    "--slsr",
    "-loop-reduce",
    "--sroa",
    "--jump-threading",
    "--instcombine",
    "--dce",
    "--mergefunc",
    "--slp-vectorizer",
    "--loop-simplifycfg",
    "--lower-constant-intrinsics",
    "--mem2reg",
    "--aggressive-instcombine",
    "--inline",
    "--memcpyopt",
    "--sroa"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--inject-tli-mappings",
          "--bdce",
          "--loop-unroll",
          "--sancov",
          "--lcssa",
          "--inferattrs",
          "--constmerge",
          "--dce",
          "--jump-threading",
          "--sroa",
          "--inline",
          "--strip-debug-declare",
          "--mldst-motion"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--inject-tli-mappings",
      "--bdce",
      "--loop-unroll",
      "--sancov",
      "--lcssa",
      "--inferattrs",
      "--constmerge",
      "--dce",
      "--jump-threading",
      "--sroa",
      "--inline",
      "--strip-debug-declare",
      "--mldst-motion"
    ],
    "performance_vs_Oz": "+2.1%"
  }
}
{
  "program_id": "linux-v0_3201.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 39,
    "onePredOneSuc": 28,
    "onePredTwoSuc": 10,
    "oneSuccessor": 37,
    "twoPred": 17,
    "twoPredOneSuc": 6,
    "twoEach": 7,
    "twoSuccessor": 21,
    "morePreds": 2,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 66,
    "BeginPhi": 2,
    "BranchCount": 58,
    "returnInt": 9,
    "CriticalCount": 8,
    "NumEdges": 79,
    "const32Bit": 176,
    "const64Bit": 6,
    "numConstZeroes": 48,
    "numConstOnes": 98,
    "UncondBranches": 37,
    "binaryConstArg": 10,
    "NumAShrInst": 0,
    "NumAddInst": 13,
    "NumAllocaInst": 86,
    "NumAndInst": 0,
    "BlockMid": 17,
    "BlockLow": 51,
    "NumBitCastInst": 4,
    "NumBrInst": 58,
    "NumCallInst": 37,
    "NumGetElementPtrInst": 39,
    "NumICmpInst": 20,
    "NumLShrInst": 0,
    "NumLoadInst": 217,
    "NumMulInst": 5,
    "NumOrInst": 0,
    "NumPHIInst": 2,
    "NumRetInst": 10,
    "NumSExtInst": 18,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 109,
    "NumSubInst": 3,
    "NumTruncInst": 12,
    "NumXorInst": 0,
    "NumZExtInst": 10,
    "TotalBlocks": 68,
    "TotalInsts": 648,
    "TotalMemInst": 488,
    "TotalFuncs": 18,
    "ArgsPhi": 4,
    "testUnary": 347
  },
  "baseline_oz_instcount": 649,
  "knowledge_base_entry": [
    "--aggressive-instcombine",
    "--early-cse",
    "--dse",
    "--gvn",
    "--early-cse-memssa",
    "--correlated-propagation",
    "--adce",
    "--dce",
    "--gvn",
    "--aggressive-instcombine"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--globaldce",
          "--mergeicmps",
          "--jump-threading",
          "--loweratomic",
          "--ee-instrument",
          "--gvn-hoist",
          "--lower-matrix-intrinsics",
          "--slp-vectorizer",
          "--add-discriminators",
          "--instnamer"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--globaldce",
      "--mergeicmps",
      "--jump-threading",
      "--loweratomic",
      "--ee-instrument",
      "--gvn-hoist",
      "--lower-matrix-intrinsics",
      "--slp-vectorizer",
      "--add-discriminators",
      "--instnamer"
    ],
    "performance_vs_Oz": "+0.2%"
  }
}
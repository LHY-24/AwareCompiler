{
  "program_id": "github-v0_41130.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 31,
    "onePredOneSuc": 22,
    "onePredTwoSuc": 9,
    "oneSuccessor": 30,
    "twoPred": 16,
    "twoPredOneSuc": 5,
    "twoEach": 6,
    "twoSuccessor": 18,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 54,
    "BeginPhi": 0,
    "BranchCount": 48,
    "returnInt": 3,
    "CriticalCount": 6,
    "NumEdges": 66,
    "const32Bit": 52,
    "const64Bit": 15,
    "numConstZeroes": 20,
    "numConstOnes": 33,
    "UncondBranches": 30,
    "binaryConstArg": 3,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 28,
    "NumAndInst": 0,
    "BlockMid": 3,
    "BlockLow": 51,
    "NumBitCastInst": 15,
    "NumBrInst": 48,
    "NumCallInst": 9,
    "NumGetElementPtrInst": 12,
    "NumICmpInst": 18,
    "NumLShrInst": 0,
    "NumLoadInst": 66,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 6,
    "NumSExtInst": 1,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 46,
    "NumSubInst": 2,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 13,
    "TotalBlocks": 54,
    "TotalInsts": 269,
    "TotalMemInst": 161,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 126
  },
  "baseline_oz_instcount": 270,
  "knowledge_base_entry": [
    "--globaldce",
    "--aggressive-instcombine",
    "--globalopt",
    "--reassociate",
    "--lower-constant-intrinsics",
    "--lower-expect",
    "--globalopt",
    "--gvn",
    "--ipsccp",
    "--sccp",
    "--inline"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--ee-instrument",
          "--barrier",
          "--mergeicmps",
          "--post-inline-ee-instrument",
          "--sink",
          "--functionattrs",
          "--cross-dso-cfi",
          "--pgo-memop-opt",
          "--strip",
          "--elim-avail-extern",
          "--loop-sink",
          "--name-anon-globals",
          "--loop-instsimplify",
          "--aggressive-instcombine",
          "--irce",
          "--div-rem-pairs",
          "--coro-cleanup",
          "--lower-matrix-intrinsics",
          "--float2int",
          "--partially-inline-libcalls",
          "--mldst-motion",
          "--lcssa",
          "--attributor",
          "--infer-address-spaces",
          "--memcpyopt",
          "--libcalls-shrinkwrap",
          "--simple-loop-unswitch",
          "--constprop",
          "--nary-reassociate"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--ee-instrument",
      "--barrier",
      "--mergeicmps",
      "--post-inline-ee-instrument",
      "--sink",
      "--functionattrs",
      "--cross-dso-cfi",
      "--pgo-memop-opt",
      "--strip",
      "--elim-avail-extern",
      "--loop-sink",
      "--name-anon-globals",
      "--loop-instsimplify",
      "--aggressive-instcombine",
      "--irce",
      "--div-rem-pairs",
      "--coro-cleanup",
      "--lower-matrix-intrinsics",
      "--float2int",
      "--partially-inline-libcalls",
      "--mldst-motion",
      "--lcssa",
      "--attributor",
      "--infer-address-spaces",
      "--memcpyopt",
      "--libcalls-shrinkwrap",
      "--simple-loop-unswitch",
      "--constprop",
      "--nary-reassociate"
    ],
    "performance_vs_Oz": "+1.5%"
  }
}
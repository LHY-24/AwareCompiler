{
  "program_id": "github-v0_50233.ll",
  "autophase_features": {
    "BBNumArgsHi": 2,
    "BBNumArgsLo": 1,
    "onePred": 3,
    "onePredOneSuc": 2,
    "onePredTwoSuc": 1,
    "oneSuccessor": 2,
    "twoPred": 2,
    "twoPredOneSuc": 0,
    "twoEach": 2,
    "twoSuccessor": 4,
    "morePreds": 1,
    "BB03Phi": 3,
    "BBHiPhi": 0,
    "BBNoPhi": 4,
    "BeginPhi": 3,
    "BranchCount": 6,
    "returnInt": 2,
    "CriticalCount": 5,
    "NumEdges": 10,
    "const32Bit": 12,
    "const64Bit": 0,
    "numConstZeroes": 6,
    "numConstOnes": 4,
    "UncondBranches": 2,
    "binaryConstArg": 4,
    "NumAShrInst": 0,
    "NumAddInst": 9,
    "NumAllocaInst": 0,
    "NumAndInst": 1,
    "BlockMid": 1,
    "BlockLow": 6,
    "NumBitCastInst": 0,
    "NumBrInst": 6,
    "NumCallInst": 5,
    "NumGetElementPtrInst": 7,
    "NumICmpInst": 4,
    "NumLShrInst": 0,
    "NumLoadInst": 6,
    "NumMulInst": 7,
    "NumOrInst": 1,
    "NumPHIInst": 7,
    "NumRetInst": 1,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 1,
    "NumSubInst": 1,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 7,
    "TotalBlocks": 7,
    "TotalInsts": 66,
    "TotalMemInst": 19,
    "TotalFuncs": 3,
    "ArgsPhi": 15,
    "testUnary": 15
  },
  "baseline_oz_instcount": 65,
  "knowledge_base_entry": [
    "-loop-reduce",
    "--nary-reassociate",
    "--simplifycfg",
    "--inline",
    "--reassociate",
    "--slsr",
    "--gvn-hoist",
    "--mergefunc",
    "--aggressive-instcombine",
    "--globalopt",
    "--globaldce",
    "--ipsccp",
    "--lower-expect",
    "--loop-instsimplify",
    "--newgvn",
    "--adce",
    "--ipsccp",
    "--elim-avail-extern",
    "--lower-expect",
    "--jump-threading",
    "--load-store-vectorizer",
    "--gvn",
    "--gvn-hoist",
    "--instcombine",
    "--early-cse",
    "--dce",
    "--die",
    "--sroa",
    "-loop-reduce",
    "--early-cse-memssa",
    "--elim-avail-extern",
    "--flattencfg",
    "--inline",
    "--aggressive-instcombine",
    "--mem2reg",
    "--memcpyopt",
    "--early-cse-memssa",
    "--mldst-motion",
    "--jump-threading",
    "--flattencfg",
    "--gvn",
    "--elim-avail-extern",
    "--instsimplify",
    "--bdce",
    "--simplifycfg",
    "--slp-vectorizer"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--lower-guard-intrinsic",
          "--cross-dso-cfi",
          "--globalopt",
          "--flattencfg",
          "--strip",
          "--attributor",
          "--loop-versioning",
          "--inferattrs",
          "--add-discriminators",
          "--loop-unroll",
          "--scalarizer",
          "--loop-reroll",
          "--lower-widenable-condition",
          "--mem2reg",
          "-loop-reduce",
          "--loop-fusion",
          "--strip-debug-declare",
          "--early-cse",
          "--inject-tli-mappings",
          "--gvn-hoist",
          "--lcssa",
          "--loop-data-prefetch",
          "--early-cse-memssa",
          "--partially-inline-libcalls",
          "--guard-widening",
          "--bdce"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--lower-guard-intrinsic",
      "--cross-dso-cfi",
      "--globalopt",
      "--flattencfg",
      "--strip",
      "--attributor",
      "--loop-versioning",
      "--inferattrs",
      "--add-discriminators",
      "--loop-unroll",
      "--scalarizer",
      "--loop-reroll",
      "--lower-widenable-condition",
      "--mem2reg",
      "-loop-reduce",
      "--loop-fusion",
      "--strip-debug-declare",
      "--early-cse",
      "--inject-tli-mappings",
      "--gvn-hoist",
      "--lcssa",
      "--loop-data-prefetch",
      "--early-cse-memssa",
      "--partially-inline-libcalls",
      "--guard-widening",
      "--bdce"
    ],
    "performance_vs_Oz": "+1.5%"
  }
}
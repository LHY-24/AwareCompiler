{
  "program_id": "github-v0_13767.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 3,
    "onePred": 10,
    "onePredOneSuc": 6,
    "onePredTwoSuc": 3,
    "oneSuccessor": 10,
    "twoPred": 7,
    "twoPredOneSuc": 3,
    "twoEach": 4,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 3,
    "BBHiPhi": 0,
    "BBNoPhi": 15,
    "BeginPhi": 3,
    "BranchCount": 17,
    "returnInt": 5,
    "CriticalCount": 6,
    "NumEdges": 24,
    "const32Bit": 14,
    "const64Bit": 5,
    "numConstZeroes": 18,
    "numConstOnes": 8,
    "UncondBranches": 10,
    "binaryConstArg": 7,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 2,
    "NumAndInst": 2,
    "BlockMid": 4,
    "BlockLow": 14,
    "NumBitCastInst": 0,
    "NumBrInst": 17,
    "NumCallInst": 5,
    "NumGetElementPtrInst": 13,
    "NumICmpInst": 14,
    "NumLShrInst": 0,
    "NumLoadInst": 36,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 3,
    "NumRetInst": 1,
    "NumSExtInst": 25,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 18,
    "NumSubInst": 4,
    "NumTruncInst": 4,
    "NumXorInst": 4,
    "NumZExtInst": 7,
    "TotalBlocks": 18,
    "TotalInsts": 158,
    "TotalMemInst": 74,
    "TotalFuncs": 4,
    "ArgsPhi": 6,
    "testUnary": 74
  },
  "baseline_oz_instcount": 158,
  "knowledge_base_entry": [
    "--loop-sink",
    "--newgvn",
    "--jump-threading",
    "--loop-rotate",
    "--elim-avail-extern",
    "--simplifycfg",
    "--aggressive-instcombine",
    "--jump-threading",
    "--gvn",
    "--slp-vectorizer",
    "--dse",
    "--loop-instsimplify",
    "--early-cse",
    "--lower-constant-intrinsics"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--slsr",
          "--ee-instrument",
          "--slp-vectorizer",
          "--forceattrs",
          "--instcombine",
          "--mergereturn",
          "--loop-deletion",
          "--mergefunc",
          "--mldst-motion",
          "--functionattrs",
          "--lowerinvoke",
          "--sancov",
          "--partial-inliner",
          "--called-value-propagation",
          "--insert-gcov-profiling",
          "--instnamer",
          "--lower-guard-intrinsic",
          "--loop-fusion",
          "--coro-elide",
          "--simple-loop-unswitch",
          "--loop-predication",
          "--loop-data-prefetch",
          "--reassociate",
          "--barrier",
          "--inline",
          "--aggressive-instcombine"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+4.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--slsr",
      "--ee-instrument",
      "--slp-vectorizer",
      "--forceattrs",
      "--instcombine",
      "--mergereturn",
      "--loop-deletion",
      "--mergefunc",
      "--mldst-motion",
      "--functionattrs",
      "--lowerinvoke",
      "--sancov",
      "--partial-inliner",
      "--called-value-propagation",
      "--insert-gcov-profiling",
      "--instnamer",
      "--lower-guard-intrinsic",
      "--loop-fusion",
      "--coro-elide",
      "--simple-loop-unswitch",
      "--loop-predication",
      "--loop-data-prefetch",
      "--reassociate",
      "--barrier",
      "--inline",
      "--aggressive-instcombine"
    ],
    "performance_vs_Oz": "+4.4%"
  }
}
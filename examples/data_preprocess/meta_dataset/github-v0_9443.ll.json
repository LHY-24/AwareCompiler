{
  "program_id": "github-v0_9443.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 0,
    "onePredOneSuc": 0,
    "onePredTwoSuc": 0,
    "oneSuccessor": 0,
    "twoPred": 0,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 0,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 3,
    "BeginPhi": 0,
    "BranchCount": 0,
    "returnInt": 0,
    "CriticalCount": 0,
    "NumEdges": 0,
    "const32Bit": 17,
    "const64Bit": 8,
    "numConstZeroes": 2,
    "numConstOnes": 2,
    "UncondBranches": 0,
    "binaryConstArg": 17,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 0,
    "NumAndInst": 7,
    "BlockMid": 1,
    "BlockLow": 2,
    "NumBitCastInst": 0,
    "NumBrInst": 0,
    "NumCallInst": 0,
    "NumGetElementPtrInst": 1,
    "NumICmpInst": 0,
    "NumLShrInst": 4,
    "NumLoadInst": 1,
    "NumMulInst": 2,
    "NumOrInst": 2,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 8,
    "NumStoreInst": 1,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 6,
    "NumZExtInst": 1,
    "TotalBlocks": 3,
    "TotalInsts": 46,
    "TotalMemInst": 3,
    "TotalFuncs": 3,
    "ArgsPhi": 0,
    "testUnary": 2
  },
  "baseline_oz_instcount": 46,
  "knowledge_base_entry": [
    "--instsimplify",
    "--mem2reg",
    "--dce",
    "--load-store-vectorizer",
    "--slp-vectorizer",
    "--mem2reg",
    "--elim-avail-extern",
    "--die",
    "--slp-vectorizer",
    "--nary-reassociate",
    "--slp-vectorizer",
    "--mem2reg",
    "--elim-avail-extern",
    "--slp-vectorizer",
    "--gvn-hoist",
    "--bdce",
    "--die",
    "--aggressive-instcombine",
    "--gvn",
    "--instcombine",
    "--loop-rotate",
    "--gvn",
    "--gvn-hoist",
    "--memcpyopt",
    "--gvn-hoist",
    "--early-cse-memssa",
    "--indvars",
    "--load-store-vectorizer",
    "--indvars",
    "--simplifycfg",
    "--sccp",
    "--instsimplify",
    "--gvn-hoist",
    "--mem2reg",
    "--simplifycfg",
    "--ipsccp",
    "--aggressive-instcombine"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--argpromotion",
          "--loop-rotate",
          "--partial-inliner",
          "--loop-predication",
          "--lower-guard-intrinsic",
          "--loop-idiom",
          "--constprop",
          "--slp-vectorizer",
          "--loop-data-prefetch",
          "--sroa",
          "--coro-elide",
          "--strip",
          "--early-cse",
          "--mergeicmps",
          "--slsr",
          "--loop-versioning",
          "--alignment-from-assumptions",
          "--simplifycfg",
          "-loop-reduce",
          "--lower-expect",
          "--loop-load-elim",
          "--reassociate"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+4.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--argpromotion",
      "--loop-rotate",
      "--partial-inliner",
      "--loop-predication",
      "--lower-guard-intrinsic",
      "--loop-idiom",
      "--constprop",
      "--slp-vectorizer",
      "--loop-data-prefetch",
      "--sroa",
      "--coro-elide",
      "--strip",
      "--early-cse",
      "--mergeicmps",
      "--slsr",
      "--loop-versioning",
      "--alignment-from-assumptions",
      "--simplifycfg",
      "-loop-reduce",
      "--lower-expect",
      "--loop-load-elim",
      "--reassociate"
    ],
    "performance_vs_Oz": "+4.3%"
  }
}
{
  "program_id": "github-v0_26460.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 4,
    "onePred": 26,
    "onePredOneSuc": 24,
    "onePredTwoSuc": 0,
    "oneSuccessor": 26,
    "twoPred": 15,
    "twoPredOneSuc": 0,
    "twoEach": 13,
    "twoSuccessor": 15,
    "morePreds": 0,
    "BB03Phi": 4,
    "BBHiPhi": 0,
    "BBNoPhi": 43,
    "BeginPhi": 4,
    "BranchCount": 41,
    "returnInt": 0,
    "CriticalCount": 8,
    "NumEdges": 56,
    "const32Bit": 71,
    "const64Bit": 13,
    "numConstZeroes": 45,
    "numConstOnes": 47,
    "UncondBranches": 26,
    "binaryConstArg": 14,
    "NumAShrInst": 0,
    "NumAddInst": 14,
    "NumAllocaInst": 35,
    "NumAndInst": 0,
    "BlockMid": 8,
    "BlockLow": 39,
    "NumBitCastInst": 0,
    "NumBrInst": 41,
    "NumCallInst": 15,
    "NumGetElementPtrInst": 23,
    "NumICmpInst": 16,
    "NumLShrInst": 1,
    "NumLoadInst": 98,
    "NumMulInst": 0,
    "NumOrInst": 2,
    "NumPHIInst": 4,
    "NumRetInst": 6,
    "NumSExtInst": 4,
    "NumSelectInst": 1,
    "NumShlInst": 1,
    "NumStoreInst": 52,
    "NumSubInst": 3,
    "NumTruncInst": 9,
    "NumXorInst": 5,
    "NumZExtInst": 49,
    "TotalBlocks": 47,
    "TotalInsts": 379,
    "TotalMemInst": 223,
    "TotalFuncs": 7,
    "ArgsPhi": 8,
    "testUnary": 195
  },
  "baseline_oz_instcount": 379,
  "knowledge_base_entry": [
    "--functionattrs",
    "--dce",
    "--early-cse",
    "--licm",
    "--jump-threading",
    "--loop-reroll",
    "--simplifycfg",
    "--mem2reg",
    "--aggressive-instcombine",
    "--loop-rotate",
    "--instcombine",
    "--inline",
    "--nary-reassociate",
    "--slsr",
    "--early-cse",
    "--elim-avail-extern",
    "--nary-reassociate",
    "--indvars",
    "--slsr",
    "--instcombine",
    "--aggressive-instcombine",
    "--lower-expect",
    "--slp-vectorizer",
    "--loop-reroll"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--functionattrs",
          "--infer-address-spaces",
          "--correlated-propagation",
          "--loop-versioning-licm",
          "--div-rem-pairs",
          "--cross-dso-cfi",
          "--loop-reroll",
          "--lower-widenable-condition",
          "--strip-nondebug",
          "--mergefunc",
          "--loop-vectorize",
          "--hotcoldsplit",
          "--lower-matrix-intrinsics",
          "--loop-unswitch",
          "--aggressive-instcombine",
          "--deadargelim",
          "--loop-sink",
          "--forceattrs",
          "--partially-inline-libcalls",
          "--ipsccp",
          "--simple-loop-unswitch",
          "--redundant-dbg-inst-elim",
          "--sroa"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+5.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--functionattrs",
      "--infer-address-spaces",
      "--correlated-propagation",
      "--loop-versioning-licm",
      "--div-rem-pairs",
      "--cross-dso-cfi",
      "--loop-reroll",
      "--lower-widenable-condition",
      "--strip-nondebug",
      "--mergefunc",
      "--loop-vectorize",
      "--hotcoldsplit",
      "--lower-matrix-intrinsics",
      "--loop-unswitch",
      "--aggressive-instcombine",
      "--deadargelim",
      "--loop-sink",
      "--forceattrs",
      "--partially-inline-libcalls",
      "--ipsccp",
      "--simple-loop-unswitch",
      "--redundant-dbg-inst-elim",
      "--sroa"
    ],
    "performance_vs_Oz": "+5.5%"
  }
}
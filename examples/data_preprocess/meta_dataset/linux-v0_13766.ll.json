{
  "program_id": "linux-v0_13766.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 90,
    "onePredOneSuc": 67,
    "onePredTwoSuc": 21,
    "oneSuccessor": 79,
    "twoPred": 17,
    "twoPredOneSuc": 9,
    "twoEach": 2,
    "twoSuccessor": 38,
    "morePreds": 13,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 144,
    "BeginPhi": 1,
    "BranchCount": 116,
    "returnInt": 13,
    "CriticalCount": 14,
    "NumEdges": 169,
    "const32Bit": 359,
    "const64Bit": 22,
    "numConstZeroes": 152,
    "numConstOnes": 135,
    "UncondBranches": 79,
    "binaryConstArg": 12,
    "NumAShrInst": 1,
    "NumAddInst": 0,
    "NumAllocaInst": 101,
    "NumAndInst": 5,
    "BlockMid": 16,
    "BlockLow": 129,
    "NumBitCastInst": 47,
    "NumBrInst": 116,
    "NumCallInst": 51,
    "NumGetElementPtrInst": 114,
    "NumICmpInst": 32,
    "NumLShrInst": 0,
    "NumLoadInst": 274,
    "NumMulInst": 1,
    "NumOrInst": 1,
    "NumPHIInst": 1,
    "NumRetInst": 25,
    "NumSExtInst": 5,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 149,
    "NumSubInst": 0,
    "NumTruncInst": 7,
    "NumXorInst": 4,
    "NumZExtInst": 12,
    "TotalBlocks": 145,
    "TotalInsts": 953,
    "TotalMemInst": 689,
    "TotalFuncs": 38,
    "ArgsPhi": 2,
    "testUnary": 448
  },
  "baseline_oz_instcount": 942,
  "knowledge_base_entry": [
    "--licm",
    "--gvn",
    "--loop-reroll",
    "--gvn",
    "-loop-reduce",
    "--gvn-hoist",
    "--simplifycfg",
    "--mldst-motion",
    "--gvn",
    "--inline",
    "--sroa",
    "--instcombine",
    "--slp-vectorizer",
    "--instsimplify",
    "--gvn",
    "--loop-rotate",
    "--lower-constant-intrinsics",
    "--lower-expect",
    "--elim-avail-extern",
    "--ipsccp",
    "--adce",
    "--elim-avail-extern",
    "--reassociate",
    "--load-store-vectorizer",
    "--elim-avail-extern",
    "--loop-instsimplify"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--insert-gcov-profiling",
          "--float2int",
          "--loweratomic",
          "--add-discriminators",
          "--newgvn",
          "--ipsccp",
          "--globaldce",
          "--instsimplify",
          "--scalarizer",
          "--early-cse",
          "--prune-eh",
          "--speculative-execution",
          "--functionattrs",
          "--called-value-propagation",
          "--dce",
          "--alignment-from-assumptions",
          "--hotcoldsplit",
          "--licm"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--insert-gcov-profiling",
      "--float2int",
      "--loweratomic",
      "--add-discriminators",
      "--newgvn",
      "--ipsccp",
      "--globaldce",
      "--instsimplify",
      "--scalarizer",
      "--early-cse",
      "--prune-eh",
      "--speculative-execution",
      "--functionattrs",
      "--called-value-propagation",
      "--dce",
      "--alignment-from-assumptions",
      "--hotcoldsplit",
      "--licm"
    ],
    "performance_vs_Oz": "+0.1%"
  }
}
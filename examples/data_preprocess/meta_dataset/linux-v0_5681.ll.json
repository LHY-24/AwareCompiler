{
  "program_id": "linux-v0_5681.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 23,
    "onePredOneSuc": 19,
    "onePredTwoSuc": 2,
    "oneSuccessor": 21,
    "twoPred": 4,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 7,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 52,
    "BeginPhi": 0,
    "BranchCount": 28,
    "returnInt": 12,
    "CriticalCount": 2,
    "NumEdges": 40,
    "const32Bit": 245,
    "const64Bit": 10,
    "numConstZeroes": 111,
    "numConstOnes": 93,
    "UncondBranches": 21,
    "binaryConstArg": 11,
    "NumAShrInst": 0,
    "NumAddInst": 8,
    "NumAllocaInst": 72,
    "NumAndInst": 2,
    "BlockMid": 12,
    "BlockLow": 40,
    "NumBitCastInst": 20,
    "NumBrInst": 28,
    "NumCallInst": 50,
    "NumGetElementPtrInst": 68,
    "NumICmpInst": 8,
    "NumLShrInst": 0,
    "NumLoadInst": 154,
    "NumMulInst": 0,
    "NumOrInst": 2,
    "NumPHIInst": 0,
    "NumRetInst": 23,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 3,
    "NumStoreInst": 97,
    "NumSubInst": 3,
    "NumTruncInst": 8,
    "NumXorInst": 3,
    "NumZExtInst": 23,
    "TotalBlocks": 52,
    "TotalInsts": 578,
    "TotalMemInst": 441,
    "TotalFuncs": 34,
    "ArgsPhi": 0,
    "testUnary": 280
  },
  "baseline_oz_instcount": 578,
  "knowledge_base_entry": [
    "--ipconstprop",
    "--newgvn",
    "--dse",
    "--jump-threading",
    "--loop-rotate",
    "--aggressive-instcombine",
    "--globaldce",
    "--ipsccp",
    "--reassociate",
    "--dce",
    "--early-cse"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--inject-tli-mappings",
          "--partially-inline-libcalls",
          "--libcalls-shrinkwrap",
          "--infer-address-spaces",
          "--loop-versioning",
          "--aggressive-instcombine",
          "--newgvn",
          "--loop-simplify",
          "--ipsccp",
          "--inline",
          "--simple-loop-unswitch",
          "--lower-constant-intrinsics",
          "--coro-early",
          "--slp-vectorizer",
          "--gvn-hoist",
          "--div-rem-pairs",
          "--guard-widening",
          "--correlated-propagation",
          "--called-value-propagation",
          "--loop-interchange",
          "--strip",
          "--rewrite-statepoints-for-gc",
          "--attributor",
          "--insert-gcov-profiling",
          "--reassociate",
          "--add-discriminators",
          "--coro-cleanup",
          "--hotcoldsplit"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--inject-tli-mappings",
      "--partially-inline-libcalls",
      "--libcalls-shrinkwrap",
      "--infer-address-spaces",
      "--loop-versioning",
      "--aggressive-instcombine",
      "--newgvn",
      "--loop-simplify",
      "--ipsccp",
      "--inline",
      "--simple-loop-unswitch",
      "--lower-constant-intrinsics",
      "--coro-early",
      "--slp-vectorizer",
      "--gvn-hoist",
      "--div-rem-pairs",
      "--guard-widening",
      "--correlated-propagation",
      "--called-value-propagation",
      "--loop-interchange",
      "--strip",
      "--rewrite-statepoints-for-gc",
      "--attributor",
      "--insert-gcov-profiling",
      "--reassociate",
      "--add-discriminators",
      "--coro-cleanup",
      "--hotcoldsplit"
    ],
    "performance_vs_Oz": "+0.2%"
  }
}
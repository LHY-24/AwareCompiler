{
  "program_id": "github-v0_26300.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 54,
    "onePredOneSuc": 43,
    "onePredTwoSuc": 9,
    "oneSuccessor": 48,
    "twoPred": 14,
    "twoPredOneSuc": 3,
    "twoEach": 9,
    "twoSuccessor": 25,
    "morePreds": 5,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 82,
    "BeginPhi": 0,
    "BranchCount": 73,
    "returnInt": 3,
    "CriticalCount": 2,
    "NumEdges": 98,
    "const32Bit": 158,
    "const64Bit": 2,
    "numConstZeroes": 75,
    "numConstOnes": 70,
    "UncondBranches": 48,
    "binaryConstArg": 21,
    "NumAShrInst": 1,
    "NumAddInst": 11,
    "NumAllocaInst": 42,
    "NumAndInst": 4,
    "BlockMid": 8,
    "BlockLow": 74,
    "NumBitCastInst": 3,
    "NumBrInst": 73,
    "NumCallInst": 13,
    "NumGetElementPtrInst": 41,
    "NumICmpInst": 25,
    "NumLShrInst": 1,
    "NumLoadInst": 146,
    "NumMulInst": 4,
    "NumOrInst": 2,
    "NumPHIInst": 0,
    "NumRetInst": 9,
    "NumSExtInst": 9,
    "NumSelectInst": 0,
    "NumShlInst": 3,
    "NumStoreInst": 86,
    "NumSubInst": 3,
    "NumTruncInst": 5,
    "NumXorInst": 0,
    "NumZExtInst": 9,
    "TotalBlocks": 82,
    "TotalInsts": 492,
    "TotalMemInst": 328,
    "TotalFuncs": 13,
    "ArgsPhi": 0,
    "testUnary": 214
  },
  "baseline_oz_instcount": 492,
  "knowledge_base_entry": [
    "--sccp",
    "--bdce",
    "--sccp",
    "--gvn-hoist",
    "--lower-constant-intrinsics",
    "--aggressive-instcombine",
    "--sroa",
    "--lower-expect",
    "--elim-avail-extern",
    "--memcpyopt",
    "--inline",
    "--bdce",
    "--licm",
    "--die",
    "--ipsccp",
    "--loweratomic",
    "--instcombine"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--lcssa",
          "--loop-sink",
          "--loweratomic",
          "--loop-simplifycfg",
          "--dse",
          "--die",
          "--callsite-splitting",
          "--coro-cleanup",
          "--aggressive-instcombine",
          "--globalopt",
          "--lower-widenable-condition",
          "--loop-vectorize",
          "--instnamer",
          "--mergereturn",
          "--slsr",
          "--loop-idiom",
          "--post-inline-ee-instrument",
          "--lower-guard-intrinsic",
          "--early-cse",
          "--adce",
          "--insert-gcov-profiling",
          "--prune-eh",
          "--canonicalize-aliases",
          "--lower-matrix-intrinsics",
          "--lowerinvoke",
          "--loop-data-prefetch",
          "--coro-elide",
          "--partially-inline-libcalls",
          "--strip"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--lcssa",
      "--loop-sink",
      "--loweratomic",
      "--loop-simplifycfg",
      "--dse",
      "--die",
      "--callsite-splitting",
      "--coro-cleanup",
      "--aggressive-instcombine",
      "--globalopt",
      "--lower-widenable-condition",
      "--loop-vectorize",
      "--instnamer",
      "--mergereturn",
      "--slsr",
      "--loop-idiom",
      "--post-inline-ee-instrument",
      "--lower-guard-intrinsic",
      "--early-cse",
      "--adce",
      "--insert-gcov-profiling",
      "--prune-eh",
      "--canonicalize-aliases",
      "--lower-matrix-intrinsics",
      "--lowerinvoke",
      "--loop-data-prefetch",
      "--coro-elide",
      "--partially-inline-libcalls",
      "--strip"
    ],
    "performance_vs_Oz": "+1.2%"
  }
}
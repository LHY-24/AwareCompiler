{
  "program_id": "linux-v0_6558.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 5,
    "onePredOneSuc": 5,
    "onePredTwoSuc": 0,
    "oneSuccessor": 5,
    "twoPred": 4,
    "twoPredOneSuc": 0,
    "twoEach": 1,
    "twoSuccessor": 4,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 15,
    "BeginPhi": 0,
    "BranchCount": 9,
    "returnInt": 4,
    "CriticalCount": 3,
    "NumEdges": 13,
    "const32Bit": 53,
    "const64Bit": 8,
    "numConstZeroes": 20,
    "numConstOnes": 56,
    "UncondBranches": 5,
    "binaryConstArg": 16,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 39,
    "NumAndInst": 0,
    "BlockMid": 5,
    "BlockLow": 10,
    "NumBitCastInst": 0,
    "NumBrInst": 9,
    "NumCallInst": 15,
    "NumGetElementPtrInst": 7,
    "NumICmpInst": 10,
    "NumLShrInst": 0,
    "NumLoadInst": 53,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 6,
    "NumSExtInst": 7,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 49,
    "NumSubInst": 1,
    "NumTruncInst": 6,
    "NumXorInst": 16,
    "NumZExtInst": 11,
    "TotalBlocks": 15,
    "TotalInsts": 242,
    "TotalMemInst": 163,
    "TotalFuncs": 12,
    "ArgsPhi": 0,
    "testUnary": 128
  },
  "baseline_oz_instcount": 242,
  "knowledge_base_entry": [
    "--prune-eh",
    "--lower-constant-intrinsics",
    "--mergefunc",
    "--aggressive-instcombine",
    "--instcombine",
    "--simplifycfg",
    "--prune-eh",
    "--sroa",
    "--newgvn",
    "--correlated-propagation",
    "--slp-vectorizer",
    "--load-store-vectorizer",
    "--licm",
    "--mldst-motion",
    "--gvn-hoist",
    "--loop-instsimplify",
    "--elim-avail-extern",
    "--gvn-hoist",
    "--globalopt",
    "--gvn",
    "--sroa",
    "--memcpyopt",
    "--instsimplify",
    "--simplifycfg",
    "--flattencfg",
    "--elim-avail-extern",
    "--mem2reg",
    "--globalopt",
    "--correlated-propagation"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--separate-const-offset-from-gep",
          "--dce",
          "--elim-avail-extern",
          "--mergefunc",
          "--load-store-vectorizer",
          "--loop-distribute",
          "--sancov",
          "--aggressive-instcombine",
          "--scalarizer",
          "--globalsplit",
          "--flattencfg",
          "--reassociate",
          "--mldst-motion",
          "--early-cse-memssa",
          "--strip-nondebug",
          "--loop-reroll",
          "--coro-early",
          "--loop-unroll",
          "--gvn-hoist",
          "--dse",
          "--bdce",
          "--attributor"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--separate-const-offset-from-gep",
      "--dce",
      "--elim-avail-extern",
      "--mergefunc",
      "--load-store-vectorizer",
      "--loop-distribute",
      "--sancov",
      "--aggressive-instcombine",
      "--scalarizer",
      "--globalsplit",
      "--flattencfg",
      "--reassociate",
      "--mldst-motion",
      "--early-cse-memssa",
      "--strip-nondebug",
      "--loop-reroll",
      "--coro-early",
      "--loop-unroll",
      "--gvn-hoist",
      "--dse",
      "--bdce",
      "--attributor"
    ],
    "performance_vs_Oz": "+2.1%"
  }
}
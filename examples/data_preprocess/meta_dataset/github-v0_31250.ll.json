{
  "program_id": "github-v0_31250.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 0,
    "onePredOneSuc": 0,
    "onePredTwoSuc": 0,
    "oneSuccessor": 0,
    "twoPred": 0,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 0,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 2,
    "BeginPhi": 0,
    "BranchCount": 0,
    "returnInt": 0,
    "CriticalCount": 0,
    "NumEdges": 0,
    "const32Bit": 4,
    "const64Bit": 0,
    "numConstZeroes": 2,
    "numConstOnes": 2,
    "UncondBranches": 0,
    "binaryConstArg": 0,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 2,
    "NumAndInst": 0,
    "BlockMid": 0,
    "BlockLow": 2,
    "NumBitCastInst": 0,
    "NumBrInst": 0,
    "NumCallInst": 0,
    "NumGetElementPtrInst": 0,
    "NumICmpInst": 0,
    "NumLShrInst": 0,
    "NumLoadInst": 0,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 2,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 2,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 2,
    "TotalInsts": 6,
    "TotalMemInst": 4,
    "TotalFuncs": 2,
    "ArgsPhi": 0,
    "testUnary": 2
  },
  "baseline_oz_instcount": 6,
  "knowledge_base_entry": [
    "--gvn-hoist",
    "--memcpyopt",
    "--gvn",
    "--loop-rotate",
    "--gvn-hoist",
    "--globalopt",
    "--lower-expect",
    "--newgvn",
    "--mergefunc",
    "--gvn",
    "--sccp",
    "--inline"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--prune-eh",
          "--correlated-propagation",
          "--indvars",
          "--constprop",
          "--newgvn",
          "--loop-guard-widening",
          "--post-inline-ee-instrument",
          "--coro-cleanup",
          "--mergefunc",
          "--mem2reg",
          "--loop-vectorize",
          "--coro-split",
          "--partially-inline-libcalls",
          "--load-store-vectorizer",
          "--bdce",
          "--loop-interchange",
          "--early-cse-memssa",
          "--guard-widening",
          "--break-crit-edges",
          "--flattencfg",
          "--canonicalize-aliases",
          "--strip-nondebug",
          "--loop-sink",
          "--lower-matrix-intrinsics",
          "--loop-instsimplify"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+16.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--prune-eh",
      "--correlated-propagation",
      "--indvars",
      "--constprop",
      "--newgvn",
      "--loop-guard-widening",
      "--post-inline-ee-instrument",
      "--coro-cleanup",
      "--mergefunc",
      "--mem2reg",
      "--loop-vectorize",
      "--coro-split",
      "--partially-inline-libcalls",
      "--load-store-vectorizer",
      "--bdce",
      "--loop-interchange",
      "--early-cse-memssa",
      "--guard-widening",
      "--break-crit-edges",
      "--flattencfg",
      "--canonicalize-aliases",
      "--strip-nondebug",
      "--loop-sink",
      "--lower-matrix-intrinsics",
      "--loop-instsimplify"
    ],
    "performance_vs_Oz": "+16.7%"
  }
}
{
  "program_id": "github-v0_38513.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 4,
    "onePred": 49,
    "onePredOneSuc": 31,
    "onePredTwoSuc": 15,
    "oneSuccessor": 44,
    "twoPred": 22,
    "twoPredOneSuc": 8,
    "twoEach": 11,
    "twoSuccessor": 32,
    "morePreds": 5,
    "BB03Phi": 4,
    "BBHiPhi": 0,
    "BBNoPhi": 85,
    "BeginPhi": 4,
    "BranchCount": 76,
    "returnInt": 9,
    "CriticalCount": 18,
    "NumEdges": 108,
    "const32Bit": 384,
    "const64Bit": 30,
    "numConstZeroes": 224,
    "numConstOnes": 96,
    "UncondBranches": 44,
    "binaryConstArg": 21,
    "NumAShrInst": 0,
    "NumAddInst": 6,
    "NumAllocaInst": 38,
    "NumAndInst": 0,
    "BlockMid": 15,
    "BlockLow": 74,
    "NumBitCastInst": 21,
    "NumBrInst": 76,
    "NumCallInst": 65,
    "NumGetElementPtrInst": 170,
    "NumICmpInst": 34,
    "NumLShrInst": 0,
    "NumLoadInst": 211,
    "NumMulInst": 4,
    "NumOrInst": 0,
    "NumPHIInst": 4,
    "NumRetInst": 12,
    "NumSExtInst": 6,
    "NumSelectInst": 1,
    "NumShlInst": 0,
    "NumStoreInst": 70,
    "NumSubInst": 2,
    "NumTruncInst": 8,
    "NumXorInst": 11,
    "NumZExtInst": 9,
    "TotalBlocks": 89,
    "TotalInsts": 749,
    "TotalMemInst": 554,
    "TotalFuncs": 30,
    "ArgsPhi": 8,
    "testUnary": 293
  },
  "baseline_oz_instcount": 750,
  "knowledge_base_entry": [
    "--aggressive-instcombine",
    "--adce",
    "--mem2reg",
    "--lower-expect",
    "--globalopt",
    "--newgvn",
    "--globalopt",
    "--ipsccp",
    "--inline",
    "--jump-threading",
    "--adce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--coro-cleanup",
          "--separate-const-offset-from-gep",
          "--partial-inliner",
          "--nary-reassociate",
          "--insert-gcov-profiling",
          "--constmerge",
          "--lower-widenable-condition",
          "--slp-vectorizer",
          "--globalopt",
          "--lowerswitch",
          "--loop-distribute"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--coro-cleanup",
      "--separate-const-offset-from-gep",
      "--partial-inliner",
      "--nary-reassociate",
      "--insert-gcov-profiling",
      "--constmerge",
      "--lower-widenable-condition",
      "--slp-vectorizer",
      "--globalopt",
      "--lowerswitch",
      "--loop-distribute"
    ],
    "performance_vs_Oz": "+0.3%"
  }
}
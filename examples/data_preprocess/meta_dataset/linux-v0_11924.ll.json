{
  "program_id": "linux-v0_11924.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 81,
    "onePredOneSuc": 56,
    "onePredTwoSuc": 24,
    "oneSuccessor": 71,
    "twoPred": 26,
    "twoPredOneSuc": 14,
    "twoEach": 10,
    "twoSuccessor": 40,
    "morePreds": 4,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 122,
    "BeginPhi": 0,
    "BranchCount": 111,
    "returnInt": 19,
    "CriticalCount": 19,
    "NumEdges": 151,
    "const32Bit": 247,
    "const64Bit": 19,
    "numConstZeroes": 109,
    "numConstOnes": 98,
    "UncondBranches": 71,
    "binaryConstArg": 52,
    "NumAShrInst": 3,
    "NumAddInst": 21,
    "NumAllocaInst": 60,
    "NumAndInst": 19,
    "BlockMid": 14,
    "BlockLow": 108,
    "NumBitCastInst": 7,
    "NumBrInst": 111,
    "NumCallInst": 31,
    "NumGetElementPtrInst": 72,
    "NumICmpInst": 41,
    "NumLShrInst": 3,
    "NumLoadInst": 206,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 11,
    "NumSExtInst": 17,
    "NumSelectInst": 0,
    "NumShlInst": 6,
    "NumStoreInst": 119,
    "NumSubInst": 4,
    "NumTruncInst": 18,
    "NumXorInst": 6,
    "NumZExtInst": 62,
    "TotalBlocks": 122,
    "TotalInsts": 818,
    "TotalMemInst": 488,
    "TotalFuncs": 14,
    "ArgsPhi": 0,
    "testUnary": 370
  },
  "baseline_oz_instcount": 819,
  "knowledge_base_entry": [
    "--ipconstprop",
    "--aggressive-instcombine",
    "--elim-avail-extern",
    "--flattencfg",
    "--gvn",
    "--memcpyopt",
    "--jump-threading",
    "--instsimplify",
    "--prune-eh",
    "--simplifycfg",
    "--newgvn",
    "--load-store-vectorizer",
    "--instcombine",
    "--sroa",
    "--reassociate"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--constprop",
          "--attributor",
          "--add-discriminators",
          "--scalarizer",
          "--adce",
          "--instsimplify",
          "--loop-distribute",
          "--flattencfg",
          "--memcpyopt",
          "--div-rem-pairs",
          "--aggressive-instcombine",
          "--post-inline-ee-instrument",
          "--argpromotion",
          "--early-cse-memssa",
          "--sroa"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--constprop",
      "--attributor",
      "--add-discriminators",
      "--scalarizer",
      "--adce",
      "--instsimplify",
      "--loop-distribute",
      "--flattencfg",
      "--memcpyopt",
      "--div-rem-pairs",
      "--aggressive-instcombine",
      "--post-inline-ee-instrument",
      "--argpromotion",
      "--early-cse-memssa",
      "--sroa"
    ],
    "performance_vs_Oz": "+3.2%"
  }
}
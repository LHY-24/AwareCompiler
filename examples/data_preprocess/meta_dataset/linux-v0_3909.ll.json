{
  "program_id": "linux-v0_3909.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 61,
    "onePredOneSuc": 46,
    "onePredTwoSuc": 12,
    "oneSuccessor": 59,
    "twoPred": 21,
    "twoPredOneSuc": 9,
    "twoEach": 9,
    "twoSuccessor": 25,
    "morePreds": 5,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 100,
    "BeginPhi": 0,
    "BranchCount": 84,
    "returnInt": 5,
    "CriticalCount": 19,
    "NumEdges": 122,
    "const32Bit": 407,
    "const64Bit": 18,
    "numConstZeroes": 224,
    "numConstOnes": 103,
    "UncondBranches": 59,
    "binaryConstArg": 17,
    "NumAShrInst": 0,
    "NumAddInst": 3,
    "NumAllocaInst": 59,
    "NumAndInst": 7,
    "BlockMid": 13,
    "BlockLow": 87,
    "NumBitCastInst": 38,
    "NumBrInst": 84,
    "NumCallInst": 48,
    "NumGetElementPtrInst": 152,
    "NumICmpInst": 26,
    "NumLShrInst": 0,
    "NumLoadInst": 219,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 13,
    "NumSExtInst": 4,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 97,
    "NumSubInst": 0,
    "NumTruncInst": 2,
    "NumXorInst": 7,
    "NumZExtInst": 10,
    "TotalBlocks": 100,
    "TotalInsts": 773,
    "TotalMemInst": 575,
    "TotalFuncs": 28,
    "ArgsPhi": 0,
    "testUnary": 332
  },
  "baseline_oz_instcount": 773,
  "knowledge_base_entry": [
    "--loop-versioning-licm",
    "--instcombine",
    "--lower-constant-intrinsics",
    "--ipsccp",
    "--bdce",
    "--mem2reg",
    "--mergefunc",
    "--aggressive-instcombine",
    "--gvn",
    "--bdce",
    "--mem2reg",
    "--mergefunc",
    "--aggressive-instcombine",
    "--loop-simplifycfg",
    "--aggressive-instcombine",
    "--loop-instsimplify",
    "--early-cse-memssa",
    "--lower-expect",
    "--mem2reg",
    "--jump-threading",
    "--gvn-hoist"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--newgvn",
          "--slp-vectorizer",
          "--mergefunc",
          "--insert-gcov-profiling",
          "--instnamer",
          "--functionattrs",
          "--adce",
          "--strip-nondebug",
          "--loop-interchange",
          "--loop-unroll-and-jam",
          "--callsite-splitting",
          "--ipsccp",
          "--loop-unroll",
          "--speculative-execution",
          "--loop-idiom",
          "--globalsplit",
          "--aggressive-instcombine",
          "--reassociate",
          "--inline",
          "--constmerge",
          "--bdce",
          "--prune-eh",
          "--strip-debug-declare",
          "--loop-load-elim",
          "--indvars",
          "--loop-simplify",
          "--loop-rotate",
          "--loop-vectorize",
          "--die"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--newgvn",
      "--slp-vectorizer",
      "--mergefunc",
      "--insert-gcov-profiling",
      "--instnamer",
      "--functionattrs",
      "--adce",
      "--strip-nondebug",
      "--loop-interchange",
      "--loop-unroll-and-jam",
      "--callsite-splitting",
      "--ipsccp",
      "--loop-unroll",
      "--speculative-execution",
      "--loop-idiom",
      "--globalsplit",
      "--aggressive-instcombine",
      "--reassociate",
      "--inline",
      "--constmerge",
      "--bdce",
      "--prune-eh",
      "--strip-debug-declare",
      "--loop-load-elim",
      "--indvars",
      "--loop-simplify",
      "--loop-rotate",
      "--loop-vectorize",
      "--die"
    ],
    "performance_vs_Oz": "+0.6%"
  }
}
{
  "program_id": "linux-v0_12641.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 54,
    "onePredOneSuc": 33,
    "onePredTwoSuc": 21,
    "oneSuccessor": 42,
    "twoPred": 16,
    "twoPredOneSuc": 6,
    "twoEach": 6,
    "twoSuccessor": 37,
    "morePreds": 9,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 101,
    "BeginPhi": 0,
    "BranchCount": 79,
    "returnInt": 20,
    "CriticalCount": 22,
    "NumEdges": 116,
    "const32Bit": 349,
    "const64Bit": 14,
    "numConstZeroes": 182,
    "numConstOnes": 76,
    "UncondBranches": 42,
    "binaryConstArg": 29,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 63,
    "NumAndInst": 19,
    "BlockMid": 11,
    "BlockLow": 90,
    "NumBitCastInst": 14,
    "NumBrInst": 79,
    "NumCallInst": 51,
    "NumGetElementPtrInst": 127,
    "NumICmpInst": 31,
    "NumLShrInst": 3,
    "NumLoadInst": 252,
    "NumMulInst": 0,
    "NumOrInst": 8,
    "NumPHIInst": 0,
    "NumRetInst": 22,
    "NumSExtInst": 1,
    "NumSelectInst": 1,
    "NumShlInst": 3,
    "NumStoreInst": 109,
    "NumSubInst": 0,
    "NumTruncInst": 9,
    "NumXorInst": 0,
    "NumZExtInst": 10,
    "TotalBlocks": 101,
    "TotalInsts": 803,
    "TotalMemInst": 602,
    "TotalFuncs": 40,
    "ArgsPhi": 0,
    "testUnary": 349
  },
  "baseline_oz_instcount": 794,
  "knowledge_base_entry": [
    "--globaldce",
    "--ipsccp",
    "--aggressive-instcombine",
    "--reassociate",
    "--die",
    "--simplifycfg",
    "--early-cse",
    "--mergefunc",
    "--correlated-propagation",
    "--gvn",
    "--mldst-motion",
    "--inline",
    "--die",
    "--ipsccp",
    "--aggressive-instcombine",
    "--dce",
    "--slp-vectorizer",
    "--correlated-propagation",
    "--newgvn",
    "--sccp",
    "--instsimplify",
    "--load-store-vectorizer"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-data-prefetch",
          "--ipsccp",
          "--sccp",
          "--globalsplit",
          "--lowerinvoke",
          "--loop-vectorize",
          "--loop-deletion",
          "--loop-versioning",
          "--callsite-splitting",
          "--licm",
          "--loop-versioning-licm",
          "--sink",
          "--mem2reg",
          "--loop-unroll-and-jam",
          "--irce",
          "--inline",
          "--simple-loop-unswitch",
          "--cross-dso-cfi",
          "--sroa",
          "--lower-widenable-condition",
          "--instcombine",
          "--dse",
          "--loop-simplify",
          "--slp-vectorizer",
          "--rpo-functionattrs",
          "--canonicalize-aliases",
          "-loop-reduce",
          "--aggressive-instcombine",
          "--add-discriminators"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-data-prefetch",
      "--ipsccp",
      "--sccp",
      "--globalsplit",
      "--lowerinvoke",
      "--loop-vectorize",
      "--loop-deletion",
      "--loop-versioning",
      "--callsite-splitting",
      "--licm",
      "--loop-versioning-licm",
      "--sink",
      "--mem2reg",
      "--loop-unroll-and-jam",
      "--irce",
      "--inline",
      "--simple-loop-unswitch",
      "--cross-dso-cfi",
      "--sroa",
      "--lower-widenable-condition",
      "--instcombine",
      "--dse",
      "--loop-simplify",
      "--slp-vectorizer",
      "--rpo-functionattrs",
      "--canonicalize-aliases",
      "-loop-reduce",
      "--aggressive-instcombine",
      "--add-discriminators"
    ],
    "performance_vs_Oz": "+0.3%"
  }
}
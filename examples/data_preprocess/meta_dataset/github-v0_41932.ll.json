{
  "program_id": "github-v0_41932.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 51,
    "onePredOneSuc": 32,
    "onePredTwoSuc": 16,
    "oneSuccessor": 51,
    "twoPred": 25,
    "twoPredOneSuc": 15,
    "twoEach": 9,
    "twoSuccessor": 25,
    "morePreds": 0,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 80,
    "BeginPhi": 2,
    "BranchCount": 76,
    "returnInt": 3,
    "CriticalCount": 14,
    "NumEdges": 101,
    "const32Bit": 137,
    "const64Bit": 2,
    "numConstZeroes": 39,
    "numConstOnes": 97,
    "UncondBranches": 51,
    "binaryConstArg": 53,
    "NumAShrInst": 2,
    "NumAddInst": 28,
    "NumAllocaInst": 67,
    "NumAndInst": 0,
    "BlockMid": 22,
    "BlockLow": 60,
    "NumBitCastInst": 24,
    "NumBrInst": 76,
    "NumCallInst": 91,
    "NumGetElementPtrInst": 0,
    "NumICmpInst": 15,
    "NumLShrInst": 0,
    "NumLoadInst": 204,
    "NumMulInst": 3,
    "NumOrInst": 0,
    "NumPHIInst": 2,
    "NumRetInst": 6,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 6,
    "NumStoreInst": 158,
    "NumSubInst": 8,
    "NumTruncInst": 16,
    "NumXorInst": 0,
    "NumZExtInst": 36,
    "TotalBlocks": 82,
    "TotalInsts": 852,
    "TotalMemInst": 520,
    "TotalFuncs": 14,
    "ArgsPhi": 4,
    "testUnary": 393
  },
  "baseline_oz_instcount": 852,
  "knowledge_base_entry": [
    "--deadargelim",
    "--mergefunc",
    "--lower-constant-intrinsics",
    "--aggressive-instcombine",
    "--load-store-vectorizer",
    "--loop-simplifycfg",
    "--inline",
    "--mem2reg",
    "--ipsccp"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--hotcoldsplit",
          "--aggressive-instcombine",
          "--mergefunc",
          "--libcalls-shrinkwrap",
          "--coro-cleanup",
          "--always-inline",
          "--nary-reassociate",
          "--ipconstprop",
          "--simple-loop-unswitch",
          "--licm",
          "--loop-unswitch",
          "--sccp",
          "--add-discriminators",
          "--flattencfg",
          "--elim-avail-extern",
          "--canonicalize-aliases",
          "--mldst-motion",
          "--sink",
          "--lowerswitch",
          "--partially-inline-libcalls",
          "--dce",
          "--lower-widenable-condition",
          "--inline",
          "--globalopt",
          "--globaldce",
          "--constmerge",
          "--functionattrs"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--hotcoldsplit",
      "--aggressive-instcombine",
      "--mergefunc",
      "--libcalls-shrinkwrap",
      "--coro-cleanup",
      "--always-inline",
      "--nary-reassociate",
      "--ipconstprop",
      "--simple-loop-unswitch",
      "--licm",
      "--loop-unswitch",
      "--sccp",
      "--add-discriminators",
      "--flattencfg",
      "--elim-avail-extern",
      "--canonicalize-aliases",
      "--mldst-motion",
      "--sink",
      "--lowerswitch",
      "--partially-inline-libcalls",
      "--dce",
      "--lower-widenable-condition",
      "--inline",
      "--globalopt",
      "--globaldce",
      "--constmerge",
      "--functionattrs"
    ],
    "performance_vs_Oz": "+2.8%"
  }
}
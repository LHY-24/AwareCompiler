{
  "program_id": "github-v0_48768.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 15,
    "onePredOneSuc": 10,
    "onePredTwoSuc": 3,
    "oneSuccessor": 13,
    "twoPred": 6,
    "twoPredOneSuc": 3,
    "twoEach": 2,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 24,
    "BeginPhi": 0,
    "BranchCount": 20,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 27,
    "const32Bit": 38,
    "const64Bit": 50,
    "numConstZeroes": 58,
    "numConstOnes": 20,
    "UncondBranches": 13,
    "binaryConstArg": 12,
    "NumAShrInst": 3,
    "NumAddInst": 10,
    "NumAllocaInst": 11,
    "NumAndInst": 3,
    "BlockMid": 7,
    "BlockLow": 17,
    "NumBitCastInst": 0,
    "NumBrInst": 20,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 29,
    "NumICmpInst": 7,
    "NumLShrInst": 0,
    "NumLoadInst": 37,
    "NumMulInst": 4,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 21,
    "NumSubInst": 0,
    "NumTruncInst": 11,
    "NumXorInst": 0,
    "NumZExtInst": 23,
    "TotalBlocks": 24,
    "TotalInsts": 193,
    "TotalMemInst": 105,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 85
  },
  "baseline_oz_instcount": 193,
  "knowledge_base_entry": [
    "--simple-loop-unswitch",
    "--early-cse-memssa",
    "--sccp",
    "--elim-avail-extern",
    "--lower-constant-intrinsics",
    "--aggressive-instcombine",
    "--flattencfg",
    "--mem2reg",
    "--slp-vectorizer",
    "--jump-threading",
    "--loop-simplifycfg",
    "--inline",
    "--reassociate",
    "--sroa"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--ipsccp",
          "--bdce",
          "--indvars",
          "--consthoist",
          "--aggressive-instcombine",
          "--loop-guard-widening",
          "--loop-load-elim",
          "--name-anon-globals",
          "--ipconstprop",
          "--add-discriminators",
          "--attributor",
          "--sancov",
          "--rewrite-statepoints-for-gc",
          "--simple-loop-unswitch",
          "--strip-debug-declare",
          "--lower-constant-intrinsics",
          "--cross-dso-cfi",
          "--gvn-hoist",
          "--loop-unroll-and-jam",
          "--hotcoldsplit",
          "--adce",
          "--instsimplify",
          "--die",
          "--div-rem-pairs",
          "--lcssa",
          "--called-value-propagation",
          "--loop-instsimplify",
          "--early-cse-memssa"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+14.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--ipsccp",
      "--bdce",
      "--indvars",
      "--consthoist",
      "--aggressive-instcombine",
      "--loop-guard-widening",
      "--loop-load-elim",
      "--name-anon-globals",
      "--ipconstprop",
      "--add-discriminators",
      "--attributor",
      "--sancov",
      "--rewrite-statepoints-for-gc",
      "--simple-loop-unswitch",
      "--strip-debug-declare",
      "--lower-constant-intrinsics",
      "--cross-dso-cfi",
      "--gvn-hoist",
      "--loop-unroll-and-jam",
      "--hotcoldsplit",
      "--adce",
      "--instsimplify",
      "--die",
      "--div-rem-pairs",
      "--lcssa",
      "--called-value-propagation",
      "--loop-instsimplify",
      "--early-cse-memssa"
    ],
    "performance_vs_Oz": "+14.5%"
  }
}
{
  "program_id": "poj104-v1_46_2780.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 36,
    "onePredOneSuc": 28,
    "onePredTwoSuc": 5,
    "oneSuccessor": 32,
    "twoPred": 13,
    "twoPredOneSuc": 2,
    "twoEach": 10,
    "twoSuccessor": 17,
    "morePreds": 1,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 57,
    "BeginPhi": 2,
    "BranchCount": 49,
    "returnInt": 3,
    "CriticalCount": 3,
    "NumEdges": 66,
    "const32Bit": 66,
    "const64Bit": 52,
    "numConstZeroes": 60,
    "numConstOnes": 39,
    "UncondBranches": 32,
    "binaryConstArg": 20,
    "NumAShrInst": 0,
    "NumAddInst": 14,
    "NumAllocaInst": 19,
    "NumAndInst": 0,
    "BlockMid": 8,
    "BlockLow": 51,
    "NumBitCastInst": 22,
    "NumBrInst": 49,
    "NumCallInst": 43,
    "NumGetElementPtrInst": 39,
    "NumICmpInst": 17,
    "NumLShrInst": 0,
    "NumLoadInst": 94,
    "NumMulInst": 1,
    "NumOrInst": 0,
    "NumPHIInst": 2,
    "NumRetInst": 9,
    "NumSExtInst": 32,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 37,
    "NumSubInst": 6,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 1,
    "TotalBlocks": 59,
    "TotalInsts": 386,
    "TotalMemInst": 232,
    "TotalFuncs": 21,
    "ArgsPhi": 4,
    "testUnary": 168
  },
  "baseline_oz_instcount": 215,
  "knowledge_base_entry": [
    "--slsr",
    "--loop-simplifycfg",
    "--loop-instsimplify",
    "--die",
    "--reassociate",
    "--sroa",
    "--elim-avail-extern",
    "--loop-simplifycfg",
    "--lower-expect",
    "--loop-instsimplify",
    "--die",
    "--mergefunc",
    "--mergefunc",
    "--reassociate",
    "--elim-avail-extern",
    "--newgvn",
    "--prune-eh",
    "--instcombine",
    "--inline",
    "--instsimplify",
    "--dse",
    "--lower-expect",
    "--instsimplify",
    "--sroa",
    "--bdce",
    "--simplifycfg",
    "--globalopt",
    "--instcombine",
    "--early-cse"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--jump-threading",
          "--loop-sink",
          "--globalsplit",
          "--elim-avail-extern",
          "--loop-load-elim",
          "--memcpyopt",
          "--simple-loop-unswitch",
          "--mem2reg",
          "--post-inline-ee-instrument",
          "--inline",
          "--coro-elide",
          "--loop-fusion",
          "--inferattrs"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--jump-threading",
      "--loop-sink",
      "--globalsplit",
      "--elim-avail-extern",
      "--loop-load-elim",
      "--memcpyopt",
      "--simple-loop-unswitch",
      "--mem2reg",
      "--post-inline-ee-instrument",
      "--inline",
      "--coro-elide",
      "--loop-fusion",
      "--inferattrs"
    ],
    "performance_vs_Oz": "+1.9%"
  }
}
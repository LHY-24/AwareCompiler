{
  "program_id": "github-v0_40028.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 4,
    "onePred": 31,
    "onePredOneSuc": 20,
    "onePredTwoSuc": 11,
    "oneSuccessor": 29,
    "twoPred": 17,
    "twoPredOneSuc": 7,
    "twoEach": 10,
    "twoSuccessor": 21,
    "morePreds": 2,
    "BB03Phi": 4,
    "BBHiPhi": 0,
    "BBNoPhi": 47,
    "BeginPhi": 4,
    "BranchCount": 50,
    "returnInt": 0,
    "CriticalCount": 11,
    "NumEdges": 71,
    "const32Bit": 52,
    "const64Bit": 16,
    "numConstZeroes": 13,
    "numConstOnes": 21,
    "UncondBranches": 29,
    "binaryConstArg": 14,
    "NumAShrInst": 1,
    "NumAddInst": 5,
    "NumAllocaInst": 13,
    "NumAndInst": 4,
    "BlockMid": 2,
    "BlockLow": 49,
    "NumBitCastInst": 0,
    "NumBrInst": 50,
    "NumCallInst": 5,
    "NumGetElementPtrInst": 11,
    "NumICmpInst": 21,
    "NumLShrInst": 1,
    "NumLoadInst": 63,
    "NumMulInst": 2,
    "NumOrInst": 0,
    "NumPHIInst": 4,
    "NumRetInst": 1,
    "NumSExtInst": 12,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 33,
    "NumSubInst": 5,
    "NumTruncInst": 1,
    "NumXorInst": 0,
    "NumZExtInst": 10,
    "TotalBlocks": 51,
    "TotalInsts": 243,
    "TotalMemInst": 125,
    "TotalFuncs": 3,
    "ArgsPhi": 8,
    "testUnary": 99
  },
  "baseline_oz_instcount": 244,
  "knowledge_base_entry": [
    "--elim-avail-extern",
    "--simplifycfg",
    "--newgvn",
    "--aggressive-instcombine",
    "--load-store-vectorizer",
    "--bdce",
    "--sccp",
    "--jump-threading",
    "--correlated-propagation"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--strip",
          "--early-cse",
          "--div-rem-pairs",
          "--called-value-propagation",
          "--newgvn",
          "--correlated-propagation",
          "--instcombine",
          "--lcssa",
          "--jump-threading",
          "--attributor"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--strip",
      "--early-cse",
      "--div-rem-pairs",
      "--called-value-propagation",
      "--newgvn",
      "--correlated-propagation",
      "--instcombine",
      "--lcssa",
      "--jump-threading",
      "--attributor"
    ],
    "performance_vs_Oz": "+0.4%"
  }
}
{
  "program_id": "github-v0_9522.ll",
  "autophase_features": {
    "BBNumArgsHi": 2,
    "BBNumArgsLo": 2,
    "onePred": 22,
    "onePredOneSuc": 12,
    "onePredTwoSuc": 10,
    "oneSuccessor": 13,
    "twoPred": 2,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 11,
    "morePreds": 4,
    "BB03Phi": 3,
    "BBHiPhi": 1,
    "BBNoPhi": 25,
    "BeginPhi": 4,
    "BranchCount": 24,
    "returnInt": 5,
    "CriticalCount": 14,
    "NumEdges": 49,
    "const32Bit": 180,
    "const64Bit": 138,
    "numConstZeroes": 127,
    "numConstOnes": 36,
    "UncondBranches": 13,
    "binaryConstArg": 30,
    "NumAShrInst": 3,
    "NumAddInst": 13,
    "NumAllocaInst": 2,
    "NumAndInst": 1,
    "BlockMid": 6,
    "BlockLow": 23,
    "NumBitCastInst": 48,
    "NumBrInst": 24,
    "NumCallInst": 51,
    "NumGetElementPtrInst": 63,
    "NumICmpInst": 15,
    "NumLShrInst": 0,
    "NumLoadInst": 11,
    "NumMulInst": 5,
    "NumOrInst": 6,
    "NumPHIInst": 13,
    "NumRetInst": 1,
    "NumSExtInst": 4,
    "NumSelectInst": 3,
    "NumShlInst": 15,
    "NumStoreInst": 54,
    "NumSubInst": 2,
    "NumTruncInst": 4,
    "NumXorInst": 0,
    "NumZExtInst": 6,
    "TotalBlocks": 29,
    "TotalInsts": 378,
    "TotalMemInst": 181,
    "TotalFuncs": 10,
    "ArgsPhi": 66,
    "testUnary": 75
  },
  "baseline_oz_instcount": 378,
  "knowledge_base_entry": [
    "--elim-avail-extern",
    "--aggressive-instcombine",
    "--adce",
    "--reassociate",
    "--ipsccp",
    "--correlated-propagation",
    "--load-store-vectorizer",
    "--newgvn",
    "--elim-avail-extern",
    "--aggressive-instcombine",
    "--loweratomic",
    "--globalopt",
    "--jump-threading",
    "--loop-reroll",
    "--mergefunc",
    "--lower-constant-intrinsics",
    "--loop-reroll",
    "--slp-vectorizer",
    "--early-cse",
    "--bdce",
    "--load-store-vectorizer",
    "--dse",
    "--lower-constant-intrinsics",
    "--sroa",
    "--dse",
    "--instcombine",
    "--prune-eh",
    "--inline",
    "--loop-instsimplify",
    "--nary-reassociate",
    "--early-cse-memssa",
    "--gvn-hoist",
    "--mergefunc"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--ipconstprop",
          "--lower-constant-intrinsics",
          "--forceattrs",
          "--loop-idiom",
          "--argpromotion",
          "--load-store-vectorizer",
          "--early-cse-memssa",
          "--lcssa",
          "--globalopt",
          "--loop-versioning",
          "--strip-debug-declare",
          "--gvn-hoist",
          "--loweratomic",
          "--strip-nondebug",
          "--indvars",
          "--slp-vectorizer",
          "--loop-fusion",
          "--post-inline-ee-instrument",
          "--inject-tli-mappings",
          "--float2int",
          "--loop-interchange",
          "--functionattrs",
          "--simplifycfg",
          "--reassociate",
          "--instcombine",
          "--always-inline",
          "--attributor"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+10.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--ipconstprop",
      "--lower-constant-intrinsics",
      "--forceattrs",
      "--loop-idiom",
      "--argpromotion",
      "--load-store-vectorizer",
      "--early-cse-memssa",
      "--lcssa",
      "--globalopt",
      "--loop-versioning",
      "--strip-debug-declare",
      "--gvn-hoist",
      "--loweratomic",
      "--strip-nondebug",
      "--indvars",
      "--slp-vectorizer",
      "--loop-fusion",
      "--post-inline-ee-instrument",
      "--inject-tli-mappings",
      "--float2int",
      "--loop-interchange",
      "--functionattrs",
      "--simplifycfg",
      "--reassociate",
      "--instcombine",
      "--always-inline",
      "--attributor"
    ],
    "performance_vs_Oz": "+10.3%"
  }
}
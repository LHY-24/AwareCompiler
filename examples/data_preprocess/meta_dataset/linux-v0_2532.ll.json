{
  "program_id": "linux-v0_2532.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 61,
    "onePredOneSuc": 44,
    "onePredTwoSuc": 14,
    "oneSuccessor": 54,
    "twoPred": 20,
    "twoPredOneSuc": 8,
    "twoEach": 7,
    "twoSuccessor": 29,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 109,
    "BeginPhi": 0,
    "BranchCount": 83,
    "returnInt": 37,
    "CriticalCount": 9,
    "NumEdges": 112,
    "const32Bit": 312,
    "const64Bit": 33,
    "numConstZeroes": 118,
    "numConstOnes": 134,
    "UncondBranches": 54,
    "binaryConstArg": 40,
    "NumAShrInst": 0,
    "NumAddInst": 9,
    "NumAllocaInst": 105,
    "NumAndInst": 12,
    "BlockMid": 18,
    "BlockLow": 91,
    "NumBitCastInst": 25,
    "NumBrInst": 83,
    "NumCallInst": 84,
    "NumGetElementPtrInst": 93,
    "NumICmpInst": 31,
    "NumLShrInst": 0,
    "NumLoadInst": 287,
    "NumMulInst": 2,
    "NumOrInst": 12,
    "NumPHIInst": 0,
    "NumRetInst": 26,
    "NumSExtInst": 9,
    "NumSelectInst": 0,
    "NumShlInst": 3,
    "NumStoreInst": 147,
    "NumSubInst": 1,
    "NumTruncInst": 9,
    "NumXorInst": 5,
    "NumZExtInst": 18,
    "TotalBlocks": 109,
    "TotalInsts": 966,
    "TotalMemInst": 716,
    "TotalFuncs": 56,
    "ArgsPhi": 0,
    "testUnary": 458
  },
  "baseline_oz_instcount": 966,
  "knowledge_base_entry": [
    "--ipsccp",
    "--loweratomic",
    "--ipsccp",
    "--lower-constant-intrinsics",
    "--instcombine",
    "--ipsccp",
    "--lower-expect",
    "--dse",
    "--sroa",
    "--early-cse-memssa",
    "--loop-rotate",
    "--mem2reg",
    "--aggressive-instcombine",
    "--load-store-vectorizer",
    "--aggressive-instcombine",
    "--inline",
    "--adce",
    "--lower-expect",
    "--loop-instsimplify",
    "--inline",
    "--early-cse",
    "--mergefunc",
    "--licm",
    "--bdce",
    "--jump-threading"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-idiom",
          "--aggressive-instcombine",
          "--loweratomic",
          "--early-cse-memssa",
          "--bdce",
          "--loop-distribute",
          "--always-inline",
          "--loop-unroll",
          "--lower-constant-intrinsics",
          "--attributor",
          "--strip",
          "--infer-address-spaces",
          "--instcombine",
          "--loop-simplifycfg",
          "--float2int",
          "--loop-data-prefetch",
          "--constmerge",
          "--partially-inline-libcalls"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-idiom",
      "--aggressive-instcombine",
      "--loweratomic",
      "--early-cse-memssa",
      "--bdce",
      "--loop-distribute",
      "--always-inline",
      "--loop-unroll",
      "--lower-constant-intrinsics",
      "--attributor",
      "--strip",
      "--infer-address-spaces",
      "--instcombine",
      "--loop-simplifycfg",
      "--float2int",
      "--loop-data-prefetch",
      "--constmerge",
      "--partially-inline-libcalls"
    ],
    "performance_vs_Oz": "+1.4%"
  }
}
{
  "program_id": "github-v0_12283.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 4,
    "onePredOneSuc": 2,
    "onePredTwoSuc": 2,
    "oneSuccessor": 4,
    "twoPred": 3,
    "twoPredOneSuc": 1,
    "twoEach": 1,
    "twoSuccessor": 3,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 8,
    "BeginPhi": 0,
    "BranchCount": 7,
    "returnInt": 0,
    "CriticalCount": 2,
    "NumEdges": 10,
    "const32Bit": 62,
    "const64Bit": 72,
    "numConstZeroes": 28,
    "numConstOnes": 56,
    "UncondBranches": 4,
    "binaryConstArg": 52,
    "NumAShrInst": 0,
    "NumAddInst": 3,
    "NumAllocaInst": 16,
    "NumAndInst": 25,
    "BlockMid": 4,
    "BlockLow": 4,
    "NumBitCastInst": 0,
    "NumBrInst": 7,
    "NumCallInst": 1,
    "NumGetElementPtrInst": 46,
    "NumICmpInst": 3,
    "NumLShrInst": 18,
    "NumLoadInst": 94,
    "NumMulInst": 0,
    "NumOrInst": 6,
    "NumPHIInst": 0,
    "NumRetInst": 1,
    "NumSExtInst": 1,
    "NumSelectInst": 0,
    "NumShlInst": 6,
    "NumStoreInst": 95,
    "NumSubInst": 0,
    "NumTruncInst": 25,
    "NumXorInst": 1,
    "NumZExtInst": 10,
    "TotalBlocks": 8,
    "TotalInsts": 358,
    "TotalMemInst": 252,
    "TotalFuncs": 2,
    "ArgsPhi": 0,
    "testUnary": 146
  },
  "baseline_oz_instcount": 358,
  "knowledge_base_entry": [
    "--loop-instsimplify",
    "--simplifycfg",
    "--loop-instsimplify",
    "--globalopt",
    "--globaldce",
    "--aggressive-instcombine",
    "--loweratomic",
    "--early-cse-memssa",
    "--lower-constant-intrinsics",
    "--jump-threading",
    "--reassociate",
    "--correlated-propagation",
    "--nary-reassociate",
    "--mem2reg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--ee-instrument",
          "--flattencfg",
          "--sink",
          "--jump-threading",
          "--inline",
          "--strip-nondebug",
          "--alignment-from-assumptions",
          "--mergeicmps",
          "--aggressive-instcombine",
          "--coro-elide",
          "--speculative-execution",
          "--loop-unroll",
          "--loop-simplify",
          "--tailcallelim",
          "--consthoist",
          "--loop-instsimplify",
          "--always-inline",
          "--infer-address-spaces",
          "--mldst-motion",
          "--libcalls-shrinkwrap",
          "--load-store-vectorizer",
          "--memcpyopt",
          "--dce",
          "--globalopt",
          "--redundant-dbg-inst-elim",
          "--mergereturn",
          "--pgo-memop-opt",
          "--mergefunc",
          "--lowerswitch",
          "--partially-inline-libcalls"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--ee-instrument",
      "--flattencfg",
      "--sink",
      "--jump-threading",
      "--inline",
      "--strip-nondebug",
      "--alignment-from-assumptions",
      "--mergeicmps",
      "--aggressive-instcombine",
      "--coro-elide",
      "--speculative-execution",
      "--loop-unroll",
      "--loop-simplify",
      "--tailcallelim",
      "--consthoist",
      "--loop-instsimplify",
      "--always-inline",
      "--infer-address-spaces",
      "--mldst-motion",
      "--libcalls-shrinkwrap",
      "--load-store-vectorizer",
      "--memcpyopt",
      "--dce",
      "--globalopt",
      "--redundant-dbg-inst-elim",
      "--mergereturn",
      "--pgo-memop-opt",
      "--mergefunc",
      "--lowerswitch",
      "--partially-inline-libcalls"
    ],
    "performance_vs_Oz": "+0.8%"
  }
}
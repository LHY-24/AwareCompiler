{
  "program_id": "github-v0_20061.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 26,
    "onePredOneSuc": 23,
    "onePredTwoSuc": 3,
    "oneSuccessor": 26,
    "twoPred": 11,
    "twoPredOneSuc": 2,
    "twoEach": 8,
    "twoSuccessor": 11,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 43,
    "BeginPhi": 0,
    "BranchCount": 37,
    "returnInt": 3,
    "CriticalCount": 2,
    "NumEdges": 48,
    "const32Bit": 81,
    "const64Bit": 139,
    "numConstZeroes": 110,
    "numConstOnes": 55,
    "UncondBranches": 26,
    "binaryConstArg": 20,
    "NumAShrInst": 0,
    "NumAddInst": 8,
    "NumAllocaInst": 28,
    "NumAndInst": 1,
    "BlockMid": 8,
    "BlockLow": 35,
    "NumBitCastInst": 34,
    "NumBrInst": 37,
    "NumCallInst": 39,
    "NumGetElementPtrInst": 98,
    "NumICmpInst": 16,
    "NumLShrInst": 0,
    "NumLoadInst": 109,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 6,
    "NumSExtInst": 4,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 48,
    "NumSubInst": 3,
    "NumTruncInst": 3,
    "NumXorInst": 8,
    "NumZExtInst": 21,
    "TotalBlocks": 43,
    "TotalInsts": 467,
    "TotalMemInst": 322,
    "TotalFuncs": 9,
    "ArgsPhi": 0,
    "testUnary": 201
  },
  "baseline_oz_instcount": 467,
  "knowledge_base_entry": [
    "--globaldce",
    "--aggressive-instcombine",
    "--die",
    "--inline",
    "--dse",
    "--instsimplify",
    "--aggressive-instcombine",
    "--die",
    "--load-store-vectorizer",
    "--lower-expect",
    "--slp-vectorizer",
    "--newgvn",
    "--dse",
    "--dce",
    "--jump-threading",
    "--newgvn",
    "--aggressive-instcombine",
    "--mem2reg",
    "--early-cse-memssa",
    "--mldst-motion"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--rpo-functionattrs",
          "--sccp",
          "--always-inline",
          "--gvn-hoist",
          "--mergefunc",
          "--aggressive-instcombine",
          "--loop-unswitch",
          "--loop-instsimplify",
          "--lcssa",
          "--globaldce",
          "--lower-constant-intrinsics",
          "--nary-reassociate"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--rpo-functionattrs",
      "--sccp",
      "--always-inline",
      "--gvn-hoist",
      "--mergefunc",
      "--aggressive-instcombine",
      "--loop-unswitch",
      "--loop-instsimplify",
      "--lcssa",
      "--globaldce",
      "--lower-constant-intrinsics",
      "--nary-reassociate"
    ],
    "performance_vs_Oz": "+0.6%"
  }
}
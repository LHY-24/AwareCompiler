{
  "program_id": "linux-v0_10087.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 4,
    "onePredOneSuc": 4,
    "onePredTwoSuc": 0,
    "oneSuccessor": 4,
    "twoPred": 2,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 2,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 13,
    "BeginPhi": 0,
    "BranchCount": 6,
    "returnInt": 6,
    "CriticalCount": 0,
    "NumEdges": 8,
    "const32Bit": 22,
    "const64Bit": 11,
    "numConstZeroes": 8,
    "numConstOnes": 15,
    "UncondBranches": 4,
    "binaryConstArg": 7,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 13,
    "NumAndInst": 4,
    "BlockMid": 3,
    "BlockLow": 10,
    "NumBitCastInst": 2,
    "NumBrInst": 6,
    "NumCallInst": 14,
    "NumGetElementPtrInst": 7,
    "NumICmpInst": 3,
    "NumLShrInst": 0,
    "NumLoadInst": 28,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 7,
    "NumSExtInst": 1,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 18,
    "NumSubInst": 0,
    "NumTruncInst": 4,
    "NumXorInst": 2,
    "NumZExtInst": 5,
    "TotalBlocks": 13,
    "TotalInsts": 119,
    "TotalMemInst": 80,
    "TotalFuncs": 11,
    "ArgsPhi": 0,
    "testUnary": 57
  },
  "baseline_oz_instcount": 117,
  "knowledge_base_entry": [
    "--separate-const-offset-from-gep",
    "--early-cse",
    "--prune-eh",
    "--aggressive-instcombine",
    "--loop-rotate",
    "--lower-constant-intrinsics",
    "--globalopt",
    "--elim-avail-extern",
    "--ipsccp",
    "--globaldce",
    "--ipsccp",
    "--aggressive-instcombine",
    "--loweratomic",
    "--ipsccp",
    "--lower-constant-intrinsics",
    "--mergefunc",
    "--dse",
    "--gvn",
    "--ipsccp",
    "--early-cse",
    "--load-store-vectorizer"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--early-cse",
          "--flattencfg",
          "--post-inline-ee-instrument",
          "--coro-cleanup",
          "-loop-reduce",
          "--simple-loop-unswitch",
          "--loop-simplifycfg",
          "--strip-dead-prototypes",
          "--ipconstprop",
          "--globalopt",
          "--libcalls-shrinkwrap",
          "--loop-unroll-and-jam",
          "--aggressive-instcombine",
          "--insert-gcov-profiling",
          "--loop-deletion",
          "--mergereturn",
          "--globaldce",
          "--correlated-propagation",
          "--forceattrs",
          "--loop-unroll"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--early-cse",
      "--flattencfg",
      "--post-inline-ee-instrument",
      "--coro-cleanup",
      "-loop-reduce",
      "--simple-loop-unswitch",
      "--loop-simplifycfg",
      "--strip-dead-prototypes",
      "--ipconstprop",
      "--globalopt",
      "--libcalls-shrinkwrap",
      "--loop-unroll-and-jam",
      "--aggressive-instcombine",
      "--insert-gcov-profiling",
      "--loop-deletion",
      "--mergereturn",
      "--globaldce",
      "--correlated-propagation",
      "--forceattrs",
      "--loop-unroll"
    ],
    "performance_vs_Oz": "+3.4%"
  }
}
{
  "program_id": "github-v0_48846.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 17,
    "onePredOneSuc": 10,
    "onePredTwoSuc": 4,
    "oneSuccessor": 15,
    "twoPred": 7,
    "twoPredOneSuc": 4,
    "twoEach": 3,
    "twoSuccessor": 8,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 27,
    "BeginPhi": 0,
    "BranchCount": 23,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 31,
    "const32Bit": 37,
    "const64Bit": 82,
    "numConstZeroes": 72,
    "numConstOnes": 37,
    "UncondBranches": 15,
    "binaryConstArg": 7,
    "NumAShrInst": 0,
    "NumAddInst": 8,
    "NumAllocaInst": 18,
    "NumAndInst": 0,
    "BlockMid": 7,
    "BlockLow": 20,
    "NumBitCastInst": 28,
    "NumBrInst": 23,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 72,
    "NumICmpInst": 8,
    "NumLShrInst": 0,
    "NumLoadInst": 77,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 37,
    "NumSubInst": 0,
    "NumTruncInst": 3,
    "NumXorInst": 0,
    "NumZExtInst": 28,
    "TotalBlocks": 27,
    "TotalInsts": 316,
    "TotalMemInst": 211,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 157
  },
  "baseline_oz_instcount": 316,
  "knowledge_base_entry": [
    "--loop-simplifycfg",
    "--aggressive-instcombine",
    "--die",
    "--jump-threading",
    "--early-cse",
    "--inline",
    "--licm",
    "--mldst-motion",
    "--load-store-vectorizer",
    "--mem2reg",
    "--dse",
    "--elim-avail-extern"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--partial-inliner",
          "--lower-constant-intrinsics",
          "--irce",
          "--name-anon-globals",
          "--gvn",
          "--dse",
          "--correlated-propagation",
          "--loop-distribute",
          "--loop-vectorize",
          "--guard-widening",
          "--canonicalize-aliases",
          "--globalsplit",
          "--loop-load-elim",
          "--coro-cleanup",
          "--sccp",
          "--loop-unroll",
          "--licm",
          "--ipsccp",
          "--loop-unswitch",
          "--mergeicmps",
          "--post-inline-ee-instrument",
          "--dce",
          "--infer-address-spaces",
          "--coro-elide",
          "--aggressive-instcombine",
          "--mergefunc",
          "--die",
          "--barrier"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--partial-inliner",
      "--lower-constant-intrinsics",
      "--irce",
      "--name-anon-globals",
      "--gvn",
      "--dse",
      "--correlated-propagation",
      "--loop-distribute",
      "--loop-vectorize",
      "--guard-widening",
      "--canonicalize-aliases",
      "--globalsplit",
      "--loop-load-elim",
      "--coro-cleanup",
      "--sccp",
      "--loop-unroll",
      "--licm",
      "--ipsccp",
      "--loop-unswitch",
      "--mergeicmps",
      "--post-inline-ee-instrument",
      "--dce",
      "--infer-address-spaces",
      "--coro-elide",
      "--aggressive-instcombine",
      "--mergefunc",
      "--die",
      "--barrier"
    ],
    "performance_vs_Oz": "+1.3%"
  }
}
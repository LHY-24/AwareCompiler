{
  "program_id": "github-v0_29065.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 3,
    "onePredOneSuc": 2,
    "onePredTwoSuc": 0,
    "oneSuccessor": 3,
    "twoPred": 1,
    "twoPredOneSuc": 0,
    "twoEach": 1,
    "twoSuccessor": 1,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 11,
    "BeginPhi": 0,
    "BranchCount": 4,
    "returnInt": 2,
    "CriticalCount": 0,
    "NumEdges": 5,
    "const32Bit": 35,
    "const64Bit": 5,
    "numConstZeroes": 11,
    "numConstOnes": 24,
    "UncondBranches": 3,
    "binaryConstArg": 7,
    "NumAShrInst": 1,
    "NumAddInst": 1,
    "NumAllocaInst": 21,
    "NumAndInst": 4,
    "BlockMid": 4,
    "BlockLow": 7,
    "NumBitCastInst": 2,
    "NumBrInst": 4,
    "NumCallInst": 2,
    "NumGetElementPtrInst": 9,
    "NumICmpInst": 1,
    "NumLShrInst": 0,
    "NumLoadInst": 36,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 7,
    "NumSExtInst": 1,
    "NumSelectInst": 0,
    "NumShlInst": 3,
    "NumStoreInst": 28,
    "NumSubInst": 0,
    "NumTruncInst": 7,
    "NumXorInst": 3,
    "NumZExtInst": 13,
    "TotalBlocks": 11,
    "TotalInsts": 143,
    "TotalMemInst": 96,
    "TotalFuncs": 7,
    "ArgsPhi": 0,
    "testUnary": 80
  },
  "baseline_oz_instcount": 143,
  "knowledge_base_entry": [
    "--hotcoldsplit",
    "--mergefunc",
    "--loop-simplifycfg",
    "--mldst-motion",
    "--newgvn",
    "--flattencfg",
    "--aggressive-instcombine",
    "--flattencfg",
    "--load-store-vectorizer",
    "--gvn-hoist",
    "--gvn",
    "--sccp",
    "--adce",
    "--mem2reg",
    "--lower-constant-intrinsics",
    "--reassociate",
    "-loop-reduce",
    "--indvars",
    "--jump-threading",
    "--loop-rotate",
    "--early-cse",
    "--dse",
    "--slp-vectorizer",
    "--sroa",
    "--simplifycfg",
    "--inline",
    "--loop-rotate"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--globaldce",
          "--loop-idiom",
          "--mem2reg",
          "--newgvn",
          "--load-store-vectorizer",
          "--alignment-from-assumptions",
          "--loop-versioning-licm",
          "--dse",
          "--coro-early",
          "--prune-eh",
          "--float2int",
          "--name-anon-globals",
          "--guard-widening",
          "--licm",
          "--loop-fusion",
          "--aggressive-instcombine",
          "--deadargelim",
          "--infer-address-spaces",
          "--reg2mem",
          "--reassociate",
          "--loop-distribute",
          "--simplifycfg"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+5.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--globaldce",
      "--loop-idiom",
      "--mem2reg",
      "--newgvn",
      "--load-store-vectorizer",
      "--alignment-from-assumptions",
      "--loop-versioning-licm",
      "--dse",
      "--coro-early",
      "--prune-eh",
      "--float2int",
      "--name-anon-globals",
      "--guard-widening",
      "--licm",
      "--loop-fusion",
      "--aggressive-instcombine",
      "--deadargelim",
      "--infer-address-spaces",
      "--reg2mem",
      "--reassociate",
      "--loop-distribute",
      "--simplifycfg"
    ],
    "performance_vs_Oz": "+5.6%"
  }
}
{
  "program_id": "github-v0_9064.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 12,
    "onePredOneSuc": 11,
    "onePredTwoSuc": 0,
    "oneSuccessor": 12,
    "twoPred": 4,
    "twoPredOneSuc": 0,
    "twoEach": 4,
    "twoSuccessor": 4,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 56,
    "BeginPhi": 0,
    "BranchCount": 16,
    "returnInt": 0,
    "CriticalCount": 0,
    "NumEdges": 20,
    "const32Bit": 154,
    "const64Bit": 17,
    "numConstZeroes": 21,
    "numConstOnes": 78,
    "UncondBranches": 12,
    "binaryConstArg": 72,
    "NumAShrInst": 0,
    "NumAddInst": 12,
    "NumAllocaInst": 74,
    "NumAndInst": 52,
    "BlockMid": 13,
    "BlockLow": 43,
    "NumBitCastInst": 130,
    "NumBrInst": 16,
    "NumCallInst": 4,
    "NumGetElementPtrInst": 0,
    "NumICmpInst": 4,
    "NumLShrInst": 0,
    "NumLoadInst": 133,
    "NumMulInst": 8,
    "NumOrInst": 13,
    "NumPHIInst": 0,
    "NumRetInst": 40,
    "NumSExtInst": 8,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 98,
    "NumSubInst": 0,
    "NumTruncInst": 30,
    "NumXorInst": 0,
    "NumZExtInst": 47,
    "TotalBlocks": 56,
    "TotalInsts": 677,
    "TotalMemInst": 309,
    "TotalFuncs": 40,
    "ArgsPhi": 0,
    "testUnary": 430
  },
  "baseline_oz_instcount": 677,
  "knowledge_base_entry": [
    "--loop-interchange",
    "--early-cse",
    "--indvars",
    "--early-cse",
    "--aggressive-instcombine",
    "--elim-avail-extern",
    "--loop-instsimplify",
    "--mem2reg",
    "--globalopt",
    "--inline",
    "--die",
    "--ipsccp",
    "--mergefunc",
    "--dce",
    "--loop-simplifycfg",
    "--gvn-hoist",
    "--aggressive-instcombine",
    "--instcombine",
    "--aggressive-instcombine",
    "--mem2reg",
    "--newgvn",
    "--early-cse-memssa",
    "--gvn",
    "--elim-avail-extern",
    "--mergefunc",
    "--mergefunc",
    "--licm"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--globalopt",
          "--name-anon-globals",
          "--loop-guard-widening",
          "--separate-const-offset-from-gep",
          "--mergefunc",
          "--gvn",
          "--rpo-functionattrs",
          "--strip-dead-prototypes",
          "--loop-data-prefetch",
          "--called-value-propagation",
          "--dse",
          "--aggressive-instcombine",
          "--die",
          "--mldst-motion",
          "--slsr",
          "--loop-unroll-and-jam",
          "--reg2mem"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+9.0%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--globalopt",
      "--name-anon-globals",
      "--loop-guard-widening",
      "--separate-const-offset-from-gep",
      "--mergefunc",
      "--gvn",
      "--rpo-functionattrs",
      "--strip-dead-prototypes",
      "--loop-data-prefetch",
      "--called-value-propagation",
      "--dse",
      "--aggressive-instcombine",
      "--die",
      "--mldst-motion",
      "--slsr",
      "--loop-unroll-and-jam",
      "--reg2mem"
    ],
    "performance_vs_Oz": "+9.0%"
  }
}
{
  "program_id": "github-v0_12565.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 10,
    "onePred": 101,
    "onePredOneSuc": 61,
    "onePredTwoSuc": 35,
    "oneSuccessor": 94,
    "twoPred": 44,
    "twoPredOneSuc": 28,
    "twoEach": 14,
    "twoSuccessor": 56,
    "morePreds": 9,
    "BB03Phi": 10,
    "BBHiPhi": 0,
    "BBNoPhi": 152,
    "BeginPhi": 10,
    "BranchCount": 150,
    "returnInt": 42,
    "CriticalCount": 57,
    "NumEdges": 251,
    "const32Bit": 336,
    "const64Bit": 11,
    "numConstZeroes": 135,
    "numConstOnes": 77,
    "UncondBranches": 94,
    "binaryConstArg": 84,
    "NumAShrInst": 0,
    "NumAddInst": 5,
    "NumAllocaInst": 29,
    "NumAndInst": 44,
    "BlockMid": 4,
    "BlockLow": 158,
    "NumBitCastInst": 1,
    "NumBrInst": 150,
    "NumCallInst": 44,
    "NumGetElementPtrInst": 29,
    "NumICmpInst": 64,
    "NumLShrInst": 0,
    "NumLoadInst": 196,
    "NumMulInst": 0,
    "NumOrInst": 30,
    "NumPHIInst": 10,
    "NumRetInst": 8,
    "NumSExtInst": 0,
    "NumSelectInst": 7,
    "NumShlInst": 8,
    "NumStoreInst": 132,
    "NumSubInst": 0,
    "NumTruncInst": 12,
    "NumXorInst": 9,
    "NumZExtInst": 37,
    "TotalBlocks": 162,
    "TotalInsts": 827,
    "TotalMemInst": 430,
    "TotalFuncs": 27,
    "ArgsPhi": 20,
    "testUnary": 275
  },
  "baseline_oz_instcount": 828,
  "knowledge_base_entry": [
    "--dse",
    "--mldst-motion",
    "--elim-avail-extern",
    "--lower-constant-intrinsics",
    "--dce",
    "--aggressive-instcombine",
    "--simplifycfg",
    "--sroa",
    "--ipsccp",
    "--die",
    "--aggressive-instcombine",
    "--gvn-hoist",
    "--globalopt",
    "--gvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--mldst-motion",
          "--inferattrs",
          "--strip-dead-prototypes",
          "--loop-versioning",
          "--guard-widening",
          "--aggressive-instcombine",
          "--loop-unroll-and-jam",
          "--prune-eh",
          "--adce",
          "--gvn",
          "--lcssa"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--mldst-motion",
      "--inferattrs",
      "--strip-dead-prototypes",
      "--loop-versioning",
      "--guard-widening",
      "--aggressive-instcombine",
      "--loop-unroll-and-jam",
      "--prune-eh",
      "--adce",
      "--gvn",
      "--lcssa"
    ],
    "performance_vs_Oz": "+1.1%"
  }
}
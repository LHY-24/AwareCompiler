{
  "program_id": "poj104-v1_7_1162.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 32,
    "onePredOneSuc": 24,
    "onePredTwoSuc": 6,
    "oneSuccessor": 29,
    "twoPred": 14,
    "twoPredOneSuc": 4,
    "twoEach": 5,
    "twoSuccessor": 17,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 72,
    "BeginPhi": 0,
    "BranchCount": 46,
    "returnInt": 21,
    "CriticalCount": 6,
    "NumEdges": 63,
    "const32Bit": 92,
    "const64Bit": 85,
    "numConstZeroes": 53,
    "numConstOnes": 69,
    "UncondBranches": 29,
    "binaryConstArg": 5,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 51,
    "NumAndInst": 0,
    "BlockMid": 8,
    "BlockLow": 64,
    "NumBitCastInst": 69,
    "NumBrInst": 46,
    "NumCallInst": 86,
    "NumGetElementPtrInst": 54,
    "NumICmpInst": 19,
    "NumLShrInst": 0,
    "NumLoadInst": 132,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 25,
    "NumSExtInst": 7,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 73,
    "NumSubInst": 3,
    "NumTruncInst": 4,
    "NumXorInst": 0,
    "NumZExtInst": 5,
    "TotalBlocks": 72,
    "TotalInsts": 580,
    "TotalMemInst": 396,
    "TotalFuncs": 41,
    "ArgsPhi": 0,
    "testUnary": 268
  },
  "baseline_oz_instcount": 210,
  "knowledge_base_entry": [
    "--strip-nondebug",
    "--mergefunc",
    "--correlated-propagation",
    "--loop-reroll",
    "--memcpyopt",
    "--elim-avail-extern",
    "--loop-simplifycfg",
    "--dse",
    "--licm",
    "--mem2reg",
    "--ipsccp",
    "--loop-deletion",
    "--early-cse",
    "--early-cse",
    "--instcombine",
    "--adce",
    "--instsimplify",
    "--licm",
    "--dce",
    "--elim-avail-extern",
    "--lower-expect",
    "--jump-threading",
    "--lower-constant-intrinsics",
    "--prune-eh",
    "--elim-avail-extern",
    "--instcombine",
    "--adce",
    "--mem2reg",
    "--ipsccp",
    "--inline",
    "--sroa",
    "--jump-threading",
    "--aggressive-instcombine",
    "--early-cse-memssa",
    "-loop-reduce",
    "--simplifycfg",
    "--die",
    "--slp-vectorizer",
    "--nary-reassociate",
    "--dse",
    "--loop-instsimplify",
    "--lower-constant-intrinsics",
    "--gvn-hoist",
    "--slp-vectorizer",
    "--slsr",
    "--load-store-vectorizer",
    "--instcombine",
    "--instsimplify",
    "--gvn-hoist",
    "--sroa",
    "--early-cse",
    "--early-cse-memssa",
    "--flattencfg",
    "--instcombine",
    "--lower-constant-intrinsics",
    "--correlated-propagation",
    "--lower-expect",
    "--slp-vectorizer",
    "--early-cse-memssa",
    "--globalopt",
    "--reassociate",
    "--ipsccp",
    "--newgvn",
    "--sroa",
    "--loop-reroll",
    "--lower-constant-intrinsics",
    "--load-store-vectorizer",
    "--instcombine",
    "--lower-constant-intrinsics",
    "--correlated-propagation",
    "--lower-expect",
    "--slp-vectorizer",
    "--early-cse-memssa",
    "--globalopt",
    "--reassociate",
    "--elim-avail-extern",
    "--instcombine",
    "--adce",
    "--mem2reg",
    "--ipsccp",
    "--inline",
    "--sroa",
    "--jump-threading",
    "--aggressive-instcombine",
    "--early-cse-memssa",
    "-loop-reduce",
    "--simplifycfg",
    "--die",
    "--slp-vectorizer",
    "--early-cse-memssa",
    "--globalopt",
    "--reassociate",
    "--aggressive-instcombine",
    "--bdce",
    "--lower-constant-intrinsics",
    "--adce",
    "--mem2reg",
    "--inline",
    "--sroa",
    "--jump-threading",
    "--early-cse"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-distribute",
          "--partially-inline-libcalls",
          "--strip-debug-declare",
          "--mergeicmps",
          "--loop-versioning",
          "--early-cse-memssa",
          "--lower-constant-intrinsics",
          "--globalsplit",
          "-loop-reduce",
          "--loop-interchange",
          "--instcombine",
          "--strip-dead-prototypes",
          "--loop-unroll-and-jam",
          "--loop-guard-widening",
          "--loop-reroll",
          "--lower-guard-intrinsic",
          "--loop-load-elim",
          "--partial-inliner",
          "--loop-predication",
          "--guard-widening",
          "--infer-address-spaces",
          "--elim-avail-extern",
          "--constprop",
          "--deadargelim",
          "--lowerswitch"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+13.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-distribute",
      "--partially-inline-libcalls",
      "--strip-debug-declare",
      "--mergeicmps",
      "--loop-versioning",
      "--early-cse-memssa",
      "--lower-constant-intrinsics",
      "--globalsplit",
      "-loop-reduce",
      "--loop-interchange",
      "--instcombine",
      "--strip-dead-prototypes",
      "--loop-unroll-and-jam",
      "--loop-guard-widening",
      "--loop-reroll",
      "--lower-guard-intrinsic",
      "--loop-load-elim",
      "--partial-inliner",
      "--loop-predication",
      "--guard-widening",
      "--infer-address-spaces",
      "--elim-avail-extern",
      "--constprop",
      "--deadargelim",
      "--lowerswitch"
    ],
    "performance_vs_Oz": "+13.8%"
  }
}
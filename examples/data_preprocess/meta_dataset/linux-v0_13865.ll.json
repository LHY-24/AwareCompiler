{
  "program_id": "linux-v0_13865.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 39,
    "onePredOneSuc": 28,
    "onePredTwoSuc": 11,
    "oneSuccessor": 31,
    "twoPred": 12,
    "twoPredOneSuc": 3,
    "twoEach": 3,
    "twoSuccessor": 22,
    "morePreds": 2,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 67,
    "BeginPhi": 1,
    "BranchCount": 53,
    "returnInt": 40,
    "CriticalCount": 5,
    "NumEdges": 75,
    "const32Bit": 196,
    "const64Bit": 50,
    "numConstZeroes": 81,
    "numConstOnes": 50,
    "UncondBranches": 31,
    "binaryConstArg": 34,
    "NumAShrInst": 3,
    "NumAddInst": 0,
    "NumAllocaInst": 38,
    "NumAndInst": 15,
    "BlockMid": 8,
    "BlockLow": 60,
    "NumBitCastInst": 3,
    "NumBrInst": 53,
    "NumCallInst": 41,
    "NumGetElementPtrInst": 50,
    "NumICmpInst": 22,
    "NumLShrInst": 0,
    "NumLoadInst": 160,
    "NumMulInst": 0,
    "NumOrInst": 16,
    "NumPHIInst": 1,
    "NumRetInst": 15,
    "NumSExtInst": 9,
    "NumSelectInst": 0,
    "NumShlInst": 6,
    "NumStoreInst": 81,
    "NumSubInst": 0,
    "NumTruncInst": 32,
    "NumXorInst": 1,
    "NumZExtInst": 25,
    "TotalBlocks": 68,
    "TotalInsts": 571,
    "TotalMemInst": 370,
    "TotalFuncs": 24,
    "ArgsPhi": 2,
    "testUnary": 267
  },
  "baseline_oz_instcount": 571,
  "knowledge_base_entry": [
    "-loop-reduce",
    "--gvn",
    "--adce",
    "--aggressive-instcombine",
    "--gvn-hoist",
    "--licm",
    "--prune-eh",
    "--inline",
    "--dse",
    "--slp-vectorizer",
    "--mergefunc",
    "--sroa",
    "--ipsccp"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-vectorize",
          "--partially-inline-libcalls",
          "--partial-inliner",
          "--mldst-motion",
          "--aggressive-instcombine",
          "--mem2reg",
          "--inline",
          "--loop-deletion",
          "--instsimplify",
          "--globalopt"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+4.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-vectorize",
      "--partially-inline-libcalls",
      "--partial-inliner",
      "--mldst-motion",
      "--aggressive-instcombine",
      "--mem2reg",
      "--inline",
      "--loop-deletion",
      "--instsimplify",
      "--globalopt"
    ],
    "performance_vs_Oz": "+4.2%"
  }
}
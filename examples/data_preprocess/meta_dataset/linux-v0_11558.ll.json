{
  "program_id": "linux-v0_11558.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 28,
    "onePredOneSuc": 20,
    "onePredTwoSuc": 8,
    "oneSuccessor": 23,
    "twoPred": 7,
    "twoPredOneSuc": 2,
    "twoEach": 3,
    "twoSuccessor": 14,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 58,
    "BeginPhi": 0,
    "BranchCount": 37,
    "returnInt": 28,
    "CriticalCount": 4,
    "NumEdges": 51,
    "const32Bit": 280,
    "const64Bit": 24,
    "numConstZeroes": 96,
    "numConstOnes": 103,
    "UncondBranches": 23,
    "binaryConstArg": 16,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 51,
    "NumAndInst": 5,
    "BlockMid": 7,
    "BlockLow": 51,
    "NumBitCastInst": 12,
    "NumBrInst": 37,
    "NumCallInst": 89,
    "NumGetElementPtrInst": 69,
    "NumICmpInst": 13,
    "NumLShrInst": 1,
    "NumLoadInst": 204,
    "NumMulInst": 1,
    "NumOrInst": 6,
    "NumPHIInst": 0,
    "NumRetInst": 21,
    "NumSExtInst": 1,
    "NumSelectInst": 1,
    "NumShlInst": 0,
    "NumStoreInst": 85,
    "NumSubInst": 0,
    "NumTruncInst": 14,
    "NumXorInst": 2,
    "NumZExtInst": 14,
    "TotalBlocks": 58,
    "TotalInsts": 632,
    "TotalMemInst": 498,
    "TotalFuncs": 33,
    "ArgsPhi": 0,
    "testUnary": 300
  },
  "baseline_oz_instcount": 631,
  "knowledge_base_entry": [
    "--functionattrs",
    "--early-cse",
    "--elim-avail-extern",
    "--inline",
    "--licm",
    "--slp-vectorizer",
    "--correlated-propagation",
    "--ipsccp",
    "--gvn-hoist",
    "--ipsccp",
    "--lower-expect",
    "--correlated-propagation",
    "--dse",
    "--slp-vectorizer",
    "--newgvn",
    "--memcpyopt",
    "--lower-constant-intrinsics",
    "--aggressive-instcombine",
    "--reassociate",
    "--die",
    "--mem2reg",
    "--sccp",
    "--gvn",
    "--instcombine",
    "--flattencfg",
    "--mergefunc"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--coro-split",
          "--loop-reroll",
          "--gvn",
          "--called-value-propagation",
          "--strip-dead-prototypes",
          "--instsimplify",
          "--aggressive-instcombine",
          "--indvars",
          "--elim-avail-extern",
          "--loop-simplify",
          "--early-cse-memssa",
          "--partial-inliner",
          "--loop-data-prefetch",
          "--argpromotion",
          "--ipsccp",
          "--lower-guard-intrinsic",
          "--guard-widening",
          "--lower-constant-intrinsics",
          "--loop-distribute",
          "--inline",
          "--slp-vectorizer",
          "--mergereturn",
          "--loop-simplifycfg",
          "--loop-instsimplify",
          "--ipconstprop",
          "--constprop",
          "--loop-predication",
          "--early-cse",
          "--jump-threading"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--coro-split",
      "--loop-reroll",
      "--gvn",
      "--called-value-propagation",
      "--strip-dead-prototypes",
      "--instsimplify",
      "--aggressive-instcombine",
      "--indvars",
      "--elim-avail-extern",
      "--loop-simplify",
      "--early-cse-memssa",
      "--partial-inliner",
      "--loop-data-prefetch",
      "--argpromotion",
      "--ipsccp",
      "--lower-guard-intrinsic",
      "--guard-widening",
      "--lower-constant-intrinsics",
      "--loop-distribute",
      "--inline",
      "--slp-vectorizer",
      "--mergereturn",
      "--loop-simplifycfg",
      "--loop-instsimplify",
      "--ipconstprop",
      "--constprop",
      "--loop-predication",
      "--early-cse",
      "--jump-threading"
    ],
    "performance_vs_Oz": "+3.2%"
  }
}
{
  "program_id": "linux-v0_921.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 49,
    "onePredOneSuc": 38,
    "onePredTwoSuc": 10,
    "oneSuccessor": 45,
    "twoPred": 15,
    "twoPredOneSuc": 5,
    "twoEach": 7,
    "twoSuccessor": 20,
    "morePreds": 2,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 81,
    "BeginPhi": 1,
    "BranchCount": 64,
    "returnInt": 12,
    "CriticalCount": 6,
    "NumEdges": 88,
    "const32Bit": 242,
    "const64Bit": 10,
    "numConstZeroes": 138,
    "numConstOnes": 62,
    "UncondBranches": 45,
    "binaryConstArg": 11,
    "NumAShrInst": 1,
    "NumAddInst": 6,
    "NumAllocaInst": 48,
    "NumAndInst": 3,
    "BlockMid": 8,
    "BlockLow": 74,
    "NumBitCastInst": 21,
    "NumBrInst": 64,
    "NumCallInst": 54,
    "NumGetElementPtrInst": 77,
    "NumICmpInst": 20,
    "NumLShrInst": 0,
    "NumLoadInst": 162,
    "NumMulInst": 1,
    "NumOrInst": 1,
    "NumPHIInst": 1,
    "NumRetInst": 16,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 72,
    "NumSubInst": 1,
    "NumTruncInst": 4,
    "NumXorInst": 0,
    "NumZExtInst": 3,
    "TotalBlocks": 82,
    "TotalInsts": 562,
    "TotalMemInst": 413,
    "TotalFuncs": 41,
    "ArgsPhi": 2,
    "testUnary": 242
  },
  "baseline_oz_instcount": 563,
  "knowledge_base_entry": [
    "--mem2reg",
    "--ipsccp",
    "--simplifycfg",
    "--loop-deletion",
    "--sccp",
    "--adce",
    "--aggressive-instcombine",
    "--flattencfg",
    "--early-cse-memssa",
    "--indvars",
    "--loop-reroll",
    "--gvn-hoist",
    "--ipsccp",
    "--licm",
    "--dse",
    "--mergefunc",
    "--globaldce",
    "--ipsccp",
    "--loop-deletion",
    "--instcombine",
    "--load-store-vectorizer",
    "--instsimplify",
    "--loop-rotate",
    "--loop-simplifycfg",
    "--newgvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-versioning-licm",
          "--pgo-memop-opt",
          "--sroa",
          "--mergefunc",
          "--coro-early",
          "-loop-reduce",
          "--licm",
          "--loweratomic",
          "--post-inline-ee-instrument",
          "--coro-split",
          "--sancov",
          "--loop-rotate",
          "--lcssa",
          "--slp-vectorizer",
          "--partially-inline-libcalls",
          "--canonicalize-aliases",
          "--sink",
          "--bdce",
          "--loop-distribute"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-versioning-licm",
      "--pgo-memop-opt",
      "--sroa",
      "--mergefunc",
      "--coro-early",
      "-loop-reduce",
      "--licm",
      "--loweratomic",
      "--post-inline-ee-instrument",
      "--coro-split",
      "--sancov",
      "--loop-rotate",
      "--lcssa",
      "--slp-vectorizer",
      "--partially-inline-libcalls",
      "--canonicalize-aliases",
      "--sink",
      "--bdce",
      "--loop-distribute"
    ],
    "performance_vs_Oz": "+0.2%"
  }
}
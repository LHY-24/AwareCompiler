{
  "program_id": "github-v0_45311.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 8,
    "onePredOneSuc": 7,
    "onePredTwoSuc": 1,
    "oneSuccessor": 8,
    "twoPred": 0,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 1,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 11,
    "BeginPhi": 0,
    "BranchCount": 9,
    "returnInt": 10,
    "CriticalCount": 1,
    "NumEdges": 17,
    "const32Bit": 21,
    "const64Bit": 0,
    "numConstZeroes": 9,
    "numConstOnes": 12,
    "UncondBranches": 8,
    "binaryConstArg": 2,
    "NumAShrInst": 1,
    "NumAddInst": 0,
    "NumAllocaInst": 6,
    "NumAndInst": 0,
    "BlockMid": 2,
    "BlockLow": 9,
    "NumBitCastInst": 1,
    "NumBrInst": 9,
    "NumCallInst": 15,
    "NumGetElementPtrInst": 3,
    "NumICmpInst": 1,
    "NumLShrInst": 0,
    "NumLoadInst": 41,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 1,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 10,
    "NumSubInst": 0,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 4,
    "TotalBlocks": 11,
    "TotalInsts": 96,
    "TotalMemInst": 75,
    "TotalFuncs": 9,
    "ArgsPhi": 0,
    "testUnary": 54
  },
  "baseline_oz_instcount": 96,
  "knowledge_base_entry": [
    "--mem2reg",
    "--licm",
    "--aggressive-instcombine",
    "--dce",
    "--mem2reg",
    "--gvn",
    "--simplifycfg",
    "--lower-constant-intrinsics",
    "--gvn",
    "--loop-deletion",
    "--newgvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--partial-inliner",
          "--instcombine",
          "--argpromotion",
          "--loop-reroll",
          "--loop-idiom",
          "--loop-vectorize",
          "--memcpyopt",
          "--lower-constant-intrinsics",
          "--scalarizer",
          "--mergefunc",
          "--loop-deletion",
          "--loop-simplify",
          "--slp-vectorizer",
          "--globalopt",
          "--strip-debug-declare",
          "--aggressive-instcombine",
          "--strip",
          "--loop-guard-widening",
          "--ipsccp",
          "--constprop",
          "--functionattrs"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--partial-inliner",
      "--instcombine",
      "--argpromotion",
      "--loop-reroll",
      "--loop-idiom",
      "--loop-vectorize",
      "--memcpyopt",
      "--lower-constant-intrinsics",
      "--scalarizer",
      "--mergefunc",
      "--loop-deletion",
      "--loop-simplify",
      "--slp-vectorizer",
      "--globalopt",
      "--strip-debug-declare",
      "--aggressive-instcombine",
      "--strip",
      "--loop-guard-widening",
      "--ipsccp",
      "--constprop",
      "--functionattrs"
    ],
    "performance_vs_Oz": "+2.1%"
  }
}
{
  "program_id": "linux-v0_296.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 67,
    "onePredOneSuc": 41,
    "onePredTwoSuc": 25,
    "oneSuccessor": 50,
    "twoPred": 12,
    "twoPredOneSuc": 6,
    "twoEach": 3,
    "twoSuccessor": 37,
    "morePreds": 8,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 105,
    "BeginPhi": 0,
    "BranchCount": 87,
    "returnInt": 21,
    "CriticalCount": 13,
    "NumEdges": 124,
    "const32Bit": 251,
    "const64Bit": 19,
    "numConstZeroes": 132,
    "numConstOnes": 101,
    "UncondBranches": 50,
    "binaryConstArg": 23,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 73,
    "NumAndInst": 8,
    "BlockMid": 12,
    "BlockLow": 93,
    "NumBitCastInst": 10,
    "NumBrInst": 87,
    "NumCallInst": 55,
    "NumGetElementPtrInst": 63,
    "NumICmpInst": 39,
    "NumLShrInst": 0,
    "NumLoadInst": 170,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 18,
    "NumSExtInst": 6,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 116,
    "NumSubInst": 3,
    "NumTruncInst": 4,
    "NumXorInst": 9,
    "NumZExtInst": 15,
    "TotalBlocks": 105,
    "TotalInsts": 684,
    "TotalMemInst": 477,
    "TotalFuncs": 35,
    "ArgsPhi": 0,
    "testUnary": 283
  },
  "baseline_oz_instcount": 684,
  "knowledge_base_entry": [
    "--lower-expect",
    "--simplifycfg",
    "--die",
    "--correlated-propagation",
    "--gvn",
    "--gvn",
    "--loop-reroll",
    "--memcpyopt",
    "--slp-vectorizer",
    "--gvn",
    "--early-cse",
    "--ipsccp",
    "--aggressive-instcombine",
    "--load-store-vectorizer",
    "--slsr",
    "--simplifycfg",
    "--licm",
    "--elim-avail-extern",
    "--mem2reg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--lowerinvoke",
          "--early-cse",
          "--deadargelim",
          "--insert-gcov-profiling",
          "--lcssa",
          "--strip",
          "--nary-reassociate",
          "--coro-cleanup",
          "--sroa",
          "--lower-guard-intrinsic",
          "--consthoist",
          "--irce",
          "--argpromotion",
          "--constmerge",
          "--early-cse-memssa",
          "--called-value-propagation",
          "--aggressive-instcombine",
          "--simple-loop-unswitch",
          "--loop-simplifycfg",
          "--lower-expect",
          "--dce",
          "--coro-split",
          "--inferattrs",
          "--rpo-functionattrs"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--lowerinvoke",
      "--early-cse",
      "--deadargelim",
      "--insert-gcov-profiling",
      "--lcssa",
      "--strip",
      "--nary-reassociate",
      "--coro-cleanup",
      "--sroa",
      "--lower-guard-intrinsic",
      "--consthoist",
      "--irce",
      "--argpromotion",
      "--constmerge",
      "--early-cse-memssa",
      "--called-value-propagation",
      "--aggressive-instcombine",
      "--simple-loop-unswitch",
      "--loop-simplifycfg",
      "--lower-expect",
      "--dce",
      "--coro-split",
      "--inferattrs",
      "--rpo-functionattrs"
    ],
    "performance_vs_Oz": "+0.9%"
  }
}
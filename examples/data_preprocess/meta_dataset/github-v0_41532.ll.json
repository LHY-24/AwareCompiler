{
  "program_id": "github-v0_41532.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 27,
    "onePredOneSuc": 16,
    "onePredTwoSuc": 11,
    "oneSuccessor": 20,
    "twoPred": 4,
    "twoPredOneSuc": 2,
    "twoEach": 2,
    "twoSuccessor": 18,
    "morePreds": 7,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 43,
    "BeginPhi": 0,
    "BranchCount": 38,
    "returnInt": 25,
    "CriticalCount": 9,
    "NumEdges": 56,
    "const32Bit": 115,
    "const64Bit": 4,
    "numConstZeroes": 43,
    "numConstOnes": 68,
    "UncondBranches": 20,
    "binaryConstArg": 6,
    "NumAShrInst": 1,
    "NumAddInst": 0,
    "NumAllocaInst": 49,
    "NumAndInst": 3,
    "BlockMid": 8,
    "BlockLow": 35,
    "NumBitCastInst": 15,
    "NumBrInst": 38,
    "NumCallInst": 25,
    "NumGetElementPtrInst": 32,
    "NumICmpInst": 18,
    "NumLShrInst": 2,
    "NumLoadInst": 107,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 5,
    "NumSExtInst": 21,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 90,
    "NumSubInst": 7,
    "NumTruncInst": 13,
    "NumXorInst": 0,
    "NumZExtInst": 6,
    "TotalBlocks": 43,
    "TotalInsts": 446,
    "TotalMemInst": 303,
    "TotalFuncs": 8,
    "ArgsPhi": 0,
    "testUnary": 225
  },
  "baseline_oz_instcount": 446,
  "knowledge_base_entry": [
    "--lowerswitch",
    "--gvn-hoist",
    "--gvn",
    "--memcpyopt",
    "--sroa",
    "--instcombine",
    "--ipsccp",
    "--loweratomic",
    "--aggressive-instcombine",
    "--jump-threading",
    "--slp-vectorizer",
    "--adce",
    "--early-cse",
    "--slsr",
    "--indvars",
    "--slsr",
    "--simplifycfg",
    "--bdce",
    "--newgvn",
    "--instsimplify",
    "--adce",
    "--ipsccp",
    "--simplifycfg",
    "--adce",
    "--loop-simplifycfg",
    "--adce",
    "--sroa",
    "--early-cse",
    "--mldst-motion",
    "--jump-threading",
    "--bdce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--constmerge",
          "--loop-data-prefetch",
          "--loop-deletion",
          "--aggressive-instcombine",
          "--coro-split",
          "--loop-reroll",
          "--loop-vectorize",
          "--deadargelim",
          "--inferattrs",
          "--lowerswitch",
          "--flattencfg",
          "--bdce",
          "--barrier",
          "--consthoist",
          "--loop-interchange"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--constmerge",
      "--loop-data-prefetch",
      "--loop-deletion",
      "--aggressive-instcombine",
      "--coro-split",
      "--loop-reroll",
      "--loop-vectorize",
      "--deadargelim",
      "--inferattrs",
      "--lowerswitch",
      "--flattencfg",
      "--bdce",
      "--barrier",
      "--consthoist",
      "--loop-interchange"
    ],
    "performance_vs_Oz": "+0.9%"
  }
}
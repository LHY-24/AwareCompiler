{
  "program_id": "github-v0_18976.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 14,
    "onePredOneSuc": 9,
    "onePredTwoSuc": 2,
    "oneSuccessor": 12,
    "twoPred": 6,
    "twoPredOneSuc": 2,
    "twoEach": 4,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 23,
    "BeginPhi": 0,
    "BranchCount": 19,
    "returnInt": 4,
    "CriticalCount": 1,
    "NumEdges": 26,
    "const32Bit": 32,
    "const64Bit": 16,
    "numConstZeroes": 23,
    "numConstOnes": 20,
    "UncondBranches": 12,
    "binaryConstArg": 8,
    "NumAShrInst": 0,
    "NumAddInst": 8,
    "NumAllocaInst": 13,
    "NumAndInst": 0,
    "BlockMid": 3,
    "BlockLow": 20,
    "NumBitCastInst": 0,
    "NumBrInst": 19,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 11,
    "NumICmpInst": 7,
    "NumLShrInst": 0,
    "NumLoadInst": 25,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 17,
    "NumSubInst": 1,
    "NumTruncInst": 4,
    "NumXorInst": 0,
    "NumZExtInst": 10,
    "TotalBlocks": 23,
    "TotalInsts": 129,
    "TotalMemInst": 73,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 55
  },
  "baseline_oz_instcount": 129,
  "knowledge_base_entry": [
    "--sink",
    "--jump-threading",
    "--reassociate",
    "--loop-instsimplify",
    "--adce",
    "--instcombine",
    "--gvn-hoist",
    "--mergefunc",
    "--loop-simplifycfg",
    "--licm",
    "--mem2reg",
    "--mldst-motion",
    "--instsimplify",
    "--aggressive-instcombine",
    "--bdce",
    "--inline"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--bdce",
          "--rewrite-statepoints-for-gc",
          "--lower-expect",
          "--aggressive-instcombine",
          "--loop-deletion",
          "--div-rem-pairs",
          "--sancov",
          "--inferattrs",
          "--loop-sink",
          "--loop-predication",
          "--tailcallelim",
          "--jump-threading",
          "--loop-distribute",
          "--globalopt",
          "--indvars",
          "--mergefunc",
          "--newgvn",
          "--loop-reroll",
          "--cross-dso-cfi",
          "--infer-address-spaces",
          "--ipsccp",
          "--pgo-memop-opt",
          "--loop-vectorize",
          "--lower-widenable-condition",
          "--alignment-from-assumptions",
          "--simple-loop-unswitch",
          "--loop-guard-widening",
          "--strip-debug-declare"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+4.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--bdce",
      "--rewrite-statepoints-for-gc",
      "--lower-expect",
      "--aggressive-instcombine",
      "--loop-deletion",
      "--div-rem-pairs",
      "--sancov",
      "--inferattrs",
      "--loop-sink",
      "--loop-predication",
      "--tailcallelim",
      "--jump-threading",
      "--loop-distribute",
      "--globalopt",
      "--indvars",
      "--mergefunc",
      "--newgvn",
      "--loop-reroll",
      "--cross-dso-cfi",
      "--infer-address-spaces",
      "--ipsccp",
      "--pgo-memop-opt",
      "--loop-vectorize",
      "--lower-widenable-condition",
      "--alignment-from-assumptions",
      "--simple-loop-unswitch",
      "--loop-guard-widening",
      "--strip-debug-declare"
    ],
    "performance_vs_Oz": "+4.7%"
  }
}
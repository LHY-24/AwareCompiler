{
  "program_id": "github-v0_8163.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 15,
    "onePredOneSuc": 9,
    "onePredTwoSuc": 3,
    "oneSuccessor": 13,
    "twoPred": 6,
    "twoPredOneSuc": 3,
    "twoEach": 3,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 24,
    "BeginPhi": 0,
    "BranchCount": 20,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 27,
    "const32Bit": 31,
    "const64Bit": 40,
    "numConstZeroes": 40,
    "numConstOnes": 24,
    "UncondBranches": 13,
    "binaryConstArg": 7,
    "NumAShrInst": 0,
    "NumAddInst": 8,
    "NumAllocaInst": 13,
    "NumAndInst": 0,
    "BlockMid": 4,
    "BlockLow": 20,
    "NumBitCastInst": 8,
    "NumBrInst": 20,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 32,
    "NumICmpInst": 7,
    "NumLShrInst": 0,
    "NumLoadInst": 44,
    "NumMulInst": 1,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 23,
    "NumSubInst": 0,
    "NumTruncInst": 6,
    "NumXorInst": 0,
    "NumZExtInst": 24,
    "TotalBlocks": 24,
    "TotalInsts": 200,
    "TotalMemInst": 119,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 98
  },
  "baseline_oz_instcount": 200,
  "knowledge_base_entry": [
    "--loop-interchange",
    "--gvn",
    "--aggressive-instcombine",
    "--jump-threading",
    "--instcombine",
    "--globalopt",
    "--gvn",
    "--simplifycfg",
    "--inline",
    "--bdce",
    "--die",
    "--lower-constant-intrinsics",
    "--mldst-motion",
    "--early-cse",
    "--slsr"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--coro-early",
          "--loop-reroll",
          "--insert-gcov-profiling",
          "--functionattrs",
          "--mergereturn",
          "--inject-tli-mappings",
          "--loop-unroll-and-jam",
          "--early-cse-memssa",
          "--loop-deletion",
          "--bdce",
          "--coro-split",
          "--sink",
          "--aggressive-instcombine",
          "--licm",
          "--jump-threading",
          "--strip-dead-prototypes",
          "--guard-widening",
          "--simple-loop-unswitch",
          "--deadargelim",
          "--rpo-functionattrs",
          "--partial-inliner",
          "--adce",
          "--pgo-memop-opt",
          "--ee-instrument",
          "--canonicalize-aliases",
          "--mergefunc",
          "--sccp"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+6.0%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--coro-early",
      "--loop-reroll",
      "--insert-gcov-profiling",
      "--functionattrs",
      "--mergereturn",
      "--inject-tli-mappings",
      "--loop-unroll-and-jam",
      "--early-cse-memssa",
      "--loop-deletion",
      "--bdce",
      "--coro-split",
      "--sink",
      "--aggressive-instcombine",
      "--licm",
      "--jump-threading",
      "--strip-dead-prototypes",
      "--guard-widening",
      "--simple-loop-unswitch",
      "--deadargelim",
      "--rpo-functionattrs",
      "--partial-inliner",
      "--adce",
      "--pgo-memop-opt",
      "--ee-instrument",
      "--canonicalize-aliases",
      "--mergefunc",
      "--sccp"
    ],
    "performance_vs_Oz": "+6.0%"
  }
}
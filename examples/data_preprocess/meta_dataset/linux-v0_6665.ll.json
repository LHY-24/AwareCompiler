{
  "program_id": "linux-v0_6665.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 86,
    "onePredOneSuc": 66,
    "onePredTwoSuc": 12,
    "oneSuccessor": 82,
    "twoPred": 20,
    "twoPredOneSuc": 7,
    "twoEach": 7,
    "twoSuccessor": 26,
    "morePreds": 5,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 141,
    "BeginPhi": 1,
    "BranchCount": 108,
    "returnInt": 24,
    "CriticalCount": 17,
    "NumEdges": 153,
    "const32Bit": 299,
    "const64Bit": 21,
    "numConstZeroes": 106,
    "numConstOnes": 146,
    "UncondBranches": 82,
    "binaryConstArg": 15,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 121,
    "NumAndInst": 1,
    "BlockMid": 15,
    "BlockLow": 127,
    "NumBitCastInst": 48,
    "NumBrInst": 108,
    "NumCallInst": 84,
    "NumGetElementPtrInst": 68,
    "NumICmpInst": 29,
    "NumLShrInst": 0,
    "NumLoadInst": 269,
    "NumMulInst": 1,
    "NumOrInst": 2,
    "NumPHIInst": 1,
    "NumRetInst": 31,
    "NumSExtInst": 14,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 153,
    "NumSubInst": 0,
    "NumTruncInst": 15,
    "NumXorInst": 13,
    "NumZExtInst": 20,
    "TotalBlocks": 142,
    "TotalInsts": 994,
    "TotalMemInst": 695,
    "TotalFuncs": 47,
    "ArgsPhi": 2,
    "testUnary": 498
  },
  "baseline_oz_instcount": 994,
  "knowledge_base_entry": [
    "--hotcoldsplit",
    "--mergefunc",
    "--bdce",
    "--dse",
    "--early-cse",
    "--flattencfg",
    "--loop-simplifycfg",
    "--memcpyopt",
    "--load-store-vectorizer",
    "--newgvn",
    "--instcombine",
    "--sroa",
    "--dce",
    "--load-store-vectorizer",
    "--simplifycfg",
    "--mldst-motion"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--instnamer",
          "--loop-instsimplify",
          "--barrier",
          "--loop-simplify",
          "--redundant-dbg-inst-elim",
          "--consthoist",
          "--sink",
          "--loop-unroll",
          "--functionattrs",
          "--strip-dead-prototypes",
          "--constmerge",
          "--loop-versioning",
          "--scalarizer",
          "--lowerinvoke",
          "--loop-idiom",
          "--elim-avail-extern",
          "--mergereturn",
          "--loop-predication",
          "--called-value-propagation",
          "--slp-vectorizer",
          "--irce",
          "--lower-guard-intrinsic",
          "--deadargelim",
          "--inline",
          "--early-cse-memssa",
          "--early-cse",
          "--loop-fusion",
          "--mergefunc",
          "--rewrite-statepoints-for-gc"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--instnamer",
      "--loop-instsimplify",
      "--barrier",
      "--loop-simplify",
      "--redundant-dbg-inst-elim",
      "--consthoist",
      "--sink",
      "--loop-unroll",
      "--functionattrs",
      "--strip-dead-prototypes",
      "--constmerge",
      "--loop-versioning",
      "--scalarizer",
      "--lowerinvoke",
      "--loop-idiom",
      "--elim-avail-extern",
      "--mergereturn",
      "--loop-predication",
      "--called-value-propagation",
      "--slp-vectorizer",
      "--irce",
      "--lower-guard-intrinsic",
      "--deadargelim",
      "--inline",
      "--early-cse-memssa",
      "--early-cse",
      "--loop-fusion",
      "--mergefunc",
      "--rewrite-statepoints-for-gc"
    ],
    "performance_vs_Oz": "+0.1%"
  }
}
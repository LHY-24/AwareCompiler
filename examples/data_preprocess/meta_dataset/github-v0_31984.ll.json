{
  "program_id": "github-v0_31984.ll",
  "autophase_features": {
    "BBNumArgsHi": 1,
    "BBNumArgsLo": 20,
    "onePred": 22,
    "onePredOneSuc": 19,
    "onePredTwoSuc": 3,
    "oneSuccessor": 19,
    "twoPred": 19,
    "twoPredOneSuc": 0,
    "twoEach": 18,
    "twoSuccessor": 25,
    "morePreds": 3,
    "BB03Phi": 21,
    "BBHiPhi": 0,
    "BBNoPhi": 24,
    "BeginPhi": 21,
    "BranchCount": 44,
    "returnInt": 6,
    "CriticalCount": 28,
    "NumEdges": 69,
    "const32Bit": 77,
    "const64Bit": 22,
    "numConstZeroes": 44,
    "numConstOnes": 39,
    "UncondBranches": 19,
    "binaryConstArg": 45,
    "NumAShrInst": 0,
    "NumAddInst": 12,
    "NumAllocaInst": 0,
    "NumAndInst": 24,
    "BlockMid": 4,
    "BlockLow": 41,
    "NumBitCastInst": 0,
    "NumBrInst": 44,
    "NumCallInst": 44,
    "NumGetElementPtrInst": 24,
    "NumICmpInst": 27,
    "NumLShrInst": 8,
    "NumLoadInst": 0,
    "NumMulInst": 8,
    "NumOrInst": 7,
    "NumPHIInst": 27,
    "NumRetInst": 1,
    "NumSExtInst": 0,
    "NumSelectInst": 1,
    "NumShlInst": 11,
    "NumStoreInst": 1,
    "NumSubInst": 1,
    "NumTruncInst": 3,
    "NumXorInst": 6,
    "NumZExtInst": 26,
    "TotalBlocks": 45,
    "TotalInsts": 333,
    "TotalMemInst": 69,
    "TotalFuncs": 17,
    "ArgsPhi": 57,
    "testUnary": 35
  },
  "baseline_oz_instcount": 330,
  "knowledge_base_entry": [
    "--speculative-execution",
    "--gvn",
    "-loop-reduce",
    "--simplifycfg",
    "--dse",
    "--dce",
    "--dse",
    "--adce",
    "--loop-simplifycfg",
    "--sccp",
    "--lower-constant-intrinsics",
    "--instsimplify",
    "--slp-vectorizer",
    "--instcombine",
    "--sccp",
    "--lower-expect",
    "--licm",
    "--reassociate",
    "--mergefunc",
    "--slp-vectorizer",
    "--jump-threading",
    "--inline",
    "--reassociate",
    "--lower-expect",
    "--simplifycfg",
    "--mldst-motion",
    "--early-cse-memssa",
    "--slp-vectorizer"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--mldst-motion",
          "--nary-reassociate",
          "--bdce",
          "--tailcallelim",
          "--partially-inline-libcalls",
          "--lower-guard-intrinsic",
          "--inferattrs",
          "--lowerinvoke",
          "--lower-widenable-condition",
          "--infer-address-spaces",
          "--speculative-execution",
          "--prune-eh",
          "--coro-split",
          "--loop-reroll",
          "--globalsplit",
          "--loop-guard-widening",
          "--load-store-vectorizer",
          "--callsite-splitting",
          "--loop-simplifycfg",
          "--cross-dso-cfi",
          "--newgvn"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--mldst-motion",
      "--nary-reassociate",
      "--bdce",
      "--tailcallelim",
      "--partially-inline-libcalls",
      "--lower-guard-intrinsic",
      "--inferattrs",
      "--lowerinvoke",
      "--lower-widenable-condition",
      "--infer-address-spaces",
      "--speculative-execution",
      "--prune-eh",
      "--coro-split",
      "--loop-reroll",
      "--globalsplit",
      "--loop-guard-widening",
      "--load-store-vectorizer",
      "--callsite-splitting",
      "--loop-simplifycfg",
      "--cross-dso-cfi",
      "--newgvn"
    ],
    "performance_vs_Oz": "+2.4%"
  }
}
{
  "program_id": "github-v0_20358.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 12,
    "onePredOneSuc": 11,
    "onePredTwoSuc": 0,
    "oneSuccessor": 12,
    "twoPred": 5,
    "twoPredOneSuc": 0,
    "twoEach": 5,
    "twoSuccessor": 5,
    "morePreds": 0,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 17,
    "BeginPhi": 1,
    "BranchCount": 17,
    "returnInt": 2,
    "CriticalCount": 1,
    "NumEdges": 22,
    "const32Bit": 65,
    "const64Bit": 14,
    "numConstZeroes": 47,
    "numConstOnes": 29,
    "UncondBranches": 12,
    "binaryConstArg": 14,
    "NumAShrInst": 0,
    "NumAddInst": 10,
    "NumAllocaInst": 17,
    "NumAndInst": 0,
    "BlockMid": 2,
    "BlockLow": 16,
    "NumBitCastInst": 6,
    "NumBrInst": 17,
    "NumCallInst": 9,
    "NumGetElementPtrInst": 22,
    "NumICmpInst": 5,
    "NumLShrInst": 3,
    "NumLoadInst": 36,
    "NumMulInst": 1,
    "NumOrInst": 0,
    "NumPHIInst": 1,
    "NumRetInst": 1,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 26,
    "NumSubInst": 1,
    "NumTruncInst": 5,
    "NumXorInst": 1,
    "NumZExtInst": 11,
    "TotalBlocks": 18,
    "TotalInsts": 173,
    "TotalMemInst": 110,
    "TotalFuncs": 7,
    "ArgsPhi": 2,
    "testUnary": 75
  },
  "baseline_oz_instcount": 173,
  "knowledge_base_entry": [
    "--simplifycfg",
    "--aggressive-instcombine",
    "--globalopt",
    "--licm",
    "--load-store-vectorizer",
    "--sroa",
    "--gvn-hoist",
    "--instsimplify",
    "--gvn",
    "--lower-expect",
    "--ipsccp",
    "--instsimplify",
    "--globalopt",
    "--globaldce",
    "--ipsccp",
    "--inline",
    "--prune-eh",
    "--reassociate"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-data-prefetch",
          "--early-cse",
          "--canonicalize-aliases",
          "--mergereturn",
          "--constprop",
          "--loop-versioning-licm",
          "--loop-vectorize",
          "--add-discriminators",
          "--guard-widening",
          "--ee-instrument",
          "--lower-matrix-intrinsics",
          "--post-inline-ee-instrument",
          "--coro-split",
          "--early-cse-memssa",
          "--scalarizer",
          "--tailcallelim",
          "--loop-unroll",
          "--loop-distribute",
          "--lowerswitch",
          "--div-rem-pairs",
          "--loop-idiom",
          "--strip-debug-declare",
          "--aggressive-instcombine"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-data-prefetch",
      "--early-cse",
      "--canonicalize-aliases",
      "--mergereturn",
      "--constprop",
      "--loop-versioning-licm",
      "--loop-vectorize",
      "--add-discriminators",
      "--guard-widening",
      "--ee-instrument",
      "--lower-matrix-intrinsics",
      "--post-inline-ee-instrument",
      "--coro-split",
      "--early-cse-memssa",
      "--scalarizer",
      "--tailcallelim",
      "--loop-unroll",
      "--loop-distribute",
      "--lowerswitch",
      "--div-rem-pairs",
      "--loop-idiom",
      "--strip-debug-declare",
      "--aggressive-instcombine"
    ],
    "performance_vs_Oz": "+1.7%"
  }
}
{
  "program_id": "linux-v0_4960.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 21,
    "onePredOneSuc": 17,
    "onePredTwoSuc": 3,
    "oneSuccessor": 19,
    "twoPred": 7,
    "twoPredOneSuc": 0,
    "twoEach": 3,
    "twoSuccessor": 10,
    "morePreds": 1,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 44,
    "BeginPhi": 1,
    "BranchCount": 29,
    "returnInt": 10,
    "CriticalCount": 3,
    "NumEdges": 39,
    "const32Bit": 245,
    "const64Bit": 24,
    "numConstZeroes": 106,
    "numConstOnes": 70,
    "UncondBranches": 19,
    "binaryConstArg": 12,
    "NumAShrInst": 0,
    "NumAddInst": 5,
    "NumAllocaInst": 55,
    "NumAndInst": 6,
    "BlockMid": 10,
    "BlockLow": 35,
    "NumBitCastInst": 6,
    "NumBrInst": 29,
    "NumCallInst": 41,
    "NumGetElementPtrInst": 85,
    "NumICmpInst": 10,
    "NumLShrInst": 2,
    "NumLoadInst": 152,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 1,
    "NumRetInst": 16,
    "NumSExtInst": 4,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 104,
    "NumSubInst": 0,
    "NumTruncInst": 10,
    "NumXorInst": 0,
    "NumZExtInst": 6,
    "TotalBlocks": 45,
    "TotalInsts": 532,
    "TotalMemInst": 437,
    "TotalFuncs": 31,
    "ArgsPhi": 2,
    "testUnary": 233
  },
  "baseline_oz_instcount": 533,
  "knowledge_base_entry": [
    "--sccp",
    "--early-cse-memssa",
    "--ipsccp",
    "--mem2reg",
    "--gvn-hoist",
    "--aggressive-instcombine",
    "--bdce",
    "--early-cse",
    "--instcombine",
    "--elim-avail-extern",
    "--flattencfg",
    "--ipsccp",
    "--lower-constant-intrinsics",
    "--ipsccp",
    "--lower-expect",
    "--die",
    "--mem2reg",
    "--load-store-vectorizer",
    "--jump-threading",
    "--flattencfg",
    "--newgvn",
    "--sccp"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--bdce",
          "--attributor",
          "--globaldce",
          "--loop-predication",
          "--aggressive-instcombine",
          "--partial-inliner",
          "--libcalls-shrinkwrap",
          "--loop-load-elim",
          "--mem2reg",
          "--slp-vectorizer",
          "--post-inline-ee-instrument",
          "--loop-simplify"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--bdce",
      "--attributor",
      "--globaldce",
      "--loop-predication",
      "--aggressive-instcombine",
      "--partial-inliner",
      "--libcalls-shrinkwrap",
      "--loop-load-elim",
      "--mem2reg",
      "--slp-vectorizer",
      "--post-inline-ee-instrument",
      "--loop-simplify"
    ],
    "performance_vs_Oz": "+0.4%"
  }
}
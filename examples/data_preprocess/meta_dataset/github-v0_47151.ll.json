{
  "program_id": "github-v0_47151.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 6,
    "onePredOneSuc": 5,
    "onePredTwoSuc": 0,
    "oneSuccessor": 6,
    "twoPred": 2,
    "twoPredOneSuc": 0,
    "twoEach": 2,
    "twoSuccessor": 2,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 9,
    "BeginPhi": 0,
    "BranchCount": 8,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 10,
    "const32Bit": 27,
    "const64Bit": 7,
    "numConstZeroes": 24,
    "numConstOnes": 10,
    "UncondBranches": 6,
    "binaryConstArg": 4,
    "NumAShrInst": 0,
    "NumAddInst": 3,
    "NumAllocaInst": 7,
    "NumAndInst": 0,
    "BlockMid": 1,
    "BlockLow": 8,
    "NumBitCastInst": 3,
    "NumBrInst": 8,
    "NumCallInst": 9,
    "NumGetElementPtrInst": 10,
    "NumICmpInst": 2,
    "NumLShrInst": 0,
    "NumLoadInst": 14,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 1,
    "NumSExtInst": 7,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 10,
    "NumSubInst": 1,
    "NumTruncInst": 1,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 9,
    "TotalInsts": 76,
    "TotalMemInst": 50,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 32
  },
  "baseline_oz_instcount": 76,
  "knowledge_base_entry": [
    "--aggressive-instcombine",
    "--mem2reg",
    "--elim-avail-extern",
    "--dse",
    "--gvn",
    "--prune-eh"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--ee-instrument",
          "--loop-rotate",
          "--strip",
          "--newgvn",
          "--callsite-splitting",
          "--mergefunc",
          "--alignment-from-assumptions",
          "--lower-constant-intrinsics",
          "--bdce",
          "--lcssa",
          "--aggressive-instcombine",
          "--load-store-vectorizer"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--ee-instrument",
      "--loop-rotate",
      "--strip",
      "--newgvn",
      "--callsite-splitting",
      "--mergefunc",
      "--alignment-from-assumptions",
      "--lower-constant-intrinsics",
      "--bdce",
      "--lcssa",
      "--aggressive-instcombine",
      "--load-store-vectorizer"
    ],
    "performance_vs_Oz": "+2.6%"
  }
}
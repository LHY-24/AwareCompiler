{
  "program_id": "linux-v0_1623.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 39,
    "onePredOneSuc": 29,
    "onePredTwoSuc": 9,
    "oneSuccessor": 34,
    "twoPred": 21,
    "twoPredOneSuc": 5,
    "twoEach": 13,
    "twoSuccessor": 27,
    "morePreds": 3,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 67,
    "BeginPhi": 2,
    "BranchCount": 61,
    "returnInt": 11,
    "CriticalCount": 21,
    "NumEdges": 94,
    "const32Bit": 352,
    "const64Bit": 19,
    "numConstZeroes": 165,
    "numConstOnes": 48,
    "UncondBranches": 34,
    "binaryConstArg": 36,
    "NumAShrInst": 1,
    "NumAddInst": 25,
    "NumAllocaInst": 30,
    "NumAndInst": 7,
    "BlockMid": 11,
    "BlockLow": 58,
    "NumBitCastInst": 21,
    "NumBrInst": 61,
    "NumCallInst": 29,
    "NumGetElementPtrInst": 130,
    "NumICmpInst": 34,
    "NumLShrInst": 0,
    "NumLoadInst": 193,
    "NumMulInst": 0,
    "NumOrInst": 3,
    "NumPHIInst": 2,
    "NumRetInst": 6,
    "NumSExtInst": 14,
    "NumSelectInst": 4,
    "NumShlInst": 1,
    "NumStoreInst": 92,
    "NumSubInst": 1,
    "NumTruncInst": 14,
    "NumXorInst": 1,
    "NumZExtInst": 26,
    "TotalBlocks": 69,
    "TotalInsts": 701,
    "TotalMemInst": 474,
    "TotalFuncs": 12,
    "ArgsPhi": 4,
    "testUnary": 301
  },
  "baseline_oz_instcount": 701,
  "knowledge_base_entry": [
    "--deadargelim",
    "--mergefunc",
    "--flattencfg",
    "--aggressive-instcombine",
    "--adce",
    "--aggressive-instcombine",
    "--ipsccp",
    "--loop-simplifycfg",
    "--lower-constant-intrinsics",
    "--instcombine",
    "--adce",
    "--newgvn",
    "--loop-simplifycfg",
    "--die",
    "--sccp",
    "--lower-constant-intrinsics",
    "--instsimplify",
    "--mldst-motion",
    "--early-cse",
    "--correlated-propagation"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--ee-instrument",
          "--instsimplify",
          "--always-inline",
          "--aggressive-instcombine",
          "--lower-widenable-condition",
          "--post-inline-ee-instrument",
          "--mldst-motion",
          "--loop-unswitch",
          "--loop-deletion",
          "--instcombine",
          "--strip-dead-prototypes",
          "--loop-instsimplify",
          "--inject-tli-mappings",
          "--lower-expect",
          "--libcalls-shrinkwrap",
          "--loop-idiom"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--ee-instrument",
      "--instsimplify",
      "--always-inline",
      "--aggressive-instcombine",
      "--lower-widenable-condition",
      "--post-inline-ee-instrument",
      "--mldst-motion",
      "--loop-unswitch",
      "--loop-deletion",
      "--instcombine",
      "--strip-dead-prototypes",
      "--loop-instsimplify",
      "--inject-tli-mappings",
      "--lower-expect",
      "--libcalls-shrinkwrap",
      "--loop-idiom"
    ],
    "performance_vs_Oz": "+1.4%"
  }
}
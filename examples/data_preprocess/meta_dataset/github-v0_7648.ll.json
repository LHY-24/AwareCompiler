{
  "program_id": "github-v0_7648.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 13,
    "onePredOneSuc": 9,
    "onePredTwoSuc": 1,
    "oneSuccessor": 11,
    "twoPred": 5,
    "twoPredOneSuc": 1,
    "twoEach": 4,
    "twoSuccessor": 6,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 21,
    "BeginPhi": 0,
    "BranchCount": 17,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 23,
    "const32Bit": 31,
    "const64Bit": 55,
    "numConstZeroes": 51,
    "numConstOnes": 29,
    "UncondBranches": 11,
    "binaryConstArg": 9,
    "NumAShrInst": 0,
    "NumAddInst": 11,
    "NumAllocaInst": 14,
    "NumAndInst": 0,
    "BlockMid": 5,
    "BlockLow": 16,
    "NumBitCastInst": 12,
    "NumBrInst": 17,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 38,
    "NumICmpInst": 6,
    "NumLShrInst": 0,
    "NumLoadInst": 41,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 28,
    "NumSubInst": 0,
    "NumTruncInst": 6,
    "NumXorInst": 0,
    "NumZExtInst": 17,
    "TotalBlocks": 21,
    "TotalInsts": 204,
    "TotalMemInst": 128,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 93
  },
  "baseline_oz_instcount": 204,
  "knowledge_base_entry": [
    "--loop-interchange",
    "--newgvn",
    "--jump-threading",
    "--aggressive-instcombine",
    "--loop-rotate",
    "--mem2reg",
    "--instsimplify",
    "--lower-constant-intrinsics",
    "--loop-simplifycfg",
    "--loop-reroll",
    "--mergefunc",
    "--dce",
    "--gvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-deletion",
          "--mergereturn",
          "--globaldce",
          "--speculative-execution",
          "--redundant-dbg-inst-elim",
          "--loop-simplify",
          "--constmerge",
          "--mergeicmps",
          "--inline",
          "--instnamer",
          "--consthoist",
          "--gvn-hoist",
          "--tailcallelim",
          "--aggressive-instcombine",
          "--inject-tli-mappings",
          "--early-cse-memssa",
          "--instsimplify",
          "--globalsplit",
          "--div-rem-pairs",
          "--reassociate",
          "--coro-elide",
          "--bdce",
          "--loop-simplifycfg",
          "--deadargelim",
          "--sroa",
          "--called-value-propagation",
          "--barrier",
          "--insert-gcov-profiling",
          "--guard-widening"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+5.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-deletion",
      "--mergereturn",
      "--globaldce",
      "--speculative-execution",
      "--redundant-dbg-inst-elim",
      "--loop-simplify",
      "--constmerge",
      "--mergeicmps",
      "--inline",
      "--instnamer",
      "--consthoist",
      "--gvn-hoist",
      "--tailcallelim",
      "--aggressive-instcombine",
      "--inject-tli-mappings",
      "--early-cse-memssa",
      "--instsimplify",
      "--globalsplit",
      "--div-rem-pairs",
      "--reassociate",
      "--coro-elide",
      "--bdce",
      "--loop-simplifycfg",
      "--deadargelim",
      "--sroa",
      "--called-value-propagation",
      "--barrier",
      "--insert-gcov-profiling",
      "--guard-widening"
    ],
    "performance_vs_Oz": "+5.9%"
  }
}
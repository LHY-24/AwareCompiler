{
  "program_id": "linux-v0_13870.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 24,
    "onePredOneSuc": 20,
    "onePredTwoSuc": 4,
    "oneSuccessor": 24,
    "twoPred": 8,
    "twoPredOneSuc": 4,
    "twoEach": 2,
    "twoSuccessor": 8,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 37,
    "BeginPhi": 0,
    "BranchCount": 32,
    "returnInt": 3,
    "CriticalCount": 9,
    "NumEdges": 53,
    "const32Bit": 86,
    "const64Bit": 11,
    "numConstZeroes": 47,
    "numConstOnes": 29,
    "UncondBranches": 24,
    "binaryConstArg": 9,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 16,
    "NumAndInst": 4,
    "BlockMid": 4,
    "BlockLow": 33,
    "NumBitCastInst": 0,
    "NumBrInst": 32,
    "NumCallInst": 5,
    "NumGetElementPtrInst": 23,
    "NumICmpInst": 12,
    "NumLShrInst": 0,
    "NumLoadInst": 52,
    "NumMulInst": 0,
    "NumOrInst": 7,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 10,
    "NumSelectInst": 1,
    "NumShlInst": 0,
    "NumStoreInst": 35,
    "NumSubInst": 0,
    "NumTruncInst": 7,
    "NumXorInst": 6,
    "NumZExtInst": 23,
    "TotalBlocks": 37,
    "TotalInsts": 238,
    "TotalMemInst": 131,
    "TotalFuncs": 4,
    "ArgsPhi": 0,
    "testUnary": 108
  },
  "baseline_oz_instcount": 238,
  "knowledge_base_entry": [
    "--loop-unswitch",
    "--early-cse-memssa",
    "--mem2reg",
    "--memcpyopt",
    "--instsimplify",
    "--aggressive-instcombine",
    "--bdce",
    "--inline",
    "--mldst-motion",
    "--early-cse",
    "--globalopt",
    "--gvn",
    "--aggressive-instcombine",
    "--inline",
    "--dse",
    "--mem2reg",
    "--loop-deletion",
    "--gvn-hoist",
    "--simplifycfg",
    "-loop-reduce",
    "--load-store-vectorizer",
    "--lower-constant-intrinsics",
    "--sccp",
    "--sroa",
    "--licm",
    "--adce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--rpo-functionattrs",
          "--lower-guard-intrinsic",
          "--globalsplit",
          "--alignment-from-assumptions",
          "--strip-nondebug",
          "--barrier",
          "--instnamer",
          "--loop-unswitch",
          "--mergefunc",
          "--instsimplify",
          "--coro-cleanup",
          "--gvn-hoist",
          "--aggressive-instcombine",
          "--sancov",
          "--always-inline",
          "--partially-inline-libcalls"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+9.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--rpo-functionattrs",
      "--lower-guard-intrinsic",
      "--globalsplit",
      "--alignment-from-assumptions",
      "--strip-nondebug",
      "--barrier",
      "--instnamer",
      "--loop-unswitch",
      "--mergefunc",
      "--instsimplify",
      "--coro-cleanup",
      "--gvn-hoist",
      "--aggressive-instcombine",
      "--sancov",
      "--always-inline",
      "--partially-inline-libcalls"
    ],
    "performance_vs_Oz": "+9.2%"
  }
}
{
  "program_id": "linux-v0_7325.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 61,
    "onePredOneSuc": 42,
    "onePredTwoSuc": 19,
    "oneSuccessor": 54,
    "twoPred": 18,
    "twoPredOneSuc": 10,
    "twoEach": 4,
    "twoSuccessor": 31,
    "morePreds": 6,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 111,
    "BeginPhi": 0,
    "BranchCount": 85,
    "returnInt": 21,
    "CriticalCount": 12,
    "NumEdges": 116,
    "const32Bit": 315,
    "const64Bit": 22,
    "numConstZeroes": 125,
    "numConstOnes": 129,
    "UncondBranches": 54,
    "binaryConstArg": 10,
    "NumAShrInst": 0,
    "NumAddInst": 6,
    "NumAllocaInst": 98,
    "NumAndInst": 0,
    "BlockMid": 14,
    "BlockLow": 97,
    "NumBitCastInst": 15,
    "NumBrInst": 85,
    "NumCallInst": 58,
    "NumGetElementPtrInst": 85,
    "NumICmpInst": 27,
    "NumLShrInst": 0,
    "NumLoadInst": 214,
    "NumMulInst": 4,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 26,
    "NumSExtInst": 5,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 131,
    "NumSubInst": 0,
    "NumTruncInst": 10,
    "NumXorInst": 2,
    "NumZExtInst": 6,
    "TotalBlocks": 111,
    "TotalInsts": 783,
    "TotalMemInst": 586,
    "TotalFuncs": 45,
    "ArgsPhi": 0,
    "testUnary": 352
  },
  "baseline_oz_instcount": 783,
  "knowledge_base_entry": [
    "--simple-loop-unswitch",
    "--newgvn",
    "--mergefunc",
    "--mem2reg",
    "--loop-deletion",
    "--newgvn",
    "--prune-eh",
    "--lower-expect",
    "--lower-constant-intrinsics",
    "--loop-simplifycfg",
    "--globalopt",
    "--licm",
    "--load-store-vectorizer",
    "--early-cse",
    "--memcpyopt",
    "--lower-constant-intrinsics",
    "--nary-reassociate",
    "--simplifycfg",
    "--early-cse-memssa",
    "--load-store-vectorizer",
    "--instsimplify",
    "--licm",
    "--die",
    "--gvn",
    "--loop-instsimplify",
    "--globalopt",
    "--ipsccp",
    "--licm"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--sccp",
          "--lower-guard-intrinsic",
          "--lower-constant-intrinsics",
          "--libcalls-shrinkwrap",
          "--mergefunc",
          "--lower-expect",
          "--forceattrs",
          "--newgvn",
          "--mergereturn",
          "--irce",
          "--lower-matrix-intrinsics",
          "--callsite-splitting",
          "--float2int",
          "--gvn-hoist",
          "--div-rem-pairs",
          "--ee-instrument",
          "--adce",
          "--loop-versioning",
          "--called-value-propagation",
          "--cross-dso-cfi",
          "--separate-const-offset-from-gep",
          "--indvars",
          "--load-store-vectorizer"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--sccp",
      "--lower-guard-intrinsic",
      "--lower-constant-intrinsics",
      "--libcalls-shrinkwrap",
      "--mergefunc",
      "--lower-expect",
      "--forceattrs",
      "--newgvn",
      "--mergereturn",
      "--irce",
      "--lower-matrix-intrinsics",
      "--callsite-splitting",
      "--float2int",
      "--gvn-hoist",
      "--div-rem-pairs",
      "--ee-instrument",
      "--adce",
      "--loop-versioning",
      "--called-value-propagation",
      "--cross-dso-cfi",
      "--separate-const-offset-from-gep",
      "--indvars",
      "--load-store-vectorizer"
    ],
    "performance_vs_Oz": "+0.1%"
  }
}
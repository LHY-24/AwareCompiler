{
  "program_id": "linux-v0_11474.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 73,
    "onePredOneSuc": 52,
    "onePredTwoSuc": 14,
    "oneSuccessor": 71,
    "twoPred": 18,
    "twoPredOneSuc": 13,
    "twoEach": 2,
    "twoSuccessor": 22,
    "morePreds": 5,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 116,
    "BeginPhi": 0,
    "BranchCount": 93,
    "returnInt": 27,
    "CriticalCount": 15,
    "NumEdges": 127,
    "const32Bit": 379,
    "const64Bit": 20,
    "numConstZeroes": 180,
    "numConstOnes": 112,
    "UncondBranches": 71,
    "binaryConstArg": 47,
    "NumAShrInst": 0,
    "NumAddInst": 4,
    "NumAllocaInst": 65,
    "NumAndInst": 22,
    "BlockMid": 13,
    "BlockLow": 103,
    "NumBitCastInst": 27,
    "NumBrInst": 93,
    "NumCallInst": 81,
    "NumGetElementPtrInst": 122,
    "NumICmpInst": 29,
    "NumLShrInst": 8,
    "NumLoadInst": 227,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 20,
    "NumSExtInst": 9,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 103,
    "NumSubInst": 0,
    "NumTruncInst": 4,
    "NumXorInst": 16,
    "NumZExtInst": 18,
    "TotalBlocks": 116,
    "TotalInsts": 852,
    "TotalMemInst": 598,
    "TotalFuncs": 42,
    "ArgsPhi": 0,
    "testUnary": 350
  },
  "baseline_oz_instcount": 854,
  "knowledge_base_entry": [
    "--globalopt",
    "--ipsccp",
    "--aggressive-instcombine",
    "--flattencfg",
    "--sroa",
    "--gvn",
    "--adce",
    "--die",
    "--newgvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--redundant-dbg-inst-elim",
          "--partial-inliner",
          "--lower-widenable-condition",
          "--die",
          "--add-discriminators",
          "--aggressive-instcombine",
          "--slsr",
          "--div-rem-pairs",
          "--callsite-splitting",
          "--load-store-vectorizer",
          "--loop-data-prefetch",
          "--reassociate",
          "--alignment-from-assumptions",
          "--loop-distribute",
          "--coro-split",
          "--prune-eh",
          "--always-inline",
          "--functionattrs",
          "--post-inline-ee-instrument"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--redundant-dbg-inst-elim",
      "--partial-inliner",
      "--lower-widenable-condition",
      "--die",
      "--add-discriminators",
      "--aggressive-instcombine",
      "--slsr",
      "--div-rem-pairs",
      "--callsite-splitting",
      "--load-store-vectorizer",
      "--loop-data-prefetch",
      "--reassociate",
      "--alignment-from-assumptions",
      "--loop-distribute",
      "--coro-split",
      "--prune-eh",
      "--always-inline",
      "--functionattrs",
      "--post-inline-ee-instrument"
    ],
    "performance_vs_Oz": "+0.7%"
  }
}
{
  "program_id": "linux-v0_11081.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 47,
    "onePredOneSuc": 35,
    "onePredTwoSuc": 7,
    "oneSuccessor": 46,
    "twoPred": 13,
    "twoPredOneSuc": 5,
    "twoEach": 7,
    "twoSuccessor": 15,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 69,
    "BeginPhi": 0,
    "BranchCount": 61,
    "returnInt": 8,
    "CriticalCount": 2,
    "NumEdges": 76,
    "const32Bit": 183,
    "const64Bit": 32,
    "numConstZeroes": 86,
    "numConstOnes": 82,
    "UncondBranches": 46,
    "binaryConstArg": 24,
    "NumAShrInst": 0,
    "NumAddInst": 6,
    "NumAllocaInst": 45,
    "NumAndInst": 9,
    "BlockMid": 10,
    "BlockLow": 59,
    "NumBitCastInst": 6,
    "NumBrInst": 61,
    "NumCallInst": 18,
    "NumGetElementPtrInst": 59,
    "NumICmpInst": 18,
    "NumLShrInst": 0,
    "NumLoadInst": 115,
    "NumMulInst": 0,
    "NumOrInst": 3,
    "NumPHIInst": 0,
    "NumRetInst": 8,
    "NumSExtInst": 8,
    "NumSelectInst": 0,
    "NumShlInst": 6,
    "NumStoreInst": 70,
    "NumSubInst": 0,
    "NumTruncInst": 7,
    "NumXorInst": 6,
    "NumZExtInst": 22,
    "TotalBlocks": 69,
    "TotalInsts": 467,
    "TotalMemInst": 307,
    "TotalFuncs": 11,
    "ArgsPhi": 0,
    "testUnary": 203
  },
  "baseline_oz_instcount": 468,
  "knowledge_base_entry": [
    "--hotcoldsplit",
    "--mergefunc",
    "--lower-expect",
    "--newgvn",
    "--inline",
    "--aggressive-instcombine",
    "--sroa",
    "--correlated-propagation",
    "--reassociate",
    "--dce",
    "--early-cse-memssa",
    "--gvn",
    "--instsimplify",
    "--lower-constant-intrinsics",
    "--slp-vectorizer",
    "--dse"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--prune-eh",
          "--libcalls-shrinkwrap",
          "--attributor",
          "--loop-versioning-licm",
          "--lcssa",
          "--memcpyopt",
          "--called-value-propagation",
          "--slp-vectorizer",
          "--mergefunc",
          "--licm",
          "--argpromotion",
          "--always-inline",
          "--aggressive-instcombine",
          "--deadargelim",
          "--loop-unswitch",
          "--early-cse"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+5.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--prune-eh",
      "--libcalls-shrinkwrap",
      "--attributor",
      "--loop-versioning-licm",
      "--lcssa",
      "--memcpyopt",
      "--called-value-propagation",
      "--slp-vectorizer",
      "--mergefunc",
      "--licm",
      "--argpromotion",
      "--always-inline",
      "--aggressive-instcombine",
      "--deadargelim",
      "--loop-unswitch",
      "--early-cse"
    ],
    "performance_vs_Oz": "+5.8%"
  }
}
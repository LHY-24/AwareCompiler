{
  "program_id": "github-v0_34175.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 30,
    "onePredOneSuc": 17,
    "onePredTwoSuc": 12,
    "oneSuccessor": 27,
    "twoPred": 13,
    "twoPredOneSuc": 7,
    "twoEach": 6,
    "twoSuccessor": 19,
    "morePreds": 3,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 50,
    "BeginPhi": 2,
    "BranchCount": 46,
    "returnInt": 2,
    "CriticalCount": 14,
    "NumEdges": 65,
    "const32Bit": 65,
    "const64Bit": 16,
    "numConstZeroes": 14,
    "numConstOnes": 43,
    "UncondBranches": 27,
    "binaryConstArg": 20,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 31,
    "NumAndInst": 6,
    "BlockMid": 7,
    "BlockLow": 45,
    "NumBitCastInst": 0,
    "NumBrInst": 46,
    "NumCallInst": 2,
    "NumGetElementPtrInst": 13,
    "NumICmpInst": 19,
    "NumLShrInst": 3,
    "NumLoadInst": 77,
    "NumMulInst": 1,
    "NumOrInst": 8,
    "NumPHIInst": 2,
    "NumRetInst": 6,
    "NumSExtInst": 22,
    "NumSelectInst": 0,
    "NumShlInst": 3,
    "NumStoreInst": 54,
    "NumSubInst": 1,
    "NumTruncInst": 6,
    "NumXorInst": 0,
    "NumZExtInst": 6,
    "TotalBlocks": 52,
    "TotalInsts": 313,
    "TotalMemInst": 177,
    "TotalFuncs": 8,
    "ArgsPhi": 4,
    "testUnary": 146
  },
  "baseline_oz_instcount": 313,
  "knowledge_base_entry": [
    "--mergereturn",
    "--simplifycfg",
    "--aggressive-instcombine",
    "--inline",
    "--loop-instsimplify",
    "--lower-constant-intrinsics"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--float2int",
          "--loop-versioning",
          "--loop-simplify",
          "--lowerinvoke",
          "--ee-instrument",
          "--loop-simplifycfg",
          "--lower-expect",
          "--name-anon-globals",
          "--aggressive-instcombine",
          "--memcpyopt",
          "--guard-widening",
          "--loop-versioning-licm",
          "--loop-load-elim",
          "--loop-guard-widening",
          "--alignment-from-assumptions",
          "--inline",
          "--lowerswitch",
          "--loop-unroll-and-jam",
          "--mem2reg",
          "--consthoist",
          "--loop-predication",
          "--globalopt",
          "--coro-split",
          "--loop-fusion",
          "--mergereturn",
          "-loop-reduce",
          "--instnamer",
          "--dse",
          "--strip-debug-declare"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--float2int",
      "--loop-versioning",
      "--loop-simplify",
      "--lowerinvoke",
      "--ee-instrument",
      "--loop-simplifycfg",
      "--lower-expect",
      "--name-anon-globals",
      "--aggressive-instcombine",
      "--memcpyopt",
      "--guard-widening",
      "--loop-versioning-licm",
      "--loop-load-elim",
      "--loop-guard-widening",
      "--alignment-from-assumptions",
      "--inline",
      "--lowerswitch",
      "--loop-unroll-and-jam",
      "--mem2reg",
      "--consthoist",
      "--loop-predication",
      "--globalopt",
      "--coro-split",
      "--loop-fusion",
      "--mergereturn",
      "-loop-reduce",
      "--instnamer",
      "--dse",
      "--strip-debug-declare"
    ],
    "performance_vs_Oz": "+2.6%"
  }
}
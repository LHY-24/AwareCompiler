{
  "program_id": "linux-v0_10878.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 13,
    "onePredOneSuc": 12,
    "onePredTwoSuc": 0,
    "oneSuccessor": 14,
    "twoPred": 6,
    "twoPredOneSuc": 1,
    "twoEach": 2,
    "twoSuccessor": 4,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 28,
    "BeginPhi": 0,
    "BranchCount": 18,
    "returnInt": 1,
    "CriticalCount": 0,
    "NumEdges": 25,
    "const32Bit": 107,
    "const64Bit": 10,
    "numConstZeroes": 42,
    "numConstOnes": 44,
    "UncondBranches": 14,
    "binaryConstArg": 11,
    "NumAShrInst": 0,
    "NumAddInst": 9,
    "NumAllocaInst": 29,
    "NumAndInst": 1,
    "BlockMid": 5,
    "BlockLow": 23,
    "NumBitCastInst": 4,
    "NumBrInst": 18,
    "NumCallInst": 11,
    "NumGetElementPtrInst": 31,
    "NumICmpInst": 4,
    "NumLShrInst": 0,
    "NumLoadInst": 70,
    "NumMulInst": 1,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 9,
    "NumSExtInst": 1,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 45,
    "NumSubInst": 0,
    "NumTruncInst": 7,
    "NumXorInst": 0,
    "NumZExtInst": 1,
    "TotalBlocks": 28,
    "TotalInsts": 243,
    "TotalMemInst": 186,
    "TotalFuncs": 12,
    "ArgsPhi": 0,
    "testUnary": 112
  },
  "baseline_oz_instcount": 243,
  "knowledge_base_entry": [
    "--globaldce",
    "--aggressive-instcombine",
    "--simplifycfg",
    "--gvn",
    "--flattencfg",
    "--mergefunc",
    "--flattencfg",
    "--jump-threading",
    "--flattencfg",
    "--aggressive-instcombine",
    "--loop-rotate",
    "--newgvn",
    "--newgvn",
    "--mergefunc",
    "--loop-simplifycfg",
    "--ipsccp",
    "--loop-instsimplify",
    "--gvn",
    "--memcpyopt",
    "--mergefunc",
    "--inline",
    "--newgvn",
    "--loop-instsimplify",
    "--early-cse",
    "--elim-avail-extern"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--aggressive-instcombine",
          "-loop-reduce",
          "--forceattrs",
          "--guard-widening",
          "--rpo-functionattrs",
          "--scalarizer",
          "--barrier",
          "--loop-data-prefetch",
          "--insert-gcov-profiling",
          "--loop-unroll",
          "--load-store-vectorizer",
          "--break-crit-edges"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--aggressive-instcombine",
      "-loop-reduce",
      "--forceattrs",
      "--guard-widening",
      "--rpo-functionattrs",
      "--scalarizer",
      "--barrier",
      "--loop-data-prefetch",
      "--insert-gcov-profiling",
      "--loop-unroll",
      "--load-store-vectorizer",
      "--break-crit-edges"
    ],
    "performance_vs_Oz": "+0.8%"
  }
}
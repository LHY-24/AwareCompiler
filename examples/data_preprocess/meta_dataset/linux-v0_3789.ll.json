{
  "program_id": "linux-v0_3789.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 3,
    "onePred": 38,
    "onePredOneSuc": 33,
    "onePredTwoSuc": 4,
    "oneSuccessor": 37,
    "twoPred": 10,
    "twoPredOneSuc": 2,
    "twoEach": 2,
    "twoSuccessor": 12,
    "morePreds": 2,
    "BB03Phi": 3,
    "BBHiPhi": 0,
    "BBNoPhi": 60,
    "BeginPhi": 3,
    "BranchCount": 49,
    "returnInt": 2,
    "CriticalCount": 4,
    "NumEdges": 66,
    "const32Bit": 181,
    "const64Bit": 8,
    "numConstZeroes": 80,
    "numConstOnes": 57,
    "UncondBranches": 37,
    "binaryConstArg": 8,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 41,
    "NumAndInst": 6,
    "BlockMid": 5,
    "BlockLow": 58,
    "NumBitCastInst": 22,
    "NumBrInst": 49,
    "NumCallInst": 19,
    "NumGetElementPtrInst": 58,
    "NumICmpInst": 18,
    "NumLShrInst": 0,
    "NumLoadInst": 112,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 3,
    "NumRetInst": 13,
    "NumSExtInst": 1,
    "NumSelectInst": 5,
    "NumShlInst": 0,
    "NumStoreInst": 52,
    "NumSubInst": 2,
    "NumTruncInst": 1,
    "NumXorInst": 0,
    "NumZExtInst": 16,
    "TotalBlocks": 63,
    "TotalInsts": 421,
    "TotalMemInst": 282,
    "TotalFuncs": 21,
    "ArgsPhi": 6,
    "testUnary": 193
  },
  "baseline_oz_instcount": 421,
  "knowledge_base_entry": [
    "--aggressive-instcombine",
    "--reassociate",
    "--licm",
    "--newgvn",
    "--sccp",
    "--loop-simplifycfg",
    "--loop-instsimplify",
    "--globalopt",
    "--reassociate",
    "--licm",
    "--newgvn",
    "--sccp",
    "--loop-simplifycfg",
    "--jump-threading",
    "--simplifycfg",
    "--die"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--aggressive-instcombine",
          "--div-rem-pairs",
          "--canonicalize-aliases",
          "--early-cse",
          "--constmerge",
          "--mergefunc",
          "--lower-constant-intrinsics",
          "--deadargelim",
          "--loop-simplifycfg",
          "--always-inline",
          "--loop-sink",
          "--loop-vectorize",
          "--die",
          "--flattencfg",
          "--indvars",
          "--inferattrs",
          "--loop-unroll-and-jam",
          "--reassociate",
          "--add-discriminators",
          "--consthoist",
          "--inline",
          "--early-cse-memssa",
          "--barrier",
          "--gvn-hoist",
          "--sroa"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--aggressive-instcombine",
      "--div-rem-pairs",
      "--canonicalize-aliases",
      "--early-cse",
      "--constmerge",
      "--mergefunc",
      "--lower-constant-intrinsics",
      "--deadargelim",
      "--loop-simplifycfg",
      "--always-inline",
      "--loop-sink",
      "--loop-vectorize",
      "--die",
      "--flattencfg",
      "--indvars",
      "--inferattrs",
      "--loop-unroll-and-jam",
      "--reassociate",
      "--add-discriminators",
      "--consthoist",
      "--inline",
      "--early-cse-memssa",
      "--barrier",
      "--gvn-hoist",
      "--sroa"
    ],
    "performance_vs_Oz": "+0.5%"
  }
}
{
  "program_id": "github-v0_49045.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 0,
    "onePredOneSuc": 0,
    "onePredTwoSuc": 0,
    "oneSuccessor": 0,
    "twoPred": 0,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 0,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 8,
    "BeginPhi": 0,
    "BranchCount": 0,
    "returnInt": 0,
    "CriticalCount": 0,
    "NumEdges": 0,
    "const32Bit": 43,
    "const64Bit": 0,
    "numConstZeroes": 0,
    "numConstOnes": 35,
    "UncondBranches": 0,
    "binaryConstArg": 0,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 35,
    "NumAndInst": 0,
    "BlockMid": 1,
    "BlockLow": 7,
    "NumBitCastInst": 0,
    "NumBrInst": 0,
    "NumCallInst": 0,
    "NumGetElementPtrInst": 0,
    "NumICmpInst": 0,
    "NumLShrInst": 0,
    "NumLoadInst": 0,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 8,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 35,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 8,
    "TotalInsts": 78,
    "TotalMemInst": 70,
    "TotalFuncs": 8,
    "ArgsPhi": 0,
    "testUnary": 35
  },
  "baseline_oz_instcount": 78,
  "knowledge_base_entry": [
    "--deadargelim",
    "--mergefunc",
    "--lower-constant-intrinsics",
    "--gvn-hoist",
    "--early-cse-memssa",
    "--loop-deletion",
    "--newgvn",
    "-loop-reduce",
    "--reassociate",
    "--gvn",
    "--loop-rotate",
    "--aggressive-instcombine",
    "--instcombine",
    "--adce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--mergefunc",
          "--tailcallelim",
          "--constmerge",
          "--mergereturn",
          "--rewrite-statepoints-for-gc",
          "--lower-expect",
          "--prune-eh",
          "--loop-simplify",
          "--loweratomic",
          "--indvars",
          "--slp-vectorizer",
          "--early-cse"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+14.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--mergefunc",
      "--tailcallelim",
      "--constmerge",
      "--mergereturn",
      "--rewrite-statepoints-for-gc",
      "--lower-expect",
      "--prune-eh",
      "--loop-simplify",
      "--loweratomic",
      "--indvars",
      "--slp-vectorizer",
      "--early-cse"
    ],
    "performance_vs_Oz": "+14.1%"
  }
}
{
  "program_id": "github-v0_9607.ll",
  "autophase_features": {
    "BBNumArgsHi": 3,
    "BBNumArgsLo": 1,
    "onePred": 4,
    "onePredOneSuc": 2,
    "onePredTwoSuc": 2,
    "oneSuccessor": 3,
    "twoPred": 4,
    "twoPredOneSuc": 1,
    "twoEach": 3,
    "twoSuccessor": 6,
    "morePreds": 1,
    "BB03Phi": 1,
    "BBHiPhi": 3,
    "BBNoPhi": 6,
    "BeginPhi": 4,
    "BranchCount": 9,
    "returnInt": 2,
    "CriticalCount": 8,
    "NumEdges": 15,
    "const32Bit": 14,
    "const64Bit": 0,
    "numConstZeroes": 4,
    "numConstOnes": 7,
    "UncondBranches": 3,
    "binaryConstArg": 9,
    "NumAShrInst": 1,
    "NumAddInst": 15,
    "NumAllocaInst": 0,
    "NumAndInst": 1,
    "BlockMid": 3,
    "BlockLow": 7,
    "NumBitCastInst": 0,
    "NumBrInst": 9,
    "NumCallInst": 4,
    "NumGetElementPtrInst": 8,
    "NumICmpInst": 8,
    "NumLShrInst": 0,
    "NumLoadInst": 7,
    "NumMulInst": 6,
    "NumOrInst": 1,
    "NumPHIInst": 15,
    "NumRetInst": 1,
    "NumSExtInst": 5,
    "NumSelectInst": 1,
    "NumShlInst": 2,
    "NumStoreInst": 1,
    "NumSubInst": 1,
    "NumTruncInst": 2,
    "NumXorInst": 1,
    "NumZExtInst": 0,
    "TotalBlocks": 10,
    "TotalInsts": 102,
    "TotalMemInst": 20,
    "TotalFuncs": 3,
    "ArgsPhi": 30,
    "testUnary": 17
  },
  "baseline_oz_instcount": 107,
  "knowledge_base_entry": [
    "--die",
    "--sroa",
    "--instsimplify",
    "--dse",
    "--slp-vectorizer",
    "--nary-reassociate",
    "--elim-avail-extern",
    "--gvn-hoist",
    "--gvn",
    "--ipsccp",
    "--simplifycfg",
    "--mem2reg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--irce",
          "--aggressive-instcombine",
          "--argpromotion",
          "--flattencfg",
          "--rewrite-statepoints-for-gc",
          "--lower-matrix-intrinsics",
          "--loop-rotate",
          "--coro-split",
          "--inferattrs",
          "--strip-debug-declare",
          "--alignment-from-assumptions",
          "--strip-dead-prototypes",
          "--float2int",
          "--loop-unroll-and-jam",
          "--slsr",
          "--name-anon-globals",
          "--bdce",
          "--loop-distribute",
          "--memcpyopt",
          "--coro-cleanup",
          "--simplifycfg",
          "--gvn",
          "--speculative-execution",
          "--newgvn",
          "--callsite-splitting",
          "--adce",
          "--sancov",
          "--guard-widening",
          "--tailcallelim"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+5.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--irce",
      "--aggressive-instcombine",
      "--argpromotion",
      "--flattencfg",
      "--rewrite-statepoints-for-gc",
      "--lower-matrix-intrinsics",
      "--loop-rotate",
      "--coro-split",
      "--inferattrs",
      "--strip-debug-declare",
      "--alignment-from-assumptions",
      "--strip-dead-prototypes",
      "--float2int",
      "--loop-unroll-and-jam",
      "--slsr",
      "--name-anon-globals",
      "--bdce",
      "--loop-distribute",
      "--memcpyopt",
      "--coro-cleanup",
      "--simplifycfg",
      "--gvn",
      "--speculative-execution",
      "--newgvn",
      "--callsite-splitting",
      "--adce",
      "--sancov",
      "--guard-widening",
      "--tailcallelim"
    ],
    "performance_vs_Oz": "+5.6%"
  }
}
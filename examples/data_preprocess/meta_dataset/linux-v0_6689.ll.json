{
  "program_id": "linux-v0_6689.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 4,
    "onePredOneSuc": 2,
    "onePredTwoSuc": 0,
    "oneSuccessor": 4,
    "twoPred": 2,
    "twoPredOneSuc": 0,
    "twoEach": 2,
    "twoSuccessor": 2,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 8,
    "BeginPhi": 0,
    "BranchCount": 6,
    "returnInt": 0,
    "CriticalCount": 0,
    "NumEdges": 8,
    "const32Bit": 16,
    "const64Bit": 2,
    "numConstZeroes": 2,
    "numConstOnes": 14,
    "UncondBranches": 4,
    "binaryConstArg": 2,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 12,
    "NumAndInst": 0,
    "BlockMid": 2,
    "BlockLow": 6,
    "NumBitCastInst": 2,
    "NumBrInst": 6,
    "NumCallInst": 2,
    "NumGetElementPtrInst": 2,
    "NumICmpInst": 2,
    "NumLShrInst": 0,
    "NumLoadInst": 20,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 2,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 18,
    "NumSubInst": 2,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 8,
    "TotalInsts": 72,
    "TotalMemInst": 54,
    "TotalFuncs": 2,
    "ArgsPhi": 0,
    "testUnary": 38
  },
  "baseline_oz_instcount": 72,
  "knowledge_base_entry": [
    "--loop-guard-widening",
    "--early-cse-memssa",
    "--gvn",
    "--ipsccp",
    "--instcombine",
    "--dse",
    "--dse",
    "--mergefunc",
    "--lower-constant-intrinsics",
    "--aggressive-instcombine",
    "--load-store-vectorizer",
    "-loop-reduce",
    "--simplifycfg",
    "--licm",
    "--nary-reassociate",
    "--lower-expect",
    "--elim-avail-extern"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-interchange",
          "--argpromotion",
          "--forceattrs",
          "--guard-widening",
          "-loop-reduce",
          "--coro-cleanup",
          "--insert-gcov-profiling",
          "--mergereturn",
          "--loop-simplify",
          "--lower-matrix-intrinsics",
          "--slp-vectorizer",
          "--deadargelim",
          "--jump-threading",
          "--loop-reroll",
          "--newgvn",
          "--alignment-from-assumptions",
          "--reassociate",
          "--post-inline-ee-instrument",
          "--infer-address-spaces",
          "--aggressive-instcombine",
          "--coro-split",
          "--bdce",
          "--functionattrs",
          "--indvars",
          "--lowerinvoke",
          "--tailcallelim",
          "--attributor",
          "--strip-nondebug",
          "--constmerge"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+5.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-interchange",
      "--argpromotion",
      "--forceattrs",
      "--guard-widening",
      "-loop-reduce",
      "--coro-cleanup",
      "--insert-gcov-profiling",
      "--mergereturn",
      "--loop-simplify",
      "--lower-matrix-intrinsics",
      "--slp-vectorizer",
      "--deadargelim",
      "--jump-threading",
      "--loop-reroll",
      "--newgvn",
      "--alignment-from-assumptions",
      "--reassociate",
      "--post-inline-ee-instrument",
      "--infer-address-spaces",
      "--aggressive-instcombine",
      "--coro-split",
      "--bdce",
      "--functionattrs",
      "--indvars",
      "--lowerinvoke",
      "--tailcallelim",
      "--attributor",
      "--strip-nondebug",
      "--constmerge"
    ],
    "performance_vs_Oz": "+5.6%"
  }
}
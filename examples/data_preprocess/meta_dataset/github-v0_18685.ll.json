{
  "program_id": "github-v0_18685.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 11,
    "onePredOneSuc": 7,
    "onePredTwoSuc": 1,
    "oneSuccessor": 9,
    "twoPred": 4,
    "twoPredOneSuc": 1,
    "twoEach": 3,
    "twoSuccessor": 5,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 18,
    "BeginPhi": 0,
    "BranchCount": 14,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 19,
    "const32Bit": 34,
    "const64Bit": 19,
    "numConstZeroes": 24,
    "numConstOnes": 20,
    "UncondBranches": 9,
    "binaryConstArg": 11,
    "NumAShrInst": 1,
    "NumAddInst": 4,
    "NumAllocaInst": 12,
    "NumAndInst": 1,
    "BlockMid": 5,
    "BlockLow": 13,
    "NumBitCastInst": 0,
    "NumBrInst": 14,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 13,
    "NumICmpInst": 5,
    "NumLShrInst": 0,
    "NumLoadInst": 23,
    "NumMulInst": 0,
    "NumOrInst": 2,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 16,
    "NumSubInst": 3,
    "NumTruncInst": 4,
    "NumXorInst": 0,
    "NumZExtInst": 8,
    "TotalBlocks": 18,
    "TotalInsts": 122,
    "TotalMemInst": 71,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 50
  },
  "baseline_oz_instcount": 122,
  "knowledge_base_entry": [
    "--mem2reg",
    "--loop-instsimplify",
    "--instcombine",
    "--die",
    "--dse",
    "--reassociate",
    "--aggressive-instcombine",
    "--reassociate",
    "--prune-eh",
    "--aggressive-instcombine",
    "--early-cse",
    "--mem2reg",
    "--instsimplify",
    "--early-cse-memssa",
    "--loop-reroll",
    "--sroa",
    "--mldst-motion"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--lower-matrix-intrinsics",
          "--lcssa",
          "--loop-distribute",
          "--loop-rotate",
          "--sccp",
          "--instcombine",
          "--indvars",
          "--sink",
          "--inject-tli-mappings",
          "--lowerinvoke",
          "--pgo-memop-opt",
          "--loop-load-elim",
          "--lower-widenable-condition",
          "--constmerge",
          "--die",
          "--loop-reroll",
          "--add-discriminators",
          "--aggressive-instcombine",
          "--loop-simplify"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--lower-matrix-intrinsics",
      "--lcssa",
      "--loop-distribute",
      "--loop-rotate",
      "--sccp",
      "--instcombine",
      "--indvars",
      "--sink",
      "--inject-tli-mappings",
      "--lowerinvoke",
      "--pgo-memop-opt",
      "--loop-load-elim",
      "--lower-widenable-condition",
      "--constmerge",
      "--die",
      "--loop-reroll",
      "--add-discriminators",
      "--aggressive-instcombine",
      "--loop-simplify"
    ],
    "performance_vs_Oz": "+1.6%"
  }
}
{
  "program_id": "linux-v0_2574.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 90,
    "onePredOneSuc": 59,
    "onePredTwoSuc": 30,
    "oneSuccessor": 85,
    "twoPred": 37,
    "twoPredOneSuc": 22,
    "twoEach": 11,
    "twoSuccessor": 45,
    "morePreds": 5,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 143,
    "BeginPhi": 2,
    "BranchCount": 130,
    "returnInt": 40,
    "CriticalCount": 31,
    "NumEdges": 186,
    "const32Bit": 237,
    "const64Bit": 93,
    "numConstZeroes": 115,
    "numConstOnes": 91,
    "UncondBranches": 85,
    "binaryConstArg": 140,
    "NumAShrInst": 1,
    "NumAddInst": 63,
    "NumAllocaInst": 34,
    "NumAndInst": 45,
    "BlockMid": 13,
    "BlockLow": 132,
    "NumBitCastInst": 14,
    "NumBrInst": 130,
    "NumCallInst": 104,
    "NumGetElementPtrInst": 36,
    "NumICmpInst": 53,
    "NumLShrInst": 8,
    "NumLoadInst": 222,
    "NumMulInst": 0,
    "NumOrInst": 7,
    "NumPHIInst": 2,
    "NumRetInst": 13,
    "NumSExtInst": 21,
    "NumSelectInst": 0,
    "NumShlInst": 6,
    "NumStoreInst": 79,
    "NumSubInst": 0,
    "NumTruncInst": 78,
    "NumXorInst": 17,
    "NumZExtInst": 51,
    "TotalBlocks": 145,
    "TotalInsts": 986,
    "TotalMemInst": 475,
    "TotalFuncs": 30,
    "ArgsPhi": 5,
    "testUnary": 420
  },
  "baseline_oz_instcount": 986,
  "knowledge_base_entry": [
    "-loop-reduce",
    "--reassociate",
    "--aggressive-instcombine",
    "--flattencfg",
    "--ipsccp",
    "--mergefunc",
    "--load-store-vectorizer",
    "--slsr",
    "--early-cse",
    "--reassociate",
    "--jump-threading",
    "--licm",
    "--loop-rotate",
    "--gvn",
    "--nary-reassociate",
    "--loop-simplifycfg",
    "--correlated-propagation",
    "--sroa",
    "--licm",
    "--inline",
    "--slp-vectorizer",
    "--dse",
    "--sroa",
    "--dce",
    "--mergefunc",
    "--correlated-propagation",
    "--globalopt"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--consthoist",
          "--lower-widenable-condition",
          "--inline",
          "--attributor",
          "--aggressive-instcombine",
          "--indvars",
          "--instcombine",
          "--lower-guard-intrinsic",
          "--instsimplify",
          "--insert-gcov-profiling",
          "--die",
          "--loop-unroll",
          "--tailcallelim",
          "--name-anon-globals",
          "--gvn",
          "--div-rem-pairs",
          "--strip-dead-prototypes",
          "--loop-simplifycfg",
          "--globalopt",
          "--rpo-functionattrs",
          "--loop-versioning",
          "--loop-load-elim",
          "--pgo-memop-opt",
          "--sroa",
          "--partially-inline-libcalls",
          "--constprop"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--consthoist",
      "--lower-widenable-condition",
      "--inline",
      "--attributor",
      "--aggressive-instcombine",
      "--indvars",
      "--instcombine",
      "--lower-guard-intrinsic",
      "--instsimplify",
      "--insert-gcov-profiling",
      "--die",
      "--loop-unroll",
      "--tailcallelim",
      "--name-anon-globals",
      "--gvn",
      "--div-rem-pairs",
      "--strip-dead-prototypes",
      "--loop-simplifycfg",
      "--globalopt",
      "--rpo-functionattrs",
      "--loop-versioning",
      "--loop-load-elim",
      "--pgo-memop-opt",
      "--sroa",
      "--partially-inline-libcalls",
      "--constprop"
    ],
    "performance_vs_Oz": "+0.7%"
  }
}
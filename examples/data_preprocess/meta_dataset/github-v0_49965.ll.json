{
  "program_id": "github-v0_49965.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 0,
    "onePredOneSuc": 0,
    "onePredTwoSuc": 0,
    "oneSuccessor": 0,
    "twoPred": 0,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 0,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 1,
    "BeginPhi": 0,
    "BranchCount": 0,
    "returnInt": 0,
    "CriticalCount": 0,
    "NumEdges": 0,
    "const32Bit": 0,
    "const64Bit": 0,
    "numConstZeroes": 0,
    "numConstOnes": 0,
    "UncondBranches": 0,
    "binaryConstArg": 0,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 0,
    "NumAndInst": 0,
    "BlockMid": 0,
    "BlockLow": 1,
    "NumBitCastInst": 1,
    "NumBrInst": 0,
    "NumCallInst": 0,
    "NumGetElementPtrInst": 0,
    "NumICmpInst": 0,
    "NumLShrInst": 0,
    "NumLoadInst": 0,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 1,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 1,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 1,
    "TotalInsts": 5,
    "TotalMemInst": 1,
    "TotalFuncs": 1,
    "ArgsPhi": 0,
    "testUnary": 1
  },
  "baseline_oz_instcount": 5,
  "knowledge_base_entry": [
    "--scalarizer",
    "--early-cse-memssa",
    "--sroa",
    "-loop-reduce",
    "--indvars",
    "--early-cse-memssa",
    "--early-cse-memssa",
    "--globalopt",
    "--mem2reg",
    "--mldst-motion",
    "--lower-constant-intrinsics",
    "--aggressive-instcombine",
    "--instcombine",
    "--mem2reg",
    "--slp-vectorizer",
    "--dce",
    "--lower-expect",
    "--prune-eh",
    "--newgvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--insert-gcov-profiling",
          "--callsite-splitting",
          "--gvn",
          "--hotcoldsplit",
          "--licm",
          "--loop-distribute",
          "--loop-unroll",
          "--simplifycfg",
          "--canonicalize-aliases",
          "--lower-matrix-intrinsics",
          "--pgo-memop-opt",
          "--constmerge",
          "--loop-versioning-licm",
          "--load-store-vectorizer",
          "--loop-interchange",
          "--aggressive-instcombine",
          "--loweratomic",
          "--consthoist",
          "--scalarizer",
          "--slsr",
          "--separate-const-offset-from-gep",
          "--loop-unroll-and-jam",
          "--instcombine",
          "--bdce",
          "--strip"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+20.0%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--insert-gcov-profiling",
      "--callsite-splitting",
      "--gvn",
      "--hotcoldsplit",
      "--licm",
      "--loop-distribute",
      "--loop-unroll",
      "--simplifycfg",
      "--canonicalize-aliases",
      "--lower-matrix-intrinsics",
      "--pgo-memop-opt",
      "--constmerge",
      "--loop-versioning-licm",
      "--load-store-vectorizer",
      "--loop-interchange",
      "--aggressive-instcombine",
      "--loweratomic",
      "--consthoist",
      "--scalarizer",
      "--slsr",
      "--separate-const-offset-from-gep",
      "--loop-unroll-and-jam",
      "--instcombine",
      "--bdce",
      "--strip"
    ],
    "performance_vs_Oz": "+20.0%"
  }
}
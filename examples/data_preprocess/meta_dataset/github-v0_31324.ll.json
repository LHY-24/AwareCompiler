{
  "program_id": "github-v0_31324.ll",
  "autophase_features": {
    "BBNumArgsHi": 11,
    "BBNumArgsLo": 19,
    "onePred": 21,
    "onePredOneSuc": 15,
    "onePredTwoSuc": 6,
    "oneSuccessor": 17,
    "twoPred": 29,
    "twoPredOneSuc": 2,
    "twoEach": 25,
    "twoSuccessor": 37,
    "morePreds": 4,
    "BB03Phi": 30,
    "BBHiPhi": 0,
    "BBNoPhi": 31,
    "BeginPhi": 30,
    "BranchCount": 54,
    "returnInt": 13,
    "CriticalCount": 53,
    "NumEdges": 91,
    "const32Bit": 283,
    "const64Bit": 10,
    "numConstZeroes": 47,
    "numConstOnes": 152,
    "UncondBranches": 17,
    "binaryConstArg": 75,
    "NumAShrInst": 2,
    "NumAddInst": 47,
    "NumAllocaInst": 0,
    "NumAndInst": 3,
    "BlockMid": 8,
    "BlockLow": 53,
    "NumBitCastInst": 4,
    "NumBrInst": 54,
    "NumCallInst": 50,
    "NumGetElementPtrInst": 100,
    "NumICmpInst": 33,
    "NumLShrInst": 0,
    "NumLoadInst": 93,
    "NumMulInst": 0,
    "NumOrInst": 9,
    "NumPHIInst": 61,
    "NumRetInst": 7,
    "NumSExtInst": 18,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 22,
    "NumSubInst": 8,
    "NumTruncInst": 5,
    "NumXorInst": 0,
    "NumZExtInst": 40,
    "TotalBlocks": 61,
    "TotalInsts": 588,
    "TotalMemInst": 265,
    "TotalFuncs": 11,
    "ArgsPhi": 125,
    "testUnary": 167
  },
  "baseline_oz_instcount": 582,
  "knowledge_base_entry": [
    "--strip-nondebug",
    "--mergefunc",
    "--licm",
    "--globalopt",
    "--mem2reg",
    "--licm",
    "--reassociate",
    "--newgvn",
    "--inline",
    "--early-cse-memssa",
    "--instsimplify",
    "--die",
    "--correlated-propagation",
    "--newgvn",
    "--inline",
    "--early-cse-memssa",
    "--loop-rotate",
    "--lower-expect",
    "--loop-simplifycfg",
    "--loop-rotate",
    "--instsimplify",
    "--correlated-propagation",
    "--nary-reassociate",
    "--slsr",
    "--loop-reroll",
    "--gvn",
    "--simplifycfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--redundant-dbg-inst-elim",
          "--sancov",
          "--lower-matrix-intrinsics",
          "--guard-widening",
          "--callsite-splitting",
          "--mldst-motion",
          "--constprop",
          "--loop-sink",
          "--loop-versioning-licm",
          "--add-discriminators",
          "--lower-widenable-condition",
          "--loop-reroll",
          "--coro-early",
          "--early-cse-memssa"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+7.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--redundant-dbg-inst-elim",
      "--sancov",
      "--lower-matrix-intrinsics",
      "--guard-widening",
      "--callsite-splitting",
      "--mldst-motion",
      "--constprop",
      "--loop-sink",
      "--loop-versioning-licm",
      "--add-discriminators",
      "--lower-widenable-condition",
      "--loop-reroll",
      "--coro-early",
      "--early-cse-memssa"
    ],
    "performance_vs_Oz": "+7.2%"
  }
}
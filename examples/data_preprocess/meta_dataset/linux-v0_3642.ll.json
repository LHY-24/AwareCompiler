{
  "program_id": "linux-v0_3642.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 3,
    "onePred": 37,
    "onePredOneSuc": 31,
    "onePredTwoSuc": 5,
    "oneSuccessor": 35,
    "twoPred": 12,
    "twoPredOneSuc": 3,
    "twoEach": 6,
    "twoSuccessor": 16,
    "morePreds": 3,
    "BB03Phi": 3,
    "BBHiPhi": 0,
    "BBNoPhi": 58,
    "BeginPhi": 3,
    "BranchCount": 51,
    "returnInt": 21,
    "CriticalCount": 9,
    "NumEdges": 75,
    "const32Bit": 69,
    "const64Bit": 14,
    "numConstZeroes": 29,
    "numConstOnes": 46,
    "UncondBranches": 35,
    "binaryConstArg": 7,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 35,
    "NumAndInst": 0,
    "BlockMid": 3,
    "BlockLow": 58,
    "NumBitCastInst": 0,
    "NumBrInst": 51,
    "NumCallInst": 32,
    "NumGetElementPtrInst": 1,
    "NumICmpInst": 16,
    "NumLShrInst": 0,
    "NumLoadInst": 71,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 3,
    "NumRetInst": 9,
    "NumSExtInst": 5,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 60,
    "NumSubInst": 4,
    "NumTruncInst": 2,
    "NumXorInst": 7,
    "NumZExtInst": 5,
    "TotalBlocks": 61,
    "TotalInsts": 302,
    "TotalMemInst": 199,
    "TotalFuncs": 20,
    "ArgsPhi": 6,
    "testUnary": 118
  },
  "baseline_oz_instcount": 303,
  "knowledge_base_entry": [
    "--mem2reg",
    "--ipsccp",
    "--simplifycfg",
    "--loop-instsimplify",
    "--sccp",
    "--loop-simplifycfg",
    "--gvn",
    "--sccp",
    "--globalopt",
    "--flattencfg",
    "--adce",
    "--instcombine",
    "--die",
    "--early-cse-memssa",
    "--aggressive-instcombine",
    "--loop-instsimplify",
    "--dse",
    "--nary-reassociate",
    "--instsimplify",
    "--newgvn",
    "--inline",
    "--licm",
    "--gvn",
    "--dce",
    "--aggressive-instcombine",
    "--load-store-vectorizer",
    "--loop-instsimplify"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-interchange",
          "--simple-loop-unswitch",
          "--gvn-hoist",
          "--newgvn",
          "--gvn",
          "--infer-address-spaces",
          "--coro-early",
          "--loop-guard-widening",
          "--libcalls-shrinkwrap",
          "--loop-versioning",
          "--globalsplit",
          "--loop-rotate",
          "--loop-reroll"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-interchange",
      "--simple-loop-unswitch",
      "--gvn-hoist",
      "--newgvn",
      "--gvn",
      "--infer-address-spaces",
      "--coro-early",
      "--loop-guard-widening",
      "--libcalls-shrinkwrap",
      "--loop-versioning",
      "--globalsplit",
      "--loop-rotate",
      "--loop-reroll"
    ],
    "performance_vs_Oz": "+0.3%"
  }
}
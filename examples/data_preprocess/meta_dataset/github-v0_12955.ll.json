{
  "program_id": "github-v0_12955.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 22,
    "onePredOneSuc": 14,
    "onePredTwoSuc": 5,
    "oneSuccessor": 29,
    "twoPred": 19,
    "twoPredOneSuc": 11,
    "twoEach": 5,
    "twoSuccessor": 11,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 49,
    "BeginPhi": 0,
    "BranchCount": 40,
    "returnInt": 9,
    "CriticalCount": 13,
    "NumEdges": 63,
    "const32Bit": 95,
    "const64Bit": 44,
    "numConstZeroes": 33,
    "numConstOnes": 30,
    "UncondBranches": 29,
    "binaryConstArg": 46,
    "NumAShrInst": 0,
    "NumAddInst": 29,
    "NumAllocaInst": 20,
    "NumAndInst": 4,
    "BlockMid": 3,
    "BlockLow": 46,
    "NumBitCastInst": 4,
    "NumBrInst": 40,
    "NumCallInst": 12,
    "NumGetElementPtrInst": 43,
    "NumICmpInst": 11,
    "NumLShrInst": 12,
    "NumLoadInst": 225,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 7,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 24,
    "NumStoreInst": 101,
    "NumSubInst": 37,
    "NumTruncInst": 5,
    "NumXorInst": 18,
    "NumZExtInst": 41,
    "TotalBlocks": 49,
    "TotalInsts": 635,
    "TotalMemInst": 401,
    "TotalFuncs": 13,
    "ArgsPhi": 0,
    "testUnary": 295
  },
  "baseline_oz_instcount": 634,
  "knowledge_base_entry": [
    "--sccp",
    "--adce",
    "--sccp",
    "--globalopt",
    "--dse",
    "--globalopt",
    "--globaldce",
    "--mergefunc",
    "--lower-expect",
    "--nary-reassociate",
    "--early-cse-memssa",
    "--flattencfg",
    "--aggressive-instcombine",
    "--dce",
    "--lower-expect",
    "--instsimplify",
    "--early-cse-memssa",
    "--gvn-hoist",
    "--dce",
    "--dse"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--indvars",
          "--loop-unroll",
          "--deadargelim",
          "--die",
          "--coro-early",
          "--loop-versioning",
          "--cross-dso-cfi",
          "--loop-sink",
          "--mergefunc",
          "--partially-inline-libcalls",
          "--loop-vectorize",
          "--globaldce",
          "--aggressive-instcombine",
          "--speculative-execution",
          "--loop-distribute",
          "--called-value-propagation",
          "--callsite-splitting",
          "--lower-expect",
          "--nary-reassociate",
          "--scalarizer",
          "--correlated-propagation",
          "--rpo-functionattrs",
          "-loop-reduce",
          "--loop-interchange",
          "--ipsccp",
          "--loop-unroll-and-jam",
          "--loop-versioning-licm",
          "--simplifycfg",
          "--inferattrs"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--indvars",
      "--loop-unroll",
      "--deadargelim",
      "--die",
      "--coro-early",
      "--loop-versioning",
      "--cross-dso-cfi",
      "--loop-sink",
      "--mergefunc",
      "--partially-inline-libcalls",
      "--loop-vectorize",
      "--globaldce",
      "--aggressive-instcombine",
      "--speculative-execution",
      "--loop-distribute",
      "--called-value-propagation",
      "--callsite-splitting",
      "--lower-expect",
      "--nary-reassociate",
      "--scalarizer",
      "--correlated-propagation",
      "--rpo-functionattrs",
      "-loop-reduce",
      "--loop-interchange",
      "--ipsccp",
      "--loop-unroll-and-jam",
      "--loop-versioning-licm",
      "--simplifycfg",
      "--inferattrs"
    ],
    "performance_vs_Oz": "+1.3%"
  }
}
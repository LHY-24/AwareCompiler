{
  "program_id": "github-v0_42526.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 0,
    "onePredOneSuc": 0,
    "onePredTwoSuc": 0,
    "oneSuccessor": 0,
    "twoPred": 0,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 0,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 10,
    "BeginPhi": 0,
    "BranchCount": 0,
    "returnInt": 0,
    "CriticalCount": 0,
    "NumEdges": 0,
    "const32Bit": 34,
    "const64Bit": 61,
    "numConstZeroes": 39,
    "numConstOnes": 34,
    "UncondBranches": 0,
    "binaryConstArg": 18,
    "NumAShrInst": 0,
    "NumAddInst": 44,
    "NumAllocaInst": 0,
    "NumAndInst": 0,
    "BlockMid": 5,
    "BlockLow": 5,
    "NumBitCastInst": 0,
    "NumBrInst": 0,
    "NumCallInst": 25,
    "NumGetElementPtrInst": 27,
    "NumICmpInst": 0,
    "NumLShrInst": 0,
    "NumLoadInst": 26,
    "NumMulInst": 26,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 10,
    "NumSExtInst": 15,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 1,
    "NumSubInst": 1,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 10,
    "TotalInsts": 262,
    "TotalMemInst": 79,
    "TotalFuncs": 12,
    "ArgsPhi": 0,
    "testUnary": 57
  },
  "baseline_oz_instcount": 261,
  "knowledge_base_entry": [
    "--scalarizer",
    "--early-cse-memssa",
    "--die",
    "--jump-threading",
    "--inline",
    "--bdce",
    "--ipsccp",
    "--newgvn",
    "--bdce",
    "--loop-simplifycfg",
    "--reassociate",
    "--lower-constant-intrinsics",
    "--simplifycfg",
    "--slp-vectorizer",
    "--inline",
    "--mergefunc",
    "--reassociate",
    "--slsr",
    "--early-cse",
    "--loop-rotate",
    "--aggressive-instcombine",
    "--load-store-vectorizer",
    "--early-cse",
    "--nary-reassociate",
    "--mem2reg",
    "--load-store-vectorizer",
    "--correlated-propagation",
    "--dse",
    "--dce",
    "--elim-avail-extern"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--mergeicmps",
          "--lower-expect",
          "--licm",
          "--mergefunc",
          "--loop-fusion",
          "--sccp",
          "--dse",
          "--early-cse",
          "--globaldce",
          "--loop-interchange",
          "--sancov",
          "--partially-inline-libcalls",
          "--callsite-splitting",
          "--slsr",
          "--loop-distribute",
          "--float2int",
          "--inferattrs",
          "--lower-constant-intrinsics",
          "--add-discriminators",
          "--functionattrs",
          "--redundant-dbg-inst-elim",
          "--instsimplify",
          "--scalarizer",
          "--instcombine",
          "--canonicalize-aliases",
          "--speculative-execution",
          "--constmerge"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+5.0%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--mergeicmps",
      "--lower-expect",
      "--licm",
      "--mergefunc",
      "--loop-fusion",
      "--sccp",
      "--dse",
      "--early-cse",
      "--globaldce",
      "--loop-interchange",
      "--sancov",
      "--partially-inline-libcalls",
      "--callsite-splitting",
      "--slsr",
      "--loop-distribute",
      "--float2int",
      "--inferattrs",
      "--lower-constant-intrinsics",
      "--add-discriminators",
      "--functionattrs",
      "--redundant-dbg-inst-elim",
      "--instsimplify",
      "--scalarizer",
      "--instcombine",
      "--canonicalize-aliases",
      "--speculative-execution",
      "--constmerge"
    ],
    "performance_vs_Oz": "+5.0%"
  }
}
{
  "program_id": "linux-v0_12045.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 17,
    "onePredOneSuc": 15,
    "onePredTwoSuc": 1,
    "oneSuccessor": 18,
    "twoPred": 3,
    "twoPredOneSuc": 1,
    "twoEach": 0,
    "twoSuccessor": 2,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 32,
    "BeginPhi": 0,
    "BranchCount": 20,
    "returnInt": 8,
    "CriticalCount": 2,
    "NumEdges": 29,
    "const32Bit": 119,
    "const64Bit": 13,
    "numConstZeroes": 43,
    "numConstOnes": 66,
    "UncondBranches": 18,
    "binaryConstArg": 13,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 49,
    "NumAndInst": 4,
    "BlockMid": 7,
    "BlockLow": 25,
    "NumBitCastInst": 10,
    "NumBrInst": 20,
    "NumCallInst": 17,
    "NumGetElementPtrInst": 34,
    "NumICmpInst": 5,
    "NumLShrInst": 2,
    "NumLoadInst": 71,
    "NumMulInst": 0,
    "NumOrInst": 3,
    "NumPHIInst": 0,
    "NumRetInst": 10,
    "NumSExtInst": 1,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 50,
    "NumSubInst": 0,
    "NumTruncInst": 5,
    "NumXorInst": 4,
    "NumZExtInst": 14,
    "TotalBlocks": 32,
    "TotalInsts": 305,
    "TotalMemInst": 221,
    "TotalFuncs": 19,
    "ArgsPhi": 0,
    "testUnary": 154
  },
  "baseline_oz_instcount": 305,
  "knowledge_base_entry": [
    "--mergefunc",
    "--correlated-propagation",
    "--globalopt",
    "--instsimplify",
    "--licm",
    "--lower-constant-intrinsics",
    "--aggressive-instcombine",
    "--ipsccp",
    "--elim-avail-extern",
    "--ipsccp",
    "--elim-avail-extern",
    "--gvn",
    "--aggressive-instcombine",
    "--instsimplify",
    "--mldst-motion",
    "--slp-vectorizer",
    "--loop-reroll",
    "--slp-vectorizer",
    "--elim-avail-extern",
    "--lower-expect",
    "--early-cse",
    "--newgvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-rotate",
          "--lower-matrix-intrinsics",
          "--globaldce",
          "--sccp",
          "--strip-nondebug",
          "--mergeicmps",
          "--simple-loop-unswitch",
          "--flattencfg",
          "--lower-constant-intrinsics",
          "--partially-inline-libcalls",
          "--coro-elide",
          "--loop-versioning",
          "--reassociate",
          "--aggressive-instcombine",
          "--loop-guard-widening",
          "--attributor"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-rotate",
      "--lower-matrix-intrinsics",
      "--globaldce",
      "--sccp",
      "--strip-nondebug",
      "--mergeicmps",
      "--simple-loop-unswitch",
      "--flattencfg",
      "--lower-constant-intrinsics",
      "--partially-inline-libcalls",
      "--coro-elide",
      "--loop-versioning",
      "--reassociate",
      "--aggressive-instcombine",
      "--loop-guard-widening",
      "--attributor"
    ],
    "performance_vs_Oz": "+1.3%"
  }
}
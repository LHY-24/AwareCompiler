{
  "program_id": "poj104-v1_30_2471.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 14,
    "onePredOneSuc": 6,
    "onePredTwoSuc": 5,
    "oneSuccessor": 10,
    "twoPred": 4,
    "twoPredOneSuc": 2,
    "twoEach": 1,
    "twoSuccessor": 8,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 28,
    "BeginPhi": 0,
    "BranchCount": 18,
    "returnInt": 3,
    "CriticalCount": 4,
    "NumEdges": 26,
    "const32Bit": 34,
    "const64Bit": 11,
    "numConstZeroes": 10,
    "numConstOnes": 16,
    "UncondBranches": 10,
    "binaryConstArg": 4,
    "NumAShrInst": 0,
    "NumAddInst": 3,
    "NumAllocaInst": 15,
    "NumAndInst": 0,
    "BlockMid": 2,
    "BlockLow": 26,
    "NumBitCastInst": 13,
    "NumBrInst": 18,
    "NumCallInst": 24,
    "NumGetElementPtrInst": 7,
    "NumICmpInst": 8,
    "NumLShrInst": 0,
    "NumLoadInst": 36,
    "NumMulInst": 2,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 9,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 18,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 1,
    "TotalBlocks": 28,
    "TotalInsts": 158,
    "TotalMemInst": 100,
    "TotalFuncs": 20,
    "ArgsPhi": 0,
    "testUnary": 65
  },
  "baseline_oz_instcount": 49,
  "knowledge_base_entry": [
    "--flattencfg",
    "--gvn",
    "--sroa",
    "--correlated-propagation",
    "--loop-reroll",
    "--simplifycfg",
    "--lower-constant-intrinsics",
    "--gvn-hoist",
    "--memcpyopt",
    "--early-cse-memssa",
    "--loop-reroll",
    "--newgvn",
    "--bdce",
    "--elim-avail-extern",
    "--slp-vectorizer",
    "--licm",
    "--inline",
    "--early-cse",
    "--licm",
    "--loop-simplifycfg",
    "--loop-reroll",
    "--slsr",
    "--instcombine",
    "--globalopt",
    "--elim-avail-extern",
    "--slp-vectorizer",
    "--simplifycfg",
    "--dse",
    "--load-store-vectorizer",
    "--gvn-hoist"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--rewrite-statepoints-for-gc",
          "--elim-avail-extern",
          "--mem2reg",
          "--called-value-propagation",
          "--instsimplify",
          "--mergereturn",
          "--mergeicmps",
          "--loop-sink",
          "--scalarizer",
          "--callsite-splitting",
          "--strip-nondebug",
          "--loop-simplifycfg",
          "--loop-interchange",
          "--loop-unroll-and-jam",
          "--sroa",
          "--speculative-execution",
          "--lower-matrix-intrinsics",
          "--sccp",
          "--indvars",
          "--early-cse-memssa",
          "--mergefunc",
          "--inline",
          "--bdce",
          "--loop-guard-widening",
          "--loop-load-elim",
          "--libcalls-shrinkwrap",
          "--die",
          "--cross-dso-cfi",
          "--pgo-memop-opt"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+8.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--rewrite-statepoints-for-gc",
      "--elim-avail-extern",
      "--mem2reg",
      "--called-value-propagation",
      "--instsimplify",
      "--mergereturn",
      "--mergeicmps",
      "--loop-sink",
      "--scalarizer",
      "--callsite-splitting",
      "--strip-nondebug",
      "--loop-simplifycfg",
      "--loop-interchange",
      "--loop-unroll-and-jam",
      "--sroa",
      "--speculative-execution",
      "--lower-matrix-intrinsics",
      "--sccp",
      "--indvars",
      "--early-cse-memssa",
      "--mergefunc",
      "--inline",
      "--bdce",
      "--loop-guard-widening",
      "--loop-load-elim",
      "--libcalls-shrinkwrap",
      "--die",
      "--cross-dso-cfi",
      "--pgo-memop-opt"
    ],
    "performance_vs_Oz": "+8.2%"
  }
}
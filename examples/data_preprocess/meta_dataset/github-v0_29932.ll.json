{
  "program_id": "github-v0_29932.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 15,
    "onePredOneSuc": 10,
    "onePredTwoSuc": 2,
    "oneSuccessor": 13,
    "twoPred": 6,
    "twoPredOneSuc": 2,
    "twoEach": 4,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 24,
    "BeginPhi": 0,
    "BranchCount": 20,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 27,
    "const32Bit": 34,
    "const64Bit": 59,
    "numConstZeroes": 51,
    "numConstOnes": 25,
    "UncondBranches": 13,
    "binaryConstArg": 8,
    "NumAShrInst": 0,
    "NumAddInst": 5,
    "NumAllocaInst": 15,
    "NumAndInst": 1,
    "BlockMid": 5,
    "BlockLow": 19,
    "NumBitCastInst": 16,
    "NumBrInst": 20,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 43,
    "NumICmpInst": 7,
    "NumLShrInst": 1,
    "NumLoadInst": 45,
    "NumMulInst": 0,
    "NumOrInst": 2,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 29,
    "NumSubInst": 0,
    "NumTruncInst": 5,
    "NumXorInst": 0,
    "NumZExtInst": 14,
    "TotalBlocks": 24,
    "TotalInsts": 217,
    "TotalMemInst": 139,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 98
  },
  "baseline_oz_instcount": 217,
  "knowledge_base_entry": [
    "--aggressive-instcombine",
    "--loop-rotate",
    "--early-cse-memssa",
    "--ipsccp",
    "--lower-expect",
    "--mergefunc",
    "--mem2reg",
    "--sccp",
    "--dce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--instcombine",
          "--redundant-dbg-inst-elim",
          "--licm",
          "--aggressive-instcombine",
          "--break-crit-edges",
          "--add-discriminators",
          "--prune-eh",
          "--loop-unswitch",
          "--argpromotion",
          "--loop-versioning-licm",
          "--called-value-propagation"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--instcombine",
      "--redundant-dbg-inst-elim",
      "--licm",
      "--aggressive-instcombine",
      "--break-crit-edges",
      "--add-discriminators",
      "--prune-eh",
      "--loop-unswitch",
      "--argpromotion",
      "--loop-versioning-licm",
      "--called-value-propagation"
    ],
    "performance_vs_Oz": "+2.8%"
  }
}
{
  "program_id": "linux-v0_6599.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 9,
    "onePred": 75,
    "onePredOneSuc": 51,
    "onePredTwoSuc": 24,
    "oneSuccessor": 67,
    "twoPred": 28,
    "twoPredOneSuc": 8,
    "twoEach": 16,
    "twoSuccessor": 44,
    "morePreds": 6,
    "BB03Phi": 9,
    "BBHiPhi": 0,
    "BBNoPhi": 115,
    "BeginPhi": 9,
    "BranchCount": 111,
    "returnInt": 10,
    "CriticalCount": 24,
    "NumEdges": 161,
    "const32Bit": 190,
    "const64Bit": 29,
    "numConstZeroes": 117,
    "numConstOnes": 116,
    "UncondBranches": 67,
    "binaryConstArg": 54,
    "NumAShrInst": 0,
    "NumAddInst": 25,
    "NumAllocaInst": 57,
    "NumAndInst": 3,
    "BlockMid": 16,
    "BlockLow": 108,
    "NumBitCastInst": 12,
    "NumBrInst": 111,
    "NumCallInst": 30,
    "NumGetElementPtrInst": 50,
    "NumICmpInst": 59,
    "NumLShrInst": 0,
    "NumLoadInst": 231,
    "NumMulInst": 1,
    "NumOrInst": 1,
    "NumPHIInst": 9,
    "NumRetInst": 12,
    "NumSExtInst": 14,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 106,
    "NumSubInst": 2,
    "NumTruncInst": 2,
    "NumXorInst": 33,
    "NumZExtInst": 39,
    "TotalBlocks": 124,
    "TotalInsts": 805,
    "TotalMemInst": 474,
    "TotalFuncs": 17,
    "ArgsPhi": 18,
    "testUnary": 360
  },
  "baseline_oz_instcount": 803,
  "knowledge_base_entry": [
    "--globaldce",
    "--ipsccp",
    "--reassociate",
    "--dse",
    "--adce",
    "--mergefunc",
    "--die",
    "--aggressive-instcombine",
    "--bdce",
    "--aggressive-instcombine",
    "--gvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--separate-const-offset-from-gep",
          "--always-inline",
          "--loop-distribute",
          "--dse",
          "--loop-vectorize",
          "--constmerge",
          "--rewrite-statepoints-for-gc",
          "--rpo-functionattrs",
          "--alignment-from-assumptions",
          "--correlated-propagation",
          "--forceattrs",
          "--gvn-hoist",
          "--lower-guard-intrinsic",
          "--strip-dead-prototypes",
          "--loop-sink",
          "--add-discriminators",
          "--lower-expect",
          "--indvars",
          "--loop-deletion",
          "--libcalls-shrinkwrap",
          "--instcombine",
          "--loop-unroll",
          "--mem2reg",
          "--infer-address-spaces",
          "--loop-fusion",
          "--ipsccp",
          "--mergereturn",
          "--aggressive-instcombine",
          "--loop-unswitch",
          "--callsite-splitting"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--separate-const-offset-from-gep",
      "--always-inline",
      "--loop-distribute",
      "--dse",
      "--loop-vectorize",
      "--constmerge",
      "--rewrite-statepoints-for-gc",
      "--rpo-functionattrs",
      "--alignment-from-assumptions",
      "--correlated-propagation",
      "--forceattrs",
      "--gvn-hoist",
      "--lower-guard-intrinsic",
      "--strip-dead-prototypes",
      "--loop-sink",
      "--add-discriminators",
      "--lower-expect",
      "--indvars",
      "--loop-deletion",
      "--libcalls-shrinkwrap",
      "--instcombine",
      "--loop-unroll",
      "--mem2reg",
      "--infer-address-spaces",
      "--loop-fusion",
      "--ipsccp",
      "--mergereturn",
      "--aggressive-instcombine",
      "--loop-unswitch",
      "--callsite-splitting"
    ],
    "performance_vs_Oz": "+0.2%"
  }
}
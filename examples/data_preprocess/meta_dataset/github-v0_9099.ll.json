{
  "program_id": "github-v0_9099.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 52,
    "onePredOneSuc": 43,
    "onePredTwoSuc": 6,
    "oneSuccessor": 50,
    "twoPred": 28,
    "twoPredOneSuc": 5,
    "twoEach": 21,
    "twoSuccessor": 29,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 86,
    "BeginPhi": 0,
    "BranchCount": 78,
    "returnInt": 4,
    "CriticalCount": 15,
    "NumEdges": 108,
    "const32Bit": 110,
    "const64Bit": 39,
    "numConstZeroes": 40,
    "numConstOnes": 86,
    "UncondBranches": 50,
    "binaryConstArg": 58,
    "NumAShrInst": 0,
    "NumAddInst": 23,
    "NumAllocaInst": 42,
    "NumAndInst": 7,
    "BlockMid": 11,
    "BlockLow": 75,
    "NumBitCastInst": 2,
    "NumBrInst": 78,
    "NumCallInst": 10,
    "NumGetElementPtrInst": 48,
    "NumICmpInst": 26,
    "NumLShrInst": 3,
    "NumLoadInst": 219,
    "NumMulInst": 22,
    "NumOrInst": 11,
    "NumPHIInst": 0,
    "NumRetInst": 6,
    "NumSExtInst": 15,
    "NumSelectInst": 0,
    "NumShlInst": 4,
    "NumStoreInst": 88,
    "NumSubInst": 11,
    "NumTruncInst": 15,
    "NumXorInst": 0,
    "NumZExtInst": 11,
    "TotalBlocks": 86,
    "TotalInsts": 684,
    "TotalMemInst": 407,
    "TotalFuncs": 11,
    "ArgsPhi": 0,
    "testUnary": 312
  },
  "baseline_oz_instcount": 685,
  "knowledge_base_entry": [
    "--licm",
    "--memcpyopt",
    "--instsimplify",
    "--mem2reg",
    "--prune-eh",
    "--licm",
    "--mergefunc",
    "--correlated-propagation",
    "--nary-reassociate",
    "--newgvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--rpo-functionattrs",
          "--partially-inline-libcalls",
          "--slp-vectorizer",
          "--infer-address-spaces",
          "--loop-unroll-and-jam",
          "--partial-inliner",
          "--loop-predication",
          "--inline",
          "--licm",
          "--simple-loop-unswitch",
          "--mem2reg"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--rpo-functionattrs",
      "--partially-inline-libcalls",
      "--slp-vectorizer",
      "--infer-address-spaces",
      "--loop-unroll-and-jam",
      "--partial-inliner",
      "--loop-predication",
      "--inline",
      "--licm",
      "--simple-loop-unswitch",
      "--mem2reg"
    ],
    "performance_vs_Oz": "+0.1%"
  }
}
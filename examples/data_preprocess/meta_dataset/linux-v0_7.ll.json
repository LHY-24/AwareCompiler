{
  "program_id": "linux-v0_7.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 85,
    "onePredOneSuc": 62,
    "onePredTwoSuc": 21,
    "oneSuccessor": 73,
    "twoPred": 16,
    "twoPredOneSuc": 9,
    "twoEach": 5,
    "twoSuccessor": 30,
    "morePreds": 3,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 119,
    "BeginPhi": 0,
    "BranchCount": 103,
    "returnInt": 9,
    "CriticalCount": 12,
    "NumEdges": 136,
    "const32Bit": 340,
    "const64Bit": 63,
    "numConstZeroes": 177,
    "numConstOnes": 127,
    "UncondBranches": 73,
    "binaryConstArg": 40,
    "NumAShrInst": 0,
    "NumAddInst": 22,
    "NumAllocaInst": 58,
    "NumAndInst": 9,
    "BlockMid": 15,
    "BlockLow": 104,
    "NumBitCastInst": 12,
    "NumBrInst": 103,
    "NumCallInst": 45,
    "NumGetElementPtrInst": 143,
    "NumICmpInst": 35,
    "NumLShrInst": 4,
    "NumLoadInst": 272,
    "NumMulInst": 0,
    "NumOrInst": 2,
    "NumPHIInst": 0,
    "NumRetInst": 15,
    "NumSExtInst": 19,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 127,
    "NumSubInst": 0,
    "NumTruncInst": 13,
    "NumXorInst": 12,
    "NumZExtInst": 36,
    "TotalBlocks": 119,
    "TotalInsts": 929,
    "TotalMemInst": 645,
    "TotalFuncs": 32,
    "ArgsPhi": 0,
    "testUnary": 411
  },
  "baseline_oz_instcount": 923,
  "knowledge_base_entry": [
    "--correlated-propagation",
    "--ipsccp",
    "--correlated-propagation",
    "--instcombine",
    "--mldst-motion",
    "--loop-simplifycfg",
    "--gvn-hoist",
    "--slsr",
    "-loop-reduce",
    "--jump-threading",
    "--inline",
    "--loop-rotate",
    "--aggressive-instcombine",
    "--dse",
    "--gvn",
    "--slp-vectorizer"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--add-discriminators",
          "--load-store-vectorizer",
          "--mergereturn",
          "--slp-vectorizer",
          "--mergeicmps",
          "--sccp",
          "--consthoist",
          "--loop-predication",
          "--inline",
          "--partially-inline-libcalls",
          "--constprop",
          "--irce",
          "--ipsccp",
          "--lower-expect",
          "--infer-address-spaces",
          "--loop-fusion",
          "--loop-unroll-and-jam",
          "--cross-dso-cfi",
          "--loop-distribute",
          "--aggressive-instcombine"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--add-discriminators",
      "--load-store-vectorizer",
      "--mergereturn",
      "--slp-vectorizer",
      "--mergeicmps",
      "--sccp",
      "--consthoist",
      "--loop-predication",
      "--inline",
      "--partially-inline-libcalls",
      "--constprop",
      "--irce",
      "--ipsccp",
      "--lower-expect",
      "--infer-address-spaces",
      "--loop-fusion",
      "--loop-unroll-and-jam",
      "--cross-dso-cfi",
      "--loop-distribute",
      "--aggressive-instcombine"
    ],
    "performance_vs_Oz": "+2.1%"
  }
}
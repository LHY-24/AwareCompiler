{
  "program_id": "github-v0_9441.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 7,
    "onePredOneSuc": 6,
    "onePredTwoSuc": 0,
    "oneSuccessor": 7,
    "twoPred": 3,
    "twoPredOneSuc": 0,
    "twoEach": 2,
    "twoSuccessor": 3,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 15,
    "BeginPhi": 0,
    "BranchCount": 10,
    "returnInt": 8,
    "CriticalCount": 0,
    "NumEdges": 13,
    "const32Bit": 43,
    "const64Bit": 20,
    "numConstZeroes": 14,
    "numConstOnes": 33,
    "UncondBranches": 7,
    "binaryConstArg": 16,
    "NumAShrInst": 0,
    "NumAddInst": 5,
    "NumAllocaInst": 22,
    "NumAndInst": 5,
    "BlockMid": 6,
    "BlockLow": 9,
    "NumBitCastInst": 0,
    "NumBrInst": 10,
    "NumCallInst": 11,
    "NumGetElementPtrInst": 24,
    "NumICmpInst": 3,
    "NumLShrInst": 4,
    "NumLoadInst": 80,
    "NumMulInst": 2,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 5,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 40,
    "NumSubInst": 0,
    "NumTruncInst": 8,
    "NumXorInst": 8,
    "NumZExtInst": 24,
    "TotalBlocks": 15,
    "TotalInsts": 254,
    "TotalMemInst": 177,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 136
  },
  "baseline_oz_instcount": 254,
  "knowledge_base_entry": [
    "--loweratomic",
    "--aggressive-instcombine",
    "--simplifycfg",
    "--inline",
    "--load-store-vectorizer",
    "--mldst-motion",
    "--slp-vectorizer",
    "--jump-threading",
    "--slp-vectorizer",
    "--instsimplify",
    "--reassociate",
    "--aggressive-instcombine",
    "--instcombine",
    "--lower-constant-intrinsics",
    "--mldst-motion",
    "--early-cse"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--licm",
          "--speculative-execution",
          "--deadargelim",
          "--reassociate",
          "--reg2mem",
          "--div-rem-pairs",
          "--called-value-propagation",
          "--forceattrs",
          "--aggressive-instcombine",
          "--gvn",
          "--loop-simplifycfg"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--licm",
      "--speculative-execution",
      "--deadargelim",
      "--reassociate",
      "--reg2mem",
      "--div-rem-pairs",
      "--called-value-propagation",
      "--forceattrs",
      "--aggressive-instcombine",
      "--gvn",
      "--loop-simplifycfg"
    ],
    "performance_vs_Oz": "+3.1%"
  }
}
{
  "program_id": "linux-v0_556.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 7,
    "onePred": 60,
    "onePredOneSuc": 43,
    "onePredTwoSuc": 14,
    "oneSuccessor": 56,
    "twoPred": 26,
    "twoPredOneSuc": 8,
    "twoEach": 17,
    "twoSuccessor": 34,
    "morePreds": 4,
    "BB03Phi": 7,
    "BBHiPhi": 0,
    "BBNoPhi": 91,
    "BeginPhi": 7,
    "BranchCount": 90,
    "returnInt": 12,
    "CriticalCount": 9,
    "NumEdges": 124,
    "const32Bit": 174,
    "const64Bit": 20,
    "numConstZeroes": 79,
    "numConstOnes": 66,
    "UncondBranches": 56,
    "binaryConstArg": 6,
    "NumAShrInst": 0,
    "NumAddInst": 3,
    "NumAllocaInst": 50,
    "NumAndInst": 1,
    "BlockMid": 9,
    "BlockLow": 89,
    "NumBitCastInst": 6,
    "NumBrInst": 90,
    "NumCallInst": 33,
    "NumGetElementPtrInst": 51,
    "NumICmpInst": 35,
    "NumLShrInst": 0,
    "NumLoadInst": 177,
    "NumMulInst": 0,
    "NumOrInst": 3,
    "NumPHIInst": 7,
    "NumRetInst": 8,
    "NumSExtInst": 12,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 104,
    "NumSubInst": 5,
    "NumTruncInst": 4,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 98,
    "TotalInsts": 596,
    "TotalMemInst": 415,
    "TotalFuncs": 17,
    "ArgsPhi": 14,
    "testUnary": 256
  },
  "baseline_oz_instcount": 597,
  "knowledge_base_entry": [
    "--die",
    "--aggressive-instcombine",
    "--lower-expect"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--correlated-propagation",
          "--mergereturn",
          "--constprop",
          "--scalarizer",
          "--mergeicmps",
          "--infer-address-spaces",
          "--sancov",
          "--attributor",
          "--ee-instrument",
          "--die",
          "--loop-unroll-and-jam",
          "--early-cse",
          "--always-inline"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--correlated-propagation",
      "--mergereturn",
      "--constprop",
      "--scalarizer",
      "--mergeicmps",
      "--infer-address-spaces",
      "--sancov",
      "--attributor",
      "--ee-instrument",
      "--die",
      "--loop-unroll-and-jam",
      "--early-cse",
      "--always-inline"
    ],
    "performance_vs_Oz": "+0.2%"
  }
}
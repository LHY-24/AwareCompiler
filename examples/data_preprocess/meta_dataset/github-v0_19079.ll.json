{
  "program_id": "github-v0_19079.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 14,
    "onePredOneSuc": 8,
    "onePredTwoSuc": 3,
    "oneSuccessor": 12,
    "twoPred": 6,
    "twoPredOneSuc": 3,
    "twoEach": 3,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 23,
    "BeginPhi": 0,
    "BranchCount": 19,
    "returnInt": 4,
    "CriticalCount": 1,
    "NumEdges": 26,
    "const32Bit": 32,
    "const64Bit": 31,
    "numConstZeroes": 32,
    "numConstOnes": 23,
    "UncondBranches": 12,
    "binaryConstArg": 8,
    "NumAShrInst": 0,
    "NumAddInst": 8,
    "NumAllocaInst": 13,
    "NumAndInst": 0,
    "BlockMid": 4,
    "BlockLow": 19,
    "NumBitCastInst": 4,
    "NumBrInst": 19,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 24,
    "NumICmpInst": 7,
    "NumLShrInst": 0,
    "NumLoadInst": 37,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 19,
    "NumSubInst": 1,
    "NumTruncInst": 3,
    "NumXorInst": 0,
    "NumZExtInst": 8,
    "TotalBlocks": 23,
    "TotalInsts": 157,
    "TotalMemInst": 100,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 68
  },
  "baseline_oz_instcount": 157,
  "knowledge_base_entry": [
    "--simple-loop-unswitch",
    "--jump-threading",
    "--mergefunc",
    "--early-cse",
    "--bdce",
    "--aggressive-instcombine",
    "--flattencfg",
    "--early-cse",
    "--mem2reg",
    "--lower-constant-intrinsics",
    "--globalopt",
    "--aggressive-instcombine",
    "--mergefunc",
    "--simplifycfg",
    "--die"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-reroll",
          "--gvn-hoist",
          "--aggressive-instcombine",
          "--inject-tli-mappings",
          "--coro-cleanup",
          "--add-discriminators",
          "--irce",
          "--jump-threading",
          "--rpo-functionattrs",
          "--partially-inline-libcalls",
          "--attributor",
          "--prune-eh",
          "--ipconstprop",
          "--constprop",
          "--gvn",
          "--ipsccp",
          "--post-inline-ee-instrument",
          "--cross-dso-cfi",
          "--globalsplit",
          "--coro-split",
          "--loop-simplifycfg",
          "--functionattrs",
          "--dce"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-reroll",
      "--gvn-hoist",
      "--aggressive-instcombine",
      "--inject-tli-mappings",
      "--coro-cleanup",
      "--add-discriminators",
      "--irce",
      "--jump-threading",
      "--rpo-functionattrs",
      "--partially-inline-libcalls",
      "--attributor",
      "--prune-eh",
      "--ipconstprop",
      "--constprop",
      "--gvn",
      "--ipsccp",
      "--post-inline-ee-instrument",
      "--cross-dso-cfi",
      "--globalsplit",
      "--coro-split",
      "--loop-simplifycfg",
      "--functionattrs",
      "--dce"
    ],
    "performance_vs_Oz": "+2.5%"
  }
}
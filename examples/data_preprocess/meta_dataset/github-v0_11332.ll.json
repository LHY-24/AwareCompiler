{
  "program_id": "github-v0_11332.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 8,
    "onePredOneSuc": 6,
    "onePredTwoSuc": 2,
    "oneSuccessor": 8,
    "twoPred": 5,
    "twoPredOneSuc": 2,
    "twoEach": 2,
    "twoSuccessor": 5,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 14,
    "BeginPhi": 0,
    "BranchCount": 13,
    "returnInt": 0,
    "CriticalCount": 2,
    "NumEdges": 18,
    "const32Bit": 96,
    "const64Bit": 36,
    "numConstZeroes": 31,
    "numConstOnes": 59,
    "UncondBranches": 8,
    "binaryConstArg": 46,
    "NumAShrInst": 0,
    "NumAddInst": 4,
    "NumAllocaInst": 16,
    "NumAndInst": 18,
    "BlockMid": 5,
    "BlockLow": 9,
    "NumBitCastInst": 0,
    "NumBrInst": 13,
    "NumCallInst": 2,
    "NumGetElementPtrInst": 52,
    "NumICmpInst": 5,
    "NumLShrInst": 12,
    "NumLoadInst": 124,
    "NumMulInst": 0,
    "NumOrInst": 12,
    "NumPHIInst": 0,
    "NumRetInst": 1,
    "NumSExtInst": 4,
    "NumSelectInst": 0,
    "NumShlInst": 12,
    "NumStoreInst": 109,
    "NumSubInst": 0,
    "NumTruncInst": 34,
    "NumXorInst": 2,
    "NumZExtInst": 32,
    "TotalBlocks": 14,
    "TotalInsts": 452,
    "TotalMemInst": 303,
    "TotalFuncs": 2,
    "ArgsPhi": 0,
    "testUnary": 210
  },
  "baseline_oz_instcount": 452,
  "knowledge_base_entry": [
    "--loop-simplify",
    "--instcombine",
    "--nary-reassociate",
    "--indvars",
    "--jump-threading",
    "--loop-rotate",
    "--aggressive-instcombine",
    "--gvn-hoist",
    "--licm",
    "--inline"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-versioning",
          "-loop-reduce",
          "--aggressive-instcombine",
          "--loop-rotate",
          "--mem2reg",
          "--sccp",
          "--loop-vectorize",
          "--loop-predication",
          "--reassociate",
          "--loop-sink",
          "--jump-threading",
          "--sink",
          "--functionattrs",
          "--name-anon-globals",
          "--loop-instsimplify",
          "--lower-expect",
          "--strip-dead-prototypes",
          "--coro-cleanup",
          "--coro-elide",
          "--dse",
          "--slp-vectorizer",
          "--libcalls-shrinkwrap",
          "--sroa",
          "--float2int",
          "--early-cse-memssa",
          "--load-store-vectorizer",
          "--mergeicmps"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-versioning",
      "-loop-reduce",
      "--aggressive-instcombine",
      "--loop-rotate",
      "--mem2reg",
      "--sccp",
      "--loop-vectorize",
      "--loop-predication",
      "--reassociate",
      "--loop-sink",
      "--jump-threading",
      "--sink",
      "--functionattrs",
      "--name-anon-globals",
      "--loop-instsimplify",
      "--lower-expect",
      "--strip-dead-prototypes",
      "--coro-cleanup",
      "--coro-elide",
      "--dse",
      "--slp-vectorizer",
      "--libcalls-shrinkwrap",
      "--sroa",
      "--float2int",
      "--early-cse-memssa",
      "--load-store-vectorizer",
      "--mergeicmps"
    ],
    "performance_vs_Oz": "+3.1%"
  }
}
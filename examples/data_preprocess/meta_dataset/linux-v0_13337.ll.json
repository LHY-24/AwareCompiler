{
  "program_id": "linux-v0_13337.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 14,
    "onePredOneSuc": 10,
    "onePredTwoSuc": 4,
    "oneSuccessor": 14,
    "twoPred": 5,
    "twoPredOneSuc": 1,
    "twoEach": 1,
    "twoSuccessor": 7,
    "morePreds": 5,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 31,
    "BeginPhi": 0,
    "BranchCount": 21,
    "returnInt": 5,
    "CriticalCount": 157,
    "NumEdges": 184,
    "const32Bit": 227,
    "const64Bit": 1,
    "numConstZeroes": 36,
    "numConstOnes": 31,
    "UncondBranches": 14,
    "binaryConstArg": 0,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 20,
    "NumAndInst": 0,
    "BlockMid": 4,
    "BlockLow": 27,
    "NumBitCastInst": 2,
    "NumBrInst": 21,
    "NumCallInst": 11,
    "NumGetElementPtrInst": 22,
    "NumICmpInst": 7,
    "NumLShrInst": 0,
    "NumLoadInst": 58,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 7,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 30,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 2,
    "TotalBlocks": 31,
    "TotalInsts": 183,
    "TotalMemInst": 141,
    "TotalFuncs": 14,
    "ArgsPhi": 0,
    "testUnary": 82
  },
  "baseline_oz_instcount": 183,
  "knowledge_base_entry": [
    "--globaldce",
    "--mergefunc",
    "--globalopt",
    "--instsimplify",
    "--gvn-hoist",
    "--nary-reassociate",
    "--dse",
    "--dce",
    "--elim-avail-extern",
    "--adce",
    "--instcombine",
    "--gvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-versioning-licm",
          "--early-cse-memssa",
          "--pgo-memop-opt",
          "--always-inline",
          "--float2int",
          "--deadargelim",
          "--coro-split",
          "--loop-instsimplify",
          "--called-value-propagation",
          "--hotcoldsplit",
          "--constmerge",
          "--lower-expect",
          "--canonicalize-aliases",
          "--loop-interchange",
          "--mergefunc",
          "--load-store-vectorizer",
          "--mergereturn",
          "--constprop",
          "--sroa",
          "--strip-dead-prototypes",
          "--reassociate",
          "--indvars",
          "--scalarizer",
          "--functionattrs",
          "--irce",
          "--alignment-from-assumptions",
          "--add-discriminators",
          "--loop-simplifycfg",
          "--memcpyopt",
          "--lowerinvoke"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+6.0%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-versioning-licm",
      "--early-cse-memssa",
      "--pgo-memop-opt",
      "--always-inline",
      "--float2int",
      "--deadargelim",
      "--coro-split",
      "--loop-instsimplify",
      "--called-value-propagation",
      "--hotcoldsplit",
      "--constmerge",
      "--lower-expect",
      "--canonicalize-aliases",
      "--loop-interchange",
      "--mergefunc",
      "--load-store-vectorizer",
      "--mergereturn",
      "--constprop",
      "--sroa",
      "--strip-dead-prototypes",
      "--reassociate",
      "--indvars",
      "--scalarizer",
      "--functionattrs",
      "--irce",
      "--alignment-from-assumptions",
      "--add-discriminators",
      "--loop-simplifycfg",
      "--memcpyopt",
      "--lowerinvoke"
    ],
    "performance_vs_Oz": "+6.0%"
  }
}
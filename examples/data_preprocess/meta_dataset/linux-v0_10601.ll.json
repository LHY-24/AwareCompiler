{
  "program_id": "linux-v0_10601.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 20,
    "onePredOneSuc": 13,
    "onePredTwoSuc": 5,
    "oneSuccessor": 15,
    "twoPred": 1,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 8,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 43,
    "BeginPhi": 0,
    "BranchCount": 23,
    "returnInt": 9,
    "CriticalCount": 0,
    "NumEdges": 31,
    "const32Bit": 184,
    "const64Bit": 15,
    "numConstZeroes": 76,
    "numConstOnes": 73,
    "UncondBranches": 15,
    "binaryConstArg": 11,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 58,
    "NumAndInst": 7,
    "BlockMid": 7,
    "BlockLow": 36,
    "NumBitCastInst": 10,
    "NumBrInst": 23,
    "NumCallInst": 38,
    "NumGetElementPtrInst": 49,
    "NumICmpInst": 10,
    "NumLShrInst": 0,
    "NumLoadInst": 124,
    "NumMulInst": 0,
    "NumOrInst": 3,
    "NumPHIInst": 0,
    "NumRetInst": 20,
    "NumSExtInst": 1,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 73,
    "NumSubInst": 0,
    "NumTruncInst": 1,
    "NumXorInst": 2,
    "NumZExtInst": 8,
    "TotalBlocks": 43,
    "TotalInsts": 429,
    "TotalMemInst": 342,
    "TotalFuncs": 33,
    "ArgsPhi": 0,
    "testUnary": 202
  },
  "baseline_oz_instcount": 429,
  "knowledge_base_entry": [
    "--mldst-motion",
    "--gvn",
    "--globalopt",
    "--globaldce",
    "--aggressive-instcombine",
    "--loop-instsimplify",
    "--dce",
    "--jump-threading",
    "--globalopt",
    "--dse",
    "--loop-rotate",
    "--sroa",
    "--bdce",
    "--aggressive-instcombine",
    "--inline",
    "--prune-eh",
    "--early-cse-memssa",
    "--aggressive-instcombine",
    "--loop-instsimplify",
    "--dce",
    "--simplifycfg",
    "--loop-rotate",
    "--jump-threading"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--sroa",
          "--die",
          "--name-anon-globals",
          "--simplifycfg",
          "--bdce",
          "--instcombine",
          "--tailcallelim",
          "--strip-debug-declare",
          "--infer-address-spaces",
          "--simple-loop-unswitch",
          "--attributor",
          "--called-value-propagation",
          "--gvn",
          "--reassociate",
          "--loop-distribute",
          "--aggressive-instcombine",
          "--loop-vectorize",
          "--loop-simplify",
          "--mergeicmps",
          "--early-cse",
          "--constmerge",
          "--break-crit-edges"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--sroa",
      "--die",
      "--name-anon-globals",
      "--simplifycfg",
      "--bdce",
      "--instcombine",
      "--tailcallelim",
      "--strip-debug-declare",
      "--infer-address-spaces",
      "--simple-loop-unswitch",
      "--attributor",
      "--called-value-propagation",
      "--gvn",
      "--reassociate",
      "--loop-distribute",
      "--aggressive-instcombine",
      "--loop-vectorize",
      "--loop-simplify",
      "--mergeicmps",
      "--early-cse",
      "--constmerge",
      "--break-crit-edges"
    ],
    "performance_vs_Oz": "+0.2%"
  }
}
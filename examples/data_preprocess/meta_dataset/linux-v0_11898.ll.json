{
  "program_id": "linux-v0_11898.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 3,
    "onePred": 36,
    "onePredOneSuc": 30,
    "onePredTwoSuc": 6,
    "oneSuccessor": 32,
    "twoPred": 17,
    "twoPredOneSuc": 2,
    "twoEach": 12,
    "twoSuccessor": 25,
    "morePreds": 4,
    "BB03Phi": 3,
    "BBHiPhi": 0,
    "BBNoPhi": 77,
    "BeginPhi": 3,
    "BranchCount": 57,
    "returnInt": 1,
    "CriticalCount": 14,
    "NumEdges": 82,
    "const32Bit": 201,
    "const64Bit": 52,
    "numConstZeroes": 98,
    "numConstOnes": 101,
    "UncondBranches": 32,
    "binaryConstArg": 55,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 76,
    "NumAndInst": 25,
    "BlockMid": 12,
    "BlockLow": 68,
    "NumBitCastInst": 3,
    "NumBrInst": 57,
    "NumCallInst": 4,
    "NumGetElementPtrInst": 41,
    "NumICmpInst": 27,
    "NumLShrInst": 0,
    "NumLoadInst": 131,
    "NumMulInst": 1,
    "NumOrInst": 16,
    "NumPHIInst": 3,
    "NumRetInst": 23,
    "NumSExtInst": 10,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 131,
    "NumSubInst": 0,
    "NumTruncInst": 29,
    "NumXorInst": 16,
    "NumZExtInst": 48,
    "TotalBlocks": 80,
    "TotalInsts": 645,
    "TotalMemInst": 383,
    "TotalFuncs": 23,
    "ArgsPhi": 6,
    "testUnary": 297
  },
  "baseline_oz_instcount": 645,
  "knowledge_base_entry": [
    "--lowerinvoke",
    "--instcombine",
    "--sccp",
    "--licm",
    "--gvn",
    "--lower-expect",
    "--aggressive-instcombine",
    "--early-cse-memssa",
    "--dse",
    "--die",
    "--loop-instsimplify",
    "--elim-avail-extern",
    "--slp-vectorizer",
    "--gvn-hoist",
    "--aggressive-instcombine",
    "--loop-rotate",
    "--dse",
    "--mem2reg",
    "--lower-constant-intrinsics",
    "--gvn",
    "--aggressive-instcombine",
    "--loweratomic"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--licm",
          "--pgo-memop-opt",
          "--constprop",
          "--post-inline-ee-instrument",
          "--instsimplify",
          "--partially-inline-libcalls",
          "--rpo-functionattrs",
          "--sroa",
          "--elim-avail-extern",
          "--irce",
          "--aggressive-instcombine",
          "--loop-rotate",
          "--instcombine",
          "--coro-split",
          "--coro-early",
          "--lower-expect",
          "--adce",
          "--loop-data-prefetch",
          "--hotcoldsplit",
          "--lower-matrix-intrinsics",
          "--early-cse"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+6.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--licm",
      "--pgo-memop-opt",
      "--constprop",
      "--post-inline-ee-instrument",
      "--instsimplify",
      "--partially-inline-libcalls",
      "--rpo-functionattrs",
      "--sroa",
      "--elim-avail-extern",
      "--irce",
      "--aggressive-instcombine",
      "--loop-rotate",
      "--instcombine",
      "--coro-split",
      "--coro-early",
      "--lower-expect",
      "--adce",
      "--loop-data-prefetch",
      "--hotcoldsplit",
      "--lower-matrix-intrinsics",
      "--early-cse"
    ],
    "performance_vs_Oz": "+6.2%"
  }
}
{
  "program_id": "github-v0_10063.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 0,
    "onePredOneSuc": 0,
    "onePredTwoSuc": 0,
    "oneSuccessor": 0,
    "twoPred": 0,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 0,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 3,
    "BeginPhi": 0,
    "BranchCount": 0,
    "returnInt": 0,
    "CriticalCount": 0,
    "NumEdges": 0,
    "const32Bit": 2,
    "const64Bit": 2,
    "numConstZeroes": 2,
    "numConstOnes": 2,
    "UncondBranches": 0,
    "binaryConstArg": 0,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 0,
    "NumAndInst": 0,
    "BlockMid": 0,
    "BlockLow": 3,
    "NumBitCastInst": 3,
    "NumBrInst": 0,
    "NumCallInst": 2,
    "NumGetElementPtrInst": 0,
    "NumICmpInst": 0,
    "NumLShrInst": 0,
    "NumLoadInst": 0,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 0,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 3,
    "TotalInsts": 14,
    "TotalMemInst": 2,
    "TotalFuncs": 4,
    "ArgsPhi": 0,
    "testUnary": 5
  },
  "baseline_oz_instcount": 14,
  "knowledge_base_entry": [
    "--deadargelim",
    "--mergefunc",
    "--slp-vectorizer",
    "--instcombine",
    "--dse",
    "--sccp",
    "--loop-simplifycfg",
    "--licm",
    "--instsimplify",
    "--load-store-vectorizer",
    "--memcpyopt",
    "--elim-avail-extern",
    "--mem2reg",
    "--adce",
    "--early-cse",
    "--early-cse-memssa",
    "--slsr",
    "--nary-reassociate",
    "--loop-reroll",
    "--gvn-hoist"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-instsimplify",
          "--lowerswitch",
          "--redundant-dbg-inst-elim",
          "--sccp",
          "--newgvn",
          "--irce",
          "--strip-nondebug",
          "--slp-vectorizer",
          "--consthoist",
          "--loop-data-prefetch",
          "--loop-vectorize",
          "--mergereturn",
          "--coro-cleanup",
          "--attributor",
          "--sancov",
          "--early-cse",
          "--lower-matrix-intrinsics",
          "--float2int",
          "--instcombine",
          "--post-inline-ee-instrument",
          "--dce",
          "--strip",
          "--lower-guard-intrinsic",
          "--early-cse-memssa",
          "--speculative-execution"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+35.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-instsimplify",
      "--lowerswitch",
      "--redundant-dbg-inst-elim",
      "--sccp",
      "--newgvn",
      "--irce",
      "--strip-nondebug",
      "--slp-vectorizer",
      "--consthoist",
      "--loop-data-prefetch",
      "--loop-vectorize",
      "--mergereturn",
      "--coro-cleanup",
      "--attributor",
      "--sancov",
      "--early-cse",
      "--lower-matrix-intrinsics",
      "--float2int",
      "--instcombine",
      "--post-inline-ee-instrument",
      "--dce",
      "--strip",
      "--lower-guard-intrinsic",
      "--early-cse-memssa",
      "--speculative-execution"
    ],
    "performance_vs_Oz": "+35.7%"
  }
}
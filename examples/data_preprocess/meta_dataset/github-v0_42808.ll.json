{
  "program_id": "github-v0_42808.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 5,
    "onePred": 7,
    "onePredOneSuc": 4,
    "onePredTwoSuc": 3,
    "oneSuccessor": 6,
    "twoPred": 8,
    "twoPredOneSuc": 1,
    "twoEach": 6,
    "twoSuccessor": 10,
    "morePreds": 1,
    "BB03Phi": 5,
    "BBHiPhi": 0,
    "BBNoPhi": 12,
    "BeginPhi": 5,
    "BranchCount": 16,
    "returnInt": 3,
    "CriticalCount": 13,
    "NumEdges": 26,
    "const32Bit": 37,
    "const64Bit": 13,
    "numConstZeroes": 30,
    "numConstOnes": 5,
    "UncondBranches": 6,
    "binaryConstArg": 15,
    "NumAShrInst": 0,
    "NumAddInst": 8,
    "NumAllocaInst": 1,
    "NumAndInst": 1,
    "BlockMid": 1,
    "BlockLow": 16,
    "NumBitCastInst": 1,
    "NumBrInst": 16,
    "NumCallInst": 6,
    "NumGetElementPtrInst": 13,
    "NumICmpInst": 9,
    "NumLShrInst": 0,
    "NumLoadInst": 3,
    "NumMulInst": 0,
    "NumOrInst": 7,
    "NumPHIInst": 7,
    "NumRetInst": 1,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 10,
    "NumSubInst": 1,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 12,
    "TotalBlocks": 17,
    "TotalInsts": 98,
    "TotalMemInst": 33,
    "TotalFuncs": 7,
    "ArgsPhi": 14,
    "testUnary": 19
  },
  "baseline_oz_instcount": 98,
  "knowledge_base_entry": [
    "--loop-interchange",
    "--gvn-hoist",
    "--early-cse-memssa",
    "--loop-deletion",
    "--mem2reg",
    "--load-store-vectorizer",
    "--lower-constant-intrinsics",
    "--dse",
    "--inline",
    "--loop-instsimplify",
    "--aggressive-instcombine",
    "--newgvn",
    "--flattencfg",
    "--globalopt",
    "--jump-threading",
    "--reassociate",
    "--adce",
    "--loop-simplifycfg",
    "--simplifycfg",
    "--instcombine",
    "--memcpyopt",
    "--slp-vectorizer",
    "--die",
    "--gvn",
    "--instsimplify",
    "--ipsccp",
    "--mergefunc"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--bdce",
          "--callsite-splitting",
          "--guard-widening",
          "--load-store-vectorizer",
          "--infer-address-spaces",
          "--deadargelim",
          "--loop-data-prefetch",
          "--dce",
          "--coro-split",
          "--mergefunc"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+22.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--bdce",
      "--callsite-splitting",
      "--guard-widening",
      "--load-store-vectorizer",
      "--infer-address-spaces",
      "--deadargelim",
      "--loop-data-prefetch",
      "--dce",
      "--coro-split",
      "--mergefunc"
    ],
    "performance_vs_Oz": "+22.4%"
  }
}
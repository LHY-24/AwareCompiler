{
  "program_id": "poj104-v1_49_1335.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 14,
    "onePredOneSuc": 11,
    "onePredTwoSuc": 2,
    "oneSuccessor": 14,
    "twoPred": 6,
    "twoPredOneSuc": 2,
    "twoEach": 4,
    "twoSuccessor": 6,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 23,
    "BeginPhi": 0,
    "BranchCount": 20,
    "returnInt": 4,
    "CriticalCount": 2,
    "NumEdges": 26,
    "const32Bit": 18,
    "const64Bit": 19,
    "numConstZeroes": 11,
    "numConstOnes": 13,
    "UncondBranches": 14,
    "binaryConstArg": 6,
    "NumAShrInst": 0,
    "NumAddInst": 9,
    "NumAllocaInst": 7,
    "NumAndInst": 0,
    "BlockMid": 2,
    "BlockLow": 21,
    "NumBitCastInst": 12,
    "NumBrInst": 20,
    "NumCallInst": 19,
    "NumGetElementPtrInst": 5,
    "NumICmpInst": 6,
    "NumLShrInst": 0,
    "NumLoadInst": 28,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 6,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 12,
    "NumSubInst": 2,
    "NumTruncInst": 1,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 23,
    "TotalInsts": 130,
    "TotalMemInst": 71,
    "TotalFuncs": 11,
    "ArgsPhi": 0,
    "testUnary": 54
  },
  "baseline_oz_instcount": 64,
  "knowledge_base_entry": [
    "--memcpyopt",
    "--licm",
    "--licm",
    "--sccp",
    "--simplifycfg",
    "--elim-avail-extern",
    "--mergefunc",
    "--mem2reg",
    "--slp-vectorizer",
    "--mergefunc",
    "--gvn-hoist",
    "--instsimplify",
    "--lower-expect",
    "--instsimplify",
    "--loop-rotate",
    "--early-cse-memssa",
    "--bdce",
    "--die",
    "--sccp",
    "--reassociate",
    "--loop-simplifycfg",
    "--mldst-motion",
    "--sroa",
    "--licm",
    "--prune-eh",
    "--mem2reg",
    "--simplifycfg",
    "--correlated-propagation",
    "--instcombine",
    "--load-store-vectorizer",
    "--lower-constant-intrinsics",
    "--load-store-vectorizer",
    "--newgvn",
    "--instsimplify",
    "--gvn-hoist",
    "--inline",
    "--simplifycfg",
    "--gvn-hoist",
    "--licm",
    "--reassociate",
    "--early-cse-memssa",
    "--mergefunc",
    "--licm",
    "--loop-rotate",
    "--dse",
    "--adce",
    "--aggressive-instcombine",
    "--reassociate",
    "--early-cse-memssa",
    "--mergefunc",
    "--licm",
    "--loop-rotate",
    "--dse",
    "--early-cse",
    "--slp-vectorizer",
    "--loop-simplifycfg",
    "--inline",
    "--instcombine",
    "--load-store-vectorizer",
    "--early-cse-memssa",
    "--prune-eh",
    "--loop-simplifycfg",
    "--jump-threading",
    "--memcpyopt",
    "--licm",
    "--licm",
    "--sccp",
    "--simplifycfg",
    "--elim-avail-extern",
    "--mergefunc",
    "--mem2reg",
    "--slp-vectorizer",
    "--mergefunc",
    "--gvn-hoist",
    "--instsimplify",
    "--lower-expect",
    "--instsimplify",
    "--loop-rotate",
    "--early-cse-memssa",
    "--bdce",
    "--early-cse-memssa",
    "--prune-eh",
    "--inline",
    "--ipsccp",
    "--dce",
    "--elim-avail-extern",
    "--nary-reassociate",
    "--lower-constant-intrinsics",
    "--loop-reroll",
    "--instcombine",
    "--simplifycfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--post-inline-ee-instrument",
          "--loop-deletion",
          "--bdce",
          "--callsite-splitting",
          "--loop-idiom",
          "--dse",
          "--simple-loop-unswitch",
          "--loop-sink",
          "--lower-matrix-intrinsics",
          "--sroa",
          "--simplifycfg",
          "--partial-inliner",
          "--lcssa",
          "--instcombine",
          "--called-value-propagation",
          "--globalopt"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--post-inline-ee-instrument",
      "--loop-deletion",
      "--bdce",
      "--callsite-splitting",
      "--loop-idiom",
      "--dse",
      "--simple-loop-unswitch",
      "--loop-sink",
      "--lower-matrix-intrinsics",
      "--sroa",
      "--simplifycfg",
      "--partial-inliner",
      "--lcssa",
      "--instcombine",
      "--called-value-propagation",
      "--globalopt"
    ],
    "performance_vs_Oz": "+3.1%"
  }
}
{
  "program_id": "linux-v0_10020.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 59,
    "onePredOneSuc": 42,
    "onePredTwoSuc": 15,
    "oneSuccessor": 53,
    "twoPred": 18,
    "twoPredOneSuc": 7,
    "twoEach": 9,
    "twoSuccessor": 27,
    "morePreds": 3,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 102,
    "BeginPhi": 0,
    "BranchCount": 80,
    "returnInt": 27,
    "CriticalCount": 10,
    "NumEdges": 107,
    "const32Bit": 265,
    "const64Bit": 35,
    "numConstZeroes": 101,
    "numConstOnes": 111,
    "UncondBranches": 53,
    "binaryConstArg": 65,
    "NumAShrInst": 1,
    "NumAddInst": 15,
    "NumAllocaInst": 64,
    "NumAndInst": 18,
    "BlockMid": 16,
    "BlockLow": 86,
    "NumBitCastInst": 38,
    "NumBrInst": 80,
    "NumCallInst": 51,
    "NumGetElementPtrInst": 80,
    "NumICmpInst": 32,
    "NumLShrInst": 6,
    "NumLoadInst": 222,
    "NumMulInst": 6,
    "NumOrInst": 4,
    "NumPHIInst": 0,
    "NumRetInst": 22,
    "NumSExtInst": 30,
    "NumSelectInst": 1,
    "NumShlInst": 5,
    "NumStoreInst": 102,
    "NumSubInst": 8,
    "NumTruncInst": 8,
    "NumXorInst": 8,
    "NumZExtInst": 24,
    "TotalBlocks": 102,
    "TotalInsts": 833,
    "TotalMemInst": 519,
    "TotalFuncs": 45,
    "ArgsPhi": 0,
    "testUnary": 392
  },
  "baseline_oz_instcount": 833,
  "knowledge_base_entry": [
    "--lower-constant-intrinsics",
    "--aggressive-instcombine",
    "--lower-constant-intrinsics",
    "--instsimplify",
    "--correlated-propagation",
    "--globalopt",
    "--early-cse",
    "--loop-deletion",
    "--newgvn",
    "--die",
    "--elim-avail-extern",
    "--mergefunc",
    "--instcombine",
    "--memcpyopt",
    "--early-cse",
    "--mldst-motion",
    "--mem2reg",
    "--flattencfg",
    "--early-cse-memssa"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-vectorize",
          "--flattencfg",
          "--consthoist",
          "--slsr",
          "--partial-inliner",
          "--loop-rotate",
          "--speculative-execution",
          "--dce",
          "--strip",
          "--simplifycfg",
          "--tailcallelim",
          "--lowerinvoke",
          "--float2int",
          "--loop-unswitch",
          "--aggressive-instcombine",
          "--cross-dso-cfi",
          "--jump-threading",
          "--insert-gcov-profiling",
          "--loop-unroll",
          "--inline",
          "--loop-deletion",
          "--load-store-vectorizer",
          "--loop-versioning-licm"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-vectorize",
      "--flattencfg",
      "--consthoist",
      "--slsr",
      "--partial-inliner",
      "--loop-rotate",
      "--speculative-execution",
      "--dce",
      "--strip",
      "--simplifycfg",
      "--tailcallelim",
      "--lowerinvoke",
      "--float2int",
      "--loop-unswitch",
      "--aggressive-instcombine",
      "--cross-dso-cfi",
      "--jump-threading",
      "--insert-gcov-profiling",
      "--loop-unroll",
      "--inline",
      "--loop-deletion",
      "--load-store-vectorizer",
      "--loop-versioning-licm"
    ],
    "performance_vs_Oz": "+0.7%"
  }
}
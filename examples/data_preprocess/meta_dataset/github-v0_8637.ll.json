{
  "program_id": "github-v0_8637.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 3,
    "onePredOneSuc": 1,
    "onePredTwoSuc": 2,
    "oneSuccessor": 3,
    "twoPred": 3,
    "twoPredOneSuc": 1,
    "twoEach": 1,
    "twoSuccessor": 3,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 7,
    "BeginPhi": 0,
    "BranchCount": 6,
    "returnInt": 0,
    "CriticalCount": 3,
    "NumEdges": 9,
    "const32Bit": 7,
    "const64Bit": 2,
    "numConstZeroes": 4,
    "numConstOnes": 6,
    "UncondBranches": 3,
    "binaryConstArg": 1,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 4,
    "NumAndInst": 0,
    "BlockMid": 0,
    "BlockLow": 7,
    "NumBitCastInst": 0,
    "NumBrInst": 6,
    "NumCallInst": 0,
    "NumGetElementPtrInst": 2,
    "NumICmpInst": 3,
    "NumLShrInst": 0,
    "NumLoadInst": 9,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 1,
    "NumSExtInst": 4,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 8,
    "NumSubInst": 1,
    "NumTruncInst": 1,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 7,
    "TotalInsts": 40,
    "TotalMemInst": 23,
    "TotalFuncs": 1,
    "ArgsPhi": 0,
    "testUnary": 18
  },
  "baseline_oz_instcount": 41,
  "knowledge_base_entry": [
    "--deadargelim",
    "--mergefunc",
    "--flattencfg",
    "--mem2reg",
    "--globalopt",
    "--loweratomic",
    "--instcombine",
    "--gvn-hoist",
    "--jump-threading",
    "--aggressive-instcombine",
    "--early-cse-memssa",
    "--load-store-vectorizer",
    "--slp-vectorizer",
    "--sroa"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--load-store-vectorizer",
          "--name-anon-globals",
          "--coro-cleanup",
          "--dce",
          "--constmerge",
          "--infer-address-spaces",
          "--early-cse",
          "--cross-dso-cfi",
          "--loop-rotate",
          "--coro-early",
          "--loop-guard-widening",
          "--called-value-propagation",
          "--strip-debug-declare",
          "--ee-instrument",
          "--irce",
          "--argpromotion",
          "--simple-loop-unswitch",
          "--forceattrs",
          "--strip-nondebug",
          "--aggressive-instcombine",
          "--slsr",
          "--loop-simplify",
          "--loop-unroll-and-jam",
          "--strip",
          "--die",
          "--loop-deletion",
          "--prune-eh",
          "--gvn-hoist"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+7.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--load-store-vectorizer",
      "--name-anon-globals",
      "--coro-cleanup",
      "--dce",
      "--constmerge",
      "--infer-address-spaces",
      "--early-cse",
      "--cross-dso-cfi",
      "--loop-rotate",
      "--coro-early",
      "--loop-guard-widening",
      "--called-value-propagation",
      "--strip-debug-declare",
      "--ee-instrument",
      "--irce",
      "--argpromotion",
      "--simple-loop-unswitch",
      "--forceattrs",
      "--strip-nondebug",
      "--aggressive-instcombine",
      "--slsr",
      "--loop-simplify",
      "--loop-unroll-and-jam",
      "--strip",
      "--die",
      "--loop-deletion",
      "--prune-eh",
      "--gvn-hoist"
    ],
    "performance_vs_Oz": "+7.3%"
  }
}
{
  "program_id": "github-v0_41961.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 73,
    "onePredOneSuc": 46,
    "onePredTwoSuc": 24,
    "oneSuccessor": 66,
    "twoPred": 31,
    "twoPredOneSuc": 17,
    "twoEach": 7,
    "twoSuccessor": 41,
    "morePreds": 4,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 122,
    "BeginPhi": 2,
    "BranchCount": 107,
    "returnInt": 69,
    "CriticalCount": 15,
    "NumEdges": 152,
    "const32Bit": 128,
    "const64Bit": 45,
    "numConstZeroes": 119,
    "numConstOnes": 46,
    "UncondBranches": 66,
    "binaryConstArg": 6,
    "NumAShrInst": 0,
    "NumAddInst": 3,
    "NumAllocaInst": 34,
    "NumAndInst": 0,
    "BlockMid": 4,
    "BlockLow": 120,
    "NumBitCastInst": 2,
    "NumBrInst": 107,
    "NumCallInst": 98,
    "NumGetElementPtrInst": 31,
    "NumICmpInst": 42,
    "NumLShrInst": 0,
    "NumLoadInst": 96,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 2,
    "NumRetInst": 16,
    "NumSExtInst": 5,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 56,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 2,
    "NumZExtInst": 1,
    "TotalBlocks": 124,
    "TotalInsts": 497,
    "TotalMemInst": 315,
    "TotalFuncs": 38,
    "ArgsPhi": 4,
    "testUnary": 138
  },
  "baseline_oz_instcount": 508,
  "knowledge_base_entry": [
    "--slsr",
    "--load-store-vectorizer",
    "--dce",
    "--mergefunc",
    "--bdce",
    "--inline",
    "--sroa",
    "--ipsccp",
    "--flattencfg",
    "--aggressive-instcombine",
    "--newgvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--redundant-dbg-inst-elim",
          "--lower-guard-intrinsic",
          "--ipsccp",
          "--sroa",
          "--mergefunc",
          "--instcombine",
          "--strip-dead-prototypes",
          "--dce",
          "--cross-dso-cfi",
          "--called-value-propagation"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--redundant-dbg-inst-elim",
      "--lower-guard-intrinsic",
      "--ipsccp",
      "--sroa",
      "--mergefunc",
      "--instcombine",
      "--strip-dead-prototypes",
      "--dce",
      "--cross-dso-cfi",
      "--called-value-propagation"
    ],
    "performance_vs_Oz": "+2.4%"
  }
}
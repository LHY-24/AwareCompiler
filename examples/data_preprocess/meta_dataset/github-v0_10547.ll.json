{
  "program_id": "github-v0_10547.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 0,
    "onePredOneSuc": 0,
    "onePredTwoSuc": 0,
    "oneSuccessor": 0,
    "twoPred": 0,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 0,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 1,
    "BeginPhi": 0,
    "BranchCount": 0,
    "returnInt": 0,
    "CriticalCount": 0,
    "NumEdges": 0,
    "const32Bit": 2,
    "const64Bit": 7,
    "numConstZeroes": 2,
    "numConstOnes": 2,
    "UncondBranches": 0,
    "binaryConstArg": 0,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 0,
    "NumAndInst": 0,
    "BlockMid": 1,
    "BlockLow": 0,
    "NumBitCastInst": 0,
    "NumBrInst": 0,
    "NumCallInst": 2,
    "NumGetElementPtrInst": 7,
    "NumICmpInst": 0,
    "NumLShrInst": 0,
    "NumLoadInst": 4,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 1,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 7,
    "NumSubInst": 0,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 1,
    "TotalInsts": 39,
    "TotalMemInst": 20,
    "TotalFuncs": 3,
    "ArgsPhi": 0,
    "testUnary": 6
  },
  "baseline_oz_instcount": 39,
  "knowledge_base_entry": [
    "--gvn-hoist",
    "--die",
    "--inline",
    "--adce",
    "--loop-simplifycfg",
    "--simplifycfg",
    "--load-store-vectorizer",
    "--aggressive-instcombine"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--ipconstprop",
          "--loop-rotate",
          "--newgvn",
          "--partially-inline-libcalls",
          "--mergereturn",
          "--strip",
          "--ipsccp",
          "--scalarizer",
          "--instcombine",
          "--hotcoldsplit",
          "--reassociate",
          "--loop-versioning-licm",
          "--irce",
          "--lowerinvoke",
          "--loop-vectorize",
          "--loweratomic",
          "--partial-inliner",
          "--loop-unroll-and-jam",
          "--float2int",
          "--ee-instrument",
          "--sccp",
          "--memcpyopt",
          "--called-value-propagation",
          "--adce",
          "--coro-early",
          "--simple-loop-unswitch",
          "--loop-deletion",
          "--instnamer",
          "--strip-debug-declare",
          "--load-store-vectorizer"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+23.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--ipconstprop",
      "--loop-rotate",
      "--newgvn",
      "--partially-inline-libcalls",
      "--mergereturn",
      "--strip",
      "--ipsccp",
      "--scalarizer",
      "--instcombine",
      "--hotcoldsplit",
      "--reassociate",
      "--loop-versioning-licm",
      "--irce",
      "--lowerinvoke",
      "--loop-vectorize",
      "--loweratomic",
      "--partial-inliner",
      "--loop-unroll-and-jam",
      "--float2int",
      "--ee-instrument",
      "--sccp",
      "--memcpyopt",
      "--called-value-propagation",
      "--adce",
      "--coro-early",
      "--simple-loop-unswitch",
      "--loop-deletion",
      "--instnamer",
      "--strip-debug-declare",
      "--load-store-vectorizer"
    ],
    "performance_vs_Oz": "+23.1%"
  }
}
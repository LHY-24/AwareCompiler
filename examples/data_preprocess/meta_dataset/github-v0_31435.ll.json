{
  "program_id": "github-v0_31435.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 0,
    "onePredOneSuc": 0,
    "onePredTwoSuc": 0,
    "oneSuccessor": 0,
    "twoPred": 0,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 0,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 6,
    "BeginPhi": 0,
    "BranchCount": 0,
    "returnInt": 6,
    "CriticalCount": 0,
    "NumEdges": 0,
    "const32Bit": 31,
    "const64Bit": 45,
    "numConstZeroes": 34,
    "numConstOnes": 11,
    "UncondBranches": 0,
    "binaryConstArg": 26,
    "NumAShrInst": 6,
    "NumAddInst": 6,
    "NumAllocaInst": 0,
    "NumAndInst": 0,
    "BlockMid": 6,
    "BlockLow": 0,
    "NumBitCastInst": 0,
    "NumBrInst": 0,
    "NumCallInst": 10,
    "NumGetElementPtrInst": 36,
    "NumICmpInst": 0,
    "NumLShrInst": 0,
    "NumLoadInst": 30,
    "NumMulInst": 3,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 6,
    "NumSExtInst": 9,
    "NumSelectInst": 0,
    "NumShlInst": 6,
    "NumStoreInst": 6,
    "NumSubInst": 0,
    "NumTruncInst": 3,
    "NumXorInst": 0,
    "NumZExtInst": 18,
    "TotalBlocks": 6,
    "TotalInsts": 180,
    "TotalMemInst": 82,
    "TotalFuncs": 8,
    "ArgsPhi": 0,
    "testUnary": 63
  },
  "baseline_oz_instcount": 179,
  "knowledge_base_entry": [
    "--hotcoldsplit",
    "--mergefunc",
    "--gvn-hoist",
    "--licm",
    "--mldst-motion",
    "--jump-threading",
    "--slsr",
    "--instcombine",
    "--elim-avail-extern",
    "--instcombine",
    "--loop-reroll",
    "--correlated-propagation",
    "--dse",
    "--sroa",
    "--loop-reroll",
    "--jump-threading",
    "--sccp",
    "--die",
    "--slp-vectorizer",
    "--simplifycfg",
    "--slsr",
    "--loop-simplifycfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--bdce",
          "--sancov",
          "--argpromotion",
          "--mldst-motion",
          "--nary-reassociate",
          "--inferattrs",
          "--loop-vectorize",
          "--globaldce",
          "--loop-simplifycfg",
          "--strip-dead-prototypes",
          "--instcombine",
          "--mergereturn",
          "--lower-widenable-condition",
          "-loop-reduce",
          "--coro-split",
          "--libcalls-shrinkwrap",
          "--ipsccp",
          "--insert-gcov-profiling",
          "--mergefunc",
          "--early-cse-memssa",
          "--loop-simplify",
          "--licm",
          "--lower-guard-intrinsic"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+16.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--bdce",
      "--sancov",
      "--argpromotion",
      "--mldst-motion",
      "--nary-reassociate",
      "--inferattrs",
      "--loop-vectorize",
      "--globaldce",
      "--loop-simplifycfg",
      "--strip-dead-prototypes",
      "--instcombine",
      "--mergereturn",
      "--lower-widenable-condition",
      "-loop-reduce",
      "--coro-split",
      "--libcalls-shrinkwrap",
      "--ipsccp",
      "--insert-gcov-profiling",
      "--mergefunc",
      "--early-cse-memssa",
      "--loop-simplify",
      "--licm",
      "--lower-guard-intrinsic"
    ],
    "performance_vs_Oz": "+16.2%"
  }
}
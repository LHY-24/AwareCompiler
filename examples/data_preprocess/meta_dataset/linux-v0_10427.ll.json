{
  "program_id": "linux-v0_10427.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 56,
    "onePredOneSuc": 40,
    "onePredTwoSuc": 14,
    "oneSuccessor": 50,
    "twoPred": 14,
    "twoPredOneSuc": 7,
    "twoEach": 3,
    "twoSuccessor": 23,
    "morePreds": 6,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 105,
    "BeginPhi": 1,
    "BranchCount": 72,
    "returnInt": 18,
    "CriticalCount": 6,
    "NumEdges": 109,
    "const32Bit": 312,
    "const64Bit": 17,
    "numConstZeroes": 140,
    "numConstOnes": 129,
    "UncondBranches": 50,
    "binaryConstArg": 16,
    "NumAShrInst": 1,
    "NumAddInst": 3,
    "NumAllocaInst": 96,
    "NumAndInst": 1,
    "BlockMid": 13,
    "BlockLow": 93,
    "NumBitCastInst": 35,
    "NumBrInst": 72,
    "NumCallInst": 61,
    "NumGetElementPtrInst": 91,
    "NumICmpInst": 19,
    "NumLShrInst": 0,
    "NumLoadInst": 239,
    "NumMulInst": 0,
    "NumOrInst": 4,
    "NumPHIInst": 1,
    "NumRetInst": 30,
    "NumSExtInst": 9,
    "NumSelectInst": 0,
    "NumShlInst": 5,
    "NumStoreInst": 148,
    "NumSubInst": 2,
    "NumTruncInst": 17,
    "NumXorInst": 2,
    "NumZExtInst": 20,
    "TotalBlocks": 106,
    "TotalInsts": 865,
    "TotalMemInst": 635,
    "TotalFuncs": 52,
    "ArgsPhi": 2,
    "testUnary": 420
  },
  "baseline_oz_instcount": 865,
  "knowledge_base_entry": [
    "--mldst-motion",
    "--early-cse",
    "--bdce",
    "--aggressive-instcombine",
    "--bdce",
    "--load-store-vectorizer",
    "--lower-expect",
    "--ipsccp",
    "--newgvn",
    "--loop-deletion",
    "--elim-avail-extern",
    "--bdce",
    "--aggressive-instcombine",
    "--bdce",
    "--licm",
    "--prune-eh",
    "--loop-simplifycfg",
    "--gvn",
    "--slsr",
    "--loop-reroll",
    "--nary-reassociate",
    "--mem2reg",
    "--slp-vectorizer",
    "--instsimplify"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-distribute",
          "--functionattrs",
          "--loop-predication",
          "--loop-sink",
          "--rpo-functionattrs",
          "--aggressive-instcombine",
          "--loop-fusion",
          "--callsite-splitting",
          "--loop-unroll",
          "--insert-gcov-profiling",
          "--sccp",
          "--irce",
          "--pgo-memop-opt",
          "--coro-split",
          "-loop-reduce",
          "--strip-debug-declare",
          "--redundant-dbg-inst-elim",
          "--slp-vectorizer",
          "--infer-address-spaces",
          "--lcssa",
          "--cross-dso-cfi",
          "--scalarizer",
          "--ipsccp",
          "--ipconstprop",
          "--loop-unswitch",
          "--deadargelim",
          "--loop-idiom",
          "--loop-simplify",
          "--loop-load-elim"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-distribute",
      "--functionattrs",
      "--loop-predication",
      "--loop-sink",
      "--rpo-functionattrs",
      "--aggressive-instcombine",
      "--loop-fusion",
      "--callsite-splitting",
      "--loop-unroll",
      "--insert-gcov-profiling",
      "--sccp",
      "--irce",
      "--pgo-memop-opt",
      "--coro-split",
      "-loop-reduce",
      "--strip-debug-declare",
      "--redundant-dbg-inst-elim",
      "--slp-vectorizer",
      "--infer-address-spaces",
      "--lcssa",
      "--cross-dso-cfi",
      "--scalarizer",
      "--ipsccp",
      "--ipconstprop",
      "--loop-unswitch",
      "--deadargelim",
      "--loop-idiom",
      "--loop-simplify",
      "--loop-load-elim"
    ],
    "performance_vs_Oz": "+0.3%"
  }
}
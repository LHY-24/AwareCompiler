{
  "program_id": "linux-v0_232.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 13,
    "onePredOneSuc": 10,
    "onePredTwoSuc": 3,
    "oneSuccessor": 13,
    "twoPred": 6,
    "twoPredOneSuc": 3,
    "twoEach": 1,
    "twoSuccessor": 6,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 23,
    "BeginPhi": 0,
    "BranchCount": 19,
    "returnInt": 13,
    "CriticalCount": 1,
    "NumEdges": 25,
    "const32Bit": 175,
    "const64Bit": 14,
    "numConstZeroes": 100,
    "numConstOnes": 38,
    "UncondBranches": 13,
    "binaryConstArg": 10,
    "NumAShrInst": 2,
    "NumAddInst": 1,
    "NumAllocaInst": 28,
    "NumAndInst": 5,
    "BlockMid": 10,
    "BlockLow": 13,
    "NumBitCastInst": 14,
    "NumBrInst": 19,
    "NumCallInst": 21,
    "NumGetElementPtrInst": 61,
    "NumICmpInst": 7,
    "NumLShrInst": 0,
    "NumLoadInst": 76,
    "NumMulInst": 0,
    "NumOrInst": 2,
    "NumPHIInst": 0,
    "NumRetInst": 4,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 46,
    "NumSubInst": 0,
    "NumTruncInst": 4,
    "NumXorInst": 0,
    "NumZExtInst": 8,
    "TotalBlocks": 23,
    "TotalInsts": 300,
    "TotalMemInst": 232,
    "TotalFuncs": 17,
    "ArgsPhi": 0,
    "testUnary": 131
  },
  "baseline_oz_instcount": 300,
  "knowledge_base_entry": [
    "--lowerswitch",
    "--instcombine",
    "--nary-reassociate",
    "--lower-constant-intrinsics",
    "--reassociate",
    "--loop-instsimplify",
    "--inline",
    "--memcpyopt",
    "--licm",
    "--gvn",
    "--jump-threading",
    "--instsimplify",
    "--sroa",
    "--globalopt",
    "--mergefunc",
    "--reassociate",
    "--mergefunc",
    "--instsimplify",
    "--aggressive-instcombine",
    "--loweratomic",
    "--instcombine",
    "--loop-deletion",
    "--early-cse-memssa",
    "--loop-reroll"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "-loop-reduce",
          "--loop-distribute",
          "--loop-load-elim",
          "--argpromotion",
          "--infer-address-spaces",
          "--gvn",
          "--redundant-dbg-inst-elim",
          "--lower-guard-intrinsic",
          "--loweratomic",
          "--gvn-hoist",
          "--adce",
          "--loop-deletion",
          "--sroa",
          "--consthoist",
          "--callsite-splitting",
          "--newgvn",
          "--aggressive-instcombine",
          "--inject-tli-mappings",
          "--lcssa",
          "--instsimplify",
          "--lowerinvoke",
          "--sink",
          "--mergereturn",
          "--partially-inline-libcalls",
          "--functionattrs",
          "--constprop",
          "--die",
          "--insert-gcov-profiling",
          "--loop-interchange"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "-loop-reduce",
      "--loop-distribute",
      "--loop-load-elim",
      "--argpromotion",
      "--infer-address-spaces",
      "--gvn",
      "--redundant-dbg-inst-elim",
      "--lower-guard-intrinsic",
      "--loweratomic",
      "--gvn-hoist",
      "--adce",
      "--loop-deletion",
      "--sroa",
      "--consthoist",
      "--callsite-splitting",
      "--newgvn",
      "--aggressive-instcombine",
      "--inject-tli-mappings",
      "--lcssa",
      "--instsimplify",
      "--lowerinvoke",
      "--sink",
      "--mergereturn",
      "--partially-inline-libcalls",
      "--functionattrs",
      "--constprop",
      "--die",
      "--insert-gcov-profiling",
      "--loop-interchange"
    ],
    "performance_vs_Oz": "+1.3%"
  }
}
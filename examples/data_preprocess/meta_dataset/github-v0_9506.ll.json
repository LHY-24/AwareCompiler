{
  "program_id": "github-v0_9506.ll",
  "autophase_features": {
    "BBNumArgsHi": 3,
    "BBNumArgsLo": 3,
    "onePred": 4,
    "onePredOneSuc": 3,
    "onePredTwoSuc": 1,
    "oneSuccessor": 3,
    "twoPred": 5,
    "twoPredOneSuc": 0,
    "twoEach": 4,
    "twoSuccessor": 7,
    "morePreds": 1,
    "BB03Phi": 6,
    "BBHiPhi": 0,
    "BBNoPhi": 5,
    "BeginPhi": 6,
    "BranchCount": 10,
    "returnInt": 2,
    "CriticalCount": 10,
    "NumEdges": 17,
    "const32Bit": 23,
    "const64Bit": 2,
    "numConstZeroes": 12,
    "numConstOnes": 3,
    "UncondBranches": 3,
    "binaryConstArg": 12,
    "NumAShrInst": 1,
    "NumAddInst": 11,
    "NumAllocaInst": 0,
    "NumAndInst": 1,
    "BlockMid": 1,
    "BlockLow": 10,
    "NumBitCastInst": 0,
    "NumBrInst": 10,
    "NumCallInst": 2,
    "NumGetElementPtrInst": 7,
    "NumICmpInst": 7,
    "NumLShrInst": 0,
    "NumLoadInst": 7,
    "NumMulInst": 5,
    "NumOrInst": 3,
    "NumPHIInst": 13,
    "NumRetInst": 1,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 1,
    "NumSubInst": 1,
    "NumTruncInst": 1,
    "NumXorInst": 0,
    "NumZExtInst": 6,
    "TotalBlocks": 11,
    "TotalInsts": 78,
    "TotalMemInst": 17,
    "TotalFuncs": 3,
    "ArgsPhi": 27,
    "testUnary": 14
  },
  "baseline_oz_instcount": 70,
  "knowledge_base_entry": [
    "--loop-unroll-and-jam",
    "--newgvn",
    "--prune-eh",
    "--mem2reg",
    "--mergefunc",
    "--gvn",
    "--early-cse",
    "--sroa",
    "--prune-eh",
    "--simplifycfg",
    "--lower-expect",
    "--reassociate",
    "--loop-simplifycfg",
    "--slsr",
    "-loop-reduce",
    "--newgvn",
    "--bdce",
    "--simplifycfg",
    "--jump-threading",
    "-loop-reduce",
    "--early-cse-memssa",
    "--instcombine",
    "--jump-threading",
    "--instcombine",
    "--licm",
    "--lower-expect",
    "--jump-threading",
    "--loop-rotate",
    "--instcombine",
    "--slsr",
    "--jump-threading",
    "--lower-constant-intrinsics",
    "--sroa",
    "--reassociate",
    "--slp-vectorizer",
    "--bdce",
    "--instcombine",
    "--early-cse",
    "--gvn-hoist",
    "--early-cse",
    "--early-cse",
    "--simplifycfg",
    "--reassociate",
    "--reassociate",
    "--sccp",
    "--gvn-hoist",
    "--instcombine",
    "--memcpyopt",
    "--slp-vectorizer",
    "--mergefunc",
    "--reassociate",
    "-loop-reduce",
    "--jump-threading",
    "-loop-reduce",
    "--early-cse-memssa",
    "--instcombine",
    "--jump-threading",
    "--instcombine",
    "--licm",
    "--lower-expect",
    "--jump-threading",
    "--loop-rotate",
    "--instcombine",
    "--slsr",
    "--jump-threading",
    "--lower-constant-intrinsics",
    "--sroa",
    "--reassociate",
    "--slp-vectorizer",
    "--bdce",
    "--instcombine",
    "--early-cse",
    "--gvn-hoist",
    "--loop-deletion",
    "--newgvn",
    "--licm",
    "--loop-instsimplify",
    "--bdce",
    "--newgvn",
    "--mem2reg",
    "--mergefunc",
    "--gvn",
    "--early-cse",
    "--sroa",
    "--prune-eh",
    "--simplifycfg",
    "--lower-expect",
    "--reassociate",
    "--loop-simplifycfg",
    "--slsr",
    "-loop-reduce",
    "--simplifycfg",
    "--dce",
    "--lower-expect",
    "--sroa",
    "--dse",
    "--gvn-hoist",
    "--loop-instsimplify",
    "--aggressive-instcombine",
    "--elim-avail-extern",
    "--dse",
    "--sccp",
    "--early-cse",
    "--simplifycfg",
    "--early-cse",
    "--slp-vectorizer",
    "--early-cse",
    "--lower-constant-intrinsics",
    "--slp-vectorizer",
    "--adce",
    "--ipsccp",
    "--elim-avail-extern",
    "--simplifycfg",
    "--mem2reg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "-loop-reduce",
          "--loop-idiom",
          "--add-discriminators",
          "--lowerswitch",
          "--speculative-execution",
          "--bdce",
          "--loop-load-elim",
          "--argpromotion",
          "--coro-elide",
          "--attributor",
          "--simplifycfg",
          "--guard-widening",
          "--gvn",
          "--functionattrs"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "-loop-reduce",
      "--loop-idiom",
      "--add-discriminators",
      "--lowerswitch",
      "--speculative-execution",
      "--bdce",
      "--loop-load-elim",
      "--argpromotion",
      "--coro-elide",
      "--attributor",
      "--simplifycfg",
      "--guard-widening",
      "--gvn",
      "--functionattrs"
    ],
    "performance_vs_Oz": "+1.4%"
  }
}
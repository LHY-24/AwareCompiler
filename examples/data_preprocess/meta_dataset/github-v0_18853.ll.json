{
  "program_id": "github-v0_18853.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 17,
    "onePredOneSuc": 10,
    "onePredTwoSuc": 4,
    "oneSuccessor": 15,
    "twoPred": 7,
    "twoPredOneSuc": 4,
    "twoEach": 3,
    "twoSuccessor": 8,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 27,
    "BeginPhi": 0,
    "BranchCount": 23,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 31,
    "const32Bit": 38,
    "const64Bit": 73,
    "numConstZeroes": 63,
    "numConstOnes": 32,
    "UncondBranches": 15,
    "binaryConstArg": 11,
    "NumAShrInst": 0,
    "NumAddInst": 4,
    "NumAllocaInst": 17,
    "NumAndInst": 3,
    "BlockMid": 7,
    "BlockLow": 20,
    "NumBitCastInst": 20,
    "NumBrInst": 23,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 58,
    "NumICmpInst": 8,
    "NumLShrInst": 2,
    "NumLoadInst": 64,
    "NumMulInst": 0,
    "NumOrInst": 3,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 32,
    "NumSubInst": 0,
    "NumTruncInst": 4,
    "NumXorInst": 0,
    "NumZExtInst": 23,
    "TotalBlocks": 27,
    "TotalInsts": 276,
    "TotalMemInst": 178,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 131
  },
  "baseline_oz_instcount": 276,
  "knowledge_base_entry": [
    "--dse",
    "--jump-threading",
    "--lower-expect",
    "--dse",
    "--mldst-motion",
    "--early-cse",
    "--loop-reroll",
    "--slp-vectorizer",
    "--early-cse-memssa",
    "--lower-constant-intrinsics",
    "--loop-rotate",
    "--aggressive-instcombine",
    "--die",
    "--aggressive-instcombine",
    "--lower-expect",
    "--dse",
    "--mldst-motion",
    "--licm",
    "--gvn-hoist",
    "--flattencfg",
    "--simplifycfg",
    "--reassociate",
    "-loop-reduce",
    "--early-cse",
    "--instsimplify",
    "--ipsccp"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-rotate",
          "--aggressive-instcombine",
          "--mem2reg",
          "--loop-simplify",
          "--globalopt",
          "--attributor",
          "--loop-interchange",
          "--ipconstprop",
          "--add-discriminators",
          "--loop-guard-widening",
          "--forceattrs",
          "--strip-debug-declare",
          "--loweratomic",
          "--simple-loop-unswitch",
          "--sancov",
          "--loop-versioning-licm",
          "--insert-gcov-profiling",
          "--partial-inliner",
          "--lowerinvoke",
          "--inferattrs",
          "--constmerge",
          "--infer-address-spaces",
          "--early-cse",
          "--bdce",
          "--loop-unroll",
          "--gvn",
          "--globalsplit",
          "--dse",
          "--coro-elide"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-rotate",
      "--aggressive-instcombine",
      "--mem2reg",
      "--loop-simplify",
      "--globalopt",
      "--attributor",
      "--loop-interchange",
      "--ipconstprop",
      "--add-discriminators",
      "--loop-guard-widening",
      "--forceattrs",
      "--strip-debug-declare",
      "--loweratomic",
      "--simple-loop-unswitch",
      "--sancov",
      "--loop-versioning-licm",
      "--insert-gcov-profiling",
      "--partial-inliner",
      "--lowerinvoke",
      "--inferattrs",
      "--constmerge",
      "--infer-address-spaces",
      "--early-cse",
      "--bdce",
      "--loop-unroll",
      "--gvn",
      "--globalsplit",
      "--dse",
      "--coro-elide"
    ],
    "performance_vs_Oz": "+1.4%"
  }
}
{
  "program_id": "github-v0_46112.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 47,
    "onePredOneSuc": 32,
    "onePredTwoSuc": 13,
    "oneSuccessor": 38,
    "twoPred": 7,
    "twoPredOneSuc": 2,
    "twoEach": 4,
    "twoSuccessor": 23,
    "morePreds": 7,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 71,
    "BeginPhi": 0,
    "BranchCount": 61,
    "returnInt": 3,
    "CriticalCount": 1,
    "NumEdges": 84,
    "const32Bit": 158,
    "const64Bit": 17,
    "numConstZeroes": 89,
    "numConstOnes": 58,
    "UncondBranches": 38,
    "binaryConstArg": 9,
    "NumAShrInst": 0,
    "NumAddInst": 5,
    "NumAllocaInst": 43,
    "NumAndInst": 5,
    "BlockMid": 8,
    "BlockLow": 63,
    "NumBitCastInst": 24,
    "NumBrInst": 61,
    "NumCallInst": 25,
    "NumGetElementPtrInst": 53,
    "NumICmpInst": 23,
    "NumLShrInst": 0,
    "NumLoadInst": 134,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 10,
    "NumSExtInst": 7,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 87,
    "NumSubInst": 2,
    "NumTruncInst": 8,
    "NumXorInst": 0,
    "NumZExtInst": 28,
    "TotalBlocks": 71,
    "TotalInsts": 516,
    "TotalMemInst": 342,
    "TotalFuncs": 15,
    "ArgsPhi": 0,
    "testUnary": 244
  },
  "baseline_oz_instcount": 516,
  "knowledge_base_entry": [
    "--float2int",
    "--newgvn",
    "--newgvn",
    "--loop-fusion",
    "--early-cse",
    "--loop-rotate",
    "--aggressive-instcombine",
    "--licm",
    "--sccp",
    "--elim-avail-extern",
    "--mem2reg",
    "--loop-instsimplify",
    "--nary-reassociate",
    "--simplifycfg",
    "--die",
    "--gvn-hoist",
    "--aggressive-instcombine",
    "--loop-rotate",
    "--sroa",
    "--flattencfg",
    "--adce",
    "--loop-instsimplify",
    "--die",
    "--ipsccp",
    "--loop-simplifycfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-simplifycfg",
          "--indvars",
          "--lower-expect",
          "--sccp",
          "--jump-threading",
          "--loop-vectorize",
          "--redundant-dbg-inst-elim",
          "--loop-deletion",
          "--loop-reroll",
          "--callsite-splitting",
          "--aggressive-instcombine",
          "--attributor",
          "--argpromotion",
          "--lower-constant-intrinsics",
          "--barrier",
          "--deadargelim",
          "--newgvn",
          "--loop-versioning-licm",
          "--loop-fusion",
          "--loop-unroll-and-jam",
          "--partially-inline-libcalls",
          "--loop-versioning",
          "--constmerge",
          "--loop-sink",
          "--partial-inliner",
          "--always-inline",
          "--functionattrs",
          "--irce",
          "--lower-widenable-condition",
          "--infer-address-spaces"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-simplifycfg",
      "--indvars",
      "--lower-expect",
      "--sccp",
      "--jump-threading",
      "--loop-vectorize",
      "--redundant-dbg-inst-elim",
      "--loop-deletion",
      "--loop-reroll",
      "--callsite-splitting",
      "--aggressive-instcombine",
      "--attributor",
      "--argpromotion",
      "--lower-constant-intrinsics",
      "--barrier",
      "--deadargelim",
      "--newgvn",
      "--loop-versioning-licm",
      "--loop-fusion",
      "--loop-unroll-and-jam",
      "--partially-inline-libcalls",
      "--loop-versioning",
      "--constmerge",
      "--loop-sink",
      "--partial-inliner",
      "--always-inline",
      "--functionattrs",
      "--irce",
      "--lower-widenable-condition",
      "--infer-address-spaces"
    ],
    "performance_vs_Oz": "+1.6%"
  }
}
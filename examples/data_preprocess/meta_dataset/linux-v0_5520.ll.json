{
  "program_id": "linux-v0_5520.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 31,
    "onePredOneSuc": 25,
    "onePredTwoSuc": 6,
    "oneSuccessor": 31,
    "twoPred": 10,
    "twoPredOneSuc": 2,
    "twoEach": 3,
    "twoSuccessor": 10,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 48,
    "BeginPhi": 0,
    "BranchCount": 41,
    "returnInt": 22,
    "CriticalCount": 5,
    "NumEdges": 51,
    "const32Bit": 212,
    "const64Bit": 32,
    "numConstZeroes": 77,
    "numConstOnes": 88,
    "UncondBranches": 31,
    "binaryConstArg": 34,
    "NumAShrInst": 1,
    "NumAddInst": 2,
    "NumAllocaInst": 64,
    "NumAndInst": 10,
    "BlockMid": 15,
    "BlockLow": 33,
    "NumBitCastInst": 13,
    "NumBrInst": 41,
    "NumCallInst": 27,
    "NumGetElementPtrInst": 58,
    "NumICmpInst": 16,
    "NumLShrInst": 0,
    "NumLoadInst": 166,
    "NumMulInst": 5,
    "NumOrInst": 19,
    "NumPHIInst": 0,
    "NumRetInst": 7,
    "NumSExtInst": 4,
    "NumSelectInst": 5,
    "NumShlInst": 15,
    "NumStoreInst": 74,
    "NumSubInst": 4,
    "NumTruncInst": 22,
    "NumXorInst": 3,
    "NumZExtInst": 50,
    "TotalBlocks": 48,
    "TotalInsts": 606,
    "TotalMemInst": 389,
    "TotalFuncs": 31,
    "ArgsPhi": 0,
    "testUnary": 319
  },
  "baseline_oz_instcount": 607,
  "knowledge_base_entry": [
    "--adce",
    "--slp-vectorizer",
    "--loop-simplifycfg",
    "--loop-instsimplify",
    "--globalopt",
    "--correlated-propagation",
    "--mergefunc",
    "--slp-vectorizer",
    "--loop-simplifycfg",
    "--loop-instsimplify",
    "--globalopt",
    "--licm",
    "--gvn",
    "--globalopt",
    "--aggressive-instcombine",
    "--inline",
    "--memcpyopt",
    "--load-store-vectorizer",
    "--gvn",
    "--ipsccp",
    "--elim-avail-extern",
    "--nary-reassociate",
    "--early-cse-memssa",
    "--indvars",
    "--slsr",
    "--early-cse"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-vectorize",
          "--called-value-propagation",
          "--inject-tli-mappings",
          "--lower-widenable-condition",
          "--strip-debug-declare",
          "--lower-matrix-intrinsics",
          "--die",
          "--licm",
          "--loop-predication",
          "--sccp",
          "--bdce",
          "--loop-reroll",
          "--loop-fusion",
          "--globalopt",
          "--instnamer",
          "--inferattrs",
          "--div-rem-pairs",
          "--aggressive-instcombine",
          "--inline",
          "--coro-early",
          "--rewrite-statepoints-for-gc",
          "--instsimplify",
          "--ipconstprop"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.0%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-vectorize",
      "--called-value-propagation",
      "--inject-tli-mappings",
      "--lower-widenable-condition",
      "--strip-debug-declare",
      "--lower-matrix-intrinsics",
      "--die",
      "--licm",
      "--loop-predication",
      "--sccp",
      "--bdce",
      "--loop-reroll",
      "--loop-fusion",
      "--globalopt",
      "--instnamer",
      "--inferattrs",
      "--div-rem-pairs",
      "--aggressive-instcombine",
      "--inline",
      "--coro-early",
      "--rewrite-statepoints-for-gc",
      "--instsimplify",
      "--ipconstprop"
    ],
    "performance_vs_Oz": "+2.0%"
  }
}
{
  "program_id": "linux-v0_7884.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 14,
    "onePredOneSuc": 13,
    "onePredTwoSuc": 0,
    "oneSuccessor": 15,
    "twoPred": 6,
    "twoPredOneSuc": 2,
    "twoEach": 1,
    "twoSuccessor": 5,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 37,
    "BeginPhi": 0,
    "BranchCount": 20,
    "returnInt": 6,
    "CriticalCount": 6,
    "NumEdges": 35,
    "const32Bit": 286,
    "const64Bit": 6,
    "numConstZeroes": 98,
    "numConstOnes": 33,
    "UncondBranches": 15,
    "binaryConstArg": 34,
    "NumAShrInst": 12,
    "NumAddInst": 9,
    "NumAllocaInst": 25,
    "NumAndInst": 12,
    "BlockMid": 7,
    "BlockLow": 30,
    "NumBitCastInst": 2,
    "NumBrInst": 20,
    "NumCallInst": 45,
    "NumGetElementPtrInst": 72,
    "NumICmpInst": 4,
    "NumLShrInst": 0,
    "NumLoadInst": 140,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 15,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 33,
    "NumSubInst": 0,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 2,
    "TotalBlocks": 37,
    "TotalInsts": 396,
    "TotalMemInst": 315,
    "TotalFuncs": 24,
    "ArgsPhi": 0,
    "testUnary": 171
  },
  "baseline_oz_instcount": 396,
  "knowledge_base_entry": [
    "--tailcallelim",
    "--simplifycfg",
    "--dce",
    "--slp-vectorizer",
    "--mergefunc",
    "--instcombine",
    "--newgvn",
    "--early-cse",
    "--aggressive-instcombine",
    "--reassociate",
    "--loop-simplifycfg",
    "--newgvn",
    "--instcombine",
    "--aggressive-instcombine",
    "--lower-expect",
    "--lower-constant-intrinsics",
    "--jump-threading",
    "--gvn-hoist",
    "--loop-reroll",
    "--load-store-vectorizer",
    "--instsimplify",
    "--bdce",
    "--sccp",
    "--sroa",
    "--die"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--aggressive-instcombine",
          "--called-value-propagation",
          "--constmerge",
          "--ipconstprop",
          "--lowerinvoke",
          "--coro-split",
          "--guard-widening",
          "--slp-vectorizer",
          "--alignment-from-assumptions",
          "--dse",
          "--loop-load-elim",
          "--loop-versioning",
          "--lcssa",
          "--add-discriminators",
          "--tailcallelim",
          "--globaldce",
          "--lower-constant-intrinsics",
          "--forceattrs",
          "--instcombine",
          "--mergereturn",
          "--mldst-motion",
          "--loop-instsimplify",
          "--ipsccp",
          "--speculative-execution"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--aggressive-instcombine",
      "--called-value-propagation",
      "--constmerge",
      "--ipconstprop",
      "--lowerinvoke",
      "--coro-split",
      "--guard-widening",
      "--slp-vectorizer",
      "--alignment-from-assumptions",
      "--dse",
      "--loop-load-elim",
      "--loop-versioning",
      "--lcssa",
      "--add-discriminators",
      "--tailcallelim",
      "--globaldce",
      "--lower-constant-intrinsics",
      "--forceattrs",
      "--instcombine",
      "--mergereturn",
      "--mldst-motion",
      "--loop-instsimplify",
      "--ipsccp",
      "--speculative-execution"
    ],
    "performance_vs_Oz": "+0.5%"
  }
}
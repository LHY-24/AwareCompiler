{
  "program_id": "github-v0_14781.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 5,
    "onePred": 50,
    "onePredOneSuc": 35,
    "onePredTwoSuc": 13,
    "oneSuccessor": 46,
    "twoPred": 20,
    "twoPredOneSuc": 8,
    "twoEach": 7,
    "twoSuccessor": 28,
    "morePreds": 4,
    "BB03Phi": 5,
    "BBHiPhi": 0,
    "BBNoPhi": 83,
    "BeginPhi": 5,
    "BranchCount": 73,
    "returnInt": 35,
    "CriticalCount": 18,
    "NumEdges": 102,
    "const32Bit": 258,
    "const64Bit": 28,
    "numConstZeroes": 150,
    "numConstOnes": 78,
    "UncondBranches": 46,
    "binaryConstArg": 12,
    "NumAShrInst": 0,
    "NumAddInst": 5,
    "NumAllocaInst": 47,
    "NumAndInst": 1,
    "BlockMid": 10,
    "BlockLow": 78,
    "NumBitCastInst": 36,
    "NumBrInst": 73,
    "NumCallInst": 65,
    "NumGetElementPtrInst": 86,
    "NumICmpInst": 24,
    "NumLShrInst": 1,
    "NumLoadInst": 100,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 5,
    "NumRetInst": 14,
    "NumSExtInst": 25,
    "NumSelectInst": 1,
    "NumShlInst": 0,
    "NumStoreInst": 89,
    "NumSubInst": 1,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 3,
    "TotalBlocks": 88,
    "TotalInsts": 588,
    "TotalMemInst": 387,
    "TotalFuncs": 50,
    "ArgsPhi": 11,
    "testUnary": 211
  },
  "baseline_oz_instcount": 589,
  "knowledge_base_entry": [
    "--prune-eh",
    "--gvn-hoist",
    "--jump-threading",
    "--sroa",
    "--mergefunc",
    "--ipsccp",
    "--instsimplify",
    "--bdce",
    "--licm",
    "--mldst-motion",
    "--instcombine",
    "--slp-vectorizer",
    "--die",
    "--mergefunc",
    "--gvn",
    "--loop-reroll",
    "--early-cse"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--lcssa",
          "--lower-expect",
          "--newgvn",
          "--loop-versioning",
          "--div-rem-pairs",
          "--loweratomic",
          "--canonicalize-aliases",
          "--slp-vectorizer",
          "--loop-idiom",
          "--strip-nondebug",
          "--prune-eh",
          "--strip",
          "--loop-instsimplify",
          "--constmerge",
          "--correlated-propagation",
          "--early-cse-memssa",
          "--lower-matrix-intrinsics",
          "--functionattrs",
          "--hotcoldsplit",
          "--loop-interchange",
          "--libcalls-shrinkwrap",
          "--barrier",
          "--dse",
          "--inline",
          "--aggressive-instcombine"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--lcssa",
      "--lower-expect",
      "--newgvn",
      "--loop-versioning",
      "--div-rem-pairs",
      "--loweratomic",
      "--canonicalize-aliases",
      "--slp-vectorizer",
      "--loop-idiom",
      "--strip-nondebug",
      "--prune-eh",
      "--strip",
      "--loop-instsimplify",
      "--constmerge",
      "--correlated-propagation",
      "--early-cse-memssa",
      "--lower-matrix-intrinsics",
      "--functionattrs",
      "--hotcoldsplit",
      "--loop-interchange",
      "--libcalls-shrinkwrap",
      "--barrier",
      "--dse",
      "--inline",
      "--aggressive-instcombine"
    ],
    "performance_vs_Oz": "+0.2%"
  }
}
{
  "program_id": "github-v0_19249.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 3,
    "onePredOneSuc": 1,
    "onePredTwoSuc": 2,
    "oneSuccessor": 3,
    "twoPred": 3,
    "twoPredOneSuc": 2,
    "twoEach": 0,
    "twoSuccessor": 3,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 7,
    "BeginPhi": 0,
    "BranchCount": 6,
    "returnInt": 1,
    "CriticalCount": 3,
    "NumEdges": 9,
    "const32Bit": 21,
    "const64Bit": 1,
    "numConstZeroes": 8,
    "numConstOnes": 6,
    "UncondBranches": 3,
    "binaryConstArg": 3,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 4,
    "NumAndInst": 3,
    "BlockMid": 1,
    "BlockLow": 6,
    "NumBitCastInst": 1,
    "NumBrInst": 6,
    "NumCallInst": 3,
    "NumGetElementPtrInst": 7,
    "NumICmpInst": 3,
    "NumLShrInst": 0,
    "NumLoadInst": 12,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 1,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 6,
    "NumSubInst": 0,
    "NumTruncInst": 1,
    "NumXorInst": 0,
    "NumZExtInst": 3,
    "TotalBlocks": 7,
    "TotalInsts": 50,
    "TotalMemInst": 32,
    "TotalFuncs": 4,
    "ArgsPhi": 0,
    "testUnary": 21
  },
  "baseline_oz_instcount": 50,
  "knowledge_base_entry": [
    "--mem2reg",
    "--ipsccp",
    "--mem2reg",
    "--gvn",
    "--gvn-hoist",
    "--lower-expect",
    "--aggressive-instcombine",
    "--instcombine",
    "--mergefunc",
    "--dse",
    "--sccp",
    "--licm",
    "--dce",
    "--mergefunc",
    "--mergefunc",
    "--early-cse",
    "--bdce",
    "--aggressive-instcombine",
    "--newgvn",
    "--loop-instsimplify",
    "--reassociate",
    "--dce",
    "--jump-threading",
    "--slsr",
    "--early-cse"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--sroa",
          "--aggressive-instcombine",
          "--consthoist",
          "--separate-const-offset-from-gep",
          "--lowerswitch",
          "--loop-fusion",
          "--loop-unroll-and-jam",
          "--ipsccp",
          "--div-rem-pairs",
          "--loop-guard-widening",
          "--loop-deletion",
          "--memcpyopt",
          "--die",
          "--prune-eh",
          "--float2int",
          "--ipconstprop",
          "--functionattrs"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+4.0%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--sroa",
      "--aggressive-instcombine",
      "--consthoist",
      "--separate-const-offset-from-gep",
      "--lowerswitch",
      "--loop-fusion",
      "--loop-unroll-and-jam",
      "--ipsccp",
      "--div-rem-pairs",
      "--loop-guard-widening",
      "--loop-deletion",
      "--memcpyopt",
      "--die",
      "--prune-eh",
      "--float2int",
      "--ipconstprop",
      "--functionattrs"
    ],
    "performance_vs_Oz": "+4.0%"
  }
}
{
  "program_id": "github-v0_26423.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 14,
    "onePredOneSuc": 12,
    "onePredTwoSuc": 0,
    "oneSuccessor": 15,
    "twoPred": 5,
    "twoPredOneSuc": 0,
    "twoEach": 3,
    "twoSuccessor": 4,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 28,
    "BeginPhi": 0,
    "BranchCount": 19,
    "returnInt": 0,
    "CriticalCount": 1,
    "NumEdges": 27,
    "const32Bit": 44,
    "const64Bit": 21,
    "numConstZeroes": 20,
    "numConstOnes": 31,
    "UncondBranches": 15,
    "binaryConstArg": 6,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 27,
    "NumAndInst": 1,
    "BlockMid": 3,
    "BlockLow": 25,
    "NumBitCastInst": 0,
    "NumBrInst": 19,
    "NumCallInst": 12,
    "NumGetElementPtrInst": 16,
    "NumICmpInst": 5,
    "NumLShrInst": 0,
    "NumLoadInst": 55,
    "NumMulInst": 1,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 8,
    "NumSExtInst": 1,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 37,
    "NumSubInst": 3,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 1,
    "TotalBlocks": 28,
    "TotalInsts": 189,
    "TotalMemInst": 147,
    "TotalFuncs": 9,
    "ArgsPhi": 0,
    "testUnary": 84
  },
  "baseline_oz_instcount": 190,
  "knowledge_base_entry": [
    "--loop-reroll",
    "--instcombine",
    "--loop-instsimplify",
    "--aggressive-instcombine",
    "--sroa",
    "--instsimplify",
    "--slp-vectorizer",
    "--lower-expect",
    "--simplifycfg",
    "--loop-rotate",
    "--loop-simplifycfg",
    "--flattencfg",
    "--newgvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--consthoist",
          "--loop-unroll",
          "--early-cse",
          "--jump-threading",
          "--always-inline",
          "--lower-matrix-intrinsics",
          "--callsite-splitting",
          "--aggressive-instcombine",
          "--partial-inliner",
          "--early-cse-memssa",
          "--dce",
          "--inline",
          "--inferattrs",
          "--alignment-from-assumptions",
          "--licm",
          "--flattencfg",
          "--partially-inline-libcalls",
          "--loop-rotate",
          "--correlated-propagation",
          "--loop-load-elim"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--consthoist",
      "--loop-unroll",
      "--early-cse",
      "--jump-threading",
      "--always-inline",
      "--lower-matrix-intrinsics",
      "--callsite-splitting",
      "--aggressive-instcombine",
      "--partial-inliner",
      "--early-cse-memssa",
      "--dce",
      "--inline",
      "--inferattrs",
      "--alignment-from-assumptions",
      "--licm",
      "--flattencfg",
      "--partially-inline-libcalls",
      "--loop-rotate",
      "--correlated-propagation",
      "--loop-load-elim"
    ],
    "performance_vs_Oz": "+0.5%"
  }
}
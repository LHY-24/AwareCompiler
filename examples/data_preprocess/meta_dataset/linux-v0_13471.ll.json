{
  "program_id": "linux-v0_13471.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 31,
    "onePredOneSuc": 19,
    "onePredTwoSuc": 9,
    "oneSuccessor": 28,
    "twoPred": 9,
    "twoPredOneSuc": 5,
    "twoEach": 2,
    "twoSuccessor": 14,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 59,
    "BeginPhi": 0,
    "BranchCount": 42,
    "returnInt": 8,
    "CriticalCount": 1,
    "NumEdges": 56,
    "const32Bit": 152,
    "const64Bit": 16,
    "numConstZeroes": 55,
    "numConstOnes": 71,
    "UncondBranches": 28,
    "binaryConstArg": 13,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 53,
    "NumAndInst": 5,
    "BlockMid": 7,
    "BlockLow": 52,
    "NumBitCastInst": 5,
    "NumBrInst": 42,
    "NumCallInst": 40,
    "NumGetElementPtrInst": 35,
    "NumICmpInst": 17,
    "NumLShrInst": 1,
    "NumLoadInst": 109,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 17,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 81,
    "NumSubInst": 2,
    "NumTruncInst": 1,
    "NumXorInst": 4,
    "NumZExtInst": 5,
    "TotalBlocks": 59,
    "TotalInsts": 422,
    "TotalMemInst": 318,
    "TotalFuncs": 36,
    "ArgsPhi": 0,
    "testUnary": 177
  },
  "baseline_oz_instcount": 422,
  "knowledge_base_entry": [
    "--sccp",
    "--simplifycfg",
    "--sroa",
    "--bdce",
    "--sccp",
    "--mem2reg",
    "--adce",
    "--simplifycfg",
    "--adce",
    "--elim-avail-extern",
    "--mergefunc",
    "--licm",
    "--licm",
    "--nary-reassociate",
    "--early-cse-memssa",
    "--mldst-motion",
    "--licm",
    "--memcpyopt",
    "--instsimplify",
    "--mldst-motion",
    "--early-cse",
    "--mergefunc",
    "--globaldce",
    "--mergefunc",
    "--gvn-hoist",
    "--jump-threading",
    "--slsr",
    "-loop-reduce",
    "--gvn",
    "--correlated-propagation"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--aggressive-instcombine",
          "--loop-instsimplify",
          "--insert-gcov-profiling",
          "--canonicalize-aliases",
          "--jump-threading",
          "--gvn-hoist",
          "--rewrite-statepoints-for-gc",
          "--bdce",
          "--alignment-from-assumptions",
          "--mergefunc",
          "--simple-loop-unswitch",
          "--loop-deletion"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+4.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--aggressive-instcombine",
      "--loop-instsimplify",
      "--insert-gcov-profiling",
      "--canonicalize-aliases",
      "--jump-threading",
      "--gvn-hoist",
      "--rewrite-statepoints-for-gc",
      "--bdce",
      "--alignment-from-assumptions",
      "--mergefunc",
      "--simple-loop-unswitch",
      "--loop-deletion"
    ],
    "performance_vs_Oz": "+4.7%"
  }
}
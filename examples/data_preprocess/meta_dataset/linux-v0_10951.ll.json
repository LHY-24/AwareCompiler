{
  "program_id": "linux-v0_10951.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 7,
    "onePred": 63,
    "onePredOneSuc": 56,
    "onePredTwoSuc": 7,
    "oneSuccessor": 63,
    "twoPred": 21,
    "twoPredOneSuc": 7,
    "twoEach": 7,
    "twoSuccessor": 21,
    "morePreds": 0,
    "BB03Phi": 7,
    "BBHiPhi": 0,
    "BBNoPhi": 85,
    "BeginPhi": 7,
    "BranchCount": 84,
    "returnInt": 0,
    "CriticalCount": 21,
    "NumEdges": 105,
    "const32Bit": 105,
    "const64Bit": 24,
    "numConstZeroes": 49,
    "numConstOnes": 124,
    "UncondBranches": 63,
    "binaryConstArg": 63,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 40,
    "NumAndInst": 0,
    "BlockMid": 0,
    "BlockLow": 92,
    "NumBitCastInst": 2,
    "NumBrInst": 84,
    "NumCallInst": 24,
    "NumGetElementPtrInst": 0,
    "NumICmpInst": 42,
    "NumLShrInst": 0,
    "NumLoadInst": 50,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 7,
    "NumRetInst": 8,
    "NumSExtInst": 28,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 47,
    "NumSubInst": 0,
    "NumTruncInst": 7,
    "NumXorInst": 63,
    "NumZExtInst": 28,
    "TotalBlocks": 92,
    "TotalInsts": 431,
    "TotalMemInst": 161,
    "TotalFuncs": 9,
    "ArgsPhi": 14,
    "testUnary": 156
  },
  "baseline_oz_instcount": 438,
  "knowledge_base_entry": [
    "--float2int",
    "--early-cse",
    "--simplifycfg",
    "--correlated-propagation",
    "--gvn-hoist",
    "--gvn",
    "--reassociate",
    "--gvn",
    "--simplifycfg",
    "--jump-threading",
    "--nary-reassociate",
    "--loop-reroll",
    "--mergefunc",
    "--simplifycfg",
    "--globalopt",
    "--inline",
    "--aggressive-instcombine",
    "--instsimplify",
    "--loop-simplifycfg",
    "--newgvn",
    "--dse",
    "--die"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--cross-dso-cfi",
          "--licm",
          "--barrier",
          "--ipconstprop",
          "--sancov",
          "--callsite-splitting",
          "--redundant-dbg-inst-elim",
          "--inline",
          "--attributor",
          "--slp-vectorizer",
          "--instsimplify",
          "--loop-idiom",
          "--loop-versioning-licm",
          "--globalopt",
          "--gvn",
          "--loop-rotate",
          "--rpo-functionattrs",
          "--mergereturn",
          "--loop-deletion",
          "--aggressive-instcombine",
          "--coro-split",
          "--alignment-from-assumptions",
          "--loop-vectorize",
          "--loop-simplifycfg",
          "--loop-predication",
          "--libcalls-shrinkwrap",
          "--newgvn",
          "--loop-load-elim",
          "--infer-address-spaces",
          "--globalsplit"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--cross-dso-cfi",
      "--licm",
      "--barrier",
      "--ipconstprop",
      "--sancov",
      "--callsite-splitting",
      "--redundant-dbg-inst-elim",
      "--inline",
      "--attributor",
      "--slp-vectorizer",
      "--instsimplify",
      "--loop-idiom",
      "--loop-versioning-licm",
      "--globalopt",
      "--gvn",
      "--loop-rotate",
      "--rpo-functionattrs",
      "--mergereturn",
      "--loop-deletion",
      "--aggressive-instcombine",
      "--coro-split",
      "--alignment-from-assumptions",
      "--loop-vectorize",
      "--loop-simplifycfg",
      "--loop-predication",
      "--libcalls-shrinkwrap",
      "--newgvn",
      "--loop-load-elim",
      "--infer-address-spaces",
      "--globalsplit"
    ],
    "performance_vs_Oz": "+3.2%"
  }
}
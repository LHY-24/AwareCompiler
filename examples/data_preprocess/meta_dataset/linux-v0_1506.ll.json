{
  "program_id": "linux-v0_1506.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 66,
    "onePredOneSuc": 47,
    "onePredTwoSuc": 16,
    "oneSuccessor": 51,
    "twoPred": 10,
    "twoPredOneSuc": 1,
    "twoEach": 6,
    "twoSuccessor": 26,
    "morePreds": 4,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 99,
    "BeginPhi": 0,
    "BranchCount": 77,
    "returnInt": 28,
    "CriticalCount": 4,
    "NumEdges": 113,
    "const32Bit": 250,
    "const64Bit": 39,
    "numConstZeroes": 128,
    "numConstOnes": 84,
    "UncondBranches": 51,
    "binaryConstArg": 23,
    "NumAShrInst": 0,
    "NumAddInst": 6,
    "NumAllocaInst": 63,
    "NumAndInst": 8,
    "BlockMid": 14,
    "BlockLow": 85,
    "NumBitCastInst": 21,
    "NumBrInst": 77,
    "NumCallInst": 55,
    "NumGetElementPtrInst": 82,
    "NumICmpInst": 25,
    "NumLShrInst": 1,
    "NumLoadInst": 220,
    "NumMulInst": 3,
    "NumOrInst": 4,
    "NumPHIInst": 0,
    "NumRetInst": 19,
    "NumSExtInst": 12,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 126,
    "NumSubInst": 1,
    "NumTruncInst": 16,
    "NumXorInst": 0,
    "NumZExtInst": 12,
    "TotalBlocks": 99,
    "TotalInsts": 756,
    "TotalMemInst": 546,
    "TotalFuncs": 42,
    "ArgsPhi": 0,
    "testUnary": 344
  },
  "baseline_oz_instcount": 757,
  "knowledge_base_entry": [
    "--loop-unroll-and-jam",
    "--newgvn",
    "--dce",
    "--simplifycfg",
    "--flattencfg",
    "--gvn-hoist",
    "--aggressive-instcombine",
    "--early-cse",
    "--lower-constant-intrinsics",
    "--adce",
    "--jump-threading",
    "--instsimplify"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--slp-vectorizer",
          "--called-value-propagation",
          "--always-inline",
          "--dse",
          "--inject-tli-mappings",
          "--lcssa",
          "--aggressive-instcombine",
          "--infer-address-spaces",
          "--partially-inline-libcalls",
          "--coro-elide",
          "--ee-instrument",
          "--die",
          "--loop-idiom",
          "--lowerinvoke",
          "--div-rem-pairs",
          "--libcalls-shrinkwrap"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--slp-vectorizer",
      "--called-value-propagation",
      "--always-inline",
      "--dse",
      "--inject-tli-mappings",
      "--lcssa",
      "--aggressive-instcombine",
      "--infer-address-spaces",
      "--partially-inline-libcalls",
      "--coro-elide",
      "--ee-instrument",
      "--die",
      "--loop-idiom",
      "--lowerinvoke",
      "--div-rem-pairs",
      "--libcalls-shrinkwrap"
    ],
    "performance_vs_Oz": "+1.7%"
  }
}
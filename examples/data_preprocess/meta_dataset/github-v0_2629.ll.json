{
  "program_id": "github-v0_2629.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 16,
    "onePredOneSuc": 6,
    "onePredTwoSuc": 4,
    "oneSuccessor": 8,
    "twoPred": 0,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 4,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 18,
    "BeginPhi": 0,
    "BranchCount": 12,
    "returnInt": 7,
    "CriticalCount": 0,
    "NumEdges": 16,
    "const32Bit": 13,
    "const64Bit": 2,
    "numConstZeroes": 4,
    "numConstOnes": 4,
    "UncondBranches": 8,
    "binaryConstArg": 0,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 3,
    "NumAndInst": 0,
    "BlockMid": 0,
    "BlockLow": 18,
    "NumBitCastInst": 0,
    "NumBrInst": 12,
    "NumCallInst": 13,
    "NumGetElementPtrInst": 0,
    "NumICmpInst": 4,
    "NumLShrInst": 0,
    "NumLoadInst": 8,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 2,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 4,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 18,
    "TotalInsts": 50,
    "TotalMemInst": 28,
    "TotalFuncs": 8,
    "ArgsPhi": 0,
    "testUnary": 11
  },
  "baseline_oz_instcount": 51,
  "knowledge_base_entry": [
    "--scalarizer",
    "--instcombine",
    "--licm",
    "--licm",
    "--adce",
    "--elim-avail-extern",
    "--ipsccp",
    "--early-cse-memssa",
    "--ipsccp",
    "--dce",
    "--elim-avail-extern",
    "--bdce",
    "--ipsccp",
    "--ipsccp"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loweratomic",
          "--coro-elide",
          "--redundant-dbg-inst-elim",
          "--consthoist",
          "--speculative-execution",
          "--sroa",
          "--loop-vectorize",
          "-loop-reduce",
          "--lcssa",
          "--irce"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.0%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loweratomic",
      "--coro-elide",
      "--redundant-dbg-inst-elim",
      "--consthoist",
      "--speculative-execution",
      "--sroa",
      "--loop-vectorize",
      "-loop-reduce",
      "--lcssa",
      "--irce"
    ],
    "performance_vs_Oz": "+2.0%"
  }
}
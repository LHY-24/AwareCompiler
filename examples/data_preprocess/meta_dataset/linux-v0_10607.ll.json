{
  "program_id": "linux-v0_10607.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 15,
    "onePredOneSuc": 11,
    "onePredTwoSuc": 4,
    "oneSuccessor": 15,
    "twoPred": 9,
    "twoPredOneSuc": 4,
    "twoEach": 3,
    "twoSuccessor": 9,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 30,
    "BeginPhi": 0,
    "BranchCount": 24,
    "returnInt": 4,
    "CriticalCount": 5,
    "NumEdges": 33,
    "const32Bit": 147,
    "const64Bit": 12,
    "numConstZeroes": 75,
    "numConstOnes": 38,
    "UncondBranches": 15,
    "binaryConstArg": 8,
    "NumAShrInst": 0,
    "NumAddInst": 6,
    "NumAllocaInst": 22,
    "NumAndInst": 1,
    "BlockMid": 6,
    "BlockLow": 24,
    "NumBitCastInst": 5,
    "NumBrInst": 24,
    "NumCallInst": 13,
    "NumGetElementPtrInst": 57,
    "NumICmpInst": 9,
    "NumLShrInst": 0,
    "NumLoadInst": 103,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 6,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 43,
    "NumSubInst": 0,
    "NumTruncInst": 6,
    "NumXorInst": 0,
    "NumZExtInst": 13,
    "TotalBlocks": 30,
    "TotalInsts": 311,
    "TotalMemInst": 238,
    "TotalFuncs": 9,
    "ArgsPhi": 0,
    "testUnary": 151
  },
  "baseline_oz_instcount": 311,
  "knowledge_base_entry": [
    "--sink",
    "--early-cse-memssa",
    "--aggressive-instcombine",
    "--early-cse-memssa",
    "--globalopt",
    "--reassociate",
    "--sccp",
    "--sroa",
    "--bdce",
    "--elim-avail-extern",
    "--instcombine",
    "--gvn",
    "--licm",
    "--instcombine",
    "--reassociate",
    "--slsr",
    "-loop-reduce",
    "--sroa",
    "--elim-avail-extern",
    "--sccp",
    "--loop-instsimplify",
    "--load-store-vectorizer",
    "--gvn",
    "--dce",
    "--newgvn",
    "--elim-avail-extern",
    "--mergefunc",
    "--loop-reroll",
    "--correlated-propagation"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--scalarizer",
          "--gvn",
          "--reassociate",
          "--libcalls-shrinkwrap",
          "--adce",
          "--aggressive-instcombine",
          "--canonicalize-aliases",
          "--attributor",
          "--redundant-dbg-inst-elim",
          "--loop-instsimplify"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--scalarizer",
      "--gvn",
      "--reassociate",
      "--libcalls-shrinkwrap",
      "--adce",
      "--aggressive-instcombine",
      "--canonicalize-aliases",
      "--attributor",
      "--redundant-dbg-inst-elim",
      "--loop-instsimplify"
    ],
    "performance_vs_Oz": "+1.3%"
  }
}
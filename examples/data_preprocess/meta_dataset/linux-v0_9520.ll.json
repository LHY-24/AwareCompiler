{
  "program_id": "linux-v0_9520.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 46,
    "onePredOneSuc": 40,
    "onePredTwoSuc": 6,
    "oneSuccessor": 44,
    "twoPred": 13,
    "twoPredOneSuc": 2,
    "twoEach": 5,
    "twoSuccessor": 17,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 71,
    "BeginPhi": 0,
    "BranchCount": 61,
    "returnInt": 12,
    "CriticalCount": 6,
    "NumEdges": 78,
    "const32Bit": 97,
    "const64Bit": 50,
    "numConstZeroes": 28,
    "numConstOnes": 60,
    "UncondBranches": 44,
    "binaryConstArg": 9,
    "NumAShrInst": 0,
    "NumAddInst": 5,
    "NumAllocaInst": 51,
    "NumAndInst": 1,
    "BlockMid": 12,
    "BlockLow": 59,
    "NumBitCastInst": 3,
    "NumBrInst": 61,
    "NumCallInst": 13,
    "NumGetElementPtrInst": 49,
    "NumICmpInst": 17,
    "NumLShrInst": 0,
    "NumLoadInst": 140,
    "NumMulInst": 2,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 10,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 77,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 14,
    "TotalBlocks": 71,
    "TotalInsts": 446,
    "TotalMemInst": 330,
    "TotalFuncs": 13,
    "ArgsPhi": 0,
    "testUnary": 210
  },
  "baseline_oz_instcount": 447,
  "knowledge_base_entry": [
    "--dce",
    "--newgvn",
    "--gvn-hoist",
    "--globalopt",
    "--ipsccp",
    "--die",
    "--mergefunc",
    "--correlated-propagation",
    "--die",
    "--simplifycfg",
    "--instsimplify",
    "--nary-reassociate",
    "--gvn-hoist",
    "--die",
    "--dse",
    "--lower-constant-intrinsics",
    "--adce",
    "--mergefunc",
    "--correlated-propagation",
    "--mergefunc",
    "--die",
    "--lower-expect",
    "--mem2reg",
    "--early-cse-memssa",
    "--nary-reassociate",
    "--gvn-hoist",
    "--slp-vectorizer",
    "--lower-constant-intrinsics",
    "--adce",
    "--inline"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--libcalls-shrinkwrap",
          "--loop-vectorize",
          "--coro-elide",
          "--barrier",
          "--lowerinvoke",
          "--inject-tli-mappings",
          "--globaldce",
          "--canonicalize-aliases",
          "--globalopt",
          "--strip-debug-declare",
          "--instsimplify",
          "--gvn",
          "--consthoist"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--libcalls-shrinkwrap",
      "--loop-vectorize",
      "--coro-elide",
      "--barrier",
      "--lowerinvoke",
      "--inject-tli-mappings",
      "--globaldce",
      "--canonicalize-aliases",
      "--globalopt",
      "--strip-debug-declare",
      "--instsimplify",
      "--gvn",
      "--consthoist"
    ],
    "performance_vs_Oz": "+0.2%"
  }
}
{
  "program_id": "github-v0_49860.ll",
  "autophase_features": {
    "BBNumArgsHi": 2,
    "BBNumArgsLo": 1,
    "onePred": 4,
    "onePredOneSuc": 2,
    "onePredTwoSuc": 2,
    "oneSuccessor": 3,
    "twoPred": 3,
    "twoPredOneSuc": 0,
    "twoEach": 2,
    "twoSuccessor": 5,
    "morePreds": 1,
    "BB03Phi": 3,
    "BBHiPhi": 0,
    "BBNoPhi": 6,
    "BeginPhi": 3,
    "BranchCount": 8,
    "returnInt": 2,
    "CriticalCount": 6,
    "NumEdges": 13,
    "const32Bit": 12,
    "const64Bit": 0,
    "numConstZeroes": 6,
    "numConstOnes": 4,
    "UncondBranches": 3,
    "binaryConstArg": 4,
    "NumAShrInst": 0,
    "NumAddInst": 9,
    "NumAllocaInst": 0,
    "NumAndInst": 2,
    "BlockMid": 1,
    "BlockLow": 8,
    "NumBitCastInst": 0,
    "NumBrInst": 8,
    "NumCallInst": 5,
    "NumGetElementPtrInst": 7,
    "NumICmpInst": 6,
    "NumLShrInst": 0,
    "NumLoadInst": 6,
    "NumMulInst": 4,
    "NumOrInst": 1,
    "NumPHIInst": 7,
    "NumRetInst": 1,
    "NumSExtInst": 7,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 1,
    "NumSubInst": 1,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 9,
    "TotalInsts": 67,
    "TotalMemInst": 19,
    "TotalFuncs": 3,
    "ArgsPhi": 15,
    "testUnary": 15
  },
  "baseline_oz_instcount": 67,
  "knowledge_base_entry": [
    "--ipconstprop",
    "--aggressive-instcombine",
    "--dce",
    "--loop-simplifycfg",
    "--inline",
    "--load-store-vectorizer",
    "--slsr",
    "--loop-reroll",
    "--load-store-vectorizer",
    "--memcpyopt",
    "--jump-threading",
    "--load-store-vectorizer",
    "--reassociate",
    "--bdce",
    "--gvn-hoist",
    "--mem2reg",
    "--inline",
    "--load-store-vectorizer",
    "--slsr",
    "--gvn-hoist",
    "--early-cse-memssa"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-interchange",
          "--loop-deletion",
          "--flattencfg",
          "--post-inline-ee-instrument",
          "--lowerinvoke",
          "--inferattrs",
          "--loop-simplify",
          "--dse",
          "--insert-gcov-profiling",
          "--correlated-propagation",
          "--loop-distribute",
          "--libcalls-shrinkwrap",
          "--scalarizer",
          "--forceattrs",
          "--jump-threading",
          "--adce",
          "--guard-widening",
          "--bdce",
          "--globaldce",
          "--loop-unroll",
          "--loop-rotate",
          "--newgvn",
          "--lowerswitch",
          "--early-cse-memssa",
          "--functionattrs"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-interchange",
      "--loop-deletion",
      "--flattencfg",
      "--post-inline-ee-instrument",
      "--lowerinvoke",
      "--inferattrs",
      "--loop-simplify",
      "--dse",
      "--insert-gcov-profiling",
      "--correlated-propagation",
      "--loop-distribute",
      "--libcalls-shrinkwrap",
      "--scalarizer",
      "--forceattrs",
      "--jump-threading",
      "--adce",
      "--guard-widening",
      "--bdce",
      "--globaldce",
      "--loop-unroll",
      "--loop-rotate",
      "--newgvn",
      "--lowerswitch",
      "--early-cse-memssa",
      "--functionattrs"
    ],
    "performance_vs_Oz": "+1.5%"
  }
}
{
  "program_id": "github-v0_39940.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 79,
    "onePredOneSuc": 54,
    "onePredTwoSuc": 23,
    "oneSuccessor": 70,
    "twoPred": 31,
    "twoPredOneSuc": 13,
    "twoEach": 13,
    "twoSuccessor": 46,
    "morePreds": 8,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 128,
    "BeginPhi": 1,
    "BranchCount": 116,
    "returnInt": 25,
    "CriticalCount": 22,
    "NumEdges": 169,
    "const32Bit": 223,
    "const64Bit": 5,
    "numConstZeroes": 96,
    "numConstOnes": 71,
    "UncondBranches": 70,
    "binaryConstArg": 17,
    "NumAShrInst": 0,
    "NumAddInst": 10,
    "NumAllocaInst": 52,
    "NumAndInst": 9,
    "BlockMid": 8,
    "BlockLow": 121,
    "NumBitCastInst": 22,
    "NumBrInst": 116,
    "NumCallInst": 44,
    "NumGetElementPtrInst": 49,
    "NumICmpInst": 46,
    "NumLShrInst": 0,
    "NumLoadInst": 198,
    "NumMulInst": 1,
    "NumOrInst": 3,
    "NumPHIInst": 1,
    "NumRetInst": 11,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 93,
    "NumSubInst": 1,
    "NumTruncInst": 4,
    "NumXorInst": 1,
    "NumZExtInst": 22,
    "TotalBlocks": 129,
    "TotalInsts": 686,
    "TotalMemInst": 436,
    "TotalFuncs": 30,
    "ArgsPhi": 2,
    "testUnary": 298
  },
  "baseline_oz_instcount": 686,
  "knowledge_base_entry": [
    "--loop-predication",
    "--gvn",
    "--loop-instsimplify",
    "--elim-avail-extern",
    "--instcombine",
    "--bdce",
    "--aggressive-instcombine",
    "--instsimplify",
    "--prune-eh",
    "--gvn-hoist",
    "--globalopt",
    "--ipsccp",
    "--instcombine",
    "--mem2reg",
    "--load-store-vectorizer",
    "--early-cse"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--add-discriminators",
          "--aggressive-instcombine",
          "--sccp",
          "--loop-data-prefetch",
          "--irce",
          "--indvars",
          "--always-inline",
          "--strip-dead-prototypes",
          "--die",
          "--gvn",
          "--ee-instrument",
          "--globaldce",
          "--instcombine",
          "--early-cse-memssa",
          "--cross-dso-cfi",
          "--rewrite-statepoints-for-gc",
          "--strip-debug-declare",
          "--barrier",
          "--name-anon-globals",
          "--mldst-motion",
          "--licm",
          "--sroa",
          "--inject-tli-mappings",
          "--bdce",
          "--loop-simplify",
          "--dse",
          "--early-cse",
          "--flattencfg"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--add-discriminators",
      "--aggressive-instcombine",
      "--sccp",
      "--loop-data-prefetch",
      "--irce",
      "--indvars",
      "--always-inline",
      "--strip-dead-prototypes",
      "--die",
      "--gvn",
      "--ee-instrument",
      "--globaldce",
      "--instcombine",
      "--early-cse-memssa",
      "--cross-dso-cfi",
      "--rewrite-statepoints-for-gc",
      "--strip-debug-declare",
      "--barrier",
      "--name-anon-globals",
      "--mldst-motion",
      "--licm",
      "--sroa",
      "--inject-tli-mappings",
      "--bdce",
      "--loop-simplify",
      "--dse",
      "--early-cse",
      "--flattencfg"
    ],
    "performance_vs_Oz": "+0.4%"
  }
}
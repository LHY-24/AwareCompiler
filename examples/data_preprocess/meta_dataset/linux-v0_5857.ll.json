{
  "program_id": "linux-v0_5857.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 10,
    "onePredOneSuc": 7,
    "onePredTwoSuc": 3,
    "oneSuccessor": 8,
    "twoPred": 3,
    "twoPredOneSuc": 1,
    "twoEach": 1,
    "twoSuccessor": 7,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 21,
    "BeginPhi": 0,
    "BranchCount": 15,
    "returnInt": 2,
    "CriticalCount": 4,
    "NumEdges": 22,
    "const32Bit": 92,
    "const64Bit": 9,
    "numConstZeroes": 39,
    "numConstOnes": 24,
    "UncondBranches": 8,
    "binaryConstArg": 15,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 19,
    "NumAndInst": 8,
    "BlockMid": 5,
    "BlockLow": 16,
    "NumBitCastInst": 4,
    "NumBrInst": 15,
    "NumCallInst": 11,
    "NumGetElementPtrInst": 28,
    "NumICmpInst": 8,
    "NumLShrInst": 1,
    "NumLoadInst": 65,
    "NumMulInst": 0,
    "NumOrInst": 5,
    "NumPHIInst": 0,
    "NumRetInst": 6,
    "NumSExtInst": 1,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 34,
    "NumSubInst": 1,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 11,
    "TotalBlocks": 21,
    "TotalInsts": 219,
    "TotalMemInst": 157,
    "TotalFuncs": 10,
    "ArgsPhi": 0,
    "testUnary": 102
  },
  "baseline_oz_instcount": 219,
  "knowledge_base_entry": [
    "--slp-vectorizer",
    "--gvn",
    "--sroa",
    "--prune-eh",
    "--aggressive-instcombine",
    "--flattencfg",
    "--mem2reg",
    "--adce",
    "--gvn",
    "--sroa",
    "--gvn-hoist",
    "--bdce",
    "--instcombine",
    "--instsimplify",
    "--mergefunc",
    "--lower-expect"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-data-prefetch",
          "--loop-simplify",
          "--early-cse-memssa",
          "--sroa",
          "--loweratomic",
          "--instcombine",
          "--pgo-memop-opt",
          "--mldst-motion",
          "--strip",
          "--loop-unroll-and-jam",
          "--loop-unroll",
          "--functionattrs",
          "--flattencfg",
          "--always-inline",
          "--mem2reg",
          "--aggressive-instcombine",
          "--hotcoldsplit",
          "--irce",
          "--load-store-vectorizer",
          "--loop-deletion",
          "--gvn-hoist",
          "--dce",
          "--strip-dead-prototypes",
          "--newgvn",
          "--mergereturn",
          "--globalsplit",
          "--tailcallelim",
          "--slp-vectorizer",
          "--bdce",
          "--jump-threading"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-data-prefetch",
      "--loop-simplify",
      "--early-cse-memssa",
      "--sroa",
      "--loweratomic",
      "--instcombine",
      "--pgo-memop-opt",
      "--mldst-motion",
      "--strip",
      "--loop-unroll-and-jam",
      "--loop-unroll",
      "--functionattrs",
      "--flattencfg",
      "--always-inline",
      "--mem2reg",
      "--aggressive-instcombine",
      "--hotcoldsplit",
      "--irce",
      "--load-store-vectorizer",
      "--loop-deletion",
      "--gvn-hoist",
      "--dce",
      "--strip-dead-prototypes",
      "--newgvn",
      "--mergereturn",
      "--globalsplit",
      "--tailcallelim",
      "--slp-vectorizer",
      "--bdce",
      "--jump-threading"
    ],
    "performance_vs_Oz": "+1.8%"
  }
}
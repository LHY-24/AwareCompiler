{
  "program_id": "github-v0_29241.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 40,
    "onePredOneSuc": 22,
    "onePredTwoSuc": 14,
    "oneSuccessor": 34,
    "twoPred": 16,
    "twoPredOneSuc": 7,
    "twoEach": 9,
    "twoSuccessor": 24,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 62,
    "BeginPhi": 0,
    "BranchCount": 58,
    "returnInt": 0,
    "CriticalCount": 14,
    "NumEdges": 82,
    "const32Bit": 188,
    "const64Bit": 8,
    "numConstZeroes": 53,
    "numConstOnes": 81,
    "UncondBranches": 34,
    "binaryConstArg": 53,
    "NumAShrInst": 12,
    "NumAddInst": 12,
    "NumAllocaInst": 46,
    "NumAndInst": 12,
    "BlockMid": 14,
    "BlockLow": 48,
    "NumBitCastInst": 2,
    "NumBrInst": 58,
    "NumCallInst": 0,
    "NumGetElementPtrInst": 49,
    "NumICmpInst": 24,
    "NumLShrInst": 0,
    "NumLoadInst": 154,
    "NumMulInst": 1,
    "NumOrInst": 11,
    "NumPHIInst": 0,
    "NumRetInst": 4,
    "NumSExtInst": 11,
    "NumSelectInst": 0,
    "NumShlInst": 9,
    "NumStoreInst": 90,
    "NumSubInst": 7,
    "NumTruncInst": 5,
    "NumXorInst": 0,
    "NumZExtInst": 8,
    "TotalBlocks": 62,
    "TotalInsts": 519,
    "TotalMemInst": 339,
    "TotalFuncs": 4,
    "ArgsPhi": 0,
    "testUnary": 226
  },
  "baseline_oz_instcount": 520,
  "knowledge_base_entry": [
    "--loop-simplifycfg",
    "--simplifycfg",
    "--elim-avail-extern",
    "--instcombine",
    "--loop-deletion",
    "--early-cse-memssa",
    "--elim-avail-extern",
    "--licm"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--nary-reassociate",
          "--loop-reroll",
          "--constmerge",
          "--coro-cleanup",
          "--ipconstprop",
          "--name-anon-globals",
          "--strip-nondebug",
          "--simplifycfg",
          "--lower-matrix-intrinsics",
          "--coro-split",
          "--div-rem-pairs",
          "--lower-widenable-condition",
          "--irce",
          "--adce",
          "--memcpyopt",
          "--prune-eh",
          "--loop-guard-widening",
          "--loop-distribute",
          "--mergeicmps",
          "--redundant-dbg-inst-elim",
          "--instcombine",
          "--argpromotion",
          "--loop-interchange",
          "--inject-tli-mappings",
          "--die",
          "--loop-simplify",
          "--partially-inline-libcalls",
          "--loop-simplifycfg",
          "--dce",
          "--aggressive-instcombine"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--nary-reassociate",
      "--loop-reroll",
      "--constmerge",
      "--coro-cleanup",
      "--ipconstprop",
      "--name-anon-globals",
      "--strip-nondebug",
      "--simplifycfg",
      "--lower-matrix-intrinsics",
      "--coro-split",
      "--div-rem-pairs",
      "--lower-widenable-condition",
      "--irce",
      "--adce",
      "--memcpyopt",
      "--prune-eh",
      "--loop-guard-widening",
      "--loop-distribute",
      "--mergeicmps",
      "--redundant-dbg-inst-elim",
      "--instcombine",
      "--argpromotion",
      "--loop-interchange",
      "--inject-tli-mappings",
      "--die",
      "--loop-simplify",
      "--partially-inline-libcalls",
      "--loop-simplifycfg",
      "--dce",
      "--aggressive-instcombine"
    ],
    "performance_vs_Oz": "+0.2%"
  }
}
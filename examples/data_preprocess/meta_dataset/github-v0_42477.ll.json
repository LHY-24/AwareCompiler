{
  "program_id": "github-v0_42477.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 1,
    "onePredOneSuc": 1,
    "onePredTwoSuc": 0,
    "oneSuccessor": 1,
    "twoPred": 2,
    "twoPredOneSuc": 0,
    "twoEach": 1,
    "twoSuccessor": 2,
    "morePreds": 0,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 4,
    "BeginPhi": 2,
    "BranchCount": 3,
    "returnInt": 2,
    "CriticalCount": 3,
    "NumEdges": 5,
    "const32Bit": 11,
    "const64Bit": 0,
    "numConstZeroes": 3,
    "numConstOnes": 5,
    "UncondBranches": 1,
    "binaryConstArg": 15,
    "NumAShrInst": 0,
    "NumAddInst": 4,
    "NumAllocaInst": 0,
    "NumAndInst": 0,
    "BlockMid": 3,
    "BlockLow": 3,
    "NumBitCastInst": 0,
    "NumBrInst": 3,
    "NumCallInst": 12,
    "NumGetElementPtrInst": 1,
    "NumICmpInst": 4,
    "NumLShrInst": 0,
    "NumLoadInst": 1,
    "NumMulInst": 1,
    "NumOrInst": 0,
    "NumPHIInst": 3,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 2,
    "NumShlInst": 0,
    "NumStoreInst": 0,
    "NumSubInst": 0,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 1,
    "TotalBlocks": 6,
    "TotalInsts": 77,
    "TotalMemInst": 14,
    "TotalFuncs": 9,
    "ArgsPhi": 6,
    "testUnary": 15
  },
  "baseline_oz_instcount": 77,
  "knowledge_base_entry": [
    "--loop-versioning-licm",
    "--newgvn",
    "--globalopt",
    "--early-cse-memssa",
    "--instcombine",
    "--jump-threading",
    "--ipsccp",
    "--globaldce",
    "--ipsccp",
    "--lower-expect",
    "--licm",
    "--loop-simplifycfg",
    "--simplifycfg",
    "--jump-threading",
    "--slp-vectorizer",
    "--correlated-propagation",
    "--early-cse",
    "--reassociate",
    "--ipsccp",
    "--lower-expect"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--functionattrs",
          "--loop-predication",
          "--inject-tli-mappings",
          "--constmerge",
          "--loop-versioning",
          "--irce",
          "--tailcallelim",
          "--loop-idiom",
          "--inline",
          "--mergefunc",
          "--die",
          "--elim-avail-extern",
          "--strip",
          "--simplifycfg",
          "--post-inline-ee-instrument",
          "--memcpyopt"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--functionattrs",
      "--loop-predication",
      "--inject-tli-mappings",
      "--constmerge",
      "--loop-versioning",
      "--irce",
      "--tailcallelim",
      "--loop-idiom",
      "--inline",
      "--mergefunc",
      "--die",
      "--elim-avail-extern",
      "--strip",
      "--simplifycfg",
      "--post-inline-ee-instrument",
      "--memcpyopt"
    ],
    "performance_vs_Oz": "+1.3%"
  }
}
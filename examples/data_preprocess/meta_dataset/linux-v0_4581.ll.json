{
  "program_id": "linux-v0_4581.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 5,
    "onePred": 83,
    "onePredOneSuc": 59,
    "onePredTwoSuc": 23,
    "oneSuccessor": 69,
    "twoPred": 21,
    "twoPredOneSuc": 8,
    "twoEach": 9,
    "twoSuccessor": 38,
    "morePreds": 3,
    "BB03Phi": 5,
    "BBHiPhi": 0,
    "BBNoPhi": 112,
    "BeginPhi": 5,
    "BranchCount": 107,
    "returnInt": 7,
    "CriticalCount": 8,
    "NumEdges": 145,
    "const32Bit": 301,
    "const64Bit": 39,
    "numConstZeroes": 154,
    "numConstOnes": 93,
    "UncondBranches": 69,
    "binaryConstArg": 43,
    "NumAShrInst": 0,
    "NumAddInst": 4,
    "NumAllocaInst": 61,
    "NumAndInst": 20,
    "BlockMid": 11,
    "BlockLow": 106,
    "NumBitCastInst": 5,
    "NumBrInst": 107,
    "NumCallInst": 27,
    "NumGetElementPtrInst": 74,
    "NumICmpInst": 47,
    "NumLShrInst": 2,
    "NumLoadInst": 153,
    "NumMulInst": 4,
    "NumOrInst": 12,
    "NumPHIInst": 5,
    "NumRetInst": 10,
    "NumSExtInst": 4,
    "NumSelectInst": 6,
    "NumShlInst": 4,
    "NumStoreInst": 108,
    "NumSubInst": 4,
    "NumTruncInst": 5,
    "NumXorInst": 8,
    "NumZExtInst": 15,
    "TotalBlocks": 117,
    "TotalInsts": 691,
    "TotalMemInst": 423,
    "TotalFuncs": 20,
    "ArgsPhi": 10,
    "testUnary": 248
  },
  "baseline_oz_instcount": 689,
  "knowledge_base_entry": [
    "--loop-load-elim",
    "--gvn",
    "--aggressive-instcombine",
    "--globalopt",
    "--dse",
    "--lower-constant-intrinsics",
    "--sccp",
    "--inline",
    "--elim-avail-extern",
    "--loop-deletion",
    "--mem2reg",
    "--loop-instsimplify",
    "--bdce",
    "--aggressive-instcombine",
    "--globaldce",
    "--mergefunc",
    "--mem2reg",
    "--early-cse",
    "--load-store-vectorizer",
    "--bdce",
    "--gvn",
    "--reassociate",
    "--slp-vectorizer",
    "--gvn-hoist",
    "--early-cse",
    "--dce",
    "--die",
    "--aggressive-instcombine",
    "--globalopt",
    "--inline",
    "--sccp",
    "--loop-simplifycfg",
    "--loop-deletion",
    "--jump-threading",
    "--dse"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--rewrite-statepoints-for-gc",
          "--correlated-propagation",
          "--loop-predication",
          "--name-anon-globals",
          "--strip-dead-prototypes",
          "--loop-unroll",
          "--hotcoldsplit",
          "--post-inline-ee-instrument",
          "--loop-load-elim",
          "--functionattrs",
          "--redundant-dbg-inst-elim",
          "--canonicalize-aliases",
          "--coro-elide",
          "--pgo-memop-opt",
          "--globalopt",
          "--instsimplify",
          "--jump-threading",
          "--globalsplit",
          "--prune-eh",
          "--elim-avail-extern",
          "--tailcallelim",
          "--inferattrs",
          "--add-discriminators",
          "--loop-distribute",
          "--loweratomic",
          "--aggressive-instcombine",
          "--sroa",
          "--lower-widenable-condition",
          "--memcpyopt",
          "--barrier"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--rewrite-statepoints-for-gc",
      "--correlated-propagation",
      "--loop-predication",
      "--name-anon-globals",
      "--strip-dead-prototypes",
      "--loop-unroll",
      "--hotcoldsplit",
      "--post-inline-ee-instrument",
      "--loop-load-elim",
      "--functionattrs",
      "--redundant-dbg-inst-elim",
      "--canonicalize-aliases",
      "--coro-elide",
      "--pgo-memop-opt",
      "--globalopt",
      "--instsimplify",
      "--jump-threading",
      "--globalsplit",
      "--prune-eh",
      "--elim-avail-extern",
      "--tailcallelim",
      "--inferattrs",
      "--add-discriminators",
      "--loop-distribute",
      "--loweratomic",
      "--aggressive-instcombine",
      "--sroa",
      "--lower-widenable-condition",
      "--memcpyopt",
      "--barrier"
    ],
    "performance_vs_Oz": "+0.3%"
  }
}
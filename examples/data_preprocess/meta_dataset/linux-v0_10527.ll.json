{
  "program_id": "linux-v0_10527.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 61,
    "onePredOneSuc": 44,
    "onePredTwoSuc": 11,
    "oneSuccessor": 56,
    "twoPred": 17,
    "twoPredOneSuc": 4,
    "twoEach": 7,
    "twoSuccessor": 25,
    "morePreds": 3,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 111,
    "BeginPhi": 0,
    "BranchCount": 81,
    "returnInt": 14,
    "CriticalCount": 13,
    "NumEdges": 106,
    "const32Bit": 371,
    "const64Bit": 35,
    "numConstZeroes": 170,
    "numConstOnes": 132,
    "UncondBranches": 56,
    "binaryConstArg": 19,
    "NumAShrInst": 0,
    "NumAddInst": 5,
    "NumAllocaInst": 114,
    "NumAndInst": 12,
    "BlockMid": 20,
    "BlockLow": 91,
    "NumBitCastInst": 26,
    "NumBrInst": 81,
    "NumCallInst": 52,
    "NumGetElementPtrInst": 119,
    "NumICmpInst": 30,
    "NumLShrInst": 2,
    "NumLoadInst": 242,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 30,
    "NumSExtInst": 6,
    "NumSelectInst": 3,
    "NumShlInst": 0,
    "NumStoreInst": 143,
    "NumSubInst": 2,
    "NumTruncInst": 11,
    "NumXorInst": 0,
    "NumZExtInst": 10,
    "TotalBlocks": 111,
    "TotalInsts": 892,
    "TotalMemInst": 670,
    "TotalFuncs": 51,
    "ArgsPhi": 0,
    "testUnary": 412
  },
  "baseline_oz_instcount": 893,
  "knowledge_base_entry": [
    "--die",
    "--aggressive-instcombine",
    "--mem2reg",
    "--reassociate",
    "--mergefunc",
    "--flattencfg",
    "--gvn",
    "--mem2reg",
    "--mldst-motion",
    "--inline"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-unroll-and-jam",
          "--lower-widenable-condition",
          "--loop-instsimplify",
          "--sancov",
          "--constmerge",
          "--newgvn",
          "--aggressive-instcombine",
          "--sink",
          "--called-value-propagation",
          "--alignment-from-assumptions",
          "--partial-inliner",
          "--loop-data-prefetch",
          "--inject-tli-mappings",
          "--loop-fusion",
          "--mergefunc",
          "--dse",
          "--infer-address-spaces",
          "--argpromotion",
          "--mem2reg",
          "--die",
          "--loop-sink",
          "--adce",
          "--loop-guard-widening",
          "--reassociate",
          "--coro-elide"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-unroll-and-jam",
      "--lower-widenable-condition",
      "--loop-instsimplify",
      "--sancov",
      "--constmerge",
      "--newgvn",
      "--aggressive-instcombine",
      "--sink",
      "--called-value-propagation",
      "--alignment-from-assumptions",
      "--partial-inliner",
      "--loop-data-prefetch",
      "--inject-tli-mappings",
      "--loop-fusion",
      "--mergefunc",
      "--dse",
      "--infer-address-spaces",
      "--argpromotion",
      "--mem2reg",
      "--die",
      "--loop-sink",
      "--adce",
      "--loop-guard-widening",
      "--reassociate",
      "--coro-elide"
    ],
    "performance_vs_Oz": "+0.8%"
  }
}
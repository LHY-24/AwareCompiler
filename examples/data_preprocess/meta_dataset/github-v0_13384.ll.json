{
  "program_id": "github-v0_13384.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 97,
    "onePredOneSuc": 49,
    "onePredTwoSuc": 48,
    "oneSuccessor": 64,
    "twoPred": 26,
    "twoPredOneSuc": 12,
    "twoEach": 14,
    "twoSuccessor": 67,
    "morePreds": 8,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 134,
    "BeginPhi": 2,
    "BranchCount": 131,
    "returnInt": 12,
    "CriticalCount": 39,
    "NumEdges": 198,
    "const32Bit": 200,
    "const64Bit": 19,
    "numConstZeroes": 107,
    "numConstOnes": 49,
    "UncondBranches": 64,
    "binaryConstArg": 32,
    "NumAShrInst": 0,
    "NumAddInst": 14,
    "NumAllocaInst": 27,
    "NumAndInst": 7,
    "BlockMid": 11,
    "BlockLow": 125,
    "NumBitCastInst": 6,
    "NumBrInst": 131,
    "NumCallInst": 19,
    "NumGetElementPtrInst": 66,
    "NumICmpInst": 67,
    "NumLShrInst": 0,
    "NumLoadInst": 260,
    "NumMulInst": 1,
    "NumOrInst": 9,
    "NumPHIInst": 2,
    "NumRetInst": 5,
    "NumSExtInst": 11,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 106,
    "NumSubInst": 7,
    "NumTruncInst": 23,
    "NumXorInst": 0,
    "NumZExtInst": 36,
    "TotalBlocks": 136,
    "TotalInsts": 798,
    "TotalMemInst": 478,
    "TotalFuncs": 11,
    "ArgsPhi": 4,
    "testUnary": 363
  },
  "baseline_oz_instcount": 798,
  "knowledge_base_entry": [
    "--instsimplify",
    "--loop-simplifycfg",
    "--aggressive-instcombine",
    "--bdce",
    "--early-cse",
    "--correlated-propagation",
    "--newgvn",
    "--indvars",
    "--correlated-propagation",
    "--mergefunc",
    "--dce",
    "--licm",
    "--sroa",
    "--loop-instsimplify",
    "--inline",
    "--mem2reg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--consthoist",
          "--loop-vectorize",
          "--mldst-motion",
          "--slsr",
          "--libcalls-shrinkwrap",
          "--deadargelim",
          "--gvn-hoist",
          "--inject-tli-mappings",
          "--irce",
          "--loop-idiom",
          "--hotcoldsplit",
          "--gvn",
          "--loop-versioning",
          "--aggressive-instcombine",
          "--reassociate",
          "--ipconstprop",
          "--coro-elide",
          "--ipsccp",
          "--lower-matrix-intrinsics",
          "--add-discriminators",
          "--sink",
          "--loop-deletion",
          "--bdce",
          "--loop-distribute",
          "--load-store-vectorizer",
          "--always-inline",
          "--die",
          "--called-value-propagation",
          "--strip-debug-declare"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--consthoist",
      "--loop-vectorize",
      "--mldst-motion",
      "--slsr",
      "--libcalls-shrinkwrap",
      "--deadargelim",
      "--gvn-hoist",
      "--inject-tli-mappings",
      "--irce",
      "--loop-idiom",
      "--hotcoldsplit",
      "--gvn",
      "--loop-versioning",
      "--aggressive-instcombine",
      "--reassociate",
      "--ipconstprop",
      "--coro-elide",
      "--ipsccp",
      "--lower-matrix-intrinsics",
      "--add-discriminators",
      "--sink",
      "--loop-deletion",
      "--bdce",
      "--loop-distribute",
      "--load-store-vectorizer",
      "--always-inline",
      "--die",
      "--called-value-propagation",
      "--strip-debug-declare"
    ],
    "performance_vs_Oz": "+2.5%"
  }
}
{
  "program_id": "linux-v0_13227.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 17,
    "onePredOneSuc": 13,
    "onePredTwoSuc": 3,
    "oneSuccessor": 16,
    "twoPred": 7,
    "twoPredOneSuc": 2,
    "twoEach": 2,
    "twoSuccessor": 9,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 40,
    "BeginPhi": 0,
    "BranchCount": 25,
    "returnInt": 25,
    "CriticalCount": 5,
    "NumEdges": 34,
    "const32Bit": 257,
    "const64Bit": 7,
    "numConstZeroes": 101,
    "numConstOnes": 67,
    "UncondBranches": 16,
    "binaryConstArg": 15,
    "NumAShrInst": 1,
    "NumAddInst": 0,
    "NumAllocaInst": 62,
    "NumAndInst": 4,
    "BlockMid": 11,
    "BlockLow": 29,
    "NumBitCastInst": 8,
    "NumBrInst": 25,
    "NumCallInst": 48,
    "NumGetElementPtrInst": 73,
    "NumICmpInst": 9,
    "NumLShrInst": 0,
    "NumLoadInst": 184,
    "NumMulInst": 1,
    "NumOrInst": 9,
    "NumPHIInst": 0,
    "NumRetInst": 15,
    "NumSExtInst": 1,
    "NumSelectInst": 0,
    "NumShlInst": 5,
    "NumStoreInst": 73,
    "NumSubInst": 6,
    "NumTruncInst": 5,
    "NumXorInst": 0,
    "NumZExtInst": 5,
    "TotalBlocks": 40,
    "TotalInsts": 539,
    "TotalMemInst": 440,
    "TotalFuncs": 41,
    "ArgsPhi": 0,
    "testUnary": 270
  },
  "baseline_oz_instcount": 539,
  "knowledge_base_entry": [
    "--aggressive-instcombine",
    "--instsimplify",
    "--loop-reroll",
    "--indvars",
    "--simplifycfg",
    "--bdce",
    "--lower-constant-intrinsics",
    "--mem2reg",
    "--load-store-vectorizer",
    "--correlated-propagation"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--globaldce",
          "--hotcoldsplit",
          "--aggressive-instcombine",
          "--speculative-execution",
          "--callsite-splitting",
          "--loop-rotate",
          "--add-discriminators",
          "--loop-predication",
          "--always-inline",
          "--loop-guard-widening",
          "--loop-versioning",
          "--coro-elide",
          "--loop-instsimplify",
          "--infer-address-spaces",
          "--ipsccp",
          "--early-cse",
          "--adce",
          "--constprop",
          "--separate-const-offset-from-gep",
          "--loop-versioning-licm",
          "--functionattrs",
          "--coro-cleanup",
          "--lower-matrix-intrinsics",
          "--ipconstprop"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--globaldce",
      "--hotcoldsplit",
      "--aggressive-instcombine",
      "--speculative-execution",
      "--callsite-splitting",
      "--loop-rotate",
      "--add-discriminators",
      "--loop-predication",
      "--always-inline",
      "--loop-guard-widening",
      "--loop-versioning",
      "--coro-elide",
      "--loop-instsimplify",
      "--infer-address-spaces",
      "--ipsccp",
      "--early-cse",
      "--adce",
      "--constprop",
      "--separate-const-offset-from-gep",
      "--loop-versioning-licm",
      "--functionattrs",
      "--coro-cleanup",
      "--lower-matrix-intrinsics",
      "--ipconstprop"
    ],
    "performance_vs_Oz": "+1.9%"
  }
}
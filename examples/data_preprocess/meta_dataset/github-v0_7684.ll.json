{
  "program_id": "github-v0_7684.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 13,
    "onePredOneSuc": 9,
    "onePredTwoSuc": 2,
    "oneSuccessor": 11,
    "twoPred": 5,
    "twoPredOneSuc": 2,
    "twoEach": 2,
    "twoSuccessor": 6,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 21,
    "BeginPhi": 0,
    "BranchCount": 17,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 23,
    "const32Bit": 42,
    "const64Bit": 55,
    "numConstZeroes": 51,
    "numConstOnes": 30,
    "UncondBranches": 11,
    "binaryConstArg": 18,
    "NumAShrInst": 0,
    "NumAddInst": 3,
    "NumAllocaInst": 13,
    "NumAndInst": 6,
    "BlockMid": 6,
    "BlockLow": 15,
    "NumBitCastInst": 8,
    "NumBrInst": 17,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 34,
    "NumICmpInst": 6,
    "NumLShrInst": 4,
    "NumLoadInst": 32,
    "NumMulInst": 0,
    "NumOrInst": 4,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 4,
    "NumStoreInst": 22,
    "NumSubInst": 0,
    "NumTruncInst": 5,
    "NumXorInst": 0,
    "NumZExtInst": 4,
    "TotalBlocks": 21,
    "TotalInsts": 176,
    "TotalMemInst": 108,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 65
  },
  "baseline_oz_instcount": 176,
  "knowledge_base_entry": [
    "--nary-reassociate",
    "--loop-fusion",
    "--early-cse",
    "--prune-eh",
    "--instcombine",
    "--correlated-propagation",
    "--early-cse",
    "--loop-fusion",
    "--load-store-vectorizer",
    "--newgvn",
    "--loop-simplifycfg",
    "--flattencfg",
    "--mergefunc",
    "--loop-instsimplify",
    "--lower-constant-intrinsics",
    "--nary-reassociate",
    "--gvn-hoist",
    "--load-store-vectorizer",
    "--aggressive-instcombine",
    "--early-cse-memssa",
    "--loop-deletion"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--strip-dead-prototypes",
          "--bdce",
          "--early-cse-memssa",
          "--aggressive-instcombine",
          "--indvars",
          "--ipconstprop",
          "--loop-instsimplify",
          "--loop-interchange",
          "--dse",
          "--strip-debug-declare",
          "--newgvn",
          "--inline",
          "--globaldce",
          "--instsimplify",
          "--loop-fusion",
          "--sink",
          "--loop-unroll-and-jam",
          "--jump-threading",
          "--irce",
          "--callsite-splitting",
          "--loop-distribute",
          "--called-value-propagation",
          "--elim-avail-extern",
          "--coro-elide",
          "--correlated-propagation"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--strip-dead-prototypes",
      "--bdce",
      "--early-cse-memssa",
      "--aggressive-instcombine",
      "--indvars",
      "--ipconstprop",
      "--loop-instsimplify",
      "--loop-interchange",
      "--dse",
      "--strip-debug-declare",
      "--newgvn",
      "--inline",
      "--globaldce",
      "--instsimplify",
      "--loop-fusion",
      "--sink",
      "--loop-unroll-and-jam",
      "--jump-threading",
      "--irce",
      "--callsite-splitting",
      "--loop-distribute",
      "--called-value-propagation",
      "--elim-avail-extern",
      "--coro-elide",
      "--correlated-propagation"
    ],
    "performance_vs_Oz": "+3.4%"
  }
}
{
  "program_id": "tensorflow-v0_320.ll",
  "autophase_features": {
    "BBNumArgsHi": 1,
    "BBNumArgsLo": 4,
    "onePred": 73,
    "onePredOneSuc": 17,
    "onePredTwoSuc": 47,
    "oneSuccessor": 23,
    "twoPred": 32,
    "twoPredOneSuc": 2,
    "twoEach": 22,
    "twoSuccessor": 78,
    "morePreds": 7,
    "BB03Phi": 5,
    "BBHiPhi": 0,
    "BBNoPhi": 119,
    "BeginPhi": 5,
    "BranchCount": 55,
    "returnInt": 7,
    "CriticalCount": 87,
    "NumEdges": 183,
    "const32Bit": 73,
    "const64Bit": 66,
    "numConstZeroes": 83,
    "numConstOnes": 27,
    "UncondBranches": 23,
    "binaryConstArg": 16,
    "NumAShrInst": 0,
    "NumAddInst": 9,
    "NumAllocaInst": 5,
    "NumAndInst": 0,
    "BlockMid": 2,
    "BlockLow": 122,
    "NumBitCastInst": 21,
    "NumBrInst": 55,
    "NumCallInst": 70,
    "NumGetElementPtrInst": 27,
    "NumICmpInst": 23,
    "NumLShrInst": 0,
    "NumLoadInst": 63,
    "NumMulInst": 0,
    "NumOrInst": 7,
    "NumPHIInst": 6,
    "NumRetInst": 10,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 59,
    "NumSubInst": 1,
    "NumTruncInst": 0,
    "NumXorInst": 1,
    "NumZExtInst": 3,
    "TotalBlocks": 124,
    "TotalInsts": 443,
    "TotalMemInst": 270,
    "TotalFuncs": 44,
    "ArgsPhi": 17,
    "testUnary": 105
  },
  "baseline_oz_instcount": 440,
  "knowledge_base_entry": [
    "--lowerinvoke",
    "--instcombine",
    "--aggressive-instcombine",
    "--instsimplify",
    "--dce",
    "--correlated-propagation",
    "--gvn",
    "--mergefunc",
    "--gvn",
    "--memcpyopt",
    "--simplifycfg",
    "--inline",
    "--gvn",
    "--load-store-vectorizer",
    "--slsr",
    "--gvn",
    "--gvn-hoist",
    "--bdce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--newgvn",
          "--instnamer",
          "--ipsccp",
          "--lowerinvoke",
          "--strip",
          "--memcpyopt",
          "--float2int",
          "--load-store-vectorizer",
          "--lcssa",
          "--dse",
          "--instsimplify",
          "--bdce",
          "--loop-guard-widening",
          "--inject-tli-mappings",
          "--coro-split",
          "--loop-simplifycfg",
          "--mergeicmps",
          "--mergereturn",
          "--coro-early",
          "--correlated-propagation",
          "--guard-widening",
          "--sancov",
          "--early-cse-memssa",
          "--ipconstprop",
          "--loop-interchange",
          "--lower-expect",
          "--simplifycfg",
          "--lower-constant-intrinsics"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+9.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--newgvn",
      "--instnamer",
      "--ipsccp",
      "--lowerinvoke",
      "--strip",
      "--memcpyopt",
      "--float2int",
      "--load-store-vectorizer",
      "--lcssa",
      "--dse",
      "--instsimplify",
      "--bdce",
      "--loop-guard-widening",
      "--inject-tli-mappings",
      "--coro-split",
      "--loop-simplifycfg",
      "--mergeicmps",
      "--mergereturn",
      "--coro-early",
      "--correlated-propagation",
      "--guard-widening",
      "--sancov",
      "--early-cse-memssa",
      "--ipconstprop",
      "--loop-interchange",
      "--lower-expect",
      "--simplifycfg",
      "--lower-constant-intrinsics"
    ],
    "performance_vs_Oz": "+9.5%"
  }
}
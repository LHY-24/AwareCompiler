{
  "program_id": "linux-v0_6604.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 20,
    "onePredOneSuc": 14,
    "onePredTwoSuc": 4,
    "oneSuccessor": 20,
    "twoPred": 10,
    "twoPredOneSuc": 3,
    "twoEach": 6,
    "twoSuccessor": 10,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 37,
    "BeginPhi": 0,
    "BranchCount": 30,
    "returnInt": 7,
    "CriticalCount": 8,
    "NumEdges": 40,
    "const32Bit": 99,
    "const64Bit": 6,
    "numConstZeroes": 38,
    "numConstOnes": 31,
    "UncondBranches": 20,
    "binaryConstArg": 11,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 24,
    "NumAndInst": 10,
    "BlockMid": 3,
    "BlockLow": 34,
    "NumBitCastInst": 7,
    "NumBrInst": 30,
    "NumCallInst": 15,
    "NumGetElementPtrInst": 29,
    "NumICmpInst": 10,
    "NumLShrInst": 0,
    "NumLoadInst": 63,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 7,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 28,
    "NumSubInst": 0,
    "NumTruncInst": 1,
    "NumXorInst": 0,
    "NumZExtInst": 3,
    "TotalBlocks": 37,
    "TotalInsts": 228,
    "TotalMemInst": 159,
    "TotalFuncs": 13,
    "ArgsPhi": 0,
    "testUnary": 98
  },
  "baseline_oz_instcount": 228,
  "knowledge_base_entry": [
    "--loop-guard-widening",
    "--newgvn",
    "--aggressive-instcombine",
    "--mem2reg",
    "--early-cse-memssa",
    "--loop-reroll",
    "--indvars",
    "--load-store-vectorizer",
    "--reassociate",
    "--mem2reg",
    "--elim-avail-extern",
    "--inline",
    "--aggressive-instcombine",
    "--lower-expect",
    "--reassociate",
    "--die"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--lcssa",
          "--loop-fusion",
          "--loop-reroll",
          "--barrier",
          "--ee-instrument",
          "--aggressive-instcombine",
          "--flattencfg",
          "--coro-cleanup",
          "--constmerge",
          "--globalsplit",
          "--add-discriminators",
          "--sroa"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--lcssa",
      "--loop-fusion",
      "--loop-reroll",
      "--barrier",
      "--ee-instrument",
      "--aggressive-instcombine",
      "--flattencfg",
      "--coro-cleanup",
      "--constmerge",
      "--globalsplit",
      "--add-discriminators",
      "--sroa"
    ],
    "performance_vs_Oz": "+0.9%"
  }
}
{
  "program_id": "github-v0_29539.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 17,
    "onePredOneSuc": 11,
    "onePredTwoSuc": 4,
    "oneSuccessor": 15,
    "twoPred": 7,
    "twoPredOneSuc": 4,
    "twoEach": 2,
    "twoSuccessor": 8,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 27,
    "BeginPhi": 0,
    "BranchCount": 23,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 31,
    "const32Bit": 40,
    "const64Bit": 77,
    "numConstZeroes": 77,
    "numConstOnes": 32,
    "UncondBranches": 15,
    "binaryConstArg": 11,
    "NumAShrInst": 1,
    "NumAddInst": 7,
    "NumAllocaInst": 14,
    "NumAndInst": 4,
    "BlockMid": 6,
    "BlockLow": 21,
    "NumBitCastInst": 16,
    "NumBrInst": 23,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 50,
    "NumICmpInst": 8,
    "NumLShrInst": 0,
    "NumLoadInst": 38,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 27,
    "NumSubInst": 1,
    "NumTruncInst": 5,
    "NumXorInst": 0,
    "NumZExtInst": 12,
    "TotalBlocks": 27,
    "TotalInsts": 220,
    "TotalMemInst": 136,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 88
  },
  "baseline_oz_instcount": 220,
  "knowledge_base_entry": [
    "--early-cse-memssa",
    "--bdce",
    "--reassociate",
    "--ipsccp",
    "--jump-threading",
    "--dse",
    "--reassociate",
    "--ipsccp",
    "--mem2reg",
    "--newgvn",
    "--inline",
    "--aggressive-instcombine",
    "--loweratomic",
    "--ipsccp",
    "--mem2reg",
    "--die",
    "--loop-simplifycfg",
    "--early-cse",
    "--loop-reroll",
    "--gvn",
    "--lower-constant-intrinsics",
    "--instcombine",
    "--early-cse",
    "--loop-reroll",
    "--mergefunc",
    "--early-cse-memssa"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--coro-elide",
          "--loop-deletion",
          "--licm",
          "--loop-versioning",
          "--scalarizer",
          "--early-cse",
          "--sink",
          "--deadargelim",
          "--barrier",
          "--inline",
          "--pgo-memop-opt",
          "--inferattrs",
          "--lcssa",
          "--strip-debug-declare",
          "--slp-vectorizer",
          "--loop-interchange",
          "--dce",
          "--partially-inline-libcalls",
          "--loop-unroll",
          "--loop-guard-widening",
          "--coro-early",
          "--aggressive-instcombine",
          "--sroa",
          "--gvn-hoist",
          "--globaldce",
          "--coro-split",
          "--attributor",
          "--simplifycfg",
          "--always-inline"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+4.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--coro-elide",
      "--loop-deletion",
      "--licm",
      "--loop-versioning",
      "--scalarizer",
      "--early-cse",
      "--sink",
      "--deadargelim",
      "--barrier",
      "--inline",
      "--pgo-memop-opt",
      "--inferattrs",
      "--lcssa",
      "--strip-debug-declare",
      "--slp-vectorizer",
      "--loop-interchange",
      "--dce",
      "--partially-inline-libcalls",
      "--loop-unroll",
      "--loop-guard-widening",
      "--coro-early",
      "--aggressive-instcombine",
      "--sroa",
      "--gvn-hoist",
      "--globaldce",
      "--coro-split",
      "--attributor",
      "--simplifycfg",
      "--always-inline"
    ],
    "performance_vs_Oz": "+4.5%"
  }
}
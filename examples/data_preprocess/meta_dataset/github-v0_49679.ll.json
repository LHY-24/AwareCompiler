{
  "program_id": "github-v0_49679.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 10,
    "onePredOneSuc": 4,
    "onePredTwoSuc": 5,
    "oneSuccessor": 10,
    "twoPred": 7,
    "twoPredOneSuc": 5,
    "twoEach": 2,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 18,
    "BeginPhi": 0,
    "BranchCount": 17,
    "returnInt": 2,
    "CriticalCount": 4,
    "NumEdges": 24,
    "const32Bit": 31,
    "const64Bit": 6,
    "numConstZeroes": 12,
    "numConstOnes": 9,
    "UncondBranches": 10,
    "binaryConstArg": 15,
    "NumAShrInst": 0,
    "NumAddInst": 13,
    "NumAllocaInst": 4,
    "NumAndInst": 0,
    "BlockMid": 0,
    "BlockLow": 18,
    "NumBitCastInst": 1,
    "NumBrInst": 17,
    "NumCallInst": 3,
    "NumGetElementPtrInst": 6,
    "NumICmpInst": 7,
    "NumLShrInst": 0,
    "NumLoadInst": 16,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 1,
    "NumSExtInst": 16,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 13,
    "NumSubInst": 2,
    "NumTruncInst": 5,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 18,
    "TotalInsts": 104,
    "TotalMemInst": 42,
    "TotalFuncs": 4,
    "ArgsPhi": 0,
    "testUnary": 42
  },
  "baseline_oz_instcount": 104,
  "knowledge_base_entry": [
    "--mergefunc",
    "--dse",
    "--elim-avail-extern",
    "--aggressive-instcombine",
    "--reassociate",
    "--correlated-propagation",
    "--load-store-vectorizer",
    "--bdce",
    "--dse",
    "--loop-simplifycfg",
    "--globalopt",
    "--gvn-hoist",
    "--newgvn",
    "--nary-reassociate",
    "--slsr",
    "--loop-reroll",
    "--sroa",
    "--die",
    "--inline",
    "--mldst-motion"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--strip-nondebug",
          "--sccp",
          "--lower-expect",
          "--tailcallelim",
          "--add-discriminators",
          "--coro-split",
          "--inferattrs",
          "--scalarizer",
          "--called-value-propagation",
          "--always-inline",
          "--cross-dso-cfi",
          "--canonicalize-aliases",
          "--aggressive-instcombine",
          "--redundant-dbg-inst-elim",
          "--loop-reroll",
          "--sroa",
          "--lower-matrix-intrinsics",
          "--partially-inline-libcalls",
          "--loop-simplifycfg",
          "--irce",
          "--bdce",
          "--functionattrs",
          "--mldst-motion",
          "--loweratomic",
          "--slsr",
          "--ipsccp",
          "--die"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+7.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--strip-nondebug",
      "--sccp",
      "--lower-expect",
      "--tailcallelim",
      "--add-discriminators",
      "--coro-split",
      "--inferattrs",
      "--scalarizer",
      "--called-value-propagation",
      "--always-inline",
      "--cross-dso-cfi",
      "--canonicalize-aliases",
      "--aggressive-instcombine",
      "--redundant-dbg-inst-elim",
      "--loop-reroll",
      "--sroa",
      "--lower-matrix-intrinsics",
      "--partially-inline-libcalls",
      "--loop-simplifycfg",
      "--irce",
      "--bdce",
      "--functionattrs",
      "--mldst-motion",
      "--loweratomic",
      "--slsr",
      "--ipsccp",
      "--die"
    ],
    "performance_vs_Oz": "+7.7%"
  }
}
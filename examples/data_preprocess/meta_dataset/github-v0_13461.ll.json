{
  "program_id": "github-v0_13461.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 36,
    "onePredOneSuc": 20,
    "onePredTwoSuc": 11,
    "oneSuccessor": 28,
    "twoPred": 13,
    "twoPredOneSuc": 8,
    "twoEach": 4,
    "twoSuccessor": 17,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 51,
    "BeginPhi": 0,
    "BranchCount": 45,
    "returnInt": 29,
    "CriticalCount": 2,
    "NumEdges": 62,
    "const32Bit": 170,
    "const64Bit": 17,
    "numConstZeroes": 96,
    "numConstOnes": 49,
    "UncondBranches": 28,
    "binaryConstArg": 5,
    "NumAShrInst": 0,
    "NumAddInst": 4,
    "NumAllocaInst": 31,
    "NumAndInst": 0,
    "BlockMid": 4,
    "BlockLow": 47,
    "NumBitCastInst": 17,
    "NumBrInst": 45,
    "NumCallInst": 49,
    "NumGetElementPtrInst": 56,
    "NumICmpInst": 17,
    "NumLShrInst": 0,
    "NumLoadInst": 85,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 2,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 37,
    "NumSubInst": 1,
    "NumTruncInst": 1,
    "NumXorInst": 0,
    "NumZExtInst": 2,
    "TotalBlocks": 51,
    "TotalInsts": 354,
    "TotalMemInst": 258,
    "TotalFuncs": 22,
    "ArgsPhi": 0,
    "testUnary": 139
  },
  "baseline_oz_instcount": 355,
  "knowledge_base_entry": [
    "--hotcoldsplit",
    "--mergefunc",
    "--mem2reg",
    "--lower-expect",
    "--newgvn",
    "--inline",
    "--load-store-vectorizer",
    "--dse"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--globalopt",
          "--newgvn",
          "--strip",
          "--globaldce",
          "--constprop",
          "--rpo-functionattrs",
          "--strip-dead-prototypes",
          "--hotcoldsplit",
          "--bdce",
          "--lower-widenable-condition",
          "--aggressive-instcombine",
          "--adce"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--globalopt",
      "--newgvn",
      "--strip",
      "--globaldce",
      "--constprop",
      "--rpo-functionattrs",
      "--strip-dead-prototypes",
      "--hotcoldsplit",
      "--bdce",
      "--lower-widenable-condition",
      "--aggressive-instcombine",
      "--adce"
    ],
    "performance_vs_Oz": "+0.3%"
  }
}
{
  "program_id": "github-v0_46312.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 74,
    "onePredOneSuc": 64,
    "onePredTwoSuc": 9,
    "oneSuccessor": 73,
    "twoPred": 37,
    "twoPredOneSuc": 7,
    "twoEach": 16,
    "twoSuccessor": 39,
    "morePreds": 3,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 128,
    "BeginPhi": 0,
    "BranchCount": 112,
    "returnInt": 1,
    "CriticalCount": 11,
    "NumEdges": 158,
    "const32Bit": 243,
    "const64Bit": 2,
    "numConstZeroes": 96,
    "numConstOnes": 51,
    "UncondBranches": 73,
    "binaryConstArg": 8,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 26,
    "NumAndInst": 5,
    "BlockMid": 4,
    "BlockLow": 124,
    "NumBitCastInst": 0,
    "NumBrInst": 112,
    "NumCallInst": 30,
    "NumGetElementPtrInst": 69,
    "NumICmpInst": 40,
    "NumLShrInst": 0,
    "NumLoadInst": 135,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 14,
    "NumSExtInst": 0,
    "NumSelectInst": 1,
    "NumShlInst": 1,
    "NumStoreInst": 62,
    "NumSubInst": 1,
    "NumTruncInst": 1,
    "NumXorInst": 0,
    "NumZExtInst": 12,
    "TotalBlocks": 128,
    "TotalInsts": 512,
    "TotalMemInst": 322,
    "TotalFuncs": 16,
    "ArgsPhi": 0,
    "testUnary": 174
  },
  "baseline_oz_instcount": 512,
  "knowledge_base_entry": [
    "--loop-versioning-licm",
    "--jump-threading",
    "--mem2reg",
    "--aggressive-instcombine",
    "--bdce",
    "--loop-instsimplify",
    "--newgvn",
    "--correlated-propagation",
    "--simplifycfg",
    "--slp-vectorizer",
    "--lower-constant-intrinsics",
    "--nary-reassociate",
    "--loop-reroll",
    "--jump-threading",
    "--adce",
    "--aggressive-instcombine",
    "--globaldce",
    "--mergefunc",
    "--flattencfg",
    "--globalopt",
    "--loop-simplifycfg",
    "--slsr",
    "--gvn-hoist"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--constprop",
          "--loop-predication",
          "--hotcoldsplit",
          "--instcombine",
          "--lower-expect",
          "--dce",
          "--prune-eh",
          "--deadargelim",
          "--slp-vectorizer",
          "--simplifycfg",
          "--canonicalize-aliases",
          "--die",
          "--loop-idiom",
          "--flattencfg",
          "--alignment-from-assumptions",
          "--coro-elide",
          "--aggressive-instcombine"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--constprop",
      "--loop-predication",
      "--hotcoldsplit",
      "--instcombine",
      "--lower-expect",
      "--dce",
      "--prune-eh",
      "--deadargelim",
      "--slp-vectorizer",
      "--simplifycfg",
      "--canonicalize-aliases",
      "--die",
      "--loop-idiom",
      "--flattencfg",
      "--alignment-from-assumptions",
      "--coro-elide",
      "--aggressive-instcombine"
    ],
    "performance_vs_Oz": "+0.4%"
  }
}
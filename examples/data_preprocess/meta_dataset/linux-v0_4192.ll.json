{
  "program_id": "linux-v0_4192.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 29,
    "onePredOneSuc": 20,
    "onePredTwoSuc": 7,
    "oneSuccessor": 28,
    "twoPred": 5,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 7,
    "morePreds": 1,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 49,
    "BeginPhi": 1,
    "BranchCount": 35,
    "returnInt": 18,
    "CriticalCount": 1,
    "NumEdges": 42,
    "const32Bit": 205,
    "const64Bit": 21,
    "numConstZeroes": 89,
    "numConstOnes": 113,
    "UncondBranches": 28,
    "binaryConstArg": 13,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 81,
    "NumAndInst": 7,
    "BlockMid": 19,
    "BlockLow": 31,
    "NumBitCastInst": 19,
    "NumBrInst": 35,
    "NumCallInst": 28,
    "NumGetElementPtrInst": 61,
    "NumICmpInst": 9,
    "NumLShrInst": 3,
    "NumLoadInst": 197,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 1,
    "NumRetInst": 15,
    "NumSExtInst": 0,
    "NumSelectInst": 2,
    "NumShlInst": 11,
    "NumStoreInst": 91,
    "NumSubInst": 3,
    "NumTruncInst": 6,
    "NumXorInst": 2,
    "NumZExtInst": 33,
    "TotalBlocks": 50,
    "TotalInsts": 604,
    "TotalMemInst": 458,
    "TotalFuncs": 25,
    "ArgsPhi": 2,
    "testUnary": 336
  },
  "baseline_oz_instcount": 604,
  "knowledge_base_entry": [
    "--die",
    "--lower-expect",
    "--loop-instsimplify",
    "--mergefunc",
    "--loop-simplifycfg",
    "--licm",
    "--lower-constant-intrinsics",
    "--dce",
    "--elim-avail-extern",
    "--loop-instsimplify"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--infer-address-spaces",
          "--mldst-motion",
          "--loop-vectorize",
          "--loop-rotate",
          "--gvn-hoist",
          "--loop-unroll",
          "--slsr",
          "--loop-predication",
          "--mem2reg",
          "--name-anon-globals",
          "--add-discriminators",
          "--div-rem-pairs",
          "--reassociate",
          "--instsimplify",
          "--mergefunc",
          "--irce"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--infer-address-spaces",
      "--mldst-motion",
      "--loop-vectorize",
      "--loop-rotate",
      "--gvn-hoist",
      "--loop-unroll",
      "--slsr",
      "--loop-predication",
      "--mem2reg",
      "--name-anon-globals",
      "--add-discriminators",
      "--div-rem-pairs",
      "--reassociate",
      "--instsimplify",
      "--mergefunc",
      "--irce"
    ],
    "performance_vs_Oz": "+2.3%"
  }
}
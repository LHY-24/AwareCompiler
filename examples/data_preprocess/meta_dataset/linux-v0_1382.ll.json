{
  "program_id": "linux-v0_1382.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 58,
    "onePredOneSuc": 42,
    "onePredTwoSuc": 14,
    "oneSuccessor": 53,
    "twoPred": 16,
    "twoPredOneSuc": 5,
    "twoEach": 6,
    "twoSuccessor": 25,
    "morePreds": 5,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 110,
    "BeginPhi": 0,
    "BranchCount": 78,
    "returnInt": 25,
    "CriticalCount": 12,
    "NumEdges": 108,
    "const32Bit": 279,
    "const64Bit": 20,
    "numConstZeroes": 111,
    "numConstOnes": 129,
    "UncondBranches": 53,
    "binaryConstArg": 20,
    "NumAShrInst": 1,
    "NumAddInst": 4,
    "NumAllocaInst": 99,
    "NumAndInst": 3,
    "BlockMid": 9,
    "BlockLow": 101,
    "NumBitCastInst": 25,
    "NumBrInst": 78,
    "NumCallInst": 63,
    "NumGetElementPtrInst": 66,
    "NumICmpInst": 23,
    "NumLShrInst": 0,
    "NumLoadInst": 201,
    "NumMulInst": 0,
    "NumOrInst": 2,
    "NumPHIInst": 0,
    "NumRetInst": 31,
    "NumSExtInst": 4,
    "NumSelectInst": 0,
    "NumShlInst": 3,
    "NumStoreInst": 129,
    "NumSubInst": 1,
    "NumTruncInst": 10,
    "NumXorInst": 6,
    "NumZExtInst": 11,
    "TotalBlocks": 110,
    "TotalInsts": 762,
    "TotalMemInst": 558,
    "TotalFuncs": 51,
    "ArgsPhi": 0,
    "testUnary": 350
  },
  "baseline_oz_instcount": 764,
  "knowledge_base_entry": [
    "--prune-eh",
    "--early-cse",
    "--globalopt",
    "--mergefunc",
    "--jump-threading",
    "--dse",
    "--inline",
    "--sroa",
    "--lower-expect",
    "--mergefunc",
    "--memcpyopt",
    "--jump-threading",
    "--die",
    "--sroa",
    "--jump-threading",
    "--mem2reg",
    "--newgvn",
    "--correlated-propagation",
    "--mergefunc",
    "--aggressive-instcombine",
    "--elim-avail-extern",
    "--newgvn",
    "--nary-reassociate",
    "--dse",
    "--globalopt",
    "--lower-constant-intrinsics"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-simplifycfg",
          "--lower-widenable-condition",
          "--lower-constant-intrinsics",
          "--mergefunc",
          "--early-cse",
          "--lower-matrix-intrinsics",
          "--licm",
          "--globalopt",
          "--coro-elide",
          "--inline",
          "--functionattrs",
          "--aggressive-instcombine",
          "--loop-sink",
          "--sroa"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.0%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-simplifycfg",
      "--lower-widenable-condition",
      "--lower-constant-intrinsics",
      "--mergefunc",
      "--early-cse",
      "--lower-matrix-intrinsics",
      "--licm",
      "--globalopt",
      "--coro-elide",
      "--inline",
      "--functionattrs",
      "--aggressive-instcombine",
      "--loop-sink",
      "--sroa"
    ],
    "performance_vs_Oz": "+1.0%"
  }
}
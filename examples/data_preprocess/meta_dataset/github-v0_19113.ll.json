{
  "program_id": "github-v0_19113.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 13,
    "onePredOneSuc": 9,
    "onePredTwoSuc": 1,
    "oneSuccessor": 11,
    "twoPred": 5,
    "twoPredOneSuc": 1,
    "twoEach": 4,
    "twoSuccessor": 6,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 21,
    "BeginPhi": 0,
    "BranchCount": 17,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 23,
    "const32Bit": 32,
    "const64Bit": 25,
    "numConstZeroes": 30,
    "numConstOnes": 24,
    "UncondBranches": 11,
    "binaryConstArg": 9,
    "NumAShrInst": 0,
    "NumAddInst": 5,
    "NumAllocaInst": 13,
    "NumAndInst": 2,
    "BlockMid": 5,
    "BlockLow": 16,
    "NumBitCastInst": 4,
    "NumBrInst": 17,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 20,
    "NumICmpInst": 6,
    "NumLShrInst": 1,
    "NumLoadInst": 32,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 21,
    "NumSubInst": 0,
    "NumTruncInst": 4,
    "NumXorInst": 1,
    "NumZExtInst": 13,
    "TotalBlocks": 21,
    "TotalInsts": 154,
    "TotalMemInst": 93,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 69
  },
  "baseline_oz_instcount": 154,
  "knowledge_base_entry": [
    "--aggressive-instcombine",
    "--dce",
    "--mergefunc",
    "--dse",
    "--loop-rotate",
    "--inline",
    "--load-store-vectorizer",
    "--die",
    "--sccp",
    "--reassociate",
    "--lower-constant-intrinsics"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--reg2mem",
          "--correlated-propagation",
          "--lower-guard-intrinsic",
          "--die",
          "--loop-unroll",
          "--insert-gcov-profiling",
          "--argpromotion",
          "--speculative-execution",
          "--aggressive-instcombine",
          "--partially-inline-libcalls",
          "--tailcallelim",
          "--loop-fusion",
          "--instsimplify",
          "--coro-split",
          "--early-cse",
          "--loop-guard-widening",
          "--simple-loop-unswitch"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--reg2mem",
      "--correlated-propagation",
      "--lower-guard-intrinsic",
      "--die",
      "--loop-unroll",
      "--insert-gcov-profiling",
      "--argpromotion",
      "--speculative-execution",
      "--aggressive-instcombine",
      "--partially-inline-libcalls",
      "--tailcallelim",
      "--loop-fusion",
      "--instsimplify",
      "--coro-split",
      "--early-cse",
      "--loop-guard-widening",
      "--simple-loop-unswitch"
    ],
    "performance_vs_Oz": "+1.9%"
  }
}
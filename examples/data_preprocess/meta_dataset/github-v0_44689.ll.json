{
  "program_id": "github-v0_44689.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 8,
    "onePredOneSuc": 8,
    "onePredTwoSuc": 0,
    "oneSuccessor": 9,
    "twoPred": 2,
    "twoPredOneSuc": 0,
    "twoEach": 1,
    "twoSuccessor": 1,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 12,
    "BeginPhi": 0,
    "BranchCount": 10,
    "returnInt": 9,
    "CriticalCount": 0,
    "NumEdges": 16,
    "const32Bit": 38,
    "const64Bit": 0,
    "numConstZeroes": 9,
    "numConstOnes": 16,
    "UncondBranches": 9,
    "binaryConstArg": 19,
    "NumAShrInst": 4,
    "NumAddInst": 10,
    "NumAllocaInst": 9,
    "NumAndInst": 8,
    "BlockMid": 3,
    "BlockLow": 9,
    "NumBitCastInst": 3,
    "NumBrInst": 10,
    "NumCallInst": 11,
    "NumGetElementPtrInst": 4,
    "NumICmpInst": 1,
    "NumLShrInst": 0,
    "NumLoadInst": 41,
    "NumMulInst": 1,
    "NumOrInst": 7,
    "NumPHIInst": 0,
    "NumRetInst": 1,
    "NumSExtInst": 1,
    "NumSelectInst": 0,
    "NumShlInst": 4,
    "NumStoreInst": 12,
    "NumSubInst": 0,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 20,
    "TotalBlocks": 12,
    "TotalInsts": 150,
    "TotalMemInst": 77,
    "TotalFuncs": 7,
    "ArgsPhi": 0,
    "testUnary": 76
  },
  "baseline_oz_instcount": 150,
  "knowledge_base_entry": [
    "--loop-unswitch",
    "--jump-threading",
    "--loop-instsimplify",
    "--nary-reassociate",
    "--lower-expect",
    "--aggressive-instcombine",
    "--instsimplify",
    "--bdce",
    "--gvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--partially-inline-libcalls",
          "--forceattrs",
          "--separate-const-offset-from-gep",
          "--aggressive-instcombine",
          "--loop-guard-widening",
          "--lowerinvoke",
          "--tailcallelim",
          "--early-cse",
          "-loop-reduce",
          "--consthoist",
          "--alignment-from-assumptions"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--partially-inline-libcalls",
      "--forceattrs",
      "--separate-const-offset-from-gep",
      "--aggressive-instcombine",
      "--loop-guard-widening",
      "--lowerinvoke",
      "--tailcallelim",
      "--early-cse",
      "-loop-reduce",
      "--consthoist",
      "--alignment-from-assumptions"
    ],
    "performance_vs_Oz": "+1.3%"
  }
}
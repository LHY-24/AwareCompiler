{
  "program_id": "linux-v0_5660.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 55,
    "onePredOneSuc": 42,
    "onePredTwoSuc": 12,
    "oneSuccessor": 47,
    "twoPred": 13,
    "twoPredOneSuc": 3,
    "twoEach": 7,
    "twoSuccessor": 26,
    "morePreds": 5,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 94,
    "BeginPhi": 1,
    "BranchCount": 73,
    "returnInt": 15,
    "CriticalCount": 12,
    "NumEdges": 99,
    "const32Bit": 325,
    "const64Bit": 11,
    "numConstZeroes": 157,
    "numConstOnes": 108,
    "UncondBranches": 47,
    "binaryConstArg": 13,
    "NumAShrInst": 0,
    "NumAddInst": 4,
    "NumAllocaInst": 93,
    "NumAndInst": 2,
    "BlockMid": 10,
    "BlockLow": 85,
    "NumBitCastInst": 27,
    "NumBrInst": 73,
    "NumCallInst": 52,
    "NumGetElementPtrInst": 99,
    "NumICmpInst": 28,
    "NumLShrInst": 0,
    "NumLoadInst": 207,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 1,
    "NumRetInst": 22,
    "NumSExtInst": 1,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 118,
    "NumSubInst": 3,
    "NumTruncInst": 2,
    "NumXorInst": 5,
    "NumZExtInst": 7,
    "TotalBlocks": 95,
    "TotalInsts": 744,
    "TotalMemInst": 569,
    "TotalFuncs": 43,
    "ArgsPhi": 2,
    "testUnary": 337
  },
  "baseline_oz_instcount": 747,
  "knowledge_base_entry": [
    "--dce",
    "--correlated-propagation",
    "--early-cse-memssa",
    "--gvn",
    "--correlated-propagation",
    "--dce",
    "--aggressive-instcombine",
    "--die",
    "--dse",
    "--sroa",
    "--gvn-hoist",
    "--load-store-vectorizer",
    "--sroa",
    "--flattencfg",
    "--jump-threading",
    "--dse",
    "--sroa",
    "--gvn-hoist",
    "--load-store-vectorizer",
    "--sroa",
    "--flattencfg",
    "--aggressive-instcombine",
    "--sroa",
    "--jump-threading",
    "--dse",
    "--jump-threading",
    "--early-cse",
    "--gvn-hoist",
    "--aggressive-instcombine",
    "--simplifycfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--aggressive-instcombine",
          "--lower-expect",
          "--add-discriminators",
          "--sccp",
          "--mergeicmps",
          "--instnamer",
          "--strip-nondebug",
          "--lowerinvoke",
          "--lower-guard-intrinsic",
          "--coro-split",
          "--strip-dead-prototypes"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--aggressive-instcombine",
      "--lower-expect",
      "--add-discriminators",
      "--sccp",
      "--mergeicmps",
      "--instnamer",
      "--strip-nondebug",
      "--lowerinvoke",
      "--lower-guard-intrinsic",
      "--coro-split",
      "--strip-dead-prototypes"
    ],
    "performance_vs_Oz": "+0.5%"
  }
}
{
  "program_id": "poj104-v1_81_794.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 23,
    "onePredOneSuc": 15,
    "onePredTwoSuc": 8,
    "oneSuccessor": 18,
    "twoPred": 7,
    "twoPredOneSuc": 1,
    "twoEach": 6,
    "twoSuccessor": 14,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 35,
    "BeginPhi": 0,
    "BranchCount": 32,
    "returnInt": 7,
    "CriticalCount": 10,
    "NumEdges": 46,
    "const32Bit": 33,
    "const64Bit": 29,
    "numConstZeroes": 27,
    "numConstOnes": 13,
    "UncondBranches": 18,
    "binaryConstArg": 5,
    "NumAShrInst": 0,
    "NumAddInst": 5,
    "NumAllocaInst": 7,
    "NumAndInst": 0,
    "BlockMid": 2,
    "BlockLow": 33,
    "NumBitCastInst": 12,
    "NumBrInst": 32,
    "NumCallInst": 21,
    "NumGetElementPtrInst": 16,
    "NumICmpInst": 14,
    "NumLShrInst": 0,
    "NumLoadInst": 39,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 15,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 14,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 35,
    "TotalInsts": 178,
    "TotalMemInst": 97,
    "TotalFuncs": 10,
    "ArgsPhi": 0,
    "testUnary": 73
  },
  "baseline_oz_instcount": 137,
  "knowledge_base_entry": [
    "--partially-inline-libcalls",
    "--gvn",
    "--loop-rotate",
    "--inline",
    "--aggressive-instcombine",
    "--early-cse-memssa",
    "--loop-rotate",
    "--jump-threading",
    "--memcpyopt",
    "--instsimplify",
    "--gvn",
    "--mldst-motion",
    "--gvn-hoist",
    "--elim-avail-extern",
    "--sroa",
    "--reassociate",
    "--lower-constant-intrinsics",
    "--simplifycfg",
    "--ipsccp",
    "--gvn",
    "--dse",
    "--newgvn",
    "--memcpyopt",
    "--lower-constant-intrinsics",
    "--early-cse",
    "--instcombine",
    "--load-store-vectorizer",
    "--dce",
    "--loop-instsimplify",
    "--aggressive-instcombine",
    "--early-cse-memssa",
    "--loop-rotate",
    "--jump-threading",
    "--memcpyopt",
    "--instsimplify",
    "--gvn",
    "--mldst-motion",
    "--gvn-hoist",
    "--elim-avail-extern",
    "--sroa",
    "--reassociate",
    "--lower-constant-intrinsics",
    "--simplifycfg",
    "--ipsccp",
    "--gvn",
    "--dse",
    "--newgvn",
    "--memcpyopt",
    "--lower-constant-intrinsics",
    "--early-cse",
    "--instcombine",
    "--load-store-vectorizer",
    "--indvars",
    "--jump-threading"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--constprop",
          "--sancov",
          "--ipconstprop",
          "--jump-threading",
          "--partially-inline-libcalls",
          "--ee-instrument",
          "--attributor",
          "--slp-vectorizer",
          "--lower-matrix-intrinsics",
          "--libcalls-shrinkwrap",
          "--flattencfg",
          "--mem2reg",
          "--called-value-propagation",
          "--always-inline",
          "--loop-versioning-licm",
          "--simple-loop-unswitch",
          "--ipsccp",
          "--slsr",
          "--newgvn",
          "--die",
          "--infer-address-spaces",
          "--nary-reassociate",
          "--instcombine",
          "--instsimplify",
          "--loop-instsimplify",
          "--aggressive-instcombine",
          "--add-discriminators",
          "--inline"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+33.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--constprop",
      "--sancov",
      "--ipconstprop",
      "--jump-threading",
      "--partially-inline-libcalls",
      "--ee-instrument",
      "--attributor",
      "--slp-vectorizer",
      "--lower-matrix-intrinsics",
      "--libcalls-shrinkwrap",
      "--flattencfg",
      "--mem2reg",
      "--called-value-propagation",
      "--always-inline",
      "--loop-versioning-licm",
      "--simple-loop-unswitch",
      "--ipsccp",
      "--slsr",
      "--newgvn",
      "--die",
      "--infer-address-spaces",
      "--nary-reassociate",
      "--instcombine",
      "--instsimplify",
      "--loop-instsimplify",
      "--aggressive-instcombine",
      "--add-discriminators",
      "--inline"
    ],
    "performance_vs_Oz": "+33.6%"
  }
}
{
  "program_id": "github-v0_40432.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 11,
    "onePredOneSuc": 7,
    "onePredTwoSuc": 1,
    "oneSuccessor": 9,
    "twoPred": 4,
    "twoPredOneSuc": 1,
    "twoEach": 3,
    "twoSuccessor": 5,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 18,
    "BeginPhi": 0,
    "BranchCount": 14,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 19,
    "const32Bit": 32,
    "const64Bit": 14,
    "numConstZeroes": 20,
    "numConstOnes": 19,
    "UncondBranches": 9,
    "binaryConstArg": 6,
    "NumAShrInst": 0,
    "NumAddInst": 5,
    "NumAllocaInst": 12,
    "NumAndInst": 0,
    "BlockMid": 3,
    "BlockLow": 15,
    "NumBitCastInst": 0,
    "NumBrInst": 14,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 12,
    "NumICmpInst": 5,
    "NumLShrInst": 0,
    "NumLoadInst": 24,
    "NumMulInst": 1,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 16,
    "NumSubInst": 1,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 4,
    "TotalBlocks": 18,
    "TotalInsts": 110,
    "TotalMemInst": 71,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 45
  },
  "baseline_oz_instcount": 110,
  "knowledge_base_entry": [
    "--instcombine",
    "--flattencfg",
    "--aggressive-instcombine",
    "--loop-rotate",
    "--early-cse-memssa",
    "--simplifycfg",
    "--memcpyopt",
    "--mem2reg",
    "--gvn",
    "--jump-threading",
    "--sccp",
    "--dce",
    "--licm",
    "--ipsccp",
    "--gvn-hoist"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--partially-inline-libcalls",
          "--loop-load-elim",
          "--sroa",
          "--loop-vectorize",
          "--slp-vectorizer",
          "--licm",
          "--loop-versioning-licm",
          "--loop-versioning",
          "--instcombine",
          "--inferattrs",
          "--consthoist",
          "--lower-guard-intrinsic",
          "--strip",
          "--add-discriminators",
          "--die",
          "--aggressive-instcombine",
          "--loop-deletion",
          "--loop-predication",
          "--loop-unroll-and-jam",
          "--coro-early"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--partially-inline-libcalls",
      "--loop-load-elim",
      "--sroa",
      "--loop-vectorize",
      "--slp-vectorizer",
      "--licm",
      "--loop-versioning-licm",
      "--loop-versioning",
      "--instcombine",
      "--inferattrs",
      "--consthoist",
      "--lower-guard-intrinsic",
      "--strip",
      "--add-discriminators",
      "--die",
      "--aggressive-instcombine",
      "--loop-deletion",
      "--loop-predication",
      "--loop-unroll-and-jam",
      "--coro-early"
    ],
    "performance_vs_Oz": "+1.8%"
  }
}
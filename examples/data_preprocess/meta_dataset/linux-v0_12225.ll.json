{
  "program_id": "linux-v0_12225.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 23,
    "onePredOneSuc": 17,
    "onePredTwoSuc": 6,
    "oneSuccessor": 21,
    "twoPred": 10,
    "twoPredOneSuc": 3,
    "twoEach": 4,
    "twoSuccessor": 14,
    "morePreds": 2,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 43,
    "BeginPhi": 1,
    "BranchCount": 35,
    "returnInt": 9,
    "CriticalCount": 8,
    "NumEdges": 49,
    "const32Bit": 94,
    "const64Bit": 15,
    "numConstZeroes": 30,
    "numConstOnes": 46,
    "UncondBranches": 21,
    "binaryConstArg": 16,
    "NumAShrInst": 3,
    "NumAddInst": 6,
    "NumAllocaInst": 36,
    "NumAndInst": 5,
    "BlockMid": 3,
    "BlockLow": 41,
    "NumBitCastInst": 1,
    "NumBrInst": 35,
    "NumCallInst": 16,
    "NumGetElementPtrInst": 24,
    "NumICmpInst": 14,
    "NumLShrInst": 0,
    "NumLoadInst": 83,
    "NumMulInst": 0,
    "NumOrInst": 2,
    "NumPHIInst": 1,
    "NumRetInst": 9,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 48,
    "NumSubInst": 2,
    "NumTruncInst": 1,
    "NumXorInst": 0,
    "NumZExtInst": 12,
    "TotalBlocks": 44,
    "TotalInsts": 301,
    "TotalMemInst": 207,
    "TotalFuncs": 13,
    "ArgsPhi": 2,
    "testUnary": 135
  },
  "baseline_oz_instcount": 301,
  "knowledge_base_entry": [
    "--deadargelim",
    "--mergefunc",
    "--gvn-hoist",
    "--bdce",
    "--jump-threading",
    "--lower-constant-intrinsics",
    "--dse"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--mldst-motion",
          "--sroa",
          "--newgvn",
          "--canonicalize-aliases",
          "--simple-loop-unswitch",
          "--loop-interchange",
          "--globaldce",
          "--inject-tli-mappings",
          "--loop-simplify",
          "--add-discriminators",
          "--loop-unroll",
          "--alignment-from-assumptions",
          "--deadargelim",
          "--mergefunc",
          "--early-cse-memssa",
          "--mergeicmps",
          "--ipsccp",
          "--instsimplify",
          "--lower-widenable-condition",
          "--lowerswitch",
          "-loop-reduce",
          "--consthoist",
          "--correlated-propagation",
          "--libcalls-shrinkwrap",
          "--loop-predication",
          "--gvn-hoist",
          "--aggressive-instcombine",
          "--constmerge"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--mldst-motion",
      "--sroa",
      "--newgvn",
      "--canonicalize-aliases",
      "--simple-loop-unswitch",
      "--loop-interchange",
      "--globaldce",
      "--inject-tli-mappings",
      "--loop-simplify",
      "--add-discriminators",
      "--loop-unroll",
      "--alignment-from-assumptions",
      "--deadargelim",
      "--mergefunc",
      "--early-cse-memssa",
      "--mergeicmps",
      "--ipsccp",
      "--instsimplify",
      "--lower-widenable-condition",
      "--lowerswitch",
      "-loop-reduce",
      "--consthoist",
      "--correlated-propagation",
      "--libcalls-shrinkwrap",
      "--loop-predication",
      "--gvn-hoist",
      "--aggressive-instcombine",
      "--constmerge"
    ],
    "performance_vs_Oz": "+3.7%"
  }
}
{
  "program_id": "linux-v0_4092.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 6,
    "onePredOneSuc": 4,
    "onePredTwoSuc": 2,
    "oneSuccessor": 6,
    "twoPred": 4,
    "twoPredOneSuc": 1,
    "twoEach": 1,
    "twoSuccessor": 4,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 19,
    "BeginPhi": 0,
    "BranchCount": 10,
    "returnInt": 5,
    "CriticalCount": 3,
    "NumEdges": 14,
    "const32Bit": 49,
    "const64Bit": 9,
    "numConstZeroes": 19,
    "numConstOnes": 24,
    "UncondBranches": 6,
    "binaryConstArg": 6,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 20,
    "NumAndInst": 3,
    "BlockMid": 4,
    "BlockLow": 15,
    "NumBitCastInst": 0,
    "NumBrInst": 10,
    "NumCallInst": 15,
    "NumGetElementPtrInst": 12,
    "NumICmpInst": 6,
    "NumLShrInst": 0,
    "NumLoadInst": 33,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 9,
    "NumSExtInst": 1,
    "NumSelectInst": 1,
    "NumShlInst": 0,
    "NumStoreInst": 24,
    "NumSubInst": 0,
    "NumTruncInst": 1,
    "NumXorInst": 3,
    "NumZExtInst": 2,
    "TotalBlocks": 19,
    "TotalInsts": 150,
    "TotalMemInst": 104,
    "TotalFuncs": 18,
    "ArgsPhi": 0,
    "testUnary": 66
  },
  "baseline_oz_instcount": 151,
  "knowledge_base_entry": [
    "--partially-inline-libcalls",
    "--gvn",
    "--mldst-motion",
    "--simplifycfg",
    "--elim-avail-extern",
    "--ipsccp",
    "--loweratomic",
    "--early-cse",
    "--instsimplify",
    "--mem2reg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--mem2reg",
          "--mergereturn",
          "--scalarizer",
          "--strip-dead-prototypes",
          "--rewrite-statepoints-for-gc",
          "--lower-widenable-condition",
          "--aggressive-instcombine",
          "--lowerswitch",
          "--strip",
          "--coro-split",
          "--ee-instrument",
          "--lowerinvoke"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--mem2reg",
      "--mergereturn",
      "--scalarizer",
      "--strip-dead-prototypes",
      "--rewrite-statepoints-for-gc",
      "--lower-widenable-condition",
      "--aggressive-instcombine",
      "--lowerswitch",
      "--strip",
      "--coro-split",
      "--ee-instrument",
      "--lowerinvoke"
    ],
    "performance_vs_Oz": "+0.7%"
  }
}
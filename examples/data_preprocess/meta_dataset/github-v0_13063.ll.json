{
  "program_id": "github-v0_13063.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 5,
    "onePredOneSuc": 4,
    "onePredTwoSuc": 0,
    "oneSuccessor": 5,
    "twoPred": 2,
    "twoPredOneSuc": 0,
    "twoEach": 2,
    "twoSuccessor": 2,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 9,
    "BeginPhi": 0,
    "BranchCount": 7,
    "returnInt": 1,
    "CriticalCount": 0,
    "NumEdges": 9,
    "const32Bit": 27,
    "const64Bit": 4,
    "numConstZeroes": 13,
    "numConstOnes": 13,
    "UncondBranches": 5,
    "binaryConstArg": 2,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 10,
    "NumAndInst": 0,
    "BlockMid": 4,
    "BlockLow": 5,
    "NumBitCastInst": 0,
    "NumBrInst": 7,
    "NumCallInst": 3,
    "NumGetElementPtrInst": 10,
    "NumICmpInst": 2,
    "NumLShrInst": 0,
    "NumLoadInst": 24,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 2,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 16,
    "NumSubInst": 1,
    "NumTruncInst": 1,
    "NumXorInst": 1,
    "NumZExtInst": 2,
    "TotalBlocks": 9,
    "TotalInsts": 82,
    "TotalMemInst": 63,
    "TotalFuncs": 5,
    "ArgsPhi": 0,
    "testUnary": 39
  },
  "baseline_oz_instcount": 82,
  "knowledge_base_entry": [
    "--globalopt",
    "--globaldce",
    "--aggressive-instcombine",
    "--loop-instsimplify",
    "--lower-constant-intrinsics",
    "--simplifycfg",
    "--sccp"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--mergereturn",
          "--scalarizer",
          "--always-inline",
          "--coro-early",
          "--strip-dead-prototypes",
          "--callsite-splitting",
          "--loop-distribute",
          "--aggressive-instcombine",
          "--rpo-functionattrs",
          "--loop-versioning",
          "--lower-widenable-condition",
          "--mergeicmps",
          "--loop-data-prefetch",
          "--infer-address-spaces",
          "--forceattrs",
          "--sccp"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--mergereturn",
      "--scalarizer",
      "--always-inline",
      "--coro-early",
      "--strip-dead-prototypes",
      "--callsite-splitting",
      "--loop-distribute",
      "--aggressive-instcombine",
      "--rpo-functionattrs",
      "--loop-versioning",
      "--lower-widenable-condition",
      "--mergeicmps",
      "--loop-data-prefetch",
      "--infer-address-spaces",
      "--forceattrs",
      "--sccp"
    ],
    "performance_vs_Oz": "+3.7%"
  }
}
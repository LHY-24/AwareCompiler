{
  "program_id": "github-v0_2202.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 39,
    "onePredOneSuc": 25,
    "onePredTwoSuc": 13,
    "oneSuccessor": 39,
    "twoPred": 23,
    "twoPredOneSuc": 13,
    "twoEach": 10,
    "twoSuccessor": 23,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 63,
    "BeginPhi": 0,
    "BranchCount": 62,
    "returnInt": 2,
    "CriticalCount": 11,
    "NumEdges": 85,
    "const32Bit": 59,
    "const64Bit": 5,
    "numConstZeroes": 5,
    "numConstOnes": 39,
    "UncondBranches": 39,
    "binaryConstArg": 25,
    "NumAShrInst": 0,
    "NumAddInst": 13,
    "NumAllocaInst": 22,
    "NumAndInst": 0,
    "BlockMid": 8,
    "BlockLow": 55,
    "NumBitCastInst": 3,
    "NumBrInst": 62,
    "NumCallInst": 10,
    "NumGetElementPtrInst": 5,
    "NumICmpInst": 16,
    "NumLShrInst": 0,
    "NumLoadInst": 131,
    "NumMulInst": 16,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 1,
    "NumSExtInst": 6,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 60,
    "NumSubInst": 5,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 63,
    "TotalInsts": 406,
    "TotalMemInst": 228,
    "TotalFuncs": 5,
    "ArgsPhi": 0,
    "testUnary": 182
  },
  "baseline_oz_instcount": 407,
  "knowledge_base_entry": [
    "--aggressive-instcombine",
    "--early-cse",
    "--inline",
    "--bdce",
    "--mem2reg",
    "--gvn",
    "--aggressive-instcombine",
    "--loweratomic",
    "--globalopt",
    "--gvn-hoist",
    "--gvn",
    "--lower-expect",
    "--mem2reg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--lower-matrix-intrinsics",
          "--loop-distribute",
          "--mem2reg",
          "--loop-data-prefetch",
          "--loop-versioning",
          "--coro-cleanup",
          "--loop-vectorize",
          "--correlated-propagation",
          "--consthoist",
          "--called-value-propagation"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--lower-matrix-intrinsics",
      "--loop-distribute",
      "--mem2reg",
      "--loop-data-prefetch",
      "--loop-versioning",
      "--coro-cleanup",
      "--loop-vectorize",
      "--correlated-propagation",
      "--consthoist",
      "--called-value-propagation"
    ],
    "performance_vs_Oz": "+0.2%"
  }
}
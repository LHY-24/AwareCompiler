{
  "program_id": "linux-v0_4416.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 60,
    "onePredOneSuc": 46,
    "onePredTwoSuc": 12,
    "oneSuccessor": 56,
    "twoPred": 14,
    "twoPredOneSuc": 4,
    "twoEach": 3,
    "twoSuccessor": 21,
    "morePreds": 3,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 101,
    "BeginPhi": 1,
    "BranchCount": 76,
    "returnInt": 22,
    "CriticalCount": 6,
    "NumEdges": 98,
    "const32Bit": 284,
    "const64Bit": 17,
    "numConstZeroes": 132,
    "numConstOnes": 105,
    "UncondBranches": 56,
    "binaryConstArg": 20,
    "NumAShrInst": 1,
    "NumAddInst": 3,
    "NumAllocaInst": 82,
    "NumAndInst": 2,
    "BlockMid": 11,
    "BlockLow": 91,
    "NumBitCastInst": 24,
    "NumBrInst": 76,
    "NumCallInst": 48,
    "NumGetElementPtrInst": 80,
    "NumICmpInst": 24,
    "NumLShrInst": 1,
    "NumLoadInst": 171,
    "NumMulInst": 0,
    "NumOrInst": 6,
    "NumPHIInst": 1,
    "NumRetInst": 25,
    "NumSExtInst": 3,
    "NumSelectInst": 2,
    "NumShlInst": 2,
    "NumStoreInst": 117,
    "NumSubInst": 0,
    "NumTruncInst": 10,
    "NumXorInst": 9,
    "NumZExtInst": 15,
    "TotalBlocks": 102,
    "TotalInsts": 708,
    "TotalMemInst": 498,
    "TotalFuncs": 44,
    "ArgsPhi": 2,
    "testUnary": 309
  },
  "baseline_oz_instcount": 708,
  "knowledge_base_entry": [
    "--bdce",
    "--loop-instsimplify",
    "--licm",
    "--sroa",
    "--prune-eh",
    "--lower-expect",
    "--newgvn",
    "--licm",
    "--aggressive-instcombine",
    "--ipsccp",
    "--sroa",
    "--load-store-vectorizer",
    "--simplifycfg",
    "--lower-expect",
    "--mergefunc",
    "--aggressive-instcombine",
    "--reassociate",
    "--reassociate",
    "--ipsccp",
    "--early-cse-memssa",
    "--newgvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--mergeicmps",
          "-loop-reduce",
          "--sccp",
          "--lower-constant-intrinsics",
          "--licm",
          "--jump-threading",
          "--aggressive-instcombine",
          "--elim-avail-extern",
          "--mergefunc",
          "--gvn",
          "--loop-rotate"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.0%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--mergeicmps",
      "-loop-reduce",
      "--sccp",
      "--lower-constant-intrinsics",
      "--licm",
      "--jump-threading",
      "--aggressive-instcombine",
      "--elim-avail-extern",
      "--mergefunc",
      "--gvn",
      "--loop-rotate"
    ],
    "performance_vs_Oz": "+1.0%"
  }
}
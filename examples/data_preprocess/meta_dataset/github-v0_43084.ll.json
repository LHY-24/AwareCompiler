{
  "program_id": "github-v0_43084.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 5,
    "onePredOneSuc": 3,
    "onePredTwoSuc": 2,
    "oneSuccessor": 3,
    "twoPred": 0,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 3,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 7,
    "BeginPhi": 0,
    "BranchCount": 6,
    "returnInt": 2,
    "CriticalCount": 1,
    "NumEdges": 9,
    "const32Bit": 3,
    "const64Bit": 2,
    "numConstZeroes": 1,
    "numConstOnes": 1,
    "UncondBranches": 3,
    "binaryConstArg": 3,
    "NumAShrInst": 1,
    "NumAddInst": 3,
    "NumAllocaInst": 0,
    "NumAndInst": 1,
    "BlockMid": 0,
    "BlockLow": 7,
    "NumBitCastInst": 4,
    "NumBrInst": 6,
    "NumCallInst": 2,
    "NumGetElementPtrInst": 6,
    "NumICmpInst": 4,
    "NumLShrInst": 0,
    "NumLoadInst": 3,
    "NumMulInst": 2,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 1,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 3,
    "NumSubInst": 1,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 7,
    "TotalInsts": 43,
    "TotalMemInst": 14,
    "TotalFuncs": 2,
    "ArgsPhi": 0,
    "testUnary": 12
  },
  "baseline_oz_instcount": 43,
  "knowledge_base_entry": [
    "--nary-reassociate",
    "--gvn-hoist",
    "--inline",
    "--globalopt",
    "--instsimplify",
    "--simplifycfg",
    "--loop-instsimplify",
    "--instcombine",
    "--die",
    "--ipsccp",
    "--aggressive-instcombine",
    "--dce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--lowerinvoke",
          "--sroa",
          "--lowerswitch",
          "--argpromotion",
          "--break-crit-edges",
          "--canonicalize-aliases",
          "--loop-predication",
          "--forceattrs",
          "--loop-idiom",
          "--gvn-hoist",
          "--sccp",
          "--jump-threading",
          "--loweratomic",
          "--loop-fusion",
          "--prune-eh",
          "--bdce",
          "--instsimplify",
          "--lcssa",
          "--globaldce",
          "--deadargelim",
          "--licm",
          "--speculative-execution",
          "--lower-widenable-condition",
          "--pgo-memop-opt",
          "--loop-reroll",
          "--constmerge",
          "--constprop"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+7.0%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--lowerinvoke",
      "--sroa",
      "--lowerswitch",
      "--argpromotion",
      "--break-crit-edges",
      "--canonicalize-aliases",
      "--loop-predication",
      "--forceattrs",
      "--loop-idiom",
      "--gvn-hoist",
      "--sccp",
      "--jump-threading",
      "--loweratomic",
      "--loop-fusion",
      "--prune-eh",
      "--bdce",
      "--instsimplify",
      "--lcssa",
      "--globaldce",
      "--deadargelim",
      "--licm",
      "--speculative-execution",
      "--lower-widenable-condition",
      "--pgo-memop-opt",
      "--loop-reroll",
      "--constmerge",
      "--constprop"
    ],
    "performance_vs_Oz": "+7.0%"
  }
}
{
  "program_id": "linux-v0_2446.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 24,
    "onePredOneSuc": 10,
    "onePredTwoSuc": 14,
    "oneSuccessor": 19,
    "twoPred": 10,
    "twoPredOneSuc": 9,
    "twoEach": 1,
    "twoSuccessor": 17,
    "morePreds": 3,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 41,
    "BeginPhi": 0,
    "BranchCount": 36,
    "returnInt": 1,
    "CriticalCount": 18,
    "NumEdges": 61,
    "const32Bit": 61,
    "const64Bit": 11,
    "numConstZeroes": 15,
    "numConstOnes": 15,
    "UncondBranches": 19,
    "binaryConstArg": 2,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 11,
    "NumAndInst": 1,
    "BlockMid": 3,
    "BlockLow": 38,
    "NumBitCastInst": 0,
    "NumBrInst": 36,
    "NumCallInst": 2,
    "NumGetElementPtrInst": 15,
    "NumICmpInst": 19,
    "NumLShrInst": 0,
    "NumLoadInst": 61,
    "NumMulInst": 5,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 4,
    "NumSExtInst": 15,
    "NumSelectInst": 2,
    "NumShlInst": 0,
    "NumStoreInst": 34,
    "NumSubInst": 0,
    "NumTruncInst": 7,
    "NumXorInst": 0,
    "NumZExtInst": 3,
    "TotalBlocks": 41,
    "TotalInsts": 216,
    "TotalMemInst": 123,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 97
  },
  "baseline_oz_instcount": 216,
  "knowledge_base_entry": [
    "--globaldce",
    "--mergefunc",
    "--correlated-propagation",
    "--early-cse",
    "--slp-vectorizer",
    "--loop-reroll",
    "--instsimplify",
    "--simplifycfg",
    "--lower-constant-intrinsics",
    "--lower-expect",
    "--load-store-vectorizer",
    "--loop-instsimplify",
    "--nary-reassociate",
    "--sroa",
    "--sccp",
    "--loop-simplifycfg",
    "--dce",
    "--die",
    "--aggressive-instcombine"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--lowerinvoke",
          "--loop-fusion",
          "--strip-dead-prototypes",
          "--add-discriminators",
          "--loop-idiom",
          "--redundant-dbg-inst-elim",
          "--strip-nondebug",
          "--gvn-hoist",
          "--cross-dso-cfi",
          "--sroa",
          "--coro-elide",
          "--constprop",
          "--loop-unswitch",
          "--loweratomic",
          "--licm",
          "--simple-loop-unswitch",
          "--lower-widenable-condition",
          "--barrier",
          "--sancov",
          "--lower-guard-intrinsic",
          "--ipconstprop",
          "--inferattrs",
          "--coro-early",
          "--aggressive-instcombine",
          "--bdce",
          "--instsimplify",
          "--die",
          "--early-cse"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+6.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--lowerinvoke",
      "--loop-fusion",
      "--strip-dead-prototypes",
      "--add-discriminators",
      "--loop-idiom",
      "--redundant-dbg-inst-elim",
      "--strip-nondebug",
      "--gvn-hoist",
      "--cross-dso-cfi",
      "--sroa",
      "--coro-elide",
      "--constprop",
      "--loop-unswitch",
      "--loweratomic",
      "--licm",
      "--simple-loop-unswitch",
      "--lower-widenable-condition",
      "--barrier",
      "--sancov",
      "--lower-guard-intrinsic",
      "--ipconstprop",
      "--inferattrs",
      "--coro-early",
      "--aggressive-instcombine",
      "--bdce",
      "--instsimplify",
      "--die",
      "--early-cse"
    ],
    "performance_vs_Oz": "+6.5%"
  }
}
{
  "program_id": "github-v0_42802.ll",
  "autophase_features": {
    "BBNumArgsHi": 2,
    "BBNumArgsLo": 3,
    "onePred": 9,
    "onePredOneSuc": 6,
    "onePredTwoSuc": 2,
    "oneSuccessor": 9,
    "twoPred": 8,
    "twoPredOneSuc": 2,
    "twoEach": 3,
    "twoSuccessor": 8,
    "morePreds": 0,
    "BB03Phi": 5,
    "BBHiPhi": 0,
    "BBNoPhi": 20,
    "BeginPhi": 5,
    "BranchCount": 17,
    "returnInt": 0,
    "CriticalCount": 7,
    "NumEdges": 25,
    "const32Bit": 174,
    "const64Bit": 129,
    "numConstZeroes": 110,
    "numConstOnes": 36,
    "UncondBranches": 9,
    "binaryConstArg": 28,
    "NumAShrInst": 4,
    "NumAddInst": 7,
    "NumAllocaInst": 0,
    "NumAndInst": 0,
    "BlockMid": 7,
    "BlockLow": 18,
    "NumBitCastInst": 0,
    "NumBrInst": 17,
    "NumCallInst": 0,
    "NumGetElementPtrInst": 88,
    "NumICmpInst": 9,
    "NumLShrInst": 0,
    "NumLoadInst": 45,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 9,
    "NumRetInst": 8,
    "NumSExtInst": 5,
    "NumSelectInst": 0,
    "NumShlInst": 12,
    "NumStoreInst": 67,
    "NumSubInst": 0,
    "NumTruncInst": 1,
    "NumXorInst": 26,
    "NumZExtInst": 5,
    "TotalBlocks": 25,
    "TotalInsts": 306,
    "TotalMemInst": 200,
    "TotalFuncs": 8,
    "ArgsPhi": 18,
    "testUnary": 57
  },
  "baseline_oz_instcount": 301,
  "knowledge_base_entry": [
    "--loop-load-elim",
    "--newgvn",
    "--sroa",
    "--licm",
    "--die",
    "--sccp",
    "--loop-simplifycfg",
    "--nary-reassociate",
    "--simplifycfg",
    "--mem2reg",
    "--lower-expect",
    "--elim-avail-extern",
    "--gvn-hoist",
    "--dse",
    "--globalopt",
    "--lower-expect",
    "--slp-vectorizer",
    "--die",
    "--sccp",
    "--die",
    "--loop-instsimplify",
    "--inline",
    "--sroa",
    "--elim-avail-extern",
    "--bdce",
    "--licm",
    "--simplifycfg",
    "--instcombine",
    "--sccp",
    "--early-cse",
    "--ipsccp"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-rotate",
          "--simple-loop-unswitch",
          "--nary-reassociate",
          "--mem2reg",
          "--loop-vectorize",
          "--slsr",
          "--gvn",
          "--attributor",
          "--mergeicmps",
          "--instnamer",
          "--loop-simplify",
          "--loop-unroll-and-jam",
          "--instcombine",
          "--constprop",
          "--loop-versioning-licm",
          "--scalarizer",
          "--correlated-propagation"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-rotate",
      "--simple-loop-unswitch",
      "--nary-reassociate",
      "--mem2reg",
      "--loop-vectorize",
      "--slsr",
      "--gvn",
      "--attributor",
      "--mergeicmps",
      "--instnamer",
      "--loop-simplify",
      "--loop-unroll-and-jam",
      "--instcombine",
      "--constprop",
      "--loop-versioning-licm",
      "--scalarizer",
      "--correlated-propagation"
    ],
    "performance_vs_Oz": "+0.3%"
  }
}
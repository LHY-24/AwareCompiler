{
  "program_id": "github-v0_38268.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 68,
    "onePredOneSuc": 35,
    "onePredTwoSuc": 29,
    "oneSuccessor": 60,
    "twoPred": 35,
    "twoPredOneSuc": 21,
    "twoEach": 10,
    "twoSuccessor": 46,
    "morePreds": 4,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 118,
    "BeginPhi": 0,
    "BranchCount": 106,
    "returnInt": 35,
    "CriticalCount": 24,
    "NumEdges": 152,
    "const32Bit": 198,
    "const64Bit": 22,
    "numConstZeroes": 74,
    "numConstOnes": 75,
    "UncondBranches": 60,
    "binaryConstArg": 18,
    "NumAShrInst": 0,
    "NumAddInst": 14,
    "NumAllocaInst": 34,
    "NumAndInst": 0,
    "BlockMid": 6,
    "BlockLow": 112,
    "NumBitCastInst": 3,
    "NumBrInst": 106,
    "NumCallInst": 52,
    "NumGetElementPtrInst": 69,
    "NumICmpInst": 46,
    "NumLShrInst": 0,
    "NumLoadInst": 212,
    "NumMulInst": 2,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 11,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 80,
    "NumSubInst": 5,
    "NumTruncInst": 1,
    "NumXorInst": 0,
    "NumZExtInst": 3,
    "TotalBlocks": 118,
    "TotalInsts": 644,
    "TotalMemInst": 447,
    "TotalFuncs": 25,
    "ArgsPhi": 0,
    "testUnary": 256
  },
  "baseline_oz_instcount": 648,
  "knowledge_base_entry": [
    "--inline",
    "--aggressive-instcombine",
    "--adce",
    "--dce",
    "--early-cse-memssa",
    "--instcombine",
    "--aggressive-instcombine",
    "--mergefunc",
    "--bdce",
    "--early-cse",
    "--correlated-propagation",
    "--jump-threading"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--mergeicmps",
          "--float2int",
          "--coro-early",
          "--strip-debug-declare",
          "--flattencfg",
          "--add-discriminators",
          "--lowerinvoke",
          "--instcombine",
          "--forceattrs",
          "--callsite-splitting",
          "--memcpyopt",
          "--simplifycfg",
          "--lower-constant-intrinsics",
          "--gvn",
          "--gvn-hoist",
          "--consthoist",
          "--rpo-functionattrs"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--mergeicmps",
      "--float2int",
      "--coro-early",
      "--strip-debug-declare",
      "--flattencfg",
      "--add-discriminators",
      "--lowerinvoke",
      "--instcombine",
      "--forceattrs",
      "--callsite-splitting",
      "--memcpyopt",
      "--simplifycfg",
      "--lower-constant-intrinsics",
      "--gvn",
      "--gvn-hoist",
      "--consthoist",
      "--rpo-functionattrs"
    ],
    "performance_vs_Oz": "+0.6%"
  }
}
{
  "program_id": "linux-v0_10573.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 42,
    "onePredOneSuc": 31,
    "onePredTwoSuc": 8,
    "oneSuccessor": 39,
    "twoPred": 8,
    "twoPredOneSuc": 2,
    "twoEach": 1,
    "twoSuccessor": 14,
    "morePreds": 5,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 85,
    "BeginPhi": 1,
    "BranchCount": 53,
    "returnInt": 21,
    "CriticalCount": 8,
    "NumEdges": 77,
    "const32Bit": 281,
    "const64Bit": 13,
    "numConstZeroes": 112,
    "numConstOnes": 102,
    "UncondBranches": 39,
    "binaryConstArg": 8,
    "NumAShrInst": 2,
    "NumAddInst": 0,
    "NumAllocaInst": 82,
    "NumAndInst": 3,
    "BlockMid": 10,
    "BlockLow": 76,
    "NumBitCastInst": 39,
    "NumBrInst": 53,
    "NumCallInst": 59,
    "NumGetElementPtrInst": 81,
    "NumICmpInst": 16,
    "NumLShrInst": 0,
    "NumLoadInst": 187,
    "NumMulInst": 0,
    "NumOrInst": 2,
    "NumPHIInst": 1,
    "NumRetInst": 31,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 109,
    "NumSubInst": 0,
    "NumTruncInst": 9,
    "NumXorInst": 2,
    "NumZExtInst": 9,
    "TotalBlocks": 86,
    "TotalInsts": 694,
    "TotalMemInst": 518,
    "TotalFuncs": 47,
    "ArgsPhi": 2,
    "testUnary": 332
  },
  "baseline_oz_instcount": 694,
  "knowledge_base_entry": [
    "--lower-expect",
    "--instsimplify",
    "--load-store-vectorizer",
    "--aggressive-instcombine",
    "--lower-expect",
    "--sroa",
    "--globalopt",
    "--licm",
    "--mergefunc",
    "--newgvn",
    "--instcombine",
    "--sccp"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-unroll",
          "--separate-const-offset-from-gep",
          "--early-cse-memssa",
          "--infer-address-spaces",
          "--loop-unroll-and-jam",
          "--loop-distribute",
          "--partially-inline-libcalls",
          "--inject-tli-mappings",
          "--loop-idiom",
          "--pgo-memop-opt",
          "--name-anon-globals",
          "--aggressive-instcombine"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-unroll",
      "--separate-const-offset-from-gep",
      "--early-cse-memssa",
      "--infer-address-spaces",
      "--loop-unroll-and-jam",
      "--loop-distribute",
      "--partially-inline-libcalls",
      "--inject-tli-mappings",
      "--loop-idiom",
      "--pgo-memop-opt",
      "--name-anon-globals",
      "--aggressive-instcombine"
    ],
    "performance_vs_Oz": "+0.3%"
  }
}
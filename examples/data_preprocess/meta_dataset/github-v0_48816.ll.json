{
  "program_id": "github-v0_48816.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 14,
    "onePredOneSuc": 9,
    "onePredTwoSuc": 3,
    "oneSuccessor": 12,
    "twoPred": 6,
    "twoPredOneSuc": 3,
    "twoEach": 2,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 23,
    "BeginPhi": 0,
    "BranchCount": 19,
    "returnInt": 4,
    "CriticalCount": 1,
    "NumEdges": 26,
    "const32Bit": 39,
    "const64Bit": 35,
    "numConstZeroes": 38,
    "numConstOnes": 23,
    "UncondBranches": 12,
    "binaryConstArg": 18,
    "NumAShrInst": 2,
    "NumAddInst": 3,
    "NumAllocaInst": 11,
    "NumAndInst": 6,
    "BlockMid": 3,
    "BlockLow": 20,
    "NumBitCastInst": 0,
    "NumBrInst": 19,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 19,
    "NumICmpInst": 7,
    "NumLShrInst": 1,
    "NumLoadInst": 27,
    "NumMulInst": 0,
    "NumOrInst": 4,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 6,
    "NumSelectInst": 0,
    "NumShlInst": 4,
    "NumStoreInst": 16,
    "NumSubInst": 0,
    "NumTruncInst": 9,
    "NumXorInst": 1,
    "NumZExtInst": 13,
    "TotalBlocks": 23,
    "TotalInsts": 159,
    "TotalMemInst": 80,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 66
  },
  "baseline_oz_instcount": 159,
  "knowledge_base_entry": [
    "--functionattrs",
    "--early-cse",
    "--loop-reroll",
    "--memcpyopt",
    "--inline",
    "--aggressive-instcombine",
    "--lower-expect",
    "--instcombine",
    "--mergefunc",
    "--early-cse-memssa",
    "--aggressive-instcombine",
    "--instsimplify",
    "--load-store-vectorizer",
    "--inline",
    "--loop-simplifycfg",
    "--die",
    "--ipsccp"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--globalsplit",
          "--lcssa",
          "--always-inline",
          "--early-cse-memssa",
          "--forceattrs",
          "--loop-versioning",
          "--loop-load-elim",
          "--post-inline-ee-instrument",
          "--loop-deletion",
          "--loop-unswitch",
          "--sink",
          "--loop-versioning-licm",
          "--sroa",
          "--lower-guard-intrinsic",
          "--loop-unroll",
          "--instsimplify",
          "--inject-tli-mappings",
          "--early-cse",
          "--elim-avail-extern",
          "--aggressive-instcombine",
          "--strip-dead-prototypes",
          "--dce",
          "--ipconstprop",
          "--coro-early",
          "--speculative-execution",
          "--attributor"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--globalsplit",
      "--lcssa",
      "--always-inline",
      "--early-cse-memssa",
      "--forceattrs",
      "--loop-versioning",
      "--loop-load-elim",
      "--post-inline-ee-instrument",
      "--loop-deletion",
      "--loop-unswitch",
      "--sink",
      "--loop-versioning-licm",
      "--sroa",
      "--lower-guard-intrinsic",
      "--loop-unroll",
      "--instsimplify",
      "--inject-tli-mappings",
      "--early-cse",
      "--elim-avail-extern",
      "--aggressive-instcombine",
      "--strip-dead-prototypes",
      "--dce",
      "--ipconstprop",
      "--coro-early",
      "--speculative-execution",
      "--attributor"
    ],
    "performance_vs_Oz": "+3.8%"
  }
}
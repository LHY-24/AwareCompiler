{
  "program_id": "github-v0_9188.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 18,
    "onePredOneSuc": 14,
    "onePredTwoSuc": 2,
    "oneSuccessor": 16,
    "twoPred": 5,
    "twoPredOneSuc": 0,
    "twoEach": 3,
    "twoSuccessor": 9,
    "morePreds": 2,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 34,
    "BeginPhi": 1,
    "BranchCount": 25,
    "returnInt": 5,
    "CriticalCount": 1,
    "NumEdges": 34,
    "const32Bit": 60,
    "const64Bit": 8,
    "numConstZeroes": 12,
    "numConstOnes": 49,
    "UncondBranches": 16,
    "binaryConstArg": 4,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 47,
    "NumAndInst": 0,
    "BlockMid": 6,
    "BlockLow": 29,
    "NumBitCastInst": 7,
    "NumBrInst": 25,
    "NumCallInst": 15,
    "NumGetElementPtrInst": 7,
    "NumICmpInst": 9,
    "NumLShrInst": 0,
    "NumLoadInst": 72,
    "NumMulInst": 0,
    "NumOrInst": 3,
    "NumPHIInst": 1,
    "NumRetInst": 10,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 3,
    "NumStoreInst": 53,
    "NumSubInst": 1,
    "NumTruncInst": 3,
    "NumXorInst": 0,
    "NumZExtInst": 5,
    "TotalBlocks": 35,
    "TotalInsts": 272,
    "TotalMemInst": 194,
    "TotalFuncs": 17,
    "ArgsPhi": 2,
    "testUnary": 143
  },
  "baseline_oz_instcount": 272,
  "knowledge_base_entry": [
    "--flattencfg",
    "--early-cse",
    "--simplifycfg",
    "--aggressive-instcombine",
    "--die",
    "--slp-vectorizer",
    "--licm",
    "--nary-reassociate",
    "--lower-constant-intrinsics",
    "--mergefunc",
    "--inline",
    "--early-cse-memssa",
    "--early-cse-memssa",
    "--indvars",
    "-loop-reduce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--add-discriminators",
          "--flattencfg",
          "--speculative-execution",
          "--separate-const-offset-from-gep",
          "--slp-vectorizer",
          "--partially-inline-libcalls",
          "--callsite-splitting",
          "--called-value-propagation",
          "--early-cse-memssa",
          "--guard-widening",
          "--coro-cleanup",
          "--redundant-dbg-inst-elim",
          "--hotcoldsplit",
          "--sink",
          "--loop-unswitch",
          "--gvn-hoist",
          "--libcalls-shrinkwrap",
          "--loop-versioning-licm",
          "--loop-versioning",
          "--aggressive-instcombine",
          "--consthoist",
          "--loop-rotate"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--add-discriminators",
      "--flattencfg",
      "--speculative-execution",
      "--separate-const-offset-from-gep",
      "--slp-vectorizer",
      "--partially-inline-libcalls",
      "--callsite-splitting",
      "--called-value-propagation",
      "--early-cse-memssa",
      "--guard-widening",
      "--coro-cleanup",
      "--redundant-dbg-inst-elim",
      "--hotcoldsplit",
      "--sink",
      "--loop-unswitch",
      "--gvn-hoist",
      "--libcalls-shrinkwrap",
      "--loop-versioning-licm",
      "--loop-versioning",
      "--aggressive-instcombine",
      "--consthoist",
      "--loop-rotate"
    ],
    "performance_vs_Oz": "+0.7%"
  }
}
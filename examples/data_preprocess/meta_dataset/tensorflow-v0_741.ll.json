{
  "program_id": "tensorflow-v0_741.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 3,
    "onePred": 6,
    "onePredOneSuc": 3,
    "onePredTwoSuc": 3,
    "oneSuccessor": 4,
    "twoPred": 1,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 5,
    "morePreds": 2,
    "BB03Phi": 3,
    "BBHiPhi": 0,
    "BBNoPhi": 9,
    "BeginPhi": 3,
    "BranchCount": 9,
    "returnInt": 0,
    "CriticalCount": 4,
    "NumEdges": 14,
    "const32Bit": 25,
    "const64Bit": 23,
    "numConstZeroes": 27,
    "numConstOnes": 2,
    "UncondBranches": 4,
    "binaryConstArg": 3,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 0,
    "NumAndInst": 0,
    "BlockMid": 3,
    "BlockLow": 9,
    "NumBitCastInst": 10,
    "NumBrInst": 9,
    "NumCallInst": 4,
    "NumGetElementPtrInst": 19,
    "NumICmpInst": 0,
    "NumLShrInst": 0,
    "NumLoadInst": 13,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 3,
    "NumRetInst": 3,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 9,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 12,
    "TotalInsts": 91,
    "TotalMemInst": 45,
    "TotalFuncs": 5,
    "ArgsPhi": 8,
    "testUnary": 23
  },
  "baseline_oz_instcount": 91,
  "knowledge_base_entry": [
    "--sccp",
    "--adce",
    "--elim-avail-extern",
    "--loop-simplifycfg",
    "--die",
    "--loop-simplifycfg",
    "--mergefunc",
    "--instcombine",
    "--simplifycfg",
    "--die",
    "--loop-simplifycfg",
    "--slp-vectorizer",
    "--slsr",
    "--early-cse-memssa",
    "--licm"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--mergefunc",
          "--lowerinvoke",
          "--bdce",
          "--lower-matrix-intrinsics",
          "--sccp",
          "--loop-simplify",
          "--adce",
          "--lcssa",
          "--mergereturn",
          "--pgo-memop-opt",
          "--coro-cleanup"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+14.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--mergefunc",
      "--lowerinvoke",
      "--bdce",
      "--lower-matrix-intrinsics",
      "--sccp",
      "--loop-simplify",
      "--adce",
      "--lcssa",
      "--mergereturn",
      "--pgo-memop-opt",
      "--coro-cleanup"
    ],
    "performance_vs_Oz": "+14.3%"
  }
}
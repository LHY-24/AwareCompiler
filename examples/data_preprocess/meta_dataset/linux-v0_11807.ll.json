{
  "program_id": "linux-v0_11807.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 10,
    "onePred": 67,
    "onePredOneSuc": 50,
    "onePredTwoSuc": 17,
    "oneSuccessor": 59,
    "twoPred": 20,
    "twoPredOneSuc": 7,
    "twoEach": 8,
    "twoSuccessor": 34,
    "morePreds": 6,
    "BB03Phi": 10,
    "BBHiPhi": 0,
    "BBNoPhi": 96,
    "BeginPhi": 10,
    "BranchCount": 93,
    "returnInt": 24,
    "CriticalCount": 4,
    "NumEdges": 127,
    "const32Bit": 185,
    "const64Bit": 17,
    "numConstZeroes": 43,
    "numConstOnes": 106,
    "UncondBranches": 59,
    "binaryConstArg": 37,
    "NumAShrInst": 0,
    "NumAddInst": 6,
    "NumAllocaInst": 95,
    "NumAndInst": 16,
    "BlockMid": 14,
    "BlockLow": 92,
    "NumBitCastInst": 4,
    "NumBrInst": 93,
    "NumCallInst": 32,
    "NumGetElementPtrInst": 10,
    "NumICmpInst": 34,
    "NumLShrInst": 3,
    "NumLoadInst": 196,
    "NumMulInst": 2,
    "NumOrInst": 6,
    "NumPHIInst": 10,
    "NumRetInst": 13,
    "NumSExtInst": 18,
    "NumSelectInst": 0,
    "NumShlInst": 9,
    "NumStoreInst": 127,
    "NumSubInst": 9,
    "NumTruncInst": 20,
    "NumXorInst": 0,
    "NumZExtInst": 8,
    "TotalBlocks": 106,
    "TotalInsts": 716,
    "TotalMemInst": 460,
    "TotalFuncs": 26,
    "ArgsPhi": 20,
    "testUnary": 342
  },
  "baseline_oz_instcount": 716,
  "knowledge_base_entry": [
    "--loop-fusion",
    "--indvars",
    "--gvn-hoist",
    "--aggressive-instcombine",
    "--inline",
    "--nary-reassociate"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--aggressive-instcombine",
          "--strip",
          "--constprop",
          "--dse",
          "--partially-inline-libcalls",
          "--lowerinvoke",
          "--reassociate",
          "--coro-split",
          "--gvn-hoist",
          "-loop-reduce"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--aggressive-instcombine",
      "--strip",
      "--constprop",
      "--dse",
      "--partially-inline-libcalls",
      "--lowerinvoke",
      "--reassociate",
      "--coro-split",
      "--gvn-hoist",
      "-loop-reduce"
    ],
    "performance_vs_Oz": "+0.4%"
  }
}
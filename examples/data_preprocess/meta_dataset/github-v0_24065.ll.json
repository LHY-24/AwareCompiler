{
  "program_id": "github-v0_24065.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 65,
    "onePredOneSuc": 32,
    "onePredTwoSuc": 19,
    "oneSuccessor": 47,
    "twoPred": 28,
    "twoPredOneSuc": 12,
    "twoEach": 12,
    "twoSuccessor": 40,
    "morePreds": 2,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 105,
    "BeginPhi": 2,
    "BranchCount": 87,
    "returnInt": 26,
    "CriticalCount": 19,
    "NumEdges": 127,
    "const32Bit": 334,
    "const64Bit": 9,
    "numConstZeroes": 137,
    "numConstOnes": 111,
    "UncondBranches": 47,
    "binaryConstArg": 18,
    "NumAShrInst": 0,
    "NumAddInst": 19,
    "NumAllocaInst": 74,
    "NumAndInst": 0,
    "BlockMid": 15,
    "BlockLow": 92,
    "NumBitCastInst": 0,
    "NumBrInst": 87,
    "NumCallInst": 55,
    "NumGetElementPtrInst": 114,
    "NumICmpInst": 40,
    "NumLShrInst": 0,
    "NumLoadInst": 350,
    "NumMulInst": 11,
    "NumOrInst": 0,
    "NumPHIInst": 2,
    "NumRetInst": 12,
    "NumSExtInst": 26,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 127,
    "NumSubInst": 7,
    "NumTruncInst": 4,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 107,
    "TotalInsts": 950,
    "TotalMemInst": 720,
    "TotalFuncs": 25,
    "ArgsPhi": 4,
    "testUnary": 458
  },
  "baseline_oz_instcount": 950,
  "knowledge_base_entry": [
    "--slsr",
    "--simplifycfg",
    "--loop-simplifycfg",
    "--loop-instsimplify",
    "--aggressive-instcombine",
    "--jump-threading",
    "-loop-reduce",
    "--reassociate",
    "--gvn-hoist",
    "--loop-reroll",
    "--early-cse-memssa",
    "--lower-expect",
    "--elim-avail-extern",
    "--dce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--slp-vectorizer",
          "--newgvn",
          "--simplifycfg",
          "--mergeicmps",
          "--consthoist",
          "--partially-inline-libcalls",
          "--aggressive-instcombine",
          "--flattencfg",
          "--bdce",
          "--prune-eh",
          "--correlated-propagation",
          "--constprop",
          "--barrier",
          "--slsr",
          "--guard-widening",
          "--strip-dead-prototypes",
          "--globalsplit",
          "--loweratomic",
          "--add-discriminators",
          "--sancov",
          "--lower-constant-intrinsics",
          "--loop-instsimplify",
          "--indvars",
          "--mldst-motion",
          "--reassociate",
          "--strip-debug-declare",
          "--lowerswitch",
          "--ipsccp",
          "--mem2reg",
          "--lower-guard-intrinsic"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--slp-vectorizer",
      "--newgvn",
      "--simplifycfg",
      "--mergeicmps",
      "--consthoist",
      "--partially-inline-libcalls",
      "--aggressive-instcombine",
      "--flattencfg",
      "--bdce",
      "--prune-eh",
      "--correlated-propagation",
      "--constprop",
      "--barrier",
      "--slsr",
      "--guard-widening",
      "--strip-dead-prototypes",
      "--globalsplit",
      "--loweratomic",
      "--add-discriminators",
      "--sancov",
      "--lower-constant-intrinsics",
      "--loop-instsimplify",
      "--indvars",
      "--mldst-motion",
      "--reassociate",
      "--strip-debug-declare",
      "--lowerswitch",
      "--ipsccp",
      "--mem2reg",
      "--lower-guard-intrinsic"
    ],
    "performance_vs_Oz": "+0.2%"
  }
}
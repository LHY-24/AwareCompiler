{
  "program_id": "linux-v0_11086.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 86,
    "onePredOneSuc": 76,
    "onePredTwoSuc": 6,
    "oneSuccessor": 85,
    "twoPred": 12,
    "twoPredOneSuc": 4,
    "twoEach": 2,
    "twoSuccessor": 14,
    "morePreds": 5,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 115,
    "BeginPhi": 0,
    "BranchCount": 99,
    "returnInt": 6,
    "CriticalCount": 7,
    "NumEdges": 133,
    "const32Bit": 184,
    "const64Bit": 19,
    "numConstZeroes": 61,
    "numConstOnes": 127,
    "UncondBranches": 85,
    "binaryConstArg": 19,
    "NumAShrInst": 0,
    "NumAddInst": 9,
    "NumAllocaInst": 99,
    "NumAndInst": 0,
    "BlockMid": 16,
    "BlockLow": 99,
    "NumBitCastInst": 41,
    "NumBrInst": 99,
    "NumCallInst": 45,
    "NumGetElementPtrInst": 23,
    "NumICmpInst": 18,
    "NumLShrInst": 0,
    "NumLoadInst": 186,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 12,
    "NumSExtInst": 19,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 121,
    "NumSubInst": 0,
    "NumTruncInst": 4,
    "NumXorInst": 19,
    "NumZExtInst": 11,
    "TotalBlocks": 115,
    "TotalInsts": 719,
    "TotalMemInst": 474,
    "TotalFuncs": 28,
    "ArgsPhi": 0,
    "testUnary": 369
  },
  "baseline_oz_instcount": 719,
  "knowledge_base_entry": [
    "--sroa",
    "--memcpyopt",
    "--load-store-vectorizer",
    "--mergefunc",
    "--die",
    "--reassociate",
    "--reassociate",
    "--aggressive-instcombine",
    "--loweratomic",
    "--aggressive-instcombine",
    "--loop-simplifycfg",
    "--loop-reroll",
    "--mergefunc",
    "--gvn",
    "--ipsccp",
    "--correlated-propagation",
    "--adce",
    "--licm",
    "--gvn-hoist",
    "--slsr",
    "--instcombine",
    "--bdce",
    "--inline",
    "--prune-eh"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--bdce",
          "--always-inline",
          "--loop-simplifycfg",
          "--infer-address-spaces",
          "--post-inline-ee-instrument",
          "--sink",
          "--inline",
          "--strip-debug-declare",
          "--simplifycfg",
          "--loop-predication",
          "--lower-constant-intrinsics",
          "--coro-early",
          "--div-rem-pairs",
          "--mergefunc",
          "--ipsccp",
          "--load-store-vectorizer",
          "--prune-eh",
          "--loop-sink",
          "--cross-dso-cfi",
          "--sancov"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--bdce",
      "--always-inline",
      "--loop-simplifycfg",
      "--infer-address-spaces",
      "--post-inline-ee-instrument",
      "--sink",
      "--inline",
      "--strip-debug-declare",
      "--simplifycfg",
      "--loop-predication",
      "--lower-constant-intrinsics",
      "--coro-early",
      "--div-rem-pairs",
      "--mergefunc",
      "--ipsccp",
      "--load-store-vectorizer",
      "--prune-eh",
      "--loop-sink",
      "--cross-dso-cfi",
      "--sancov"
    ],
    "performance_vs_Oz": "+1.1%"
  }
}
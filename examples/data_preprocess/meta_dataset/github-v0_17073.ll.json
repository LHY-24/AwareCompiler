{
  "program_id": "github-v0_17073.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 22,
    "onePredOneSuc": 12,
    "onePredTwoSuc": 10,
    "oneSuccessor": 16,
    "twoPred": 6,
    "twoPredOneSuc": 4,
    "twoEach": 2,
    "twoSuccessor": 14,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 40,
    "BeginPhi": 0,
    "BranchCount": 30,
    "returnInt": 0,
    "CriticalCount": 12,
    "NumEdges": 44,
    "const32Bit": 450,
    "const64Bit": 109,
    "numConstZeroes": 276,
    "numConstOnes": 60,
    "UncondBranches": 16,
    "binaryConstArg": 12,
    "NumAShrInst": 0,
    "NumAddInst": 6,
    "NumAllocaInst": 46,
    "NumAndInst": 0,
    "BlockMid": 4,
    "BlockLow": 36,
    "NumBitCastInst": 0,
    "NumBrInst": 30,
    "NumCallInst": 0,
    "NumGetElementPtrInst": 165,
    "NumICmpInst": 14,
    "NumLShrInst": 0,
    "NumLoadInst": 203,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 10,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 219,
    "NumSubInst": 6,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 40,
    "TotalInsts": 699,
    "TotalMemInst": 633,
    "TotalFuncs": 10,
    "ArgsPhi": 0,
    "testUnary": 249
  },
  "baseline_oz_instcount": 699,
  "knowledge_base_entry": [
    "--strip",
    "--mergefunc",
    "--slp-vectorizer",
    "--dce",
    "--mergefunc",
    "--loop-reroll",
    "--memcpyopt",
    "--gvn-hoist",
    "--newgvn",
    "--indvars",
    "--load-store-vectorizer",
    "--early-cse-memssa"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-unroll",
          "--loop-deletion",
          "--partial-inliner",
          "--early-cse-memssa",
          "--loop-versioning-licm",
          "--flattencfg",
          "--loop-vectorize",
          "--argpromotion",
          "--loop-guard-widening",
          "--redundant-dbg-inst-elim",
          "--callsite-splitting",
          "--sink",
          "--coro-elide",
          "--tailcallelim",
          "--prune-eh",
          "--inject-tli-mappings",
          "--elim-avail-extern",
          "--indvars",
          "--mergefunc",
          "--hotcoldsplit",
          "--slp-vectorizer",
          "--add-discriminators",
          "--gvn"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-unroll",
      "--loop-deletion",
      "--partial-inliner",
      "--early-cse-memssa",
      "--loop-versioning-licm",
      "--flattencfg",
      "--loop-vectorize",
      "--argpromotion",
      "--loop-guard-widening",
      "--redundant-dbg-inst-elim",
      "--callsite-splitting",
      "--sink",
      "--coro-elide",
      "--tailcallelim",
      "--prune-eh",
      "--inject-tli-mappings",
      "--elim-avail-extern",
      "--indvars",
      "--mergefunc",
      "--hotcoldsplit",
      "--slp-vectorizer",
      "--add-discriminators",
      "--gvn"
    ],
    "performance_vs_Oz": "+2.4%"
  }
}
{
  "program_id": "poj104-v1_78_538.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 38,
    "onePredOneSuc": 25,
    "onePredTwoSuc": 10,
    "oneSuccessor": 33,
    "twoPred": 14,
    "twoPredOneSuc": 5,
    "twoEach": 7,
    "twoSuccessor": 20,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 69,
    "BeginPhi": 0,
    "BranchCount": 53,
    "returnInt": 7,
    "CriticalCount": 9,
    "NumEdges": 73,
    "const32Bit": 72,
    "const64Bit": 84,
    "numConstZeroes": 51,
    "numConstOnes": 59,
    "UncondBranches": 33,
    "binaryConstArg": 14,
    "NumAShrInst": 0,
    "NumAddInst": 17,
    "NumAllocaInst": 30,
    "NumAndInst": 0,
    "BlockMid": 5,
    "BlockLow": 64,
    "NumBitCastInst": 29,
    "NumBrInst": 53,
    "NumCallInst": 46,
    "NumGetElementPtrInst": 45,
    "NumICmpInst": 20,
    "NumLShrInst": 0,
    "NumLoadInst": 104,
    "NumMulInst": 1,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 15,
    "NumSExtInst": 12,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 54,
    "NumSubInst": 1,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 1,
    "TotalBlocks": 69,
    "TotalInsts": 430,
    "TotalMemInst": 279,
    "TotalFuncs": 30,
    "ArgsPhi": 0,
    "testUnary": 176
  },
  "baseline_oz_instcount": 332,
  "knowledge_base_entry": [
    "--elim-avail-extern",
    "--lower-constant-intrinsics",
    "--loop-rotate",
    "--jump-threading",
    "--prune-eh",
    "--mem2reg",
    "--mldst-motion",
    "--instcombine",
    "--loop-rotate",
    "--instcombine",
    "--memcpyopt",
    "--instsimplify",
    "--newgvn",
    "--sroa",
    "--aggressive-instcombine",
    "--die",
    "--elim-avail-extern",
    "--sccp",
    "--early-cse",
    "--mergefunc",
    "--globalopt",
    "--flattencfg",
    "--loop-simplifycfg",
    "--mem2reg",
    "--gvn-hoist",
    "--early-cse-memssa",
    "--jump-threading",
    "--flattencfg",
    "--sroa",
    "--elim-avail-extern",
    "--sccp",
    "--simplifycfg",
    "--reassociate",
    "--sroa",
    "--load-store-vectorizer",
    "--slsr",
    "--jump-threading",
    "--prune-eh",
    "--aggressive-instcombine",
    "--dse",
    "--jump-threading",
    "--mergefunc",
    "--early-cse",
    "--lower-expect",
    "--prune-eh",
    "--early-cse-memssa",
    "--loop-simplifycfg",
    "--lower-expect",
    "--instsimplify",
    "--mergefunc",
    "--dce",
    "--early-cse",
    "--adce",
    "--elim-avail-extern",
    "--ipsccp",
    "--ipsccp",
    "--simplifycfg",
    "--aggressive-instcombine",
    "--jump-threading",
    "--slsr",
    "--newgvn",
    "--slsr",
    "--slp-vectorizer",
    "--newgvn",
    "--jump-threading",
    "--loop-simplifycfg",
    "--sroa",
    "--aggressive-instcombine",
    "--mergefunc",
    "--early-cse",
    "--lower-expect",
    "--prune-eh",
    "--early-cse-memssa",
    "--loop-simplifycfg",
    "--lower-expect",
    "--instsimplify",
    "--mergefunc",
    "--dce",
    "--early-cse",
    "--adce",
    "--elim-avail-extern",
    "--ipsccp",
    "--ipsccp",
    "--simplifycfg",
    "--flattencfg",
    "--sroa",
    "--dse",
    "--slp-vectorizer",
    "--inline",
    "--instcombine",
    "--loop-rotate",
    "--aggressive-instcombine",
    "--mergefunc",
    "--flattencfg",
    "--inline",
    "--simplifycfg",
    "--sroa",
    "--lower-constant-intrinsics"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-simplifycfg",
          "--break-crit-edges",
          "--early-cse-memssa",
          "--add-discriminators",
          "--div-rem-pairs",
          "--functionattrs",
          "--speculative-execution",
          "--instcombine",
          "--loop-load-elim",
          "--ipconstprop",
          "--gvn",
          "--guard-widening",
          "--elim-avail-extern",
          "--simplifycfg",
          "--lower-matrix-intrinsics",
          "--globalopt",
          "--loop-interchange",
          "--alignment-from-assumptions",
          "--pgo-memop-opt",
          "--strip-debug-declare",
          "--ipsccp",
          "--lcssa",
          "--inject-tli-mappings",
          "--adce"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+61.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-simplifycfg",
      "--break-crit-edges",
      "--early-cse-memssa",
      "--add-discriminators",
      "--div-rem-pairs",
      "--functionattrs",
      "--speculative-execution",
      "--instcombine",
      "--loop-load-elim",
      "--ipconstprop",
      "--gvn",
      "--guard-widening",
      "--elim-avail-extern",
      "--simplifycfg",
      "--lower-matrix-intrinsics",
      "--globalopt",
      "--loop-interchange",
      "--alignment-from-assumptions",
      "--pgo-memop-opt",
      "--strip-debug-declare",
      "--ipsccp",
      "--lcssa",
      "--inject-tli-mappings",
      "--adce"
    ],
    "performance_vs_Oz": "+61.4%"
  }
}
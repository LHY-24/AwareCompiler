{
  "program_id": "github-v0_42483.ll",
  "autophase_features": {
    "BBNumArgsHi": 6,
    "BBNumArgsLo": 0,
    "onePred": 22,
    "onePredOneSuc": 14,
    "onePredTwoSuc": 8,
    "oneSuccessor": 14,
    "twoPred": 0,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 13,
    "morePreds": 6,
    "BB03Phi": 6,
    "BBHiPhi": 0,
    "BBNoPhi": 23,
    "BeginPhi": 6,
    "BranchCount": 27,
    "returnInt": 1,
    "CriticalCount": 8,
    "NumEdges": 44,
    "const32Bit": 7,
    "const64Bit": 81,
    "numConstZeroes": 30,
    "numConstOnes": 28,
    "UncondBranches": 14,
    "binaryConstArg": 41,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 0,
    "NumAndInst": 1,
    "BlockMid": 3,
    "BlockLow": 26,
    "NumBitCastInst": 0,
    "NumBrInst": 27,
    "NumCallInst": 23,
    "NumGetElementPtrInst": 2,
    "NumICmpInst": 1,
    "NumLShrInst": 0,
    "NumLoadInst": 2,
    "NumMulInst": 1,
    "NumOrInst": 0,
    "NumPHIInst": 12,
    "NumRetInst": 1,
    "NumSExtInst": 0,
    "NumSelectInst": 1,
    "NumShlInst": 0,
    "NumStoreInst": 2,
    "NumSubInst": 0,
    "NumTruncInst": 1,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 29,
    "TotalInsts": 258,
    "TotalMemInst": 29,
    "TotalFuncs": 7,
    "ArgsPhi": 44,
    "testUnary": 22
  },
  "baseline_oz_instcount": 258,
  "knowledge_base_entry": [
    "--scalarizer",
    "--early-cse",
    "-loop-reduce",
    "--load-store-vectorizer",
    "-loop-reduce",
    "--mergefunc",
    "--aggressive-instcombine",
    "--gvn",
    "--indvars",
    "--instcombine",
    "--adce",
    "--newgvn",
    "--indvars",
    "--simplifycfg",
    "--nary-reassociate",
    "--sroa",
    "--load-store-vectorizer",
    "--correlated-propagation",
    "--lower-expect",
    "--reassociate",
    "--newgvn",
    "--dse",
    "--newgvn",
    "--die",
    "--gvn",
    "--loop-instsimplify"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--strip",
          "--name-anon-globals",
          "--ee-instrument",
          "--instsimplify",
          "--add-discriminators",
          "--loweratomic",
          "--loop-fusion",
          "--consthoist",
          "--sroa",
          "--scalarizer",
          "--simplifycfg",
          "--loop-unroll-and-jam",
          "--mergefunc",
          "--early-cse",
          "--strip-nondebug",
          "--loop-reroll",
          "--adce"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--strip",
      "--name-anon-globals",
      "--ee-instrument",
      "--instsimplify",
      "--add-discriminators",
      "--loweratomic",
      "--loop-fusion",
      "--consthoist",
      "--sroa",
      "--scalarizer",
      "--simplifycfg",
      "--loop-unroll-and-jam",
      "--mergefunc",
      "--early-cse",
      "--strip-nondebug",
      "--loop-reroll",
      "--adce"
    ],
    "performance_vs_Oz": "+3.9%"
  }
}
{
  "program_id": "linux-v0_4874.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 3,
    "onePred": 45,
    "onePredOneSuc": 36,
    "onePredTwoSuc": 9,
    "oneSuccessor": 40,
    "twoPred": 16,
    "twoPredOneSuc": 3,
    "twoEach": 7,
    "twoSuccessor": 25,
    "morePreds": 4,
    "BB03Phi": 3,
    "BBHiPhi": 0,
    "BBNoPhi": 72,
    "BeginPhi": 3,
    "BranchCount": 65,
    "returnInt": 6,
    "CriticalCount": 17,
    "NumEdges": 90,
    "const32Bit": 231,
    "const64Bit": 16,
    "numConstZeroes": 122,
    "numConstOnes": 98,
    "UncondBranches": 40,
    "binaryConstArg": 29,
    "NumAShrInst": 0,
    "NumAddInst": 4,
    "NumAllocaInst": 61,
    "NumAndInst": 4,
    "BlockMid": 13,
    "BlockLow": 62,
    "NumBitCastInst": 7,
    "NumBrInst": 65,
    "NumCallInst": 24,
    "NumGetElementPtrInst": 72,
    "NumICmpInst": 32,
    "NumLShrInst": 0,
    "NumLoadInst": 192,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 3,
    "NumRetInst": 10,
    "NumSExtInst": 8,
    "NumSelectInst": 1,
    "NumShlInst": 0,
    "NumStoreInst": 96,
    "NumSubInst": 7,
    "NumTruncInst": 8,
    "NumXorInst": 21,
    "NumZExtInst": 21,
    "TotalBlocks": 75,
    "TotalInsts": 639,
    "TotalMemInst": 445,
    "TotalFuncs": 15,
    "ArgsPhi": 7,
    "testUnary": 297
  },
  "baseline_oz_instcount": 639,
  "knowledge_base_entry": [
    "--loweratomic",
    "--instcombine",
    "--correlated-propagation",
    "--gvn",
    "--load-store-vectorizer",
    "--slp-vectorizer",
    "--lower-expect",
    "--aggressive-instcombine",
    "--ipsccp",
    "--licm",
    "--mergefunc"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--aggressive-instcombine",
          "--loop-versioning-licm",
          "--constmerge",
          "--loop-guard-widening",
          "--libcalls-shrinkwrap",
          "--lower-expect",
          "--functionattrs",
          "--loop-unroll-and-jam",
          "--loop-vectorize",
          "--forceattrs",
          "--globalsplit",
          "--correlated-propagation",
          "--callsite-splitting",
          "--loop-versioning"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--aggressive-instcombine",
      "--loop-versioning-licm",
      "--constmerge",
      "--loop-guard-widening",
      "--libcalls-shrinkwrap",
      "--lower-expect",
      "--functionattrs",
      "--loop-unroll-and-jam",
      "--loop-vectorize",
      "--forceattrs",
      "--globalsplit",
      "--correlated-propagation",
      "--callsite-splitting",
      "--loop-versioning"
    ],
    "performance_vs_Oz": "+0.3%"
  }
}
{
  "program_id": "linux-v0_8742.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 43,
    "onePredOneSuc": 25,
    "onePredTwoSuc": 18,
    "oneSuccessor": 36,
    "twoPred": 26,
    "twoPredOneSuc": 9,
    "twoEach": 12,
    "twoSuccessor": 34,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 80,
    "BeginPhi": 0,
    "BranchCount": 70,
    "returnInt": 11,
    "CriticalCount": 31,
    "NumEdges": 104,
    "const32Bit": 324,
    "const64Bit": 50,
    "numConstZeroes": 170,
    "numConstOnes": 117,
    "UncondBranches": 36,
    "binaryConstArg": 34,
    "NumAShrInst": 3,
    "NumAddInst": 9,
    "NumAllocaInst": 83,
    "NumAndInst": 10,
    "BlockMid": 14,
    "BlockLow": 66,
    "NumBitCastInst": 9,
    "NumBrInst": 70,
    "NumCallInst": 72,
    "NumGetElementPtrInst": 115,
    "NumICmpInst": 26,
    "NumLShrInst": 0,
    "NumLoadInst": 241,
    "NumMulInst": 0,
    "NumOrInst": 3,
    "NumPHIInst": 0,
    "NumRetInst": 10,
    "NumSExtInst": 18,
    "NumSelectInst": 1,
    "NumShlInst": 3,
    "NumStoreInst": 111,
    "NumSubInst": 1,
    "NumTruncInst": 13,
    "NumXorInst": 7,
    "NumZExtInst": 14,
    "TotalBlocks": 80,
    "TotalInsts": 820,
    "TotalMemInst": 622,
    "TotalFuncs": 37,
    "ArgsPhi": 0,
    "testUnary": 378
  },
  "baseline_oz_instcount": 791,
  "knowledge_base_entry": [
    "--partially-inline-libcalls",
    "--gvn",
    "--load-store-vectorizer",
    "--elim-avail-extern",
    "--globalopt",
    "--newgvn",
    "--aggressive-instcombine",
    "--mem2reg",
    "--early-cse-memssa",
    "--gvn",
    "--memcpyopt",
    "--mem2reg",
    "--globalopt",
    "--newgvn",
    "--aggressive-instcombine",
    "--dse",
    "--load-store-vectorizer",
    "--elim-avail-extern",
    "--globalopt",
    "--instcombine",
    "--inline",
    "--load-store-vectorizer",
    "--dce",
    "--jump-threading",
    "--load-store-vectorizer",
    "--sroa",
    "--adce",
    "--slp-vectorizer"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--forceattrs",
          "--coro-cleanup",
          "--strip-nondebug",
          "--loop-vectorize",
          "--lower-expect",
          "--always-inline",
          "--newgvn",
          "--div-rem-pairs",
          "--lower-matrix-intrinsics",
          "--correlated-propagation",
          "--deadargelim",
          "--alignment-from-assumptions",
          "--constmerge",
          "--reassociate",
          "--pgo-memop-opt",
          "--loop-idiom",
          "--mergeicmps",
          "--globalopt",
          "--aggressive-instcombine",
          "--lowerinvoke",
          "--slp-vectorizer",
          "--gvn",
          "--early-cse",
          "--scalarizer",
          "--lcssa",
          "--ipsccp",
          "--tailcallelim"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--forceattrs",
      "--coro-cleanup",
      "--strip-nondebug",
      "--loop-vectorize",
      "--lower-expect",
      "--always-inline",
      "--newgvn",
      "--div-rem-pairs",
      "--lower-matrix-intrinsics",
      "--correlated-propagation",
      "--deadargelim",
      "--alignment-from-assumptions",
      "--constmerge",
      "--reassociate",
      "--pgo-memop-opt",
      "--loop-idiom",
      "--mergeicmps",
      "--globalopt",
      "--aggressive-instcombine",
      "--lowerinvoke",
      "--slp-vectorizer",
      "--gvn",
      "--early-cse",
      "--scalarizer",
      "--lcssa",
      "--ipsccp",
      "--tailcallelim"
    ],
    "performance_vs_Oz": "+0.8%"
  }
}
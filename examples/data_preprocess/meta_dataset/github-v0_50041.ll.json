{
  "program_id": "github-v0_50041.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 2,
    "onePredOneSuc": 2,
    "onePredTwoSuc": 0,
    "oneSuccessor": 2,
    "twoPred": 1,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 1,
    "morePreds": 0,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 3,
    "BeginPhi": 1,
    "BranchCount": 3,
    "returnInt": 1,
    "CriticalCount": 0,
    "NumEdges": 4,
    "const32Bit": 30,
    "const64Bit": 0,
    "numConstZeroes": 2,
    "numConstOnes": 4,
    "UncondBranches": 2,
    "binaryConstArg": 22,
    "NumAShrInst": 0,
    "NumAddInst": 15,
    "NumAllocaInst": 0,
    "NumAndInst": 3,
    "BlockMid": 3,
    "BlockLow": 1,
    "NumBitCastInst": 0,
    "NumBrInst": 3,
    "NumCallInst": 1,
    "NumGetElementPtrInst": 37,
    "NumICmpInst": 7,
    "NumLShrInst": 0,
    "NumLoadInst": 31,
    "NumMulInst": 1,
    "NumOrInst": 9,
    "NumPHIInst": 2,
    "NumRetInst": 1,
    "NumSExtInst": 27,
    "NumSelectInst": 3,
    "NumShlInst": 5,
    "NumStoreInst": 6,
    "NumSubInst": 32,
    "NumTruncInst": 4,
    "NumXorInst": 0,
    "NumZExtInst": 31,
    "TotalBlocks": 4,
    "TotalInsts": 219,
    "TotalMemInst": 75,
    "TotalFuncs": 2,
    "ArgsPhi": 4,
    "testUnary": 93
  },
  "baseline_oz_instcount": 219,
  "knowledge_base_entry": [
    "--break-crit-edges",
    "--gvn-hoist",
    "--loop-deletion",
    "--early-cse",
    "--inline",
    "--loop-simplifycfg",
    "--loop-instsimplify",
    "--gvn-hoist",
    "--flattencfg",
    "--globalopt",
    "--lower-expect",
    "--dce",
    "--correlated-propagation",
    "--loop-reroll",
    "--jump-threading",
    "--bdce",
    "--instcombine",
    "--elim-avail-extern",
    "--dse",
    "--dce",
    "--mem2reg",
    "--loop-rotate"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-distribute",
          "--coro-cleanup",
          "--cross-dso-cfi",
          "--lower-widenable-condition",
          "--separate-const-offset-from-gep",
          "--correlated-propagation",
          "--loop-interchange",
          "--add-discriminators",
          "--adce",
          "--irce",
          "--gvn-hoist",
          "--strip-dead-prototypes",
          "--globalsplit",
          "--jump-threading",
          "--licm",
          "--bdce",
          "--forceattrs",
          "--break-crit-edges",
          "--strip",
          "--coro-elide",
          "--early-cse-memssa",
          "--consthoist",
          "--partially-inline-libcalls",
          "--loop-idiom",
          "--deadargelim"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-distribute",
      "--coro-cleanup",
      "--cross-dso-cfi",
      "--lower-widenable-condition",
      "--separate-const-offset-from-gep",
      "--correlated-propagation",
      "--loop-interchange",
      "--add-discriminators",
      "--adce",
      "--irce",
      "--gvn-hoist",
      "--strip-dead-prototypes",
      "--globalsplit",
      "--jump-threading",
      "--licm",
      "--bdce",
      "--forceattrs",
      "--break-crit-edges",
      "--strip",
      "--coro-elide",
      "--early-cse-memssa",
      "--consthoist",
      "--partially-inline-libcalls",
      "--loop-idiom",
      "--deadargelim"
    ],
    "performance_vs_Oz": "+2.3%"
  }
}
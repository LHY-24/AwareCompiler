{
  "program_id": "github-v0_12631.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 9,
    "onePredOneSuc": 6,
    "onePredTwoSuc": 1,
    "oneSuccessor": 13,
    "twoPred": 3,
    "twoPredOneSuc": 3,
    "twoEach": 0,
    "twoSuccessor": 1,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 17,
    "BeginPhi": 0,
    "BranchCount": 14,
    "returnInt": 0,
    "CriticalCount": 0,
    "NumEdges": 15,
    "const32Bit": 100,
    "const64Bit": 30,
    "numConstZeroes": 32,
    "numConstOnes": 54,
    "UncondBranches": 13,
    "binaryConstArg": 11,
    "NumAShrInst": 0,
    "NumAddInst": 6,
    "NumAllocaInst": 43,
    "NumAndInst": 0,
    "BlockMid": 4,
    "BlockLow": 13,
    "NumBitCastInst": 19,
    "NumBrInst": 14,
    "NumCallInst": 11,
    "NumGetElementPtrInst": 39,
    "NumICmpInst": 2,
    "NumLShrInst": 0,
    "NumLoadInst": 87,
    "NumMulInst": 5,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 71,
    "NumSubInst": 0,
    "NumTruncInst": 1,
    "NumXorInst": 0,
    "NumZExtInst": 4,
    "TotalBlocks": 17,
    "TotalInsts": 309,
    "TotalMemInst": 251,
    "TotalFuncs": 10,
    "ArgsPhi": 0,
    "testUnary": 158
  },
  "baseline_oz_instcount": 305,
  "knowledge_base_entry": [
    "--aggressive-instcombine",
    "--inline",
    "--loop-simplifycfg",
    "--die",
    "--aggressive-instcombine",
    "--sroa",
    "--ipsccp",
    "--dce",
    "--elim-avail-extern",
    "--mergefunc",
    "--gvn-hoist",
    "--dce",
    "--jump-threading",
    "--ipsccp",
    "--flattencfg",
    "--early-cse",
    "--adce",
    "--licm",
    "--mergefunc",
    "--mem2reg",
    "--dce",
    "--early-cse-memssa",
    "--lower-constant-intrinsics",
    "--prune-eh",
    "--reassociate"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-idiom",
          "--mem2reg",
          "--loop-guard-widening",
          "--coro-split",
          "--ee-instrument",
          "--reassociate",
          "--coro-elide",
          "--globalopt",
          "--scalarizer",
          "--aggressive-instcombine",
          "--gvn",
          "--argpromotion",
          "--dce",
          "--rpo-functionattrs",
          "--irce",
          "--adce",
          "--attributor",
          "--loop-interchange",
          "--loop-data-prefetch",
          "--instcombine",
          "--simplifycfg",
          "--loop-load-elim",
          "--lowerinvoke",
          "--gvn-hoist",
          "--licm"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-idiom",
      "--mem2reg",
      "--loop-guard-widening",
      "--coro-split",
      "--ee-instrument",
      "--reassociate",
      "--coro-elide",
      "--globalopt",
      "--scalarizer",
      "--aggressive-instcombine",
      "--gvn",
      "--argpromotion",
      "--dce",
      "--rpo-functionattrs",
      "--irce",
      "--adce",
      "--attributor",
      "--loop-interchange",
      "--loop-data-prefetch",
      "--instcombine",
      "--simplifycfg",
      "--loop-load-elim",
      "--lowerinvoke",
      "--gvn-hoist",
      "--licm"
    ],
    "performance_vs_Oz": "+0.3%"
  }
}
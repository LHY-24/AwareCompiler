{
  "program_id": "linux-v0_8771.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 55,
    "onePredOneSuc": 35,
    "onePredTwoSuc": 17,
    "oneSuccessor": 50,
    "twoPred": 17,
    "twoPredOneSuc": 10,
    "twoEach": 3,
    "twoSuccessor": 23,
    "morePreds": 4,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 87,
    "BeginPhi": 2,
    "BranchCount": 73,
    "returnInt": 9,
    "CriticalCount": 14,
    "NumEdges": 107,
    "const32Bit": 194,
    "const64Bit": 21,
    "numConstZeroes": 85,
    "numConstOnes": 63,
    "UncondBranches": 50,
    "binaryConstArg": 45,
    "NumAShrInst": 0,
    "NumAddInst": 6,
    "NumAllocaInst": 33,
    "NumAndInst": 19,
    "BlockMid": 9,
    "BlockLow": 80,
    "NumBitCastInst": 15,
    "NumBrInst": 73,
    "NumCallInst": 30,
    "NumGetElementPtrInst": 57,
    "NumICmpInst": 32,
    "NumLShrInst": 9,
    "NumLoadInst": 146,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 2,
    "NumRetInst": 13,
    "NumSExtInst": 8,
    "NumSelectInst": 2,
    "NumShlInst": 0,
    "NumStoreInst": 48,
    "NumSubInst": 2,
    "NumTruncInst": 6,
    "NumXorInst": 13,
    "NumZExtInst": 31,
    "TotalBlocks": 89,
    "TotalInsts": 548,
    "TotalMemInst": 314,
    "TotalFuncs": 30,
    "ArgsPhi": 4,
    "testUnary": 239
  },
  "baseline_oz_instcount": 548,
  "knowledge_base_entry": [
    "--sroa",
    "--loop-deletion",
    "--gvn-hoist",
    "--lower-constant-intrinsics",
    "--simplifycfg",
    "--loop-reroll",
    "--instsimplify",
    "--early-cse-memssa",
    "--aggressive-instcombine",
    "--globalopt"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-fusion",
          "--add-discriminators",
          "--slp-vectorizer",
          "--loop-simplifycfg",
          "--canonicalize-aliases",
          "--aggressive-instcombine",
          "--always-inline",
          "--globalsplit",
          "--rpo-functionattrs",
          "--constprop",
          "--partially-inline-libcalls"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-fusion",
      "--add-discriminators",
      "--slp-vectorizer",
      "--loop-simplifycfg",
      "--canonicalize-aliases",
      "--aggressive-instcombine",
      "--always-inline",
      "--globalsplit",
      "--rpo-functionattrs",
      "--constprop",
      "--partially-inline-libcalls"
    ],
    "performance_vs_Oz": "+0.7%"
  }
}
{
  "program_id": "linux-v0_2164.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 49,
    "onePredOneSuc": 36,
    "onePredTwoSuc": 11,
    "oneSuccessor": 41,
    "twoPred": 6,
    "twoPredOneSuc": 2,
    "twoEach": 2,
    "twoSuccessor": 18,
    "morePreds": 7,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 76,
    "BeginPhi": 0,
    "BranchCount": 59,
    "returnInt": 17,
    "CriticalCount": 6,
    "NumEdges": 88,
    "const32Bit": 378,
    "const64Bit": 15,
    "numConstZeroes": 185,
    "numConstOnes": 60,
    "UncondBranches": 41,
    "binaryConstArg": 15,
    "NumAShrInst": 0,
    "NumAddInst": 5,
    "NumAllocaInst": 40,
    "NumAndInst": 2,
    "BlockMid": 19,
    "BlockLow": 57,
    "NumBitCastInst": 11,
    "NumBrInst": 59,
    "NumCallInst": 85,
    "NumGetElementPtrInst": 142,
    "NumICmpInst": 19,
    "NumLShrInst": 2,
    "NumLoadInst": 293,
    "NumMulInst": 3,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 14,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 77,
    "NumSubInst": 4,
    "NumTruncInst": 10,
    "NumXorInst": 6,
    "NumZExtInst": 30,
    "TotalBlocks": 76,
    "TotalInsts": 813,
    "TotalMemInst": 637,
    "TotalFuncs": 24,
    "ArgsPhi": 0,
    "testUnary": 391
  },
  "baseline_oz_instcount": 813,
  "knowledge_base_entry": [
    "--globaldce",
    "--aggressive-instcombine",
    "--globaldce",
    "--ipsccp",
    "--mergefunc",
    "--newgvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--lower-expect",
          "--loop-data-prefetch",
          "--infer-address-spaces",
          "--slp-vectorizer",
          "--aggressive-instcombine",
          "--cross-dso-cfi",
          "--loop-predication",
          "--sroa",
          "--prune-eh",
          "--libcalls-shrinkwrap",
          "--irce",
          "--scalarizer"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--lower-expect",
      "--loop-data-prefetch",
      "--infer-address-spaces",
      "--slp-vectorizer",
      "--aggressive-instcombine",
      "--cross-dso-cfi",
      "--loop-predication",
      "--sroa",
      "--prune-eh",
      "--libcalls-shrinkwrap",
      "--irce",
      "--scalarizer"
    ],
    "performance_vs_Oz": "+0.7%"
  }
}
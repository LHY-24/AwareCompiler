{
  "program_id": "github-v0_7944.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 12,
    "onePredOneSuc": 7,
    "onePredTwoSuc": 2,
    "oneSuccessor": 10,
    "twoPred": 5,
    "twoPredOneSuc": 2,
    "twoEach": 3,
    "twoSuccessor": 6,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 20,
    "BeginPhi": 0,
    "BranchCount": 16,
    "returnInt": 4,
    "CriticalCount": 1,
    "NumEdges": 22,
    "const32Bit": 31,
    "const64Bit": 18,
    "numConstZeroes": 23,
    "numConstOnes": 19,
    "UncondBranches": 10,
    "binaryConstArg": 6,
    "NumAShrInst": 0,
    "NumAddInst": 7,
    "NumAllocaInst": 12,
    "NumAndInst": 0,
    "BlockMid": 2,
    "BlockLow": 18,
    "NumBitCastInst": 0,
    "NumBrInst": 16,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 13,
    "NumICmpInst": 6,
    "NumLShrInst": 0,
    "NumLoadInst": 25,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 16,
    "NumSubInst": 0,
    "NumTruncInst": 3,
    "NumXorInst": 0,
    "NumZExtInst": 4,
    "TotalBlocks": 20,
    "TotalInsts": 116,
    "TotalMemInst": 73,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 47
  },
  "baseline_oz_instcount": 116,
  "knowledge_base_entry": [
    "--aggressive-instcombine",
    "--globalopt",
    "--dse",
    "--early-cse-memssa",
    "--adce",
    "--dce",
    "--mergefunc",
    "--aggressive-instcombine",
    "--gvn-hoist",
    "--lower-expect",
    "--lower-constant-intrinsics",
    "--aggressive-instcombine",
    "--inline",
    "--instsimplify",
    "--dce",
    "--sroa",
    "--loop-rotate",
    "--gvn",
    "--mldst-motion",
    "--instsimplify",
    "--loop-rotate",
    "--inline",
    "--globalopt",
    "--elim-avail-extern",
    "--flattencfg",
    "--ipsccp"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--bdce",
          "--early-cse-memssa",
          "--loop-idiom",
          "--attributor",
          "--loop-interchange",
          "--consthoist",
          "--loop-instsimplify",
          "--canonicalize-aliases",
          "--deadargelim",
          "--speculative-execution",
          "--inferattrs",
          "--barrier",
          "--aggressive-instcombine",
          "--loop-simplifycfg",
          "--flattencfg",
          "--loop-rotate",
          "--loop-unswitch",
          "--separate-const-offset-from-gep",
          "--ipconstprop",
          "-loop-reduce",
          "--mem2reg",
          "--loop-vectorize"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--bdce",
      "--early-cse-memssa",
      "--loop-idiom",
      "--attributor",
      "--loop-interchange",
      "--consthoist",
      "--loop-instsimplify",
      "--canonicalize-aliases",
      "--deadargelim",
      "--speculative-execution",
      "--inferattrs",
      "--barrier",
      "--aggressive-instcombine",
      "--loop-simplifycfg",
      "--flattencfg",
      "--loop-rotate",
      "--loop-unswitch",
      "--separate-const-offset-from-gep",
      "--ipconstprop",
      "-loop-reduce",
      "--mem2reg",
      "--loop-vectorize"
    ],
    "performance_vs_Oz": "+3.4%"
  }
}
{
  "program_id": "github-v0_19080.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 13,
    "onePredOneSuc": 9,
    "onePredTwoSuc": 1,
    "oneSuccessor": 11,
    "twoPred": 5,
    "twoPredOneSuc": 1,
    "twoEach": 4,
    "twoSuccessor": 6,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 21,
    "BeginPhi": 0,
    "BranchCount": 17,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 23,
    "const32Bit": 31,
    "const64Bit": 16,
    "numConstZeroes": 19,
    "numConstOnes": 21,
    "UncondBranches": 11,
    "binaryConstArg": 8,
    "NumAShrInst": 0,
    "NumAddInst": 6,
    "NumAllocaInst": 13,
    "NumAndInst": 0,
    "BlockMid": 3,
    "BlockLow": 18,
    "NumBitCastInst": 0,
    "NumBrInst": 17,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 10,
    "NumICmpInst": 6,
    "NumLShrInst": 0,
    "NumLoadInst": 22,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 17,
    "NumSubInst": 2,
    "NumTruncInst": 5,
    "NumXorInst": 0,
    "NumZExtInst": 8,
    "TotalBlocks": 21,
    "TotalInsts": 120,
    "TotalMemInst": 69,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 51
  },
  "baseline_oz_instcount": 120,
  "knowledge_base_entry": [
    "--globalopt",
    "--globaldce",
    "--aggressive-instcombine",
    "--gvn",
    "--sroa"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-rotate",
          "--slp-vectorizer",
          "--memcpyopt",
          "--instsimplify",
          "--tailcallelim",
          "--flattencfg",
          "--functionattrs",
          "--lcssa",
          "--sancov",
          "--aggressive-instcombine",
          "--insert-gcov-profiling",
          "--name-anon-globals",
          "--loop-simplify",
          "--rewrite-statepoints-for-gc",
          "--barrier",
          "--infer-address-spaces",
          "--canonicalize-aliases",
          "--licm",
          "--bdce",
          "--alignment-from-assumptions",
          "--loop-reroll",
          "--partial-inliner",
          "--coro-early",
          "--always-inline",
          "--mergereturn",
          "--globalopt",
          "--loop-idiom",
          "--inferattrs",
          "--guard-widening",
          "--newgvn"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+6.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-rotate",
      "--slp-vectorizer",
      "--memcpyopt",
      "--instsimplify",
      "--tailcallelim",
      "--flattencfg",
      "--functionattrs",
      "--lcssa",
      "--sancov",
      "--aggressive-instcombine",
      "--insert-gcov-profiling",
      "--name-anon-globals",
      "--loop-simplify",
      "--rewrite-statepoints-for-gc",
      "--barrier",
      "--infer-address-spaces",
      "--canonicalize-aliases",
      "--licm",
      "--bdce",
      "--alignment-from-assumptions",
      "--loop-reroll",
      "--partial-inliner",
      "--coro-early",
      "--always-inline",
      "--mergereturn",
      "--globalopt",
      "--loop-idiom",
      "--inferattrs",
      "--guard-widening",
      "--newgvn"
    ],
    "performance_vs_Oz": "+6.7%"
  }
}
{
  "program_id": "poj104-v1_31_1459.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 9,
    "onePredOneSuc": 5,
    "onePredTwoSuc": 4,
    "oneSuccessor": 9,
    "twoPred": 4,
    "twoPredOneSuc": 3,
    "twoEach": 0,
    "twoSuccessor": 4,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 16,
    "BeginPhi": 0,
    "BranchCount": 13,
    "returnInt": 5,
    "CriticalCount": 2,
    "NumEdges": 17,
    "const32Bit": 38,
    "const64Bit": 21,
    "numConstZeroes": 30,
    "numConstOnes": 8,
    "UncondBranches": 9,
    "binaryConstArg": 0,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 6,
    "NumAndInst": 0,
    "BlockMid": 2,
    "BlockLow": 14,
    "NumBitCastInst": 11,
    "NumBrInst": 13,
    "NumCallInst": 18,
    "NumGetElementPtrInst": 20,
    "NumICmpInst": 4,
    "NumLShrInst": 0,
    "NumLoadInst": 27,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 1,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 10,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 16,
    "TotalInsts": 113,
    "TotalMemInst": 81,
    "TotalFuncs": 12,
    "ArgsPhi": 0,
    "testUnary": 45
  },
  "baseline_oz_instcount": 45,
  "knowledge_base_entry": [
    "--gvn",
    "--slp-vectorizer",
    "--adce",
    "--reassociate",
    "--loop-instsimplify",
    "--bdce",
    "--mergefunc",
    "--jump-threading",
    "--die",
    "--die",
    "--inline",
    "--flattencfg",
    "--mem2reg",
    "--loop-simplifycfg",
    "--licm",
    "--instcombine",
    "--adce",
    "--jump-threading",
    "--die",
    "--die",
    "--inline",
    "--flattencfg",
    "--mem2reg",
    "--loop-simplifycfg",
    "--licm",
    "--bdce",
    "--simplifycfg",
    "--instcombine",
    "--aggressive-instcombine",
    "--die",
    "--inline"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--inline",
          "--loop-distribute",
          "--strip-nondebug",
          "--die",
          "--aggressive-instcombine",
          "--gvn",
          "--gvn-hoist",
          "--ee-instrument",
          "--loop-load-elim",
          "--lower-constant-intrinsics",
          "--strip-debug-declare",
          "--elim-avail-extern",
          "--constmerge",
          "--loop-predication",
          "--callsite-splitting",
          "--globalsplit",
          "--instcombine",
          "--simplifycfg",
          "--correlated-propagation",
          "--mergereturn",
          "--called-value-propagation"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--inline",
      "--loop-distribute",
      "--strip-nondebug",
      "--die",
      "--aggressive-instcombine",
      "--gvn",
      "--gvn-hoist",
      "--ee-instrument",
      "--loop-load-elim",
      "--lower-constant-intrinsics",
      "--strip-debug-declare",
      "--elim-avail-extern",
      "--constmerge",
      "--loop-predication",
      "--callsite-splitting",
      "--globalsplit",
      "--instcombine",
      "--simplifycfg",
      "--correlated-propagation",
      "--mergereturn",
      "--called-value-propagation"
    ],
    "performance_vs_Oz": "+2.2%"
  }
}
{
  "program_id": "github-v0_48446.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 60,
    "onePredOneSuc": 47,
    "onePredTwoSuc": 13,
    "oneSuccessor": 49,
    "twoPred": 17,
    "twoPredOneSuc": 2,
    "twoEach": 12,
    "twoSuccessor": 29,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 81,
    "BeginPhi": 0,
    "BranchCount": 78,
    "returnInt": 32,
    "CriticalCount": 5,
    "NumEdges": 107,
    "const32Bit": 167,
    "const64Bit": 13,
    "numConstZeroes": 75,
    "numConstOnes": 75,
    "UncondBranches": 49,
    "binaryConstArg": 12,
    "NumAShrInst": 0,
    "NumAddInst": 10,
    "NumAllocaInst": 38,
    "NumAndInst": 0,
    "BlockMid": 9,
    "BlockLow": 72,
    "NumBitCastInst": 8,
    "NumBrInst": 78,
    "NumCallInst": 39,
    "NumGetElementPtrInst": 57,
    "NumICmpInst": 27,
    "NumLShrInst": 0,
    "NumLoadInst": 149,
    "NumMulInst": 4,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 9,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 105,
    "NumSubInst": 2,
    "NumTruncInst": 3,
    "NumXorInst": 0,
    "NumZExtInst": 3,
    "TotalBlocks": 81,
    "TotalInsts": 543,
    "TotalMemInst": 388,
    "TotalFuncs": 19,
    "ArgsPhi": 0,
    "testUnary": 213
  },
  "baseline_oz_instcount": 543,
  "knowledge_base_entry": [
    "--licm",
    "--aggressive-instcombine",
    "--globalopt",
    "--flattencfg",
    "--instcombine",
    "--simplifycfg",
    "--flattencfg",
    "--adce",
    "--slp-vectorizer",
    "--slsr",
    "--loop-reroll",
    "--lower-constant-intrinsics",
    "--slp-vectorizer",
    "-loop-reduce",
    "--slp-vectorizer",
    "--simplifycfg",
    "--load-store-vectorizer",
    "--memcpyopt",
    "--loop-reroll",
    "--simplifycfg",
    "--aggressive-instcombine",
    "--inline"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--globalsplit",
          "--loop-unroll",
          "--coro-early",
          "--lcssa",
          "--loop-unroll-and-jam",
          "--indvars",
          "--loop-guard-widening",
          "--sccp",
          "--aggressive-instcombine",
          "--mergefunc",
          "--name-anon-globals",
          "--dse",
          "--reassociate",
          "--dce",
          "--mergereturn"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--globalsplit",
      "--loop-unroll",
      "--coro-early",
      "--lcssa",
      "--loop-unroll-and-jam",
      "--indvars",
      "--loop-guard-widening",
      "--sccp",
      "--aggressive-instcombine",
      "--mergefunc",
      "--name-anon-globals",
      "--dse",
      "--reassociate",
      "--dce",
      "--mergereturn"
    ],
    "performance_vs_Oz": "+0.4%"
  }
}
{
  "program_id": "tensorflow-v0_875.ll",
  "autophase_features": {
    "BBNumArgsHi": 1,
    "BBNumArgsLo": 11,
    "onePred": 49,
    "onePredOneSuc": 22,
    "onePredTwoSuc": 22,
    "oneSuccessor": 32,
    "twoPred": 29,
    "twoPredOneSuc": 10,
    "twoEach": 14,
    "twoSuccessor": 46,
    "morePreds": 5,
    "BB03Phi": 12,
    "BBHiPhi": 0,
    "BBNoPhi": 94,
    "BeginPhi": 12,
    "BranchCount": 78,
    "returnInt": 6,
    "CriticalCount": 43,
    "NumEdges": 124,
    "const32Bit": 212,
    "const64Bit": 198,
    "numConstZeroes": 215,
    "numConstOnes": 82,
    "UncondBranches": 32,
    "binaryConstArg": 20,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 32,
    "NumAndInst": 12,
    "BlockMid": 13,
    "BlockLow": 93,
    "NumBitCastInst": 96,
    "NumBrInst": 78,
    "NumCallInst": 203,
    "NumGetElementPtrInst": 76,
    "NumICmpInst": 46,
    "NumLShrInst": 2,
    "NumLoadInst": 95,
    "NumMulInst": 0,
    "NumOrInst": 2,
    "NumPHIInst": 14,
    "NumRetInst": 23,
    "NumSExtInst": 1,
    "NumSelectInst": 7,
    "NumShlInst": 3,
    "NumStoreInst": 33,
    "NumSubInst": 4,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 2,
    "TotalBlocks": 106,
    "TotalInsts": 752,
    "TotalMemInst": 439,
    "TotalFuncs": 60,
    "ArgsPhi": 31,
    "testUnary": 237
  },
  "baseline_oz_instcount": 743,
  "knowledge_base_entry": [
    "--lowerswitch",
    "--early-cse",
    "--sroa",
    "--dse",
    "--newgvn",
    "--mergefunc",
    "--lower-constant-intrinsics",
    "--loop-instsimplify",
    "--licm",
    "--slp-vectorizer",
    "--gvn-hoist",
    "--gvn",
    "--simplifycfg",
    "--prune-eh",
    "--elim-avail-extern",
    "--mem2reg",
    "--mergefunc",
    "--flattencfg",
    "--inline",
    "--instsimplify",
    "--bdce",
    "--ipsccp",
    "--ipsccp",
    "--early-cse-memssa",
    "--indvars"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--attributor",
          "--correlated-propagation",
          "--div-rem-pairs",
          "--constmerge",
          "--mergeicmps",
          "--adce",
          "--mergefunc",
          "--add-discriminators",
          "--loop-vectorize",
          "--strip-debug-declare",
          "--pgo-memop-opt"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--attributor",
      "--correlated-propagation",
      "--div-rem-pairs",
      "--constmerge",
      "--mergeicmps",
      "--adce",
      "--mergefunc",
      "--add-discriminators",
      "--loop-vectorize",
      "--strip-debug-declare",
      "--pgo-memop-opt"
    ],
    "performance_vs_Oz": "+0.9%"
  }
}
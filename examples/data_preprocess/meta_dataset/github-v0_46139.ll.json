{
  "program_id": "github-v0_46139.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 49,
    "onePredOneSuc": 28,
    "onePredTwoSuc": 21,
    "oneSuccessor": 37,
    "twoPred": 13,
    "twoPredOneSuc": 3,
    "twoEach": 8,
    "twoSuccessor": 30,
    "morePreds": 5,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 75,
    "BeginPhi": 0,
    "BranchCount": 67,
    "returnInt": 19,
    "CriticalCount": 13,
    "NumEdges": 97,
    "const32Bit": 142,
    "const64Bit": 11,
    "numConstZeroes": 53,
    "numConstOnes": 62,
    "UncondBranches": 37,
    "binaryConstArg": 23,
    "NumAShrInst": 0,
    "NumAddInst": 9,
    "NumAllocaInst": 46,
    "NumAndInst": 0,
    "BlockMid": 1,
    "BlockLow": 74,
    "NumBitCastInst": 0,
    "NumBrInst": 67,
    "NumCallInst": 28,
    "NumGetElementPtrInst": 39,
    "NumICmpInst": 33,
    "NumLShrInst": 0,
    "NumLoadInst": 86,
    "NumMulInst": 10,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 8,
    "NumSExtInst": 9,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 69,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 1,
    "NumZExtInst": 3,
    "TotalBlocks": 75,
    "TotalInsts": 411,
    "TotalMemInst": 268,
    "TotalFuncs": 14,
    "ArgsPhi": 0,
    "testUnary": 144
  },
  "baseline_oz_instcount": 414,
  "knowledge_base_entry": [
    "--early-cse-memssa",
    "--load-store-vectorizer",
    "--dse",
    "--globalopt"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--instnamer",
          "--alignment-from-assumptions",
          "--float2int",
          "--partial-inliner",
          "--adce",
          "--partially-inline-libcalls",
          "--add-discriminators",
          "--lowerinvoke",
          "--globalopt",
          "--ipconstprop",
          "--simplifycfg",
          "--pgo-memop-opt",
          "--inline",
          "--loop-data-prefetch"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--instnamer",
      "--alignment-from-assumptions",
      "--float2int",
      "--partial-inliner",
      "--adce",
      "--partially-inline-libcalls",
      "--add-discriminators",
      "--lowerinvoke",
      "--globalopt",
      "--ipconstprop",
      "--simplifycfg",
      "--pgo-memop-opt",
      "--inline",
      "--loop-data-prefetch"
    ],
    "performance_vs_Oz": "+0.7%"
  }
}
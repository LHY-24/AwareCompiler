{
  "program_id": "github-v0_4512.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 61,
    "onePredOneSuc": 45,
    "onePredTwoSuc": 14,
    "oneSuccessor": 55,
    "twoPred": 16,
    "twoPredOneSuc": 5,
    "twoEach": 10,
    "twoSuccessor": 27,
    "morePreds": 6,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 87,
    "BeginPhi": 2,
    "BranchCount": 82,
    "returnInt": 19,
    "CriticalCount": 11,
    "NumEdges": 117,
    "const32Bit": 160,
    "const64Bit": 28,
    "numConstZeroes": 75,
    "numConstOnes": 49,
    "UncondBranches": 55,
    "binaryConstArg": 30,
    "NumAShrInst": 0,
    "NumAddInst": 8,
    "NumAllocaInst": 27,
    "NumAndInst": 6,
    "BlockMid": 3,
    "BlockLow": 86,
    "NumBitCastInst": 4,
    "NumBrInst": 82,
    "NumCallInst": 41,
    "NumGetElementPtrInst": 35,
    "NumICmpInst": 29,
    "NumLShrInst": 0,
    "NumLoadInst": 93,
    "NumMulInst": 0,
    "NumOrInst": 3,
    "NumPHIInst": 2,
    "NumRetInst": 6,
    "NumSExtInst": 10,
    "NumSelectInst": 0,
    "NumShlInst": 6,
    "NumStoreInst": 47,
    "NumSubInst": 0,
    "NumTruncInst": 6,
    "NumXorInst": 1,
    "NumZExtInst": 15,
    "TotalBlocks": 89,
    "TotalInsts": 440,
    "TotalMemInst": 243,
    "TotalFuncs": 26,
    "ArgsPhi": 4,
    "testUnary": 161
  },
  "baseline_oz_instcount": 417,
  "knowledge_base_entry": [
    "--partially-inline-libcalls",
    "--gvn",
    "--elim-avail-extern",
    "--inline",
    "--gvn-hoist",
    "--reassociate",
    "--aggressive-instcombine",
    "--inline",
    "--gvn-hoist",
    "--mldst-motion",
    "--simplifycfg",
    "--memcpyopt",
    "--instcombine",
    "--lower-constant-intrinsics",
    "--aggressive-instcombine",
    "--inline",
    "--gvn-hoist",
    "--sroa",
    "--instsimplify"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--callsite-splitting",
          "--alignment-from-assumptions",
          "--aggressive-instcombine",
          "--always-inline",
          "--bdce",
          "--inline",
          "--loop-vectorize",
          "--lower-guard-intrinsic",
          "--simplifycfg",
          "--coro-cleanup",
          "--called-value-propagation",
          "--mergeicmps"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--callsite-splitting",
      "--alignment-from-assumptions",
      "--aggressive-instcombine",
      "--always-inline",
      "--bdce",
      "--inline",
      "--loop-vectorize",
      "--lower-guard-intrinsic",
      "--simplifycfg",
      "--coro-cleanup",
      "--called-value-propagation",
      "--mergeicmps"
    ],
    "performance_vs_Oz": "+1.2%"
  }
}
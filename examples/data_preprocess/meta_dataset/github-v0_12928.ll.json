{
  "program_id": "github-v0_12928.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 33,
    "onePredOneSuc": 20,
    "onePredTwoSuc": 13,
    "oneSuccessor": 25,
    "twoPred": 10,
    "twoPredOneSuc": 3,
    "twoEach": 4,
    "twoSuccessor": 23,
    "morePreds": 5,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 55,
    "BeginPhi": 0,
    "BranchCount": 48,
    "returnInt": 29,
    "CriticalCount": 14,
    "NumEdges": 71,
    "const32Bit": 88,
    "const64Bit": 8,
    "numConstZeroes": 25,
    "numConstOnes": 36,
    "UncondBranches": 25,
    "binaryConstArg": 18,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 23,
    "NumAndInst": 11,
    "BlockMid": 3,
    "BlockLow": 52,
    "NumBitCastInst": 4,
    "NumBrInst": 48,
    "NumCallInst": 40,
    "NumGetElementPtrInst": 4,
    "NumICmpInst": 23,
    "NumLShrInst": 0,
    "NumLoadInst": 71,
    "NumMulInst": 0,
    "NumOrInst": 5,
    "NumPHIInst": 0,
    "NumRetInst": 6,
    "NumSExtInst": 1,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 40,
    "NumSubInst": 1,
    "NumTruncInst": 3,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 55,
    "TotalInsts": 282,
    "TotalMemInst": 178,
    "TotalFuncs": 33,
    "ArgsPhi": 0,
    "testUnary": 102
  },
  "baseline_oz_instcount": 282,
  "knowledge_base_entry": [
    "--dce",
    "--elim-avail-extern",
    "--sccp",
    "--loop-simplifycfg",
    "--elim-avail-extern",
    "--sccp",
    "--licm",
    "--ipsccp",
    "--die",
    "--jump-threading",
    "--correlated-propagation",
    "--newgvn",
    "--flattencfg",
    "--elim-avail-extern",
    "--loop-simplifycfg",
    "--dce",
    "--elim-avail-extern",
    "--loop-rotate",
    "--aggressive-instcombine",
    "--instcombine",
    "--loop-simplifycfg",
    "--flattencfg",
    "--mem2reg",
    "--jump-threading",
    "--instsimplify",
    "--nary-reassociate",
    "--gvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--name-anon-globals",
          "--always-inline",
          "--loop-guard-widening",
          "--loop-instsimplify",
          "--lower-matrix-intrinsics",
          "--dce",
          "--separate-const-offset-from-gep",
          "--globaldce",
          "--strip-debug-declare",
          "--nary-reassociate",
          "--mergeicmps",
          "--partially-inline-libcalls",
          "--tailcallelim",
          "--loop-versioning-licm",
          "--speculative-execution",
          "--licm",
          "--simplifycfg",
          "--coro-cleanup",
          "--inferattrs",
          "--lcssa",
          "--lower-guard-intrinsic",
          "--sancov",
          "--loop-simplifycfg",
          "--ipsccp",
          "--loop-rotate",
          "--constmerge"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--name-anon-globals",
      "--always-inline",
      "--loop-guard-widening",
      "--loop-instsimplify",
      "--lower-matrix-intrinsics",
      "--dce",
      "--separate-const-offset-from-gep",
      "--globaldce",
      "--strip-debug-declare",
      "--nary-reassociate",
      "--mergeicmps",
      "--partially-inline-libcalls",
      "--tailcallelim",
      "--loop-versioning-licm",
      "--speculative-execution",
      "--licm",
      "--simplifycfg",
      "--coro-cleanup",
      "--inferattrs",
      "--lcssa",
      "--lower-guard-intrinsic",
      "--sancov",
      "--loop-simplifycfg",
      "--ipsccp",
      "--loop-rotate",
      "--constmerge"
    ],
    "performance_vs_Oz": "+0.4%"
  }
}
{
  "program_id": "github-v0_29408.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 14,
    "onePredOneSuc": 9,
    "onePredTwoSuc": 3,
    "oneSuccessor": 12,
    "twoPred": 6,
    "twoPredOneSuc": 3,
    "twoEach": 2,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 23,
    "BeginPhi": 0,
    "BranchCount": 19,
    "returnInt": 4,
    "CriticalCount": 1,
    "NumEdges": 26,
    "const32Bit": 38,
    "const64Bit": 30,
    "numConstZeroes": 38,
    "numConstOnes": 20,
    "UncondBranches": 12,
    "binaryConstArg": 12,
    "NumAShrInst": 0,
    "NumAddInst": 7,
    "NumAllocaInst": 11,
    "NumAndInst": 3,
    "BlockMid": 3,
    "BlockLow": 20,
    "NumBitCastInst": 0,
    "NumBrInst": 19,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 19,
    "NumICmpInst": 7,
    "NumLShrInst": 3,
    "NumLoadInst": 27,
    "NumMulInst": 2,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 16,
    "NumSubInst": 0,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 1,
    "TotalBlocks": 23,
    "TotalInsts": 131,
    "TotalMemInst": 80,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 44
  },
  "baseline_oz_instcount": 131,
  "knowledge_base_entry": [
    "--aggressive-instcombine",
    "--loop-simplifycfg",
    "--early-cse",
    "--sccp",
    "--loop-instsimplify",
    "--inline",
    "--licm",
    "--dce",
    "--early-cse-memssa"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--newgvn",
          "--scalarizer",
          "--loop-unroll",
          "--loop-distribute",
          "--elim-avail-extern",
          "--pgo-memop-opt",
          "--bdce",
          "--nary-reassociate",
          "--cross-dso-cfi",
          "--alignment-from-assumptions",
          "-loop-reduce",
          "--simple-loop-unswitch",
          "--aggressive-instcombine",
          "--lowerinvoke",
          "--canonicalize-aliases",
          "--loweratomic",
          "--infer-address-spaces",
          "--strip-nondebug",
          "--loop-rotate",
          "--add-discriminators",
          "--ipconstprop",
          "--inject-tli-mappings",
          "--coro-early",
          "--insert-gcov-profiling",
          "--tailcallelim",
          "--loop-instsimplify",
          "--redundant-dbg-inst-elim"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--newgvn",
      "--scalarizer",
      "--loop-unroll",
      "--loop-distribute",
      "--elim-avail-extern",
      "--pgo-memop-opt",
      "--bdce",
      "--nary-reassociate",
      "--cross-dso-cfi",
      "--alignment-from-assumptions",
      "-loop-reduce",
      "--simple-loop-unswitch",
      "--aggressive-instcombine",
      "--lowerinvoke",
      "--canonicalize-aliases",
      "--loweratomic",
      "--infer-address-spaces",
      "--strip-nondebug",
      "--loop-rotate",
      "--add-discriminators",
      "--ipconstprop",
      "--inject-tli-mappings",
      "--coro-early",
      "--insert-gcov-profiling",
      "--tailcallelim",
      "--loop-instsimplify",
      "--redundant-dbg-inst-elim"
    ],
    "performance_vs_Oz": "+1.5%"
  }
}
{
  "program_id": "github-v0_16444.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 81,
    "onePredOneSuc": 55,
    "onePredTwoSuc": 22,
    "oneSuccessor": 73,
    "twoPred": 25,
    "twoPredOneSuc": 11,
    "twoEach": 13,
    "twoSuccessor": 38,
    "morePreds": 7,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 121,
    "BeginPhi": 0,
    "BranchCount": 108,
    "returnInt": 13,
    "CriticalCount": 21,
    "NumEdges": 164,
    "const32Bit": 245,
    "const64Bit": 16,
    "numConstZeroes": 90,
    "numConstOnes": 117,
    "UncondBranches": 73,
    "binaryConstArg": 51,
    "NumAShrInst": 1,
    "NumAddInst": 18,
    "NumAllocaInst": 64,
    "NumAndInst": 5,
    "BlockMid": 19,
    "BlockLow": 102,
    "NumBitCastInst": 18,
    "NumBrInst": 108,
    "NumCallInst": 57,
    "NumGetElementPtrInst": 71,
    "NumICmpInst": 34,
    "NumLShrInst": 0,
    "NumLoadInst": 259,
    "NumMulInst": 12,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 8,
    "NumSExtInst": 49,
    "NumSelectInst": 0,
    "NumShlInst": 3,
    "NumStoreInst": 118,
    "NumSubInst": 6,
    "NumTruncInst": 1,
    "NumXorInst": 2,
    "NumZExtInst": 2,
    "TotalBlocks": 121,
    "TotalInsts": 894,
    "TotalMemInst": 569,
    "TotalFuncs": 28,
    "ArgsPhi": 0,
    "testUnary": 419
  },
  "baseline_oz_instcount": 896,
  "knowledge_base_entry": [
    "--loop-simplifycfg",
    "--jump-threading",
    "--slsr",
    "--gvn",
    "--licm",
    "--gvn",
    "--indvars",
    "-loop-reduce",
    "--load-store-vectorizer"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--sroa",
          "--partial-inliner",
          "--insert-gcov-profiling",
          "--redundant-dbg-inst-elim",
          "--alignment-from-assumptions",
          "--elim-avail-extern",
          "--loop-simplifycfg",
          "--correlated-propagation",
          "--indvars",
          "--separate-const-offset-from-gep",
          "--called-value-propagation",
          "--mergefunc",
          "--sink",
          "--coro-split",
          "--constmerge",
          "--loop-reroll",
          "--loop-guard-widening",
          "--mldst-motion",
          "--always-inline",
          "--dse",
          "--loop-sink",
          "--div-rem-pairs",
          "--tailcallelim",
          "--canonicalize-aliases"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--sroa",
      "--partial-inliner",
      "--insert-gcov-profiling",
      "--redundant-dbg-inst-elim",
      "--alignment-from-assumptions",
      "--elim-avail-extern",
      "--loop-simplifycfg",
      "--correlated-propagation",
      "--indvars",
      "--separate-const-offset-from-gep",
      "--called-value-propagation",
      "--mergefunc",
      "--sink",
      "--coro-split",
      "--constmerge",
      "--loop-reroll",
      "--loop-guard-widening",
      "--mldst-motion",
      "--always-inline",
      "--dse",
      "--loop-sink",
      "--div-rem-pairs",
      "--tailcallelim",
      "--canonicalize-aliases"
    ],
    "performance_vs_Oz": "+0.2%"
  }
}
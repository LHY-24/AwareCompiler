{
  "program_id": "linux-v0_10296.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 4,
    "onePred": 46,
    "onePredOneSuc": 33,
    "onePredTwoSuc": 11,
    "oneSuccessor": 41,
    "twoPred": 14,
    "twoPredOneSuc": 6,
    "twoEach": 3,
    "twoSuccessor": 22,
    "morePreds": 4,
    "BB03Phi": 4,
    "BBHiPhi": 0,
    "BBNoPhi": 88,
    "BeginPhi": 4,
    "BranchCount": 63,
    "returnInt": 20,
    "CriticalCount": 7,
    "NumEdges": 88,
    "const32Bit": 416,
    "const64Bit": 22,
    "numConstZeroes": 182,
    "numConstOnes": 105,
    "UncondBranches": 41,
    "binaryConstArg": 25,
    "NumAShrInst": 1,
    "NumAddInst": 2,
    "NumAllocaInst": 84,
    "NumAndInst": 5,
    "BlockMid": 15,
    "BlockLow": 77,
    "NumBitCastInst": 15,
    "NumBrInst": 63,
    "NumCallInst": 60,
    "NumGetElementPtrInst": 134,
    "NumICmpInst": 24,
    "NumLShrInst": 1,
    "NumLoadInst": 235,
    "NumMulInst": 2,
    "NumOrInst": 10,
    "NumPHIInst": 4,
    "NumRetInst": 28,
    "NumSExtInst": 0,
    "NumSelectInst": 2,
    "NumShlInst": 5,
    "NumStoreInst": 127,
    "NumSubInst": 0,
    "NumTruncInst": 6,
    "NumXorInst": 0,
    "NumZExtInst": 15,
    "TotalBlocks": 92,
    "TotalInsts": 826,
    "TotalMemInst": 640,
    "TotalFuncs": 54,
    "ArgsPhi": 8,
    "testUnary": 355
  },
  "baseline_oz_instcount": 826,
  "knowledge_base_entry": [
    "--mergefunc",
    "--die",
    "--die",
    "--mem2reg",
    "--aggressive-instcombine",
    "--mergefunc",
    "--licm",
    "--lower-constant-intrinsics",
    "--globalopt",
    "--gvn-hoist",
    "--instsimplify",
    "--early-cse-memssa"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-guard-widening",
          "--lowerinvoke",
          "--inject-tli-mappings",
          "--lower-expect",
          "--loop-instsimplify",
          "--aggressive-instcombine",
          "--barrier",
          "--mergeicmps",
          "--deadargelim",
          "--globalopt",
          "--load-store-vectorizer",
          "--coro-cleanup"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-guard-widening",
      "--lowerinvoke",
      "--inject-tli-mappings",
      "--lower-expect",
      "--loop-instsimplify",
      "--aggressive-instcombine",
      "--barrier",
      "--mergeicmps",
      "--deadargelim",
      "--globalopt",
      "--load-store-vectorizer",
      "--coro-cleanup"
    ],
    "performance_vs_Oz": "+0.1%"
  }
}
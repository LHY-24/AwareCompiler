{
  "program_id": "linux-v0_10968.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 35,
    "onePredOneSuc": 28,
    "onePredTwoSuc": 5,
    "oneSuccessor": 33,
    "twoPred": 8,
    "twoPredOneSuc": 1,
    "twoEach": 2,
    "twoSuccessor": 11,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 76,
    "BeginPhi": 0,
    "BranchCount": 44,
    "returnInt": 12,
    "CriticalCount": 6,
    "NumEdges": 60,
    "const32Bit": 356,
    "const64Bit": 10,
    "numConstZeroes": 136,
    "numConstOnes": 147,
    "UncondBranches": 33,
    "binaryConstArg": 22,
    "NumAShrInst": 2,
    "NumAddInst": 6,
    "NumAllocaInst": 117,
    "NumAndInst": 3,
    "BlockMid": 24,
    "BlockLow": 52,
    "NumBitCastInst": 18,
    "NumBrInst": 44,
    "NumCallInst": 80,
    "NumGetElementPtrInst": 104,
    "NumICmpInst": 12,
    "NumLShrInst": 8,
    "NumLoadInst": 288,
    "NumMulInst": 2,
    "NumOrInst": 2,
    "NumPHIInst": 0,
    "NumRetInst": 31,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 197,
    "NumSubInst": 7,
    "NumTruncInst": 26,
    "NumXorInst": 3,
    "NumZExtInst": 8,
    "TotalBlocks": 76,
    "TotalInsts": 971,
    "TotalMemInst": 786,
    "TotalFuncs": 52,
    "ArgsPhi": 0,
    "testUnary": 467
  },
  "baseline_oz_instcount": 971,
  "knowledge_base_entry": [
    "--aggressive-instcombine",
    "--prune-eh",
    "--sroa",
    "--loop-simplifycfg",
    "--globalopt",
    "--lower-expect",
    "--adce",
    "--load-store-vectorizer",
    "--die"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--prune-eh",
          "--coro-split",
          "--aggressive-instcombine",
          "--elim-avail-extern",
          "--infer-address-spaces",
          "--loop-simplifycfg",
          "--canonicalize-aliases",
          "--inject-tli-mappings",
          "--add-discriminators",
          "--dse",
          "--rewrite-statepoints-for-gc",
          "--loop-rotate",
          "--dce",
          "--loop-sink",
          "--div-rem-pairs",
          "--loop-guard-widening",
          "--loop-versioning",
          "--float2int",
          "--speculative-execution",
          "--loop-unswitch",
          "--loop-interchange",
          "--flattencfg",
          "--early-cse-memssa",
          "--mergereturn",
          "--loop-fusion"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--prune-eh",
      "--coro-split",
      "--aggressive-instcombine",
      "--elim-avail-extern",
      "--infer-address-spaces",
      "--loop-simplifycfg",
      "--canonicalize-aliases",
      "--inject-tli-mappings",
      "--add-discriminators",
      "--dse",
      "--rewrite-statepoints-for-gc",
      "--loop-rotate",
      "--dce",
      "--loop-sink",
      "--div-rem-pairs",
      "--loop-guard-widening",
      "--loop-versioning",
      "--float2int",
      "--speculative-execution",
      "--loop-unswitch",
      "--loop-interchange",
      "--flattencfg",
      "--early-cse-memssa",
      "--mergereturn",
      "--loop-fusion"
    ],
    "performance_vs_Oz": "+0.4%"
  }
}
{
  "program_id": "github-v0_21890.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 36,
    "onePredOneSuc": 18,
    "onePredTwoSuc": 15,
    "oneSuccessor": 36,
    "twoPred": 33,
    "twoPredOneSuc": 9,
    "twoEach": 17,
    "twoSuccessor": 33,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 81,
    "BeginPhi": 0,
    "BranchCount": 69,
    "returnInt": 1,
    "CriticalCount": 34,
    "NumEdges": 102,
    "const32Bit": 83,
    "const64Bit": 0,
    "numConstZeroes": 17,
    "numConstOnes": 41,
    "UncondBranches": 36,
    "binaryConstArg": 11,
    "NumAShrInst": 0,
    "NumAddInst": 11,
    "NumAllocaInst": 24,
    "NumAndInst": 0,
    "BlockMid": 0,
    "BlockLow": 81,
    "NumBitCastInst": 0,
    "NumBrInst": 69,
    "NumCallInst": 11,
    "NumGetElementPtrInst": 0,
    "NumICmpInst": 32,
    "NumLShrInst": 0,
    "NumLoadInst": 60,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 12,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 44,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 81,
    "TotalInsts": 263,
    "TotalMemInst": 139,
    "TotalFuncs": 12,
    "ArgsPhi": 0,
    "testUnary": 84
  },
  "baseline_oz_instcount": 266,
  "knowledge_base_entry": [
    "--dse",
    "--instcombine",
    "--memcpyopt",
    "--inline",
    "--ipsccp",
    "--bdce",
    "--jump-threading"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--lower-matrix-intrinsics",
          "--div-rem-pairs",
          "--forceattrs",
          "--always-inline",
          "--post-inline-ee-instrument",
          "--partially-inline-libcalls",
          "--partial-inliner",
          "--sink",
          "--lowerinvoke",
          "--lower-expect",
          "--deadargelim"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--lower-matrix-intrinsics",
      "--div-rem-pairs",
      "--forceattrs",
      "--always-inline",
      "--post-inline-ee-instrument",
      "--partially-inline-libcalls",
      "--partial-inliner",
      "--sink",
      "--lowerinvoke",
      "--lower-expect",
      "--deadargelim"
    ],
    "performance_vs_Oz": "+1.1%"
  }
}
{
  "program_id": "github-v0_29809.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 13,
    "onePredOneSuc": 8,
    "onePredTwoSuc": 2,
    "oneSuccessor": 11,
    "twoPred": 5,
    "twoPredOneSuc": 2,
    "twoEach": 3,
    "twoSuccessor": 6,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 21,
    "BeginPhi": 0,
    "BranchCount": 17,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 23,
    "const32Bit": 31,
    "const64Bit": 29,
    "numConstZeroes": 35,
    "numConstOnes": 19,
    "UncondBranches": 11,
    "binaryConstArg": 6,
    "NumAShrInst": 0,
    "NumAddInst": 9,
    "NumAllocaInst": 12,
    "NumAndInst": 0,
    "BlockMid": 5,
    "BlockLow": 16,
    "NumBitCastInst": 0,
    "NumBrInst": 17,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 22,
    "NumICmpInst": 6,
    "NumLShrInst": 0,
    "NumLoadInst": 37,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 19,
    "NumSubInst": 1,
    "NumTruncInst": 8,
    "NumXorInst": 0,
    "NumZExtInst": 22,
    "TotalBlocks": 21,
    "TotalInsts": 167,
    "TotalMemInst": 97,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 82
  },
  "baseline_oz_instcount": 167,
  "knowledge_base_entry": [
    "--loop-rotate",
    "--inline",
    "--gvn-hoist",
    "--aggressive-instcombine",
    "--bdce",
    "--load-store-vectorizer",
    "--dce",
    "--mem2reg",
    "--simplifycfg",
    "--correlated-propagation",
    "--simplifycfg",
    "-loop-reduce",
    "--sroa",
    "--inline"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--lower-constant-intrinsics",
          "--strip-nondebug",
          "--strip-debug-declare",
          "--guard-widening",
          "--loop-unroll",
          "--gvn",
          "--loop-sink",
          "--lowerinvoke",
          "--slsr",
          "--die",
          "--sancov",
          "--mergefunc",
          "--rpo-functionattrs",
          "--add-discriminators",
          "--loop-rotate",
          "--inject-tli-mappings",
          "--lowerswitch",
          "--sink",
          "--lower-expect",
          "--inline",
          "--flattencfg",
          "--aggressive-instcombine",
          "--irce",
          "--early-cse"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+10.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--lower-constant-intrinsics",
      "--strip-nondebug",
      "--strip-debug-declare",
      "--guard-widening",
      "--loop-unroll",
      "--gvn",
      "--loop-sink",
      "--lowerinvoke",
      "--slsr",
      "--die",
      "--sancov",
      "--mergefunc",
      "--rpo-functionattrs",
      "--add-discriminators",
      "--loop-rotate",
      "--inject-tli-mappings",
      "--lowerswitch",
      "--sink",
      "--lower-expect",
      "--inline",
      "--flattencfg",
      "--aggressive-instcombine",
      "--irce",
      "--early-cse"
    ],
    "performance_vs_Oz": "+10.8%"
  }
}
{
  "program_id": "github-v0_44633.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 3,
    "onePredOneSuc": 2,
    "onePredTwoSuc": 0,
    "oneSuccessor": 3,
    "twoPred": 1,
    "twoPredOneSuc": 0,
    "twoEach": 1,
    "twoSuccessor": 1,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 6,
    "BeginPhi": 0,
    "BranchCount": 4,
    "returnInt": 2,
    "CriticalCount": 0,
    "NumEdges": 5,
    "const32Bit": 8,
    "const64Bit": 3,
    "numConstZeroes": 3,
    "numConstOnes": 8,
    "UncondBranches": 3,
    "binaryConstArg": 3,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 6,
    "NumAndInst": 0,
    "BlockMid": 0,
    "BlockLow": 6,
    "NumBitCastInst": 0,
    "NumBrInst": 4,
    "NumCallInst": 2,
    "NumGetElementPtrInst": 2,
    "NumICmpInst": 1,
    "NumLShrInst": 0,
    "NumLoadInst": 11,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 2,
    "NumSExtInst": 1,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 8,
    "NumSubInst": 0,
    "NumTruncInst": 2,
    "NumXorInst": 2,
    "NumZExtInst": 3,
    "TotalBlocks": 6,
    "TotalInsts": 46,
    "TotalMemInst": 29,
    "TotalFuncs": 4,
    "ArgsPhi": 0,
    "testUnary": 23
  },
  "baseline_oz_instcount": 46,
  "knowledge_base_entry": [
    "--bdce",
    "--ipsccp",
    "--aggressive-instcombine",
    "--adce",
    "--lower-expect",
    "--die",
    "--correlated-propagation",
    "--instcombine",
    "--elim-avail-extern",
    "--simplifycfg",
    "--dce",
    "--loop-instsimplify",
    "--lower-expect"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--gvn-hoist",
          "--aggressive-instcombine",
          "--loop-versioning-licm",
          "--mem2reg",
          "--ee-instrument",
          "--lower-expect",
          "--licm",
          "--scalarizer",
          "--newgvn",
          "--sink",
          "--lower-widenable-condition",
          "--reg2mem",
          "--correlated-propagation",
          "--bdce",
          "--strip-debug-declare",
          "--div-rem-pairs",
          "--sancov",
          "--loop-distribute",
          "--pgo-memop-opt",
          "--instcombine",
          "--globalsplit",
          "--barrier",
          "--prune-eh",
          "--mergefunc",
          "--jump-threading",
          "--loop-fusion",
          "--loop-data-prefetch",
          "--die"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+4.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--gvn-hoist",
      "--aggressive-instcombine",
      "--loop-versioning-licm",
      "--mem2reg",
      "--ee-instrument",
      "--lower-expect",
      "--licm",
      "--scalarizer",
      "--newgvn",
      "--sink",
      "--lower-widenable-condition",
      "--reg2mem",
      "--correlated-propagation",
      "--bdce",
      "--strip-debug-declare",
      "--div-rem-pairs",
      "--sancov",
      "--loop-distribute",
      "--pgo-memop-opt",
      "--instcombine",
      "--globalsplit",
      "--barrier",
      "--prune-eh",
      "--mergefunc",
      "--jump-threading",
      "--loop-fusion",
      "--loop-data-prefetch",
      "--die"
    ],
    "performance_vs_Oz": "+4.3%"
  }
}
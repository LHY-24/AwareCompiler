{
  "program_id": "github-v0_5243.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 28,
    "onePredOneSuc": 21,
    "onePredTwoSuc": 7,
    "oneSuccessor": 27,
    "twoPred": 14,
    "twoPredOneSuc": 6,
    "twoEach": 5,
    "twoSuccessor": 16,
    "morePreds": 1,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 48,
    "BeginPhi": 1,
    "BranchCount": 43,
    "returnInt": 4,
    "CriticalCount": 5,
    "NumEdges": 59,
    "const32Bit": 103,
    "const64Bit": 12,
    "numConstZeroes": 53,
    "numConstOnes": 27,
    "UncondBranches": 27,
    "binaryConstArg": 2,
    "NumAShrInst": 0,
    "NumAddInst": 3,
    "NumAllocaInst": 19,
    "NumAndInst": 0,
    "BlockMid": 4,
    "BlockLow": 45,
    "NumBitCastInst": 9,
    "NumBrInst": 43,
    "NumCallInst": 15,
    "NumGetElementPtrInst": 43,
    "NumICmpInst": 16,
    "NumLShrInst": 0,
    "NumLoadInst": 107,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 1,
    "NumRetInst": 6,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 45,
    "NumSubInst": 1,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 4,
    "TotalBlocks": 49,
    "TotalInsts": 314,
    "TotalMemInst": 229,
    "TotalFuncs": 9,
    "ArgsPhi": 2,
    "testUnary": 141
  },
  "baseline_oz_instcount": 314,
  "knowledge_base_entry": [
    "--gvn",
    "--correlated-propagation",
    "--gvn-hoist",
    "--newgvn",
    "--sccp",
    "--globalopt",
    "--ipsccp",
    "--adce",
    "--early-cse",
    "--aggressive-instcombine",
    "--dse",
    "--globalopt",
    "--ipsccp",
    "--elim-avail-extern",
    "--nary-reassociate",
    "--loop-fusion",
    "--jump-threading",
    "--loop-reroll",
    "--sroa",
    "--instcombine"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "-loop-reduce",
          "--loweratomic",
          "--loop-guard-widening",
          "--loop-data-prefetch",
          "--instcombine",
          "--aggressive-instcombine",
          "--strip",
          "--loop-instsimplify",
          "--div-rem-pairs",
          "--indvars",
          "--lower-matrix-intrinsics",
          "--loop-simplify",
          "--ipconstprop"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "-loop-reduce",
      "--loweratomic",
      "--loop-guard-widening",
      "--loop-data-prefetch",
      "--instcombine",
      "--aggressive-instcombine",
      "--strip",
      "--loop-instsimplify",
      "--div-rem-pairs",
      "--indvars",
      "--lower-matrix-intrinsics",
      "--loop-simplify",
      "--ipconstprop"
    ],
    "performance_vs_Oz": "+1.3%"
  }
}
{
  "program_id": "github-v0_7372.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 2,
    "onePredOneSuc": 1,
    "onePredTwoSuc": 1,
    "oneSuccessor": 1,
    "twoPred": 0,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 2,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 4,
    "BeginPhi": 0,
    "BranchCount": 3,
    "returnInt": 0,
    "CriticalCount": 2,
    "NumEdges": 5,
    "const32Bit": 5,
    "const64Bit": 0,
    "numConstZeroes": 0,
    "numConstOnes": 2,
    "UncondBranches": 1,
    "binaryConstArg": 1,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 2,
    "NumAndInst": 0,
    "BlockMid": 0,
    "BlockLow": 4,
    "NumBitCastInst": 0,
    "NumBrInst": 3,
    "NumCallInst": 0,
    "NumGetElementPtrInst": 0,
    "NumICmpInst": 2,
    "NumLShrInst": 0,
    "NumLoadInst": 5,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 1,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 3,
    "NumSubInst": 0,
    "NumTruncInst": 2,
    "NumXorInst": 1,
    "NumZExtInst": 4,
    "TotalBlocks": 4,
    "TotalInsts": 23,
    "TotalMemInst": 10,
    "TotalFuncs": 1,
    "ArgsPhi": 0,
    "testUnary": 13
  },
  "baseline_oz_instcount": 23,
  "knowledge_base_entry": [
    "--simplifycfg",
    "--newgvn",
    "--aggressive-instcombine",
    "--loweratomic",
    "--ipsccp",
    "--instcombine",
    "--early-cse"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--mergereturn",
          "--tailcallelim",
          "--loop-vectorize",
          "--correlated-propagation",
          "--called-value-propagation",
          "--loop-rotate",
          "--irce",
          "--mergeicmps",
          "--strip-debug-declare",
          "--loop-versioning",
          "--early-cse-memssa",
          "--lower-matrix-intrinsics",
          "--ee-instrument",
          "--die",
          "--flattencfg",
          "--slp-vectorizer",
          "--attributor",
          "--loop-reroll",
          "--lower-guard-intrinsic",
          "--aggressive-instcombine",
          "--loop-guard-widening",
          "--loop-load-elim",
          "--alignment-from-assumptions",
          "--prune-eh",
          "--loop-deletion",
          "--loop-versioning-licm",
          "--instnamer",
          "--deadargelim",
          "--mem2reg"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+8.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--mergereturn",
      "--tailcallelim",
      "--loop-vectorize",
      "--correlated-propagation",
      "--called-value-propagation",
      "--loop-rotate",
      "--irce",
      "--mergeicmps",
      "--strip-debug-declare",
      "--loop-versioning",
      "--early-cse-memssa",
      "--lower-matrix-intrinsics",
      "--ee-instrument",
      "--die",
      "--flattencfg",
      "--slp-vectorizer",
      "--attributor",
      "--loop-reroll",
      "--lower-guard-intrinsic",
      "--aggressive-instcombine",
      "--loop-guard-widening",
      "--loop-load-elim",
      "--alignment-from-assumptions",
      "--prune-eh",
      "--loop-deletion",
      "--loop-versioning-licm",
      "--instnamer",
      "--deadargelim",
      "--mem2reg"
    ],
    "performance_vs_Oz": "+8.7%"
  }
}
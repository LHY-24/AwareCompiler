{
  "program_id": "github-v0_30054.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 13,
    "onePredOneSuc": 9,
    "onePredTwoSuc": 1,
    "oneSuccessor": 11,
    "twoPred": 5,
    "twoPredOneSuc": 1,
    "twoEach": 4,
    "twoSuccessor": 6,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 21,
    "BeginPhi": 0,
    "BranchCount": 17,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 23,
    "const32Bit": 30,
    "const64Bit": 22,
    "numConstZeroes": 25,
    "numConstOnes": 20,
    "UncondBranches": 11,
    "binaryConstArg": 8,
    "NumAShrInst": 0,
    "NumAddInst": 7,
    "NumAllocaInst": 12,
    "NumAndInst": 0,
    "BlockMid": 5,
    "BlockLow": 16,
    "NumBitCastInst": 0,
    "NumBrInst": 17,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 14,
    "NumICmpInst": 6,
    "NumLShrInst": 0,
    "NumLoadInst": 28,
    "NumMulInst": 2,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 19,
    "NumSubInst": 1,
    "NumTruncInst": 7,
    "NumXorInst": 0,
    "NumZExtInst": 14,
    "TotalBlocks": 21,
    "TotalInsts": 141,
    "TotalMemInst": 80,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 64
  },
  "baseline_oz_instcount": 141,
  "knowledge_base_entry": [
    "--loop-simplifycfg",
    "--mergefunc",
    "--inline",
    "--aggressive-instcombine",
    "--flattencfg",
    "--aggressive-instcombine",
    "--loop-rotate",
    "--lower-expect",
    "--prune-eh",
    "--mem2reg",
    "--newgvn",
    "--gvn-hoist",
    "--globalopt",
    "--flattencfg",
    "--gvn-hoist",
    "--mergefunc",
    "--load-store-vectorizer",
    "--die",
    "--elim-avail-extern",
    "--nary-reassociate",
    "--inline",
    "--early-cse-memssa",
    "--bdce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--strip-nondebug",
          "--correlated-propagation",
          "--strip-dead-prototypes",
          "--lowerinvoke",
          "--scalarizer",
          "--argpromotion",
          "--rewrite-statepoints-for-gc",
          "--mergefunc",
          "--separate-const-offset-from-gep",
          "--always-inline",
          "--die",
          "--div-rem-pairs",
          "--ipconstprop",
          "--inject-tli-mappings",
          "--partially-inline-libcalls",
          "--redundant-dbg-inst-elim",
          "--irce",
          "--aggressive-instcombine",
          "--loop-simplify",
          "--pgo-memop-opt",
          "--loop-vectorize",
          "--coro-cleanup",
          "--loop-versioning-licm",
          "--slp-vectorizer",
          "--gvn"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+9.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--strip-nondebug",
      "--correlated-propagation",
      "--strip-dead-prototypes",
      "--lowerinvoke",
      "--scalarizer",
      "--argpromotion",
      "--rewrite-statepoints-for-gc",
      "--mergefunc",
      "--separate-const-offset-from-gep",
      "--always-inline",
      "--die",
      "--div-rem-pairs",
      "--ipconstprop",
      "--inject-tli-mappings",
      "--partially-inline-libcalls",
      "--redundant-dbg-inst-elim",
      "--irce",
      "--aggressive-instcombine",
      "--loop-simplify",
      "--pgo-memop-opt",
      "--loop-vectorize",
      "--coro-cleanup",
      "--loop-versioning-licm",
      "--slp-vectorizer",
      "--gvn"
    ],
    "performance_vs_Oz": "+9.9%"
  }
}
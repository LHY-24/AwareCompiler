{
  "program_id": "linux-v0_2611.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 45,
    "onePredOneSuc": 34,
    "onePredTwoSuc": 9,
    "oneSuccessor": 40,
    "twoPred": 8,
    "twoPredOneSuc": 3,
    "twoEach": 3,
    "twoSuccessor": 15,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 79,
    "BeginPhi": 0,
    "BranchCount": 55,
    "returnInt": 23,
    "CriticalCount": 6,
    "NumEdges": 70,
    "const32Bit": 162,
    "const64Bit": 40,
    "numConstZeroes": 89,
    "numConstOnes": 74,
    "UncondBranches": 40,
    "binaryConstArg": 20,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 61,
    "NumAndInst": 9,
    "BlockMid": 11,
    "BlockLow": 68,
    "NumBitCastInst": 18,
    "NumBrInst": 55,
    "NumCallInst": 59,
    "NumGetElementPtrInst": 53,
    "NumICmpInst": 15,
    "NumLShrInst": 2,
    "NumLoadInst": 133,
    "NumMulInst": 1,
    "NumOrInst": 5,
    "NumPHIInst": 0,
    "NumRetInst": 24,
    "NumSExtInst": 1,
    "NumSelectInst": 1,
    "NumShlInst": 1,
    "NumStoreInst": 84,
    "NumSubInst": 0,
    "NumTruncInst": 9,
    "NumXorInst": 2,
    "NumZExtInst": 11,
    "TotalBlocks": 79,
    "TotalInsts": 550,
    "TotalMemInst": 390,
    "TotalFuncs": 43,
    "ArgsPhi": 0,
    "testUnary": 237
  },
  "baseline_oz_instcount": 550,
  "knowledge_base_entry": [
    "--float2int",
    "--early-cse-memssa",
    "--mergefunc",
    "--adce",
    "--simplifycfg",
    "--jump-threading",
    "--aggressive-instcombine",
    "--gvn-hoist",
    "--correlated-propagation",
    "--early-cse-memssa",
    "--adce",
    "--correlated-propagation",
    "--nary-reassociate",
    "--licm"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--sccp",
          "--loop-load-elim",
          "--scalarizer",
          "--loop-versioning",
          "--loop-unroll",
          "--instcombine",
          "--elim-avail-extern",
          "--libcalls-shrinkwrap",
          "--loop-unroll-and-jam",
          "--deadargelim",
          "--bdce",
          "--gvn",
          "--called-value-propagation",
          "--mldst-motion",
          "--loop-vectorize",
          "--speculative-execution",
          "--consthoist",
          "--instsimplify",
          "--loop-reroll",
          "--globalsplit",
          "--loop-interchange",
          "--aggressive-instcombine",
          "--slp-vectorizer",
          "--constprop",
          "--prune-eh",
          "--div-rem-pairs",
          "--die"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--sccp",
      "--loop-load-elim",
      "--scalarizer",
      "--loop-versioning",
      "--loop-unroll",
      "--instcombine",
      "--elim-avail-extern",
      "--libcalls-shrinkwrap",
      "--loop-unroll-and-jam",
      "--deadargelim",
      "--bdce",
      "--gvn",
      "--called-value-propagation",
      "--mldst-motion",
      "--loop-vectorize",
      "--speculative-execution",
      "--consthoist",
      "--instsimplify",
      "--loop-reroll",
      "--globalsplit",
      "--loop-interchange",
      "--aggressive-instcombine",
      "--slp-vectorizer",
      "--constprop",
      "--prune-eh",
      "--div-rem-pairs",
      "--die"
    ],
    "performance_vs_Oz": "+1.5%"
  }
}
{
  "program_id": "linux-v0_8549.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 19,
    "onePredOneSuc": 15,
    "onePredTwoSuc": 4,
    "oneSuccessor": 16,
    "twoPred": 6,
    "twoPredOneSuc": 1,
    "twoEach": 3,
    "twoSuccessor": 11,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 44,
    "BeginPhi": 0,
    "BranchCount": 27,
    "returnInt": 11,
    "CriticalCount": 4,
    "NumEdges": 38,
    "const32Bit": 157,
    "const64Bit": 6,
    "numConstZeroes": 62,
    "numConstOnes": 66,
    "UncondBranches": 16,
    "binaryConstArg": 13,
    "NumAShrInst": 1,
    "NumAddInst": 2,
    "NumAllocaInst": 47,
    "NumAndInst": 3,
    "BlockMid": 12,
    "BlockLow": 32,
    "NumBitCastInst": 15,
    "NumBrInst": 27,
    "NumCallInst": 30,
    "NumGetElementPtrInst": 44,
    "NumICmpInst": 12,
    "NumLShrInst": 0,
    "NumLoadInst": 112,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 17,
    "NumSExtInst": 5,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 60,
    "NumSubInst": 4,
    "NumTruncInst": 7,
    "NumXorInst": 2,
    "NumZExtInst": 4,
    "TotalBlocks": 44,
    "TotalInsts": 398,
    "TotalMemInst": 293,
    "TotalFuncs": 28,
    "ArgsPhi": 0,
    "testUnary": 194
  },
  "baseline_oz_instcount": 399,
  "knowledge_base_entry": [
    "--gvn-hoist",
    "--die",
    "--gvn",
    "--die",
    "--slp-vectorizer",
    "--slsr",
    "--jump-threading",
    "--simplifycfg",
    "--ipsccp",
    "--reassociate",
    "--jump-threading",
    "--nary-reassociate",
    "--slsr"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--always-inline",
          "--constprop",
          "--prune-eh",
          "--ipsccp",
          "--tailcallelim",
          "--loop-vectorize",
          "--sccp",
          "--float2int",
          "--functionattrs",
          "--globaldce",
          "--inferattrs"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--always-inline",
      "--constprop",
      "--prune-eh",
      "--ipsccp",
      "--tailcallelim",
      "--loop-vectorize",
      "--sccp",
      "--float2int",
      "--functionattrs",
      "--globaldce",
      "--inferattrs"
    ],
    "performance_vs_Oz": "+0.3%"
  }
}
{
  "program_id": "github-v0_3691.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 0,
    "onePredOneSuc": 0,
    "onePredTwoSuc": 0,
    "oneSuccessor": 0,
    "twoPred": 0,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 0,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 2,
    "BeginPhi": 0,
    "BranchCount": 0,
    "returnInt": 2,
    "CriticalCount": 0,
    "NumEdges": 0,
    "const32Bit": 17,
    "const64Bit": 2,
    "numConstZeroes": 2,
    "numConstOnes": 10,
    "UncondBranches": 0,
    "binaryConstArg": 6,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 9,
    "NumAndInst": 1,
    "BlockMid": 1,
    "BlockLow": 1,
    "NumBitCastInst": 0,
    "NumBrInst": 0,
    "NumCallInst": 2,
    "NumGetElementPtrInst": 0,
    "NumICmpInst": 0,
    "NumLShrInst": 0,
    "NumLoadInst": 9,
    "NumMulInst": 3,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 2,
    "NumSExtInst": 1,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 11,
    "NumSubInst": 0,
    "NumTruncInst": 2,
    "NumXorInst": 2,
    "NumZExtInst": 2,
    "TotalBlocks": 2,
    "TotalInsts": 47,
    "TotalMemInst": 31,
    "TotalFuncs": 3,
    "ArgsPhi": 0,
    "testUnary": 23
  },
  "baseline_oz_instcount": 47,
  "knowledge_base_entry": [
    "--loop-load-elim",
    "--early-cse",
    "--mem2reg",
    "--globalopt",
    "--mem2reg",
    "--dce",
    "--newgvn",
    "--ipsccp",
    "--aggressive-instcombine",
    "--dse",
    "--mergefunc",
    "--globaldce",
    "--ipsccp",
    "--inline",
    "--loop-simplifycfg",
    "--instsimplify",
    "--reassociate",
    "--sroa",
    "--indvars",
    "--sroa"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--strip-debug-declare",
          "--alignment-from-assumptions",
          "--loop-idiom",
          "--break-crit-edges",
          "--strip-dead-prototypes",
          "--loop-simplifycfg",
          "--inject-tli-mappings",
          "--mergereturn",
          "--attributor",
          "--ee-instrument",
          "--loop-fusion",
          "--licm",
          "--coro-split",
          "--sink",
          "--globalopt",
          "--loop-unroll-and-jam",
          "--early-cse",
          "--aggressive-instcombine"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+8.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--strip-debug-declare",
      "--alignment-from-assumptions",
      "--loop-idiom",
      "--break-crit-edges",
      "--strip-dead-prototypes",
      "--loop-simplifycfg",
      "--inject-tli-mappings",
      "--mergereturn",
      "--attributor",
      "--ee-instrument",
      "--loop-fusion",
      "--licm",
      "--coro-split",
      "--sink",
      "--globalopt",
      "--loop-unroll-and-jam",
      "--early-cse",
      "--aggressive-instcombine"
    ],
    "performance_vs_Oz": "+8.5%"
  }
}
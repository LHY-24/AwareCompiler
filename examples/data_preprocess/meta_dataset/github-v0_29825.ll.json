{
  "program_id": "github-v0_29825.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 11,
    "onePredOneSuc": 7,
    "onePredTwoSuc": 1,
    "oneSuccessor": 9,
    "twoPred": 4,
    "twoPredOneSuc": 1,
    "twoEach": 3,
    "twoSuccessor": 5,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 18,
    "BeginPhi": 0,
    "BranchCount": 14,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 19,
    "const32Bit": 31,
    "const64Bit": 46,
    "numConstZeroes": 44,
    "numConstOnes": 28,
    "UncondBranches": 9,
    "binaryConstArg": 7,
    "NumAShrInst": 0,
    "NumAddInst": 6,
    "NumAllocaInst": 14,
    "NumAndInst": 0,
    "BlockMid": 4,
    "BlockLow": 14,
    "NumBitCastInst": 12,
    "NumBrInst": 14,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 34,
    "NumICmpInst": 5,
    "NumLShrInst": 0,
    "NumLoadInst": 33,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 24,
    "NumSubInst": 1,
    "NumTruncInst": 3,
    "NumXorInst": 0,
    "NumZExtInst": 9,
    "TotalBlocks": 18,
    "TotalInsts": 169,
    "TotalMemInst": 112,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 74
  },
  "baseline_oz_instcount": 169,
  "knowledge_base_entry": [
    "--instsimplify",
    "--aggressive-instcombine",
    "--loop-simplifycfg",
    "--lower-expect",
    "--early-cse",
    "--mldst-motion",
    "--instcombine",
    "--loop-rotate",
    "--early-cse-memssa"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--tailcallelim",
          "--aggressive-instcombine",
          "--sancov",
          "--strip",
          "--constmerge",
          "--rpo-functionattrs",
          "--slp-vectorizer",
          "--infer-address-spaces",
          "--nary-reassociate",
          "--early-cse",
          "--functionattrs",
          "--jump-threading",
          "--coro-split",
          "--inferattrs",
          "--loop-rotate",
          "--globalopt",
          "--mergeicmps",
          "--die",
          "--alignment-from-assumptions"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--tailcallelim",
      "--aggressive-instcombine",
      "--sancov",
      "--strip",
      "--constmerge",
      "--rpo-functionattrs",
      "--slp-vectorizer",
      "--infer-address-spaces",
      "--nary-reassociate",
      "--early-cse",
      "--functionattrs",
      "--jump-threading",
      "--coro-split",
      "--inferattrs",
      "--loop-rotate",
      "--globalopt",
      "--mergeicmps",
      "--die",
      "--alignment-from-assumptions"
    ],
    "performance_vs_Oz": "+2.4%"
  }
}
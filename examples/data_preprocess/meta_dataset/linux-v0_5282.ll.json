{
  "program_id": "linux-v0_5282.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 87,
    "onePredOneSuc": 57,
    "onePredTwoSuc": 30,
    "oneSuccessor": 68,
    "twoPred": 18,
    "twoPredOneSuc": 8,
    "twoEach": 7,
    "twoSuccessor": 45,
    "morePreds": 8,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 136,
    "BeginPhi": 1,
    "BranchCount": 113,
    "returnInt": 25,
    "CriticalCount": 14,
    "NumEdges": 158,
    "const32Bit": 314,
    "const64Bit": 24,
    "numConstZeroes": 121,
    "numConstOnes": 116,
    "UncondBranches": 68,
    "binaryConstArg": 11,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 104,
    "NumAndInst": 5,
    "BlockMid": 19,
    "BlockLow": 118,
    "NumBitCastInst": 8,
    "NumBrInst": 113,
    "NumCallInst": 62,
    "NumGetElementPtrInst": 89,
    "NumICmpInst": 44,
    "NumLShrInst": 1,
    "NumLoadInst": 273,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 1,
    "NumRetInst": 24,
    "NumSExtInst": 29,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 139,
    "NumSubInst": 3,
    "NumTruncInst": 6,
    "NumXorInst": 2,
    "NumZExtInst": 12,
    "TotalBlocks": 137,
    "TotalInsts": 921,
    "TotalMemInst": 667,
    "TotalFuncs": 36,
    "ArgsPhi": 2,
    "testUnary": 436
  },
  "baseline_oz_instcount": 922,
  "knowledge_base_entry": [
    "--lowerinvoke",
    "--instcombine",
    "--globalopt",
    "--lower-expect",
    "--globalopt",
    "--dse",
    "--elim-avail-extern",
    "--flattencfg",
    "--gvn-hoist",
    "--instsimplify"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--globalopt",
          "--slsr",
          "--dce",
          "--die",
          "--coro-early",
          "--instcombine",
          "--inject-tli-mappings",
          "--correlated-propagation",
          "--lower-guard-intrinsic",
          "--canonicalize-aliases",
          "--aggressive-instcombine"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--globalopt",
      "--slsr",
      "--dce",
      "--die",
      "--coro-early",
      "--instcombine",
      "--inject-tli-mappings",
      "--correlated-propagation",
      "--lower-guard-intrinsic",
      "--canonicalize-aliases",
      "--aggressive-instcombine"
    ],
    "performance_vs_Oz": "+0.1%"
  }
}
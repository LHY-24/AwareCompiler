{
  "program_id": "linux-v0_6533.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 14,
    "onePredOneSuc": 11,
    "onePredTwoSuc": 3,
    "oneSuccessor": 14,
    "twoPred": 8,
    "twoPredOneSuc": 2,
    "twoEach": 5,
    "twoSuccessor": 8,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 23,
    "BeginPhi": 0,
    "BranchCount": 22,
    "returnInt": 1,
    "CriticalCount": 3,
    "NumEdges": 30,
    "const32Bit": 76,
    "const64Bit": 10,
    "numConstZeroes": 48,
    "numConstOnes": 25,
    "UncondBranches": 14,
    "binaryConstArg": 1,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 13,
    "NumAndInst": 0,
    "BlockMid": 1,
    "BlockLow": 22,
    "NumBitCastInst": 8,
    "NumBrInst": 22,
    "NumCallInst": 6,
    "NumGetElementPtrInst": 30,
    "NumICmpInst": 7,
    "NumLShrInst": 0,
    "NumLoadInst": 40,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 1,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 18,
    "NumSubInst": 0,
    "NumTruncInst": 1,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 23,
    "TotalInsts": 150,
    "TotalMemInst": 107,
    "TotalFuncs": 5,
    "ArgsPhi": 0,
    "testUnary": 65
  },
  "baseline_oz_instcount": 152,
  "knowledge_base_entry": [
    "--loop-unroll-and-jam",
    "--jump-threading",
    "--gvn-hoist",
    "--sroa",
    "--dse",
    "--instcombine",
    "--nary-reassociate",
    "--slsr",
    "--load-store-vectorizer",
    "--sroa",
    "--ipsccp"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--sancov",
          "--alignment-from-assumptions",
          "--lower-matrix-intrinsics",
          "--attributor",
          "--add-discriminators",
          "--libcalls-shrinkwrap",
          "--pgo-memop-opt",
          "--aggressive-instcombine",
          "--slsr",
          "--called-value-propagation",
          "--constmerge",
          "--reassociate",
          "--inferattrs",
          "--speculative-execution",
          "--mem2reg"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--sancov",
      "--alignment-from-assumptions",
      "--lower-matrix-intrinsics",
      "--attributor",
      "--add-discriminators",
      "--libcalls-shrinkwrap",
      "--pgo-memop-opt",
      "--aggressive-instcombine",
      "--slsr",
      "--called-value-propagation",
      "--constmerge",
      "--reassociate",
      "--inferattrs",
      "--speculative-execution",
      "--mem2reg"
    ],
    "performance_vs_Oz": "+1.3%"
  }
}
{
  "program_id": "github-v0_40674.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 18,
    "onePredOneSuc": 11,
    "onePredTwoSuc": 5,
    "oneSuccessor": 16,
    "twoPred": 8,
    "twoPredOneSuc": 5,
    "twoEach": 2,
    "twoSuccessor": 9,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 29,
    "BeginPhi": 0,
    "BranchCount": 25,
    "returnInt": 4,
    "CriticalCount": 1,
    "NumEdges": 34,
    "const32Bit": 50,
    "const64Bit": 114,
    "numConstZeroes": 108,
    "numConstOnes": 42,
    "UncondBranches": 16,
    "binaryConstArg": 22,
    "NumAShrInst": 4,
    "NumAddInst": 3,
    "NumAllocaInst": 15,
    "NumAndInst": 10,
    "BlockMid": 7,
    "BlockLow": 22,
    "NumBitCastInst": 24,
    "NumBrInst": 25,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 71,
    "NumICmpInst": 9,
    "NumLShrInst": 1,
    "NumLoadInst": 49,
    "NumMulInst": 0,
    "NumOrInst": 5,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 7,
    "NumSelectInst": 0,
    "NumShlInst": 3,
    "NumStoreInst": 35,
    "NumSubInst": 0,
    "NumTruncInst": 11,
    "NumXorInst": 0,
    "NumZExtInst": 17,
    "TotalBlocks": 29,
    "TotalInsts": 300,
    "TotalMemInst": 177,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 123
  },
  "baseline_oz_instcount": 300,
  "knowledge_base_entry": [
    "--loop-interchange",
    "--early-cse",
    "--prune-eh",
    "--newgvn",
    "--loop-deletion",
    "--gvn",
    "--aggressive-instcombine",
    "--instsimplify",
    "--simplifycfg",
    "--newgvn",
    "--sccp",
    "--gvn",
    "--jump-threading",
    "--simplifycfg",
    "--early-cse",
    "--jump-threading",
    "--dse",
    "--inline",
    "--reassociate",
    "--instsimplify",
    "--simplifycfg",
    "--mem2reg",
    "--bdce",
    "--simplifycfg",
    "--loop-simplifycfg",
    "--licm",
    "--reassociate",
    "--globalopt",
    "--elim-avail-extern",
    "--mergefunc",
    "--mergefunc"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-guard-widening",
          "--ipconstprop",
          "--simplifycfg",
          "--sroa",
          "--loop-load-elim",
          "--infer-address-spaces",
          "--canonicalize-aliases",
          "--loop-simplifycfg",
          "--loop-versioning",
          "--sccp",
          "--aggressive-instcombine",
          "--loop-sink",
          "--loop-interchange",
          "--loop-fusion",
          "--adce",
          "--early-cse",
          "--indvars"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-guard-widening",
      "--ipconstprop",
      "--simplifycfg",
      "--sroa",
      "--loop-load-elim",
      "--infer-address-spaces",
      "--canonicalize-aliases",
      "--loop-simplifycfg",
      "--loop-versioning",
      "--sccp",
      "--aggressive-instcombine",
      "--loop-sink",
      "--loop-interchange",
      "--loop-fusion",
      "--adce",
      "--early-cse",
      "--indvars"
    ],
    "performance_vs_Oz": "+3.3%"
  }
}
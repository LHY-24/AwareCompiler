{
  "program_id": "linux-v0_9868.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 4,
    "onePredOneSuc": 4,
    "onePredTwoSuc": 0,
    "oneSuccessor": 4,
    "twoPred": 2,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 2,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 11,
    "BeginPhi": 0,
    "BranchCount": 6,
    "returnInt": 3,
    "CriticalCount": 0,
    "NumEdges": 8,
    "const32Bit": 50,
    "const64Bit": 12,
    "numConstZeroes": 34,
    "numConstOnes": 23,
    "UncondBranches": 4,
    "binaryConstArg": 1,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 18,
    "NumAndInst": 0,
    "BlockMid": 3,
    "BlockLow": 8,
    "NumBitCastInst": 6,
    "NumBrInst": 6,
    "NumCallInst": 9,
    "NumGetElementPtrInst": 19,
    "NumICmpInst": 3,
    "NumLShrInst": 0,
    "NumLoadInst": 31,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 5,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 25,
    "NumSubInst": 0,
    "NumTruncInst": 1,
    "NumXorInst": 1,
    "NumZExtInst": 1,
    "TotalBlocks": 11,
    "TotalInsts": 125,
    "TotalMemInst": 102,
    "TotalFuncs": 13,
    "ArgsPhi": 0,
    "testUnary": 57
  },
  "baseline_oz_instcount": 125,
  "knowledge_base_entry": [
    "--loop-instsimplify",
    "--aggressive-instcombine",
    "--mem2reg",
    "--adce",
    "--gvn-hoist",
    "--loop-deletion",
    "--sccp",
    "--loop-simplifycfg",
    "--bdce",
    "--elim-avail-extern",
    "--bdce",
    "--load-store-vectorizer",
    "--indvars",
    "--simplifycfg",
    "--sroa"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--slp-vectorizer",
          "--instsimplify",
          "--add-discriminators",
          "--loop-simplifycfg",
          "--aggressive-instcombine",
          "--loop-versioning",
          "--always-inline",
          "--called-value-propagation",
          "--lowerswitch",
          "--simple-loop-unswitch",
          "--scalarizer",
          "--loop-vectorize",
          "--callsite-splitting",
          "--rpo-functionattrs",
          "--reg2mem",
          "--loop-instsimplify",
          "--licm",
          "--sancov",
          "--loop-versioning-licm",
          "--lower-matrix-intrinsics",
          "--strip",
          "--libcalls-shrinkwrap",
          "--loop-simplify",
          "--redundant-dbg-inst-elim",
          "--lowerinvoke"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--slp-vectorizer",
      "--instsimplify",
      "--add-discriminators",
      "--loop-simplifycfg",
      "--aggressive-instcombine",
      "--loop-versioning",
      "--always-inline",
      "--called-value-propagation",
      "--lowerswitch",
      "--simple-loop-unswitch",
      "--scalarizer",
      "--loop-vectorize",
      "--callsite-splitting",
      "--rpo-functionattrs",
      "--reg2mem",
      "--loop-instsimplify",
      "--licm",
      "--sancov",
      "--loop-versioning-licm",
      "--lower-matrix-intrinsics",
      "--strip",
      "--libcalls-shrinkwrap",
      "--loop-simplify",
      "--redundant-dbg-inst-elim",
      "--lowerinvoke"
    ],
    "performance_vs_Oz": "+0.8%"
  }
}
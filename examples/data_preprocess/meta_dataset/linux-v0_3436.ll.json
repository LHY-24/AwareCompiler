{
  "program_id": "linux-v0_3436.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 49,
    "onePredOneSuc": 32,
    "onePredTwoSuc": 16,
    "oneSuccessor": 36,
    "twoPred": 8,
    "twoPredOneSuc": 3,
    "twoEach": 5,
    "twoSuccessor": 25,
    "morePreds": 5,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 83,
    "BeginPhi": 0,
    "BranchCount": 61,
    "returnInt": 27,
    "CriticalCount": 8,
    "NumEdges": 90,
    "const32Bit": 233,
    "const64Bit": 17,
    "numConstZeroes": 89,
    "numConstOnes": 89,
    "UncondBranches": 36,
    "binaryConstArg": 10,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 73,
    "NumAndInst": 0,
    "BlockMid": 10,
    "BlockLow": 73,
    "NumBitCastInst": 17,
    "NumBrInst": 61,
    "NumCallInst": 72,
    "NumGetElementPtrInst": 60,
    "NumICmpInst": 26,
    "NumLShrInst": 0,
    "NumLoadInst": 202,
    "NumMulInst": 0,
    "NumOrInst": 6,
    "NumPHIInst": 0,
    "NumRetInst": 21,
    "NumSExtInst": 8,
    "NumSelectInst": 1,
    "NumShlInst": 0,
    "NumStoreInst": 117,
    "NumSubInst": 0,
    "NumTruncInst": 9,
    "NumXorInst": 2,
    "NumZExtInst": 11,
    "TotalBlocks": 83,
    "TotalInsts": 698,
    "TotalMemInst": 524,
    "TotalFuncs": 39,
    "ArgsPhi": 0,
    "testUnary": 329
  },
  "baseline_oz_instcount": 698,
  "knowledge_base_entry": [
    "--simplifycfg",
    "--mergefunc",
    "-loop-reduce",
    "--mergefunc",
    "--aggressive-instcombine",
    "--lower-constant-intrinsics",
    "--gvn-hoist",
    "--sccp",
    "--jump-threading",
    "--dse",
    "--aggressive-instcombine",
    "--simplifycfg",
    "--bdce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--sancov",
          "--add-discriminators",
          "--inject-tli-mappings",
          "--lower-expect",
          "--separate-const-offset-from-gep",
          "--adce",
          "--correlated-propagation",
          "--div-rem-pairs",
          "--pgo-memop-opt",
          "--aggressive-instcombine",
          "--instcombine",
          "--mergefunc",
          "--loop-idiom",
          "--lower-guard-intrinsic"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--sancov",
      "--add-discriminators",
      "--inject-tli-mappings",
      "--lower-expect",
      "--separate-const-offset-from-gep",
      "--adce",
      "--correlated-propagation",
      "--div-rem-pairs",
      "--pgo-memop-opt",
      "--aggressive-instcombine",
      "--instcombine",
      "--mergefunc",
      "--loop-idiom",
      "--lower-guard-intrinsic"
    ],
    "performance_vs_Oz": "+1.6%"
  }
}
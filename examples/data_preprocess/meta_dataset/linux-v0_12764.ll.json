{
  "program_id": "linux-v0_12764.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 51,
    "onePredOneSuc": 22,
    "onePredTwoSuc": 29,
    "oneSuccessor": 36,
    "twoPred": 20,
    "twoPredOneSuc": 9,
    "twoEach": 11,
    "twoSuccessor": 42,
    "morePreds": 7,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 96,
    "BeginPhi": 0,
    "BranchCount": 78,
    "returnInt": 31,
    "CriticalCount": 39,
    "NumEdges": 120,
    "const32Bit": 296,
    "const64Bit": 26,
    "numConstZeroes": 111,
    "numConstOnes": 87,
    "UncondBranches": 36,
    "binaryConstArg": 36,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 70,
    "NumAndInst": 21,
    "BlockMid": 18,
    "BlockLow": 78,
    "NumBitCastInst": 11,
    "NumBrInst": 78,
    "NumCallInst": 62,
    "NumGetElementPtrInst": 71,
    "NumICmpInst": 46,
    "NumLShrInst": 4,
    "NumLoadInst": 200,
    "NumMulInst": 1,
    "NumOrInst": 6,
    "NumPHIInst": 0,
    "NumRetInst": 18,
    "NumSExtInst": 5,
    "NumSelectInst": 1,
    "NumShlInst": 0,
    "NumStoreInst": 99,
    "NumSubInst": 2,
    "NumTruncInst": 13,
    "NumXorInst": 2,
    "NumZExtInst": 41,
    "TotalBlocks": 96,
    "TotalInsts": 766,
    "TotalMemInst": 502,
    "TotalFuncs": 36,
    "ArgsPhi": 0,
    "testUnary": 353
  },
  "baseline_oz_instcount": 766,
  "knowledge_base_entry": [
    "--partially-inline-libcalls",
    "--gvn",
    "--loop-instsimplify",
    "--simplifycfg",
    "--loop-rotate",
    "--instsimplify",
    "--reassociate",
    "--aggressive-instcombine",
    "--instcombine",
    "--inline",
    "--loop-instsimplify",
    "--early-cse-memssa",
    "--memcpyopt",
    "--sroa",
    "--dce",
    "--sroa",
    "--licm",
    "--die",
    "--lower-expect",
    "--early-cse-memssa",
    "--correlated-propagation",
    "--gvn-hoist",
    "--mem2reg",
    "--early-cse-memssa",
    "--mem2reg",
    "--early-cse",
    "--slp-vectorizer",
    "--correlated-propagation"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--coro-elide",
          "--aggressive-instcombine",
          "--callsite-splitting",
          "--mergefunc",
          "--always-inline",
          "--insert-gcov-profiling",
          "--prune-eh",
          "--loop-idiom",
          "--simplifycfg",
          "--loweratomic",
          "--loop-simplify",
          "--consthoist",
          "--sroa",
          "--div-rem-pairs",
          "--attributor",
          "--loop-distribute",
          "--called-value-propagation"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--coro-elide",
      "--aggressive-instcombine",
      "--callsite-splitting",
      "--mergefunc",
      "--always-inline",
      "--insert-gcov-profiling",
      "--prune-eh",
      "--loop-idiom",
      "--simplifycfg",
      "--loweratomic",
      "--loop-simplify",
      "--consthoist",
      "--sroa",
      "--div-rem-pairs",
      "--attributor",
      "--loop-distribute",
      "--called-value-propagation"
    ],
    "performance_vs_Oz": "+3.1%"
  }
}
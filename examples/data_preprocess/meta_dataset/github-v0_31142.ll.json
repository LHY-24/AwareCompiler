{
  "program_id": "github-v0_31142.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 7,
    "onePredOneSuc": 4,
    "onePredTwoSuc": 1,
    "oneSuccessor": 7,
    "twoPred": 3,
    "twoPredOneSuc": 1,
    "twoEach": 2,
    "twoSuccessor": 3,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 13,
    "BeginPhi": 0,
    "BranchCount": 10,
    "returnInt": 1,
    "CriticalCount": 1,
    "NumEdges": 13,
    "const32Bit": 34,
    "const64Bit": 1,
    "numConstZeroes": 6,
    "numConstOnes": 21,
    "UncondBranches": 7,
    "binaryConstArg": 4,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 17,
    "NumAndInst": 0,
    "BlockMid": 1,
    "BlockLow": 12,
    "NumBitCastInst": 0,
    "NumBrInst": 10,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 3,
    "NumICmpInst": 3,
    "NumLShrInst": 0,
    "NumLoadInst": 23,
    "NumMulInst": 2,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 19,
    "NumSubInst": 0,
    "NumTruncInst": 1,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 13,
    "TotalInsts": 99,
    "TotalMemInst": 69,
    "TotalFuncs": 7,
    "ArgsPhi": 0,
    "testUnary": 45
  },
  "baseline_oz_instcount": 99,
  "knowledge_base_entry": [
    "--lower-expect",
    "--dce",
    "--gvn",
    "--elim-avail-extern",
    "--bdce",
    "--aggressive-instcombine",
    "--reassociate",
    "--prune-eh",
    "--gvn-hoist",
    "--loop-simplifycfg",
    "--inline",
    "--nary-reassociate",
    "--loop-instsimplify",
    "--licm",
    "--sroa",
    "--adce",
    "--jump-threading",
    "--dce",
    "--lower-constant-intrinsics",
    "--bdce",
    "--early-cse-memssa",
    "--memcpyopt",
    "--instcombine",
    "--globalopt",
    "--dse",
    "--slp-vectorizer"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--guard-widening",
          "--ee-instrument",
          "--mldst-motion",
          "--alignment-from-assumptions",
          "--loop-versioning-licm",
          "--gvn",
          "--loop-vectorize",
          "--insert-gcov-profiling",
          "--globaldce",
          "--loop-guard-widening",
          "--licm",
          "--lower-widenable-condition",
          "--coro-early",
          "--infer-address-spaces",
          "--aggressive-instcombine",
          "--indvars",
          "--gvn-hoist",
          "--strip",
          "--loop-data-prefetch",
          "--lowerswitch",
          "--rewrite-statepoints-for-gc"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.0%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--guard-widening",
      "--ee-instrument",
      "--mldst-motion",
      "--alignment-from-assumptions",
      "--loop-versioning-licm",
      "--gvn",
      "--loop-vectorize",
      "--insert-gcov-profiling",
      "--globaldce",
      "--loop-guard-widening",
      "--licm",
      "--lower-widenable-condition",
      "--coro-early",
      "--infer-address-spaces",
      "--aggressive-instcombine",
      "--indvars",
      "--gvn-hoist",
      "--strip",
      "--loop-data-prefetch",
      "--lowerswitch",
      "--rewrite-statepoints-for-gc"
    ],
    "performance_vs_Oz": "+2.0%"
  }
}
{
  "program_id": "github-v0_8213.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 55,
    "onePredOneSuc": 33,
    "onePredTwoSuc": 21,
    "oneSuccessor": 44,
    "twoPred": 19,
    "twoPredOneSuc": 9,
    "twoEach": 5,
    "twoSuccessor": 34,
    "morePreds": 5,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 90,
    "BeginPhi": 0,
    "BranchCount": 77,
    "returnInt": 13,
    "CriticalCount": 16,
    "NumEdges": 115,
    "const32Bit": 295,
    "const64Bit": 23,
    "numConstZeroes": 130,
    "numConstOnes": 85,
    "UncondBranches": 44,
    "binaryConstArg": 10,
    "NumAShrInst": 0,
    "NumAddInst": 4,
    "NumAllocaInst": 54,
    "NumAndInst": 4,
    "BlockMid": 12,
    "BlockLow": 78,
    "NumBitCastInst": 21,
    "NumBrInst": 77,
    "NumCallInst": 31,
    "NumGetElementPtrInst": 99,
    "NumICmpInst": 33,
    "NumLShrInst": 0,
    "NumLoadInst": 179,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 11,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 116,
    "NumSubInst": 10,
    "NumTruncInst": 4,
    "NumXorInst": 4,
    "NumZExtInst": 13,
    "TotalBlocks": 90,
    "TotalInsts": 662,
    "TotalMemInst": 479,
    "TotalFuncs": 35,
    "ArgsPhi": 0,
    "testUnary": 271
  },
  "baseline_oz_instcount": 664,
  "knowledge_base_entry": [
    "--tailcallelim",
    "--instcombine",
    "--dse",
    "--correlated-propagation",
    "--mergefunc",
    "--jump-threading",
    "--dce",
    "--newgvn",
    "--instsimplify",
    "--inline"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--lower-matrix-intrinsics",
          "--loop-vectorize",
          "--gvn",
          "--aggressive-instcombine",
          "--mergefunc",
          "--name-anon-globals",
          "--globalsplit",
          "--simple-loop-unswitch",
          "--lcssa",
          "--constmerge",
          "--jump-threading",
          "--mergeicmps",
          "--lower-guard-intrinsic"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--lower-matrix-intrinsics",
      "--loop-vectorize",
      "--gvn",
      "--aggressive-instcombine",
      "--mergefunc",
      "--name-anon-globals",
      "--globalsplit",
      "--simple-loop-unswitch",
      "--lcssa",
      "--constmerge",
      "--jump-threading",
      "--mergeicmps",
      "--lower-guard-intrinsic"
    ],
    "performance_vs_Oz": "+1.7%"
  }
}
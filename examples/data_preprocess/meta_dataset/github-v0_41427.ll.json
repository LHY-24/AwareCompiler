{
  "program_id": "github-v0_41427.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 16,
    "onePredOneSuc": 11,
    "onePredTwoSuc": 5,
    "oneSuccessor": 15,
    "twoPred": 8,
    "twoPredOneSuc": 3,
    "twoEach": 1,
    "twoSuccessor": 10,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 30,
    "BeginPhi": 0,
    "BranchCount": 24,
    "returnInt": 2,
    "CriticalCount": 4,
    "NumEdges": 35,
    "const32Bit": 52,
    "const64Bit": 0,
    "numConstZeroes": 21,
    "numConstOnes": 21,
    "UncondBranches": 15,
    "binaryConstArg": 0,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 18,
    "NumAndInst": 0,
    "BlockMid": 1,
    "BlockLow": 29,
    "NumBitCastInst": 6,
    "NumBrInst": 24,
    "NumCallInst": 8,
    "NumGetElementPtrInst": 11,
    "NumICmpInst": 9,
    "NumLShrInst": 0,
    "NumLoadInst": 46,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 5,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 25,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 30,
    "TotalInsts": 156,
    "TotalMemInst": 108,
    "TotalFuncs": 12,
    "ArgsPhi": 0,
    "testUnary": 73
  },
  "baseline_oz_instcount": 157,
  "knowledge_base_entry": [
    "--nary-reassociate",
    "--correlated-propagation",
    "--mergefunc",
    "--simplifycfg",
    "--reassociate",
    "--slsr",
    "--loop-simplifycfg",
    "--simplifycfg",
    "--gvn-hoist",
    "--mergefunc",
    "--simplifycfg",
    "--die",
    "--gvn",
    "--licm",
    "--flattencfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--mldst-motion",
          "--die",
          "--mergeicmps",
          "--loop-idiom",
          "--gvn-hoist",
          "--loop-load-elim",
          "--loop-vectorize",
          "--strip-nondebug",
          "--constprop",
          "--called-value-propagation",
          "--float2int",
          "--gvn",
          "--loop-unroll"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--mldst-motion",
      "--die",
      "--mergeicmps",
      "--loop-idiom",
      "--gvn-hoist",
      "--loop-load-elim",
      "--loop-vectorize",
      "--strip-nondebug",
      "--constprop",
      "--called-value-propagation",
      "--float2int",
      "--gvn",
      "--loop-unroll"
    ],
    "performance_vs_Oz": "+0.6%"
  }
}
{
  "program_id": "github-v0_37706.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 5,
    "onePredOneSuc": 2,
    "onePredTwoSuc": 3,
    "oneSuccessor": 3,
    "twoPred": 3,
    "twoPredOneSuc": 0,
    "twoEach": 2,
    "twoSuccessor": 6,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 10,
    "BeginPhi": 0,
    "BranchCount": 9,
    "returnInt": 0,
    "CriticalCount": 7,
    "NumEdges": 15,
    "const32Bit": 10,
    "const64Bit": 0,
    "numConstZeroes": 2,
    "numConstOnes": 7,
    "UncondBranches": 3,
    "binaryConstArg": 0,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 1,
    "NumAndInst": 0,
    "BlockMid": 0,
    "BlockLow": 10,
    "NumBitCastInst": 0,
    "NumBrInst": 9,
    "NumCallInst": 0,
    "NumGetElementPtrInst": 0,
    "NumICmpInst": 6,
    "NumLShrInst": 0,
    "NumLoadInst": 6,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 1,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 5,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 10,
    "TotalInsts": 28,
    "TotalMemInst": 12,
    "TotalFuncs": 1,
    "ArgsPhi": 0,
    "testUnary": 7
  },
  "baseline_oz_instcount": 28,
  "knowledge_base_entry": [
    "--mem2reg",
    "--reassociate",
    "--die",
    "--mergefunc",
    "--sroa",
    "--instsimplify",
    "--bdce",
    "--jump-threading",
    "--flattencfg",
    "--gvn-hoist",
    "--mldst-motion",
    "--licm"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--instsimplify",
          "--flattencfg",
          "--die",
          "-loop-reduce",
          "--mergereturn",
          "--loop-sink",
          "--loop-deletion",
          "--loop-data-prefetch",
          "--strip",
          "--sccp",
          "--pgo-memop-opt",
          "--coro-cleanup"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+7.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--instsimplify",
      "--flattencfg",
      "--die",
      "-loop-reduce",
      "--mergereturn",
      "--loop-sink",
      "--loop-deletion",
      "--loop-data-prefetch",
      "--strip",
      "--sccp",
      "--pgo-memop-opt",
      "--coro-cleanup"
    ],
    "performance_vs_Oz": "+7.1%"
  }
}
{
  "program_id": "github-v0_17598.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 27,
    "onePredOneSuc": 18,
    "onePredTwoSuc": 3,
    "oneSuccessor": 26,
    "twoPred": 11,
    "twoPredOneSuc": 1,
    "twoEach": 10,
    "twoSuccessor": 13,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 49,
    "BeginPhi": 0,
    "BranchCount": 39,
    "returnInt": 5,
    "CriticalCount": 3,
    "NumEdges": 52,
    "const32Bit": 37,
    "const64Bit": 75,
    "numConstZeroes": 37,
    "numConstOnes": 30,
    "UncondBranches": 26,
    "binaryConstArg": 33,
    "NumAShrInst": 0,
    "NumAddInst": 15,
    "NumAllocaInst": 16,
    "NumAndInst": 4,
    "BlockMid": 5,
    "BlockLow": 44,
    "NumBitCastInst": 0,
    "NumBrInst": 39,
    "NumCallInst": 67,
    "NumGetElementPtrInst": 18,
    "NumICmpInst": 15,
    "NumLShrInst": 2,
    "NumLoadInst": 64,
    "NumMulInst": 2,
    "NumOrInst": 2,
    "NumPHIInst": 0,
    "NumRetInst": 10,
    "NumSExtInst": 10,
    "NumSelectInst": 2,
    "NumShlInst": 0,
    "NumStoreInst": 30,
    "NumSubInst": 8,
    "NumTruncInst": 6,
    "NumXorInst": 0,
    "NumZExtInst": 9,
    "TotalBlocks": 49,
    "TotalInsts": 321,
    "TotalMemInst": 195,
    "TotalFuncs": 19,
    "ArgsPhi": 0,
    "testUnary": 105
  },
  "baseline_oz_instcount": 322,
  "knowledge_base_entry": [
    "--ipsccp",
    "--sccp",
    "--reassociate",
    "--correlated-propagation",
    "--adce",
    "--lower-constant-intrinsics"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--lower-matrix-intrinsics",
          "--slsr",
          "--gvn",
          "--loop-unroll-and-jam",
          "--functionattrs",
          "--inline",
          "--add-discriminators",
          "--lower-widenable-condition",
          "--called-value-propagation",
          "--simplifycfg",
          "--argpromotion",
          "--aggressive-instcombine"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--lower-matrix-intrinsics",
      "--slsr",
      "--gvn",
      "--loop-unroll-and-jam",
      "--functionattrs",
      "--inline",
      "--add-discriminators",
      "--lower-widenable-condition",
      "--called-value-propagation",
      "--simplifycfg",
      "--argpromotion",
      "--aggressive-instcombine"
    ],
    "performance_vs_Oz": "+0.3%"
  }
}
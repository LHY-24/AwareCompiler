{
  "program_id": "linux-v0_4894.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 33,
    "onePredOneSuc": 30,
    "onePredTwoSuc": 3,
    "oneSuccessor": 30,
    "twoPred": 7,
    "twoPredOneSuc": 0,
    "twoEach": 5,
    "twoSuccessor": 13,
    "morePreds": 3,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 50,
    "BeginPhi": 2,
    "BranchCount": 43,
    "returnInt": 6,
    "CriticalCount": 3,
    "NumEdges": 56,
    "const32Bit": 85,
    "const64Bit": 8,
    "numConstZeroes": 26,
    "numConstOnes": 64,
    "UncondBranches": 30,
    "binaryConstArg": 6,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 52,
    "NumAndInst": 0,
    "BlockMid": 4,
    "BlockLow": 48,
    "NumBitCastInst": 3,
    "NumBrInst": 43,
    "NumCallInst": 16,
    "NumGetElementPtrInst": 5,
    "NumICmpInst": 15,
    "NumLShrInst": 0,
    "NumLoadInst": 55,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 2,
    "NumRetInst": 9,
    "NumSExtInst": 5,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 59,
    "NumSubInst": 1,
    "NumTruncInst": 1,
    "NumXorInst": 6,
    "NumZExtInst": 6,
    "TotalBlocks": 52,
    "TotalInsts": 278,
    "TotalMemInst": 187,
    "TotalFuncs": 17,
    "ArgsPhi": 4,
    "testUnary": 122
  },
  "baseline_oz_instcount": 280,
  "knowledge_base_entry": [
    "--simple-loop-unswitch",
    "--early-cse-memssa",
    "--newgvn",
    "--mergefunc",
    "--dce",
    "--newgvn",
    "--indvars",
    "--sroa",
    "--lower-constant-intrinsics",
    "--bdce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--functionattrs",
          "--loop-sink",
          "--inferattrs",
          "--lower-matrix-intrinsics",
          "-loop-reduce",
          "--loop-deletion",
          "--div-rem-pairs",
          "--loop-unroll-and-jam",
          "--coro-early",
          "--add-discriminators",
          "--load-store-vectorizer",
          "--slsr",
          "--tailcallelim",
          "--coro-elide",
          "--loop-simplifycfg",
          "--simple-loop-unswitch",
          "--rpo-functionattrs",
          "--name-anon-globals",
          "--loop-reroll",
          "--forceattrs",
          "--coro-split",
          "--called-value-propagation",
          "--globalsplit",
          "--coro-cleanup",
          "--irce",
          "--lower-expect",
          "--gvn-hoist",
          "--dce",
          "--lowerswitch"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--functionattrs",
      "--loop-sink",
      "--inferattrs",
      "--lower-matrix-intrinsics",
      "-loop-reduce",
      "--loop-deletion",
      "--div-rem-pairs",
      "--loop-unroll-and-jam",
      "--coro-early",
      "--add-discriminators",
      "--load-store-vectorizer",
      "--slsr",
      "--tailcallelim",
      "--coro-elide",
      "--loop-simplifycfg",
      "--simple-loop-unswitch",
      "--rpo-functionattrs",
      "--name-anon-globals",
      "--loop-reroll",
      "--forceattrs",
      "--coro-split",
      "--called-value-propagation",
      "--globalsplit",
      "--coro-cleanup",
      "--irce",
      "--lower-expect",
      "--gvn-hoist",
      "--dce",
      "--lowerswitch"
    ],
    "performance_vs_Oz": "+0.7%"
  }
}
{
  "program_id": "github-v0_48501.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 17,
    "onePredOneSuc": 10,
    "onePredTwoSuc": 4,
    "oneSuccessor": 15,
    "twoPred": 7,
    "twoPredOneSuc": 4,
    "twoEach": 3,
    "twoSuccessor": 8,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 27,
    "BeginPhi": 0,
    "BranchCount": 23,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 31,
    "const32Bit": 47,
    "const64Bit": 52,
    "numConstZeroes": 56,
    "numConstOnes": 21,
    "UncondBranches": 15,
    "binaryConstArg": 26,
    "NumAShrInst": 3,
    "NumAddInst": 7,
    "NumAllocaInst": 12,
    "NumAndInst": 9,
    "BlockMid": 7,
    "BlockLow": 20,
    "NumBitCastInst": 0,
    "NumBrInst": 23,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 35,
    "NumICmpInst": 8,
    "NumLShrInst": 0,
    "NumLoadInst": 59,
    "NumMulInst": 0,
    "NumOrInst": 10,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 5,
    "NumSelectInst": 0,
    "NumShlInst": 7,
    "NumStoreInst": 23,
    "NumSubInst": 2,
    "NumTruncInst": 13,
    "NumXorInst": 0,
    "NumZExtInst": 44,
    "TotalBlocks": 27,
    "TotalInsts": 271,
    "TotalMemInst": 136,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 133
  },
  "baseline_oz_instcount": 271,
  "knowledge_base_entry": [
    "--prune-eh",
    "--sroa",
    "--flattencfg",
    "--inline",
    "--early-cse",
    "--prune-eh",
    "--inline",
    "--sccp",
    "--die",
    "--aggressive-instcombine",
    "--elim-avail-extern",
    "--dce",
    "--gvn-hoist",
    "--loop-instsimplify",
    "--aggressive-instcombine",
    "--simplifycfg",
    "--slsr",
    "--jump-threading",
    "--mergefunc",
    "--lower-expect",
    "--licm",
    "--early-cse",
    "--dse",
    "--early-cse",
    "--load-store-vectorizer",
    "--adce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--strip",
          "--newgvn",
          "--adce",
          "--div-rem-pairs",
          "--inject-tli-mappings",
          "--partial-inliner",
          "--loop-instsimplify",
          "--die",
          "--scalarizer",
          "--aggressive-instcombine",
          "--globalsplit",
          "--rewrite-statepoints-for-gc",
          "--lower-expect",
          "--strip-dead-prototypes",
          "--loop-unroll-and-jam",
          "--loop-interchange",
          "--simple-loop-unswitch",
          "--licm",
          "--sroa",
          "--sccp",
          "--separate-const-offset-from-gep",
          "--instnamer",
          "--rpo-functionattrs"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+5.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--strip",
      "--newgvn",
      "--adce",
      "--div-rem-pairs",
      "--inject-tli-mappings",
      "--partial-inliner",
      "--loop-instsimplify",
      "--die",
      "--scalarizer",
      "--aggressive-instcombine",
      "--globalsplit",
      "--rewrite-statepoints-for-gc",
      "--lower-expect",
      "--strip-dead-prototypes",
      "--loop-unroll-and-jam",
      "--loop-interchange",
      "--simple-loop-unswitch",
      "--licm",
      "--sroa",
      "--sccp",
      "--separate-const-offset-from-gep",
      "--instnamer",
      "--rpo-functionattrs"
    ],
    "performance_vs_Oz": "+5.2%"
  }
}
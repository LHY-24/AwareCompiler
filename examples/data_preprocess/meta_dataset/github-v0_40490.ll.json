{
  "program_id": "github-v0_40490.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 14,
    "onePredOneSuc": 9,
    "onePredTwoSuc": 2,
    "oneSuccessor": 12,
    "twoPred": 6,
    "twoPredOneSuc": 2,
    "twoEach": 4,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 23,
    "BeginPhi": 0,
    "BranchCount": 19,
    "returnInt": 4,
    "CriticalCount": 1,
    "NumEdges": 26,
    "const32Bit": 32,
    "const64Bit": 52,
    "numConstZeroes": 46,
    "numConstOnes": 27,
    "UncondBranches": 12,
    "binaryConstArg": 8,
    "NumAShrInst": 0,
    "NumAddInst": 8,
    "NumAllocaInst": 14,
    "NumAndInst": 0,
    "BlockMid": 5,
    "BlockLow": 18,
    "NumBitCastInst": 12,
    "NumBrInst": 19,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 40,
    "NumICmpInst": 7,
    "NumLShrInst": 0,
    "NumLoadInst": 47,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 25,
    "NumSubInst": 1,
    "NumTruncInst": 4,
    "NumXorInst": 0,
    "NumZExtInst": 13,
    "TotalBlocks": 23,
    "TotalInsts": 204,
    "TotalMemInst": 133,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 93
  },
  "baseline_oz_instcount": 204,
  "knowledge_base_entry": [
    "--mergereturn",
    "--jump-threading",
    "--adce",
    "--loop-instsimplify",
    "--aggressive-instcombine",
    "--flattencfg",
    "--instcombine",
    "--bdce",
    "--correlated-propagation",
    "--ipsccp",
    "--instcombine",
    "--die",
    "--lower-expect"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--pgo-memop-opt",
          "--prune-eh",
          "--loop-distribute",
          "--load-store-vectorizer",
          "--loop-unroll-and-jam",
          "--sroa",
          "--loop-predication",
          "--mergeicmps",
          "--globalsplit",
          "--coro-split",
          "--dse",
          "--loweratomic",
          "--aggressive-instcombine",
          "--ipsccp"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--pgo-memop-opt",
      "--prune-eh",
      "--loop-distribute",
      "--load-store-vectorizer",
      "--loop-unroll-and-jam",
      "--sroa",
      "--loop-predication",
      "--mergeicmps",
      "--globalsplit",
      "--coro-split",
      "--dse",
      "--loweratomic",
      "--aggressive-instcombine",
      "--ipsccp"
    ],
    "performance_vs_Oz": "+2.9%"
  }
}
{
  "program_id": "linux-v0_7939.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 75,
    "onePredOneSuc": 54,
    "onePredTwoSuc": 20,
    "oneSuccessor": 71,
    "twoPred": 30,
    "twoPredOneSuc": 14,
    "twoEach": 10,
    "twoSuccessor": 36,
    "morePreds": 2,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 122,
    "BeginPhi": 1,
    "BranchCount": 107,
    "returnInt": 22,
    "CriticalCount": 14,
    "NumEdges": 143,
    "const32Bit": 272,
    "const64Bit": 11,
    "numConstZeroes": 148,
    "numConstOnes": 98,
    "UncondBranches": 71,
    "binaryConstArg": 36,
    "NumAShrInst": 0,
    "NumAddInst": 9,
    "NumAllocaInst": 62,
    "NumAndInst": 8,
    "BlockMid": 9,
    "BlockLow": 114,
    "NumBitCastInst": 2,
    "NumBrInst": 107,
    "NumCallInst": 50,
    "NumGetElementPtrInst": 98,
    "NumICmpInst": 43,
    "NumLShrInst": 4,
    "NumLoadInst": 206,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 1,
    "NumRetInst": 16,
    "NumSExtInst": 35,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 99,
    "NumSubInst": 2,
    "NumTruncInst": 3,
    "NumXorInst": 12,
    "NumZExtInst": 16,
    "TotalBlocks": 123,
    "TotalInsts": 780,
    "TotalMemInst": 515,
    "TotalFuncs": 31,
    "ArgsPhi": 2,
    "testUnary": 330
  },
  "baseline_oz_instcount": 782,
  "knowledge_base_entry": [
    "--early-cse",
    "--ipsccp",
    "--globaldce",
    "--aggressive-instcombine",
    "--load-store-vectorizer",
    "--early-cse-memssa",
    "--die",
    "--jump-threading",
    "--mergefunc",
    "--dse",
    "--simplifycfg",
    "--slp-vectorizer",
    "--inline",
    "--load-store-vectorizer",
    "--reassociate",
    "--gvn-hoist",
    "--sroa",
    "--memcpyopt"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--flattencfg",
          "--dce",
          "--slp-vectorizer",
          "--consthoist",
          "--globaldce",
          "--infer-address-spaces",
          "--mergefunc",
          "--coro-early",
          "--nary-reassociate",
          "--constmerge"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--flattencfg",
      "--dce",
      "--slp-vectorizer",
      "--consthoist",
      "--globaldce",
      "--infer-address-spaces",
      "--mergefunc",
      "--coro-early",
      "--nary-reassociate",
      "--constmerge"
    ],
    "performance_vs_Oz": "+0.3%"
  }
}
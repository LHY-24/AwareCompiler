{
  "program_id": "linux-v0_5975.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 33,
    "onePredOneSuc": 29,
    "onePredTwoSuc": 1,
    "oneSuccessor": 33,
    "twoPred": 10,
    "twoPredOneSuc": 1,
    "twoEach": 5,
    "twoSuccessor": 10,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 67,
    "BeginPhi": 0,
    "BranchCount": 43,
    "returnInt": 21,
    "CriticalCount": 2,
    "NumEdges": 63,
    "const32Bit": 147,
    "const64Bit": 22,
    "numConstZeroes": 65,
    "numConstOnes": 88,
    "UncondBranches": 33,
    "binaryConstArg": 22,
    "NumAShrInst": 5,
    "NumAddInst": 5,
    "NumAllocaInst": 64,
    "NumAndInst": 6,
    "BlockMid": 9,
    "BlockLow": 58,
    "NumBitCastInst": 22,
    "NumBrInst": 43,
    "NumCallInst": 73,
    "NumGetElementPtrInst": 30,
    "NumICmpInst": 8,
    "NumLShrInst": 0,
    "NumLoadInst": 161,
    "NumMulInst": 0,
    "NumOrInst": 6,
    "NumPHIInst": 0,
    "NumRetInst": 22,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 95,
    "NumSubInst": 0,
    "NumTruncInst": 16,
    "NumXorInst": 0,
    "NumZExtInst": 24,
    "TotalBlocks": 67,
    "TotalInsts": 585,
    "TotalMemInst": 423,
    "TotalFuncs": 30,
    "ArgsPhi": 0,
    "testUnary": 289
  },
  "baseline_oz_instcount": 584,
  "knowledge_base_entry": [
    "--loop-unroll-and-jam",
    "--gvn",
    "--simplifycfg",
    "--dse",
    "--simplifycfg",
    "--nary-reassociate",
    "--load-store-vectorizer",
    "--dse",
    "--gvn-hoist",
    "--sroa",
    "--lower-expect",
    "--mergefunc",
    "--loop-instsimplify",
    "--aggressive-instcombine",
    "--early-cse-memssa",
    "--ipsccp",
    "--reassociate",
    "--reassociate",
    "--aggressive-instcombine",
    "--simplifycfg",
    "--bdce",
    "--dse",
    "--early-cse",
    "--die",
    "--lower-constant-intrinsics",
    "--early-cse",
    "--simplifycfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--callsite-splitting",
          "--simplifycfg",
          "--div-rem-pairs",
          "--sink",
          "--name-anon-globals",
          "--loop-simplifycfg",
          "--inline",
          "--mergefunc",
          "--ipsccp",
          "--lower-widenable-condition",
          "--aggressive-instcombine",
          "--strip-debug-declare",
          "--early-cse",
          "--mergereturn",
          "--tailcallelim",
          "--coro-split",
          "--mergeicmps",
          "--consthoist",
          "--loop-unroll-and-jam",
          "--sccp",
          "--nary-reassociate",
          "--loop-unswitch",
          "--loop-distribute",
          "--coro-early"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--callsite-splitting",
      "--simplifycfg",
      "--div-rem-pairs",
      "--sink",
      "--name-anon-globals",
      "--loop-simplifycfg",
      "--inline",
      "--mergefunc",
      "--ipsccp",
      "--lower-widenable-condition",
      "--aggressive-instcombine",
      "--strip-debug-declare",
      "--early-cse",
      "--mergereturn",
      "--tailcallelim",
      "--coro-split",
      "--mergeicmps",
      "--consthoist",
      "--loop-unroll-and-jam",
      "--sccp",
      "--nary-reassociate",
      "--loop-unswitch",
      "--loop-distribute",
      "--coro-early"
    ],
    "performance_vs_Oz": "+1.9%"
  }
}
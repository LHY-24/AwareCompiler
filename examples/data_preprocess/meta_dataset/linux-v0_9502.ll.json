{
  "program_id": "linux-v0_9502.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 77,
    "onePredOneSuc": 57,
    "onePredTwoSuc": 17,
    "oneSuccessor": 69,
    "twoPred": 24,
    "twoPredOneSuc": 8,
    "twoEach": 10,
    "twoSuccessor": 38,
    "morePreds": 7,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 132,
    "BeginPhi": 1,
    "BranchCount": 106,
    "returnInt": 25,
    "CriticalCount": 18,
    "NumEdges": 149,
    "const32Bit": 421,
    "const64Bit": 44,
    "numConstZeroes": 194,
    "numConstOnes": 116,
    "UncondBranches": 69,
    "binaryConstArg": 28,
    "NumAShrInst": 0,
    "NumAddInst": 12,
    "NumAllocaInst": 82,
    "NumAndInst": 9,
    "BlockMid": 20,
    "BlockLow": 113,
    "NumBitCastInst": 16,
    "NumBrInst": 106,
    "NumCallInst": 68,
    "NumGetElementPtrInst": 144,
    "NumICmpInst": 39,
    "NumLShrInst": 3,
    "NumLoadInst": 303,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 1,
    "NumRetInst": 25,
    "NumSExtInst": 10,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 136,
    "NumSubInst": 3,
    "NumTruncInst": 2,
    "NumXorInst": 6,
    "NumZExtInst": 16,
    "TotalBlocks": 133,
    "TotalInsts": 990,
    "TotalMemInst": 733,
    "TotalFuncs": 53,
    "ArgsPhi": 2,
    "testUnary": 434
  },
  "baseline_oz_instcount": 982,
  "knowledge_base_entry": [
    "--deadargelim",
    "--mergefunc",
    "--aggressive-instcombine",
    "--early-cse-memssa",
    "--ipsccp",
    "--inline",
    "--instsimplify",
    "--instcombine",
    "--reassociate",
    "--gvn-hoist",
    "--adce",
    "--load-store-vectorizer",
    "--newgvn",
    "--die",
    "--early-cse",
    "--dce",
    "--correlated-propagation",
    "--simplifycfg",
    "--memcpyopt"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-unroll",
          "--ipsccp",
          "--globaldce",
          "--loop-distribute",
          "--lower-guard-intrinsic",
          "--instcombine",
          "--loop-unroll-and-jam",
          "--name-anon-globals",
          "--bdce",
          "--loop-guard-widening",
          "--ipconstprop",
          "--inject-tli-mappings",
          "--loop-load-elim",
          "--libcalls-shrinkwrap",
          "--inline",
          "--loop-idiom",
          "--nary-reassociate",
          "--coro-elide",
          "--float2int",
          "--mergeicmps"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-unroll",
      "--ipsccp",
      "--globaldce",
      "--loop-distribute",
      "--lower-guard-intrinsic",
      "--instcombine",
      "--loop-unroll-and-jam",
      "--name-anon-globals",
      "--bdce",
      "--loop-guard-widening",
      "--ipconstprop",
      "--inject-tli-mappings",
      "--loop-load-elim",
      "--libcalls-shrinkwrap",
      "--inline",
      "--loop-idiom",
      "--nary-reassociate",
      "--coro-elide",
      "--float2int",
      "--mergeicmps"
    ],
    "performance_vs_Oz": "+0.1%"
  }
}
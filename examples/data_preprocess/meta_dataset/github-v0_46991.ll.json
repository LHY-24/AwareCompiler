{
  "program_id": "github-v0_46991.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 5,
    "onePredOneSuc": 5,
    "onePredTwoSuc": 0,
    "oneSuccessor": 5,
    "twoPred": 3,
    "twoPredOneSuc": 0,
    "twoEach": 1,
    "twoSuccessor": 3,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 14,
    "BeginPhi": 0,
    "BranchCount": 8,
    "returnInt": 0,
    "CriticalCount": 1,
    "NumEdges": 11,
    "const32Bit": 73,
    "const64Bit": 3,
    "numConstZeroes": 33,
    "numConstOnes": 20,
    "UncondBranches": 5,
    "binaryConstArg": 8,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 16,
    "NumAndInst": 2,
    "BlockMid": 4,
    "BlockLow": 10,
    "NumBitCastInst": 2,
    "NumBrInst": 8,
    "NumCallInst": 1,
    "NumGetElementPtrInst": 27,
    "NumICmpInst": 3,
    "NumLShrInst": 1,
    "NumLoadInst": 62,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 6,
    "NumSExtInst": 14,
    "NumSelectInst": 0,
    "NumShlInst": 4,
    "NumStoreInst": 44,
    "NumSubInst": 2,
    "NumTruncInst": 5,
    "NumXorInst": 1,
    "NumZExtInst": 0,
    "TotalBlocks": 14,
    "TotalInsts": 201,
    "TotalMemInst": 150,
    "TotalFuncs": 7,
    "ArgsPhi": 0,
    "testUnary": 99
  },
  "baseline_oz_instcount": 201,
  "knowledge_base_entry": [
    "--gvn",
    "--newgvn",
    "--loop-reroll",
    "--indvars",
    "--simplifycfg",
    "--early-cse",
    "--slsr",
    "--jump-threading",
    "--gvn-hoist",
    "--ipsccp",
    "--aggressive-instcombine"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--sccp",
          "--lower-guard-intrinsic",
          "--slsr",
          "--simple-loop-unswitch",
          "--float2int",
          "-loop-reduce",
          "--gvn",
          "--early-cse-memssa",
          "--load-store-vectorizer",
          "--speculative-execution",
          "--forceattrs",
          "--aggressive-instcombine",
          "--lower-matrix-intrinsics",
          "--lower-expect",
          "--loop-load-elim",
          "--loop-data-prefetch",
          "--always-inline",
          "--lower-constant-intrinsics",
          "--lowerswitch",
          "--simplifycfg",
          "--loweratomic"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+4.0%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--sccp",
      "--lower-guard-intrinsic",
      "--slsr",
      "--simple-loop-unswitch",
      "--float2int",
      "-loop-reduce",
      "--gvn",
      "--early-cse-memssa",
      "--load-store-vectorizer",
      "--speculative-execution",
      "--forceattrs",
      "--aggressive-instcombine",
      "--lower-matrix-intrinsics",
      "--lower-expect",
      "--loop-load-elim",
      "--loop-data-prefetch",
      "--always-inline",
      "--lower-constant-intrinsics",
      "--lowerswitch",
      "--simplifycfg",
      "--loweratomic"
    ],
    "performance_vs_Oz": "+4.0%"
  }
}
{
  "program_id": "github-v0_18471.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 13,
    "onePredOneSuc": 9,
    "onePredTwoSuc": 2,
    "oneSuccessor": 11,
    "twoPred": 5,
    "twoPredOneSuc": 2,
    "twoEach": 2,
    "twoSuccessor": 6,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 21,
    "BeginPhi": 0,
    "BranchCount": 17,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 23,
    "const32Bit": 36,
    "const64Bit": 26,
    "numConstZeroes": 35,
    "numConstOnes": 19,
    "UncondBranches": 11,
    "binaryConstArg": 9,
    "NumAShrInst": 2,
    "NumAddInst": 5,
    "NumAllocaInst": 11,
    "NumAndInst": 2,
    "BlockMid": 3,
    "BlockLow": 18,
    "NumBitCastInst": 0,
    "NumBrInst": 17,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 18,
    "NumICmpInst": 6,
    "NumLShrInst": 0,
    "NumLoadInst": 26,
    "NumMulInst": 2,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 16,
    "NumSubInst": 1,
    "NumTruncInst": 6,
    "NumXorInst": 0,
    "NumZExtInst": 12,
    "TotalBlocks": 21,
    "TotalInsts": 138,
    "TotalMemInst": 78,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 58
  },
  "baseline_oz_instcount": 138,
  "knowledge_base_entry": [
    "--ipconstprop",
    "--aggressive-instcombine",
    "--adce",
    "--aggressive-instcombine",
    "--newgvn",
    "--loop-simplifycfg",
    "--loop-instsimplify",
    "--simplifycfg",
    "--globalopt",
    "--newgvn",
    "--reassociate",
    "--licm"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-guard-widening",
          "--early-cse-memssa",
          "--libcalls-shrinkwrap",
          "--loop-fusion",
          "--instcombine",
          "--mldst-motion",
          "--prune-eh",
          "--elim-avail-extern",
          "--ipconstprop",
          "--post-inline-ee-instrument",
          "--loop-deletion",
          "--coro-elide",
          "--called-value-propagation",
          "--cross-dso-cfi",
          "--gvn",
          "--lower-matrix-intrinsics",
          "--loop-unroll-and-jam",
          "--name-anon-globals",
          "--loop-versioning",
          "--licm",
          "--loop-interchange",
          "--aggressive-instcombine",
          "--speculative-execution",
          "--partial-inliner",
          "--coro-cleanup"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+9.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-guard-widening",
      "--early-cse-memssa",
      "--libcalls-shrinkwrap",
      "--loop-fusion",
      "--instcombine",
      "--mldst-motion",
      "--prune-eh",
      "--elim-avail-extern",
      "--ipconstprop",
      "--post-inline-ee-instrument",
      "--loop-deletion",
      "--coro-elide",
      "--called-value-propagation",
      "--cross-dso-cfi",
      "--gvn",
      "--lower-matrix-intrinsics",
      "--loop-unroll-and-jam",
      "--name-anon-globals",
      "--loop-versioning",
      "--licm",
      "--loop-interchange",
      "--aggressive-instcombine",
      "--speculative-execution",
      "--partial-inliner",
      "--coro-cleanup"
    ],
    "performance_vs_Oz": "+9.4%"
  }
}
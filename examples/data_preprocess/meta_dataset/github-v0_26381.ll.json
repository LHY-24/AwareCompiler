{
  "program_id": "github-v0_26381.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 0,
    "onePredOneSuc": 0,
    "onePredTwoSuc": 0,
    "oneSuccessor": 0,
    "twoPred": 0,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 0,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 20,
    "BeginPhi": 0,
    "BranchCount": 0,
    "returnInt": 10,
    "CriticalCount": 0,
    "NumEdges": 0,
    "const32Bit": 37,
    "const64Bit": 0,
    "numConstZeroes": 1,
    "numConstOnes": 36,
    "UncondBranches": 0,
    "binaryConstArg": 0,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 36,
    "NumAndInst": 0,
    "BlockMid": 1,
    "BlockLow": 19,
    "NumBitCastInst": 8,
    "NumBrInst": 0,
    "NumCallInst": 23,
    "NumGetElementPtrInst": 0,
    "NumICmpInst": 0,
    "NumLShrInst": 0,
    "NumLoadInst": 19,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 20,
    "NumSExtInst": 7,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 34,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 20,
    "TotalInsts": 147,
    "TotalMemInst": 112,
    "TotalFuncs": 23,
    "ArgsPhi": 0,
    "testUnary": 70
  },
  "baseline_oz_instcount": 147,
  "knowledge_base_entry": [
    "--strip",
    "--mergefunc",
    "--die",
    "--licm",
    "--lower-constant-intrinsics",
    "--sroa",
    "--memcpyopt",
    "--inline",
    "--loop-instsimplify",
    "--newgvn",
    "--nary-reassociate",
    "--early-cse-memssa",
    "--dse",
    "--loop-rotate",
    "--lower-expect",
    "--gvn-hoist"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--gvn",
          "--constmerge",
          "--lower-matrix-intrinsics",
          "--load-store-vectorizer",
          "--loop-versioning-licm",
          "--strip-dead-prototypes",
          "--sancov",
          "--early-cse",
          "--die",
          "--coro-split",
          "--ee-instrument",
          "--div-rem-pairs",
          "--sink",
          "--globalopt",
          "--correlated-propagation",
          "--redundant-dbg-inst-elim",
          "--elim-avail-extern",
          "--mergefunc",
          "--loop-versioning",
          "--loop-reroll",
          "--simplifycfg",
          "--loop-predication",
          "--canonicalize-aliases",
          "--scalarizer",
          "--indvars",
          "--reassociate",
          "--loop-simplify"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+32.0%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--gvn",
      "--constmerge",
      "--lower-matrix-intrinsics",
      "--load-store-vectorizer",
      "--loop-versioning-licm",
      "--strip-dead-prototypes",
      "--sancov",
      "--early-cse",
      "--die",
      "--coro-split",
      "--ee-instrument",
      "--div-rem-pairs",
      "--sink",
      "--globalopt",
      "--correlated-propagation",
      "--redundant-dbg-inst-elim",
      "--elim-avail-extern",
      "--mergefunc",
      "--loop-versioning",
      "--loop-reroll",
      "--simplifycfg",
      "--loop-predication",
      "--canonicalize-aliases",
      "--scalarizer",
      "--indvars",
      "--reassociate",
      "--loop-simplify"
    ],
    "performance_vs_Oz": "+32.0%"
  }
}
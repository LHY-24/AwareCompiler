{
  "program_id": "poj104-v1_71_1561.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 18,
    "onePredOneSuc": 12,
    "onePredTwoSuc": 3,
    "oneSuccessor": 16,
    "twoPred": 9,
    "twoPredOneSuc": 3,
    "twoEach": 3,
    "twoSuccessor": 10,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 42,
    "BeginPhi": 0,
    "BranchCount": 26,
    "returnInt": 8,
    "CriticalCount": 4,
    "NumEdges": 36,
    "const32Bit": 73,
    "const64Bit": 56,
    "numConstZeroes": 37,
    "numConstOnes": 36,
    "UncondBranches": 16,
    "binaryConstArg": 9,
    "NumAShrInst": 0,
    "NumAddInst": 3,
    "NumAllocaInst": 30,
    "NumAndInst": 0,
    "BlockMid": 4,
    "BlockLow": 38,
    "NumBitCastInst": 30,
    "NumBrInst": 26,
    "NumCallInst": 49,
    "NumGetElementPtrInst": 28,
    "NumICmpInst": 10,
    "NumLShrInst": 0,
    "NumLoadInst": 57,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 15,
    "NumSExtInst": 4,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 45,
    "NumSubInst": 4,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 1,
    "TotalBlocks": 42,
    "TotalInsts": 308,
    "TotalMemInst": 209,
    "TotalFuncs": 28,
    "ArgsPhi": 0,
    "testUnary": 122
  },
  "baseline_oz_instcount": 157,
  "knowledge_base_entry": [
    "--early-cse-memssa",
    "--flattencfg",
    "--sroa",
    "--elim-avail-extern",
    "--inline",
    "--load-store-vectorizer",
    "--instsimplify",
    "--jump-threading",
    "--lower-expect",
    "--mergefunc",
    "--lower-expect",
    "--adce",
    "--dse",
    "--jump-threading",
    "--licm",
    "--lower-expect",
    "--early-cse-memssa",
    "--mergefunc",
    "--gvn",
    "--lower-constant-intrinsics",
    "--dce",
    "--lower-expect",
    "--mergefunc",
    "--lower-expect",
    "--adce",
    "--dse",
    "--jump-threading",
    "--licm",
    "--lower-expect",
    "--early-cse-memssa",
    "--mergefunc",
    "--gvn",
    "--slp-vectorizer",
    "--elim-avail-extern",
    "--globalopt",
    "--elim-avail-extern",
    "--loop-deletion",
    "--sccp",
    "--simplifycfg",
    "--licm",
    "--gvn",
    "--lower-constant-intrinsics",
    "--dce",
    "--lower-expect",
    "--gvn",
    "--gvn",
    "--indvars",
    "--load-store-vectorizer",
    "--loop-simplifycfg",
    "--mergefunc",
    "--early-cse-memssa",
    "--sroa",
    "--licm",
    "--sccp",
    "--gvn-hoist",
    "--slsr",
    "--nary-reassociate",
    "--simplifycfg",
    "--licm",
    "--gvn",
    "--lower-constant-intrinsics",
    "--dce",
    "--lower-expect",
    "--gvn",
    "--gvn",
    "--indvars",
    "--load-store-vectorizer",
    "--loop-simplifycfg",
    "--mergefunc",
    "--early-cse-memssa",
    "--sroa",
    "--licm",
    "--sccp",
    "--gvn-hoist",
    "--loop-instsimplify",
    "--elim-avail-extern",
    "--mldst-motion",
    "--instcombine",
    "--flattencfg",
    "--sroa",
    "--elim-avail-extern",
    "--inline",
    "--gvn",
    "--simplifycfg",
    "--mldst-motion",
    "--gvn-hoist",
    "--nary-reassociate",
    "--early-cse-memssa",
    "--nary-reassociate",
    "--instsimplify",
    "--lower-expect",
    "--sroa",
    "--aggressive-instcombine",
    "--gvn",
    "--instcombine",
    "--ipsccp",
    "--inline",
    "--die",
    "--die",
    "--load-store-vectorizer",
    "--bdce",
    "--mem2reg",
    "--dce",
    "--mem2reg",
    "--bdce",
    "--loop-instsimplify",
    "--simplifycfg",
    "--instsimplify",
    "--instcombine",
    "--gvn-hoist",
    "--slsr",
    "--nary-reassociate",
    "--simplifycfg",
    "--gvn",
    "--loop-deletion",
    "--sccp",
    "--simplifycfg",
    "--licm",
    "--gvn",
    "--lower-constant-intrinsics",
    "--dce",
    "--mergefunc"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--consthoist",
          "--loop-load-elim",
          "--partial-inliner",
          "--lowerinvoke",
          "--jump-threading",
          "--mergeicmps",
          "--sroa",
          "--loop-fusion",
          "--loop-unswitch",
          "--elim-avail-extern",
          "--loop-data-prefetch",
          "--hotcoldsplit",
          "--callsite-splitting",
          "--tailcallelim",
          "--globaldce",
          "--loweratomic",
          "--ipconstprop",
          "--pgo-memop-opt",
          "-loop-reduce",
          "--deadargelim",
          "--loop-interchange",
          "--globalsplit",
          "--newgvn",
          "--inline",
          "--licm",
          "--lower-guard-intrinsic",
          "--sancov"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+15.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--consthoist",
      "--loop-load-elim",
      "--partial-inliner",
      "--lowerinvoke",
      "--jump-threading",
      "--mergeicmps",
      "--sroa",
      "--loop-fusion",
      "--loop-unswitch",
      "--elim-avail-extern",
      "--loop-data-prefetch",
      "--hotcoldsplit",
      "--callsite-splitting",
      "--tailcallelim",
      "--globaldce",
      "--loweratomic",
      "--ipconstprop",
      "--pgo-memop-opt",
      "-loop-reduce",
      "--deadargelim",
      "--loop-interchange",
      "--globalsplit",
      "--newgvn",
      "--inline",
      "--licm",
      "--lower-guard-intrinsic",
      "--sancov"
    ],
    "performance_vs_Oz": "+15.9%"
  }
}
{
  "program_id": "linux-v0_8273.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 69,
    "onePredOneSuc": 38,
    "onePredTwoSuc": 31,
    "oneSuccessor": 62,
    "twoPred": 26,
    "twoPredOneSuc": 13,
    "twoEach": 4,
    "twoSuccessor": 39,
    "morePreds": 8,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 124,
    "BeginPhi": 0,
    "BranchCount": 101,
    "returnInt": 31,
    "CriticalCount": 31,
    "NumEdges": 149,
    "const32Bit": 317,
    "const64Bit": 17,
    "numConstZeroes": 94,
    "numConstOnes": 89,
    "UncondBranches": 62,
    "binaryConstArg": 44,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 71,
    "NumAndInst": 20,
    "BlockMid": 14,
    "BlockLow": 110,
    "NumBitCastInst": 15,
    "NumBrInst": 101,
    "NumCallInst": 49,
    "NumGetElementPtrInst": 77,
    "NumICmpInst": 42,
    "NumLShrInst": 1,
    "NumLoadInst": 230,
    "NumMulInst": 4,
    "NumOrInst": 16,
    "NumPHIInst": 0,
    "NumRetInst": 21,
    "NumSExtInst": 2,
    "NumSelectInst": 3,
    "NumShlInst": 8,
    "NumStoreInst": 111,
    "NumSubInst": 3,
    "NumTruncInst": 20,
    "NumXorInst": 3,
    "NumZExtInst": 73,
    "TotalBlocks": 124,
    "TotalInsts": 874,
    "TotalMemInst": 538,
    "TotalFuncs": 38,
    "ArgsPhi": 0,
    "testUnary": 411
  },
  "baseline_oz_instcount": 872,
  "knowledge_base_entry": [
    "--adce",
    "--dse",
    "--elim-avail-extern",
    "--ipsccp",
    "--aggressive-instcombine",
    "--lower-constant-intrinsics",
    "--reassociate",
    "--elim-avail-extern",
    "--loop-instsimplify",
    "--mem2reg",
    "--jump-threading",
    "--mem2reg",
    "--prune-eh",
    "--inline",
    "--gvn",
    "--early-cse-memssa",
    "--mergefunc",
    "--load-store-vectorizer",
    "--indvars",
    "--correlated-propagation",
    "--sroa",
    "--indvars",
    "--slsr",
    "--early-cse-memssa",
    "--newgvn",
    "--mem2reg",
    "--inline",
    "--gvn",
    "--early-cse-memssa",
    "--mergefunc",
    "--gvn",
    "--newgvn",
    "--mldst-motion",
    "--inline",
    "--dse",
    "--instcombine",
    "--mergefunc",
    "--simplifycfg",
    "--aggressive-instcombine",
    "--mergefunc",
    "--load-store-vectorizer",
    "--indvars",
    "--correlated-propagation",
    "--sroa",
    "--indvars",
    "--slsr",
    "--early-cse-memssa",
    "--newgvn",
    "--mem2reg",
    "--inline",
    "--loop-simplifycfg",
    "--aggressive-instcombine",
    "--loop-instsimplify",
    "--early-cse",
    "--mem2reg",
    "--dce",
    "--inline",
    "--flattencfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--argpromotion",
          "--newgvn",
          "--called-value-propagation",
          "--separate-const-offset-from-gep",
          "--loop-reroll",
          "--sancov",
          "--inject-tli-mappings",
          "--lower-widenable-condition",
          "-loop-reduce",
          "--mldst-motion",
          "--simplifycfg",
          "--aggressive-instcombine",
          "--div-rem-pairs",
          "--dse",
          "--inline",
          "--load-store-vectorizer",
          "--elim-avail-extern",
          "--speculative-execution"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--argpromotion",
      "--newgvn",
      "--called-value-propagation",
      "--separate-const-offset-from-gep",
      "--loop-reroll",
      "--sancov",
      "--inject-tli-mappings",
      "--lower-widenable-condition",
      "-loop-reduce",
      "--mldst-motion",
      "--simplifycfg",
      "--aggressive-instcombine",
      "--div-rem-pairs",
      "--dse",
      "--inline",
      "--load-store-vectorizer",
      "--elim-avail-extern",
      "--speculative-execution"
    ],
    "performance_vs_Oz": "+2.3%"
  }
}
{
  "program_id": "github-v0_19418.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 174,
    "onePredOneSuc": 138,
    "onePredTwoSuc": 29,
    "oneSuccessor": 163,
    "twoPred": 33,
    "twoPredOneSuc": 19,
    "twoEach": 9,
    "twoSuccessor": 51,
    "morePreds": 20,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 236,
    "BeginPhi": 0,
    "BranchCount": 214,
    "returnInt": 55,
    "CriticalCount": 40,
    "NumEdges": 375,
    "const32Bit": 285,
    "const64Bit": 42,
    "numConstZeroes": 96,
    "numConstOnes": 91,
    "UncondBranches": 163,
    "binaryConstArg": 18,
    "NumAShrInst": 0,
    "NumAddInst": 10,
    "NumAllocaInst": 68,
    "NumAndInst": 7,
    "BlockMid": 11,
    "BlockLow": 225,
    "NumBitCastInst": 27,
    "NumBrInst": 214,
    "NumCallInst": 95,
    "NumGetElementPtrInst": 33,
    "NumICmpInst": 54,
    "NumLShrInst": 0,
    "NumLoadInst": 238,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 9,
    "NumSExtInst": 3,
    "NumSelectInst": 3,
    "NumShlInst": 1,
    "NumStoreInst": 180,
    "NumSubInst": 0,
    "NumTruncInst": 14,
    "NumXorInst": 0,
    "NumZExtInst": 28,
    "TotalBlocks": 236,
    "TotalInsts": 998,
    "TotalMemInst": 614,
    "TotalFuncs": 41,
    "ArgsPhi": 0,
    "testUnary": 378
  },
  "baseline_oz_instcount": 998,
  "knowledge_base_entry": [
    "--early-cse-memssa",
    "--gvn-hoist",
    "--mldst-motion",
    "--simplifycfg",
    "-loop-reduce",
    "--early-cse",
    "--memcpyopt",
    "--mem2reg",
    "--aggressive-instcombine",
    "--elim-avail-extern",
    "--bdce",
    "--gvn-hoist",
    "--dse",
    "--early-cse-memssa",
    "--licm",
    "--lower-constant-intrinsics",
    "--mergefunc",
    "--flattencfg",
    "--jump-threading",
    "--load-store-vectorizer",
    "--newgvn",
    "--correlated-propagation"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-unswitch",
          "--mergeicmps",
          "--gvn-hoist",
          "--prune-eh",
          "--separate-const-offset-from-gep",
          "--globaldce",
          "--sroa",
          "--instnamer",
          "--loop-versioning-licm",
          "--lcssa",
          "--aggressive-instcombine",
          "--coro-cleanup",
          "--die",
          "--loop-predication",
          "--coro-split",
          "--loop-fusion",
          "--elim-avail-extern",
          "--simplifycfg",
          "--simple-loop-unswitch",
          "--coro-early",
          "--globalopt"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-unswitch",
      "--mergeicmps",
      "--gvn-hoist",
      "--prune-eh",
      "--separate-const-offset-from-gep",
      "--globaldce",
      "--sroa",
      "--instnamer",
      "--loop-versioning-licm",
      "--lcssa",
      "--aggressive-instcombine",
      "--coro-cleanup",
      "--die",
      "--loop-predication",
      "--coro-split",
      "--loop-fusion",
      "--elim-avail-extern",
      "--simplifycfg",
      "--simple-loop-unswitch",
      "--coro-early",
      "--globalopt"
    ],
    "performance_vs_Oz": "+1.6%"
  }
}
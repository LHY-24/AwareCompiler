{
  "program_id": "github-v0_6787.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 18,
    "onePredOneSuc": 18,
    "onePredTwoSuc": 0,
    "oneSuccessor": 20,
    "twoPred": 2,
    "twoPredOneSuc": 0,
    "twoEach": 2,
    "twoSuccessor": 2,
    "morePreds": 4,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 27,
    "BeginPhi": 0,
    "BranchCount": 22,
    "returnInt": 19,
    "CriticalCount": 2,
    "NumEdges": 38,
    "const32Bit": 71,
    "const64Bit": 0,
    "numConstZeroes": 31,
    "numConstOnes": 42,
    "UncondBranches": 20,
    "binaryConstArg": 7,
    "NumAShrInst": 4,
    "NumAddInst": 4,
    "NumAllocaInst": 22,
    "NumAndInst": 0,
    "BlockMid": 9,
    "BlockLow": 18,
    "NumBitCastInst": 4,
    "NumBrInst": 22,
    "NumCallInst": 30,
    "NumGetElementPtrInst": 18,
    "NumICmpInst": 2,
    "NumLShrInst": 0,
    "NumLoadInst": 115,
    "NumMulInst": 1,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 36,
    "NumSubInst": 0,
    "NumTruncInst": 7,
    "NumXorInst": 0,
    "NumZExtInst": 17,
    "TotalBlocks": 27,
    "TotalInsts": 289,
    "TotalMemInst": 221,
    "TotalFuncs": 12,
    "ArgsPhi": 0,
    "testUnary": 167
  },
  "baseline_oz_instcount": 289,
  "knowledge_base_entry": [
    "--float2int",
    "--newgvn",
    "--die",
    "--sroa",
    "--loop-reroll",
    "--mergefunc",
    "--adce",
    "--early-cse-memssa",
    "--gvn",
    "--indvars",
    "--sroa",
    "--adce",
    "--aggressive-instcombine",
    "--globaldce",
    "--aggressive-instcombine",
    "--mergefunc",
    "--mem2reg",
    "--aggressive-instcombine",
    "--early-cse-memssa",
    "--mergefunc",
    "--mem2reg",
    "--inline",
    "--loop-simplifycfg",
    "--gvn-hoist",
    "-loop-reduce",
    "--slp-vectorizer",
    "--lower-expect",
    "--slp-vectorizer",
    "--dce",
    "--newgvn",
    "--loop-fusion",
    "--early-cse-memssa",
    "--licm"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--irce",
          "--scalarizer",
          "--aggressive-instcombine",
          "--loop-load-elim",
          "--alignment-from-assumptions",
          "--deadargelim",
          "--constprop",
          "--add-discriminators",
          "--elim-avail-extern",
          "--libcalls-shrinkwrap",
          "--dse",
          "--argpromotion",
          "--lower-widenable-condition",
          "--cross-dso-cfi",
          "--die",
          "--inject-tli-mappings",
          "--loop-idiom",
          "--flattencfg",
          "--strip-debug-declare",
          "--simple-loop-unswitch",
          "--strip-nondebug",
          "--early-cse-memssa",
          "--insert-gcov-profiling",
          "--nary-reassociate",
          "--slp-vectorizer",
          "--loop-unswitch",
          "--mergefunc",
          "--loop-distribute",
          "--globalopt",
          "--inline"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--irce",
      "--scalarizer",
      "--aggressive-instcombine",
      "--loop-load-elim",
      "--alignment-from-assumptions",
      "--deadargelim",
      "--constprop",
      "--add-discriminators",
      "--elim-avail-extern",
      "--libcalls-shrinkwrap",
      "--dse",
      "--argpromotion",
      "--lower-widenable-condition",
      "--cross-dso-cfi",
      "--die",
      "--inject-tli-mappings",
      "--loop-idiom",
      "--flattencfg",
      "--strip-debug-declare",
      "--simple-loop-unswitch",
      "--strip-nondebug",
      "--early-cse-memssa",
      "--insert-gcov-profiling",
      "--nary-reassociate",
      "--slp-vectorizer",
      "--loop-unswitch",
      "--mergefunc",
      "--loop-distribute",
      "--globalopt",
      "--inline"
    ],
    "performance_vs_Oz": "+2.8%"
  }
}
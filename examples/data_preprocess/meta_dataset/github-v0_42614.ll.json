{
  "program_id": "github-v0_42614.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 6,
    "onePred": 4,
    "onePredOneSuc": 4,
    "onePredTwoSuc": 0,
    "oneSuccessor": 4,
    "twoPred": 6,
    "twoPredOneSuc": 0,
    "twoEach": 4,
    "twoSuccessor": 6,
    "morePreds": 0,
    "BB03Phi": 6,
    "BBHiPhi": 0,
    "BBNoPhi": 6,
    "BeginPhi": 6,
    "BranchCount": 10,
    "returnInt": 2,
    "CriticalCount": 8,
    "NumEdges": 16,
    "const32Bit": 12,
    "const64Bit": 2,
    "numConstZeroes": 8,
    "numConstOnes": 2,
    "UncondBranches": 4,
    "binaryConstArg": 4,
    "NumAShrInst": 0,
    "NumAddInst": 7,
    "NumAllocaInst": 0,
    "NumAndInst": 4,
    "BlockMid": 0,
    "BlockLow": 12,
    "NumBitCastInst": 0,
    "NumBrInst": 10,
    "NumCallInst": 3,
    "NumGetElementPtrInst": 8,
    "NumICmpInst": 8,
    "NumLShrInst": 0,
    "NumLoadInst": 10,
    "NumMulInst": 3,
    "NumOrInst": 0,
    "NumPHIInst": 8,
    "NumRetInst": 2,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 2,
    "NumSubInst": 0,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 6,
    "TotalBlocks": 12,
    "TotalInsts": 73,
    "TotalMemInst": 23,
    "TotalFuncs": 4,
    "ArgsPhi": 16,
    "testUnary": 18
  },
  "baseline_oz_instcount": 75,
  "knowledge_base_entry": [
    "--sccp",
    "--jump-threading",
    "--aggressive-instcombine",
    "--dse",
    "--die",
    "--simplifycfg",
    "--lower-constant-intrinsics"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--simple-loop-unswitch",
          "--loop-unswitch",
          "--guard-widening",
          "--instcombine",
          "--float2int",
          "--rewrite-statepoints-for-gc",
          "--redundant-dbg-inst-elim",
          "--loop-deletion",
          "--aggressive-instcombine",
          "--inline",
          "--forceattrs",
          "--loop-unroll",
          "--lower-guard-intrinsic",
          "--irce",
          "--loop-load-elim",
          "--lower-matrix-intrinsics",
          "--globaldce",
          "--always-inline",
          "--elim-avail-extern",
          "--correlated-propagation",
          "--loweratomic",
          "--lower-constant-intrinsics",
          "--sancov",
          "--sccp",
          "--jump-threading",
          "--alignment-from-assumptions",
          "--simplifycfg"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--simple-loop-unswitch",
      "--loop-unswitch",
      "--guard-widening",
      "--instcombine",
      "--float2int",
      "--rewrite-statepoints-for-gc",
      "--redundant-dbg-inst-elim",
      "--loop-deletion",
      "--aggressive-instcombine",
      "--inline",
      "--forceattrs",
      "--loop-unroll",
      "--lower-guard-intrinsic",
      "--irce",
      "--loop-load-elim",
      "--lower-matrix-intrinsics",
      "--globaldce",
      "--always-inline",
      "--elim-avail-extern",
      "--correlated-propagation",
      "--loweratomic",
      "--lower-constant-intrinsics",
      "--sancov",
      "--sccp",
      "--jump-threading",
      "--alignment-from-assumptions",
      "--simplifycfg"
    ],
    "performance_vs_Oz": "+2.7%"
  }
}
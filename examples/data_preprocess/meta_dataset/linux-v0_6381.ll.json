{
  "program_id": "linux-v0_6381.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 55,
    "onePredOneSuc": 42,
    "onePredTwoSuc": 11,
    "oneSuccessor": 53,
    "twoPred": 21,
    "twoPredOneSuc": 9,
    "twoEach": 7,
    "twoSuccessor": 24,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 89,
    "BeginPhi": 0,
    "BranchCount": 77,
    "returnInt": 5,
    "CriticalCount": 7,
    "NumEdges": 101,
    "const32Bit": 443,
    "const64Bit": 5,
    "numConstZeroes": 187,
    "numConstOnes": 95,
    "UncondBranches": 53,
    "binaryConstArg": 26,
    "NumAShrInst": 0,
    "NumAddInst": 4,
    "NumAllocaInst": 74,
    "NumAndInst": 14,
    "BlockMid": 16,
    "BlockLow": 73,
    "NumBitCastInst": 19,
    "NumBrInst": 77,
    "NumCallInst": 50,
    "NumGetElementPtrInst": 157,
    "NumICmpInst": 30,
    "NumLShrInst": 5,
    "NumLoadInst": 239,
    "NumMulInst": 0,
    "NumOrInst": 5,
    "NumPHIInst": 0,
    "NumRetInst": 12,
    "NumSExtInst": 2,
    "NumSelectInst": 2,
    "NumShlInst": 0,
    "NumStoreInst": 107,
    "NumSubInst": 0,
    "NumTruncInst": 9,
    "NumXorInst": 0,
    "NumZExtInst": 15,
    "TotalBlocks": 89,
    "TotalInsts": 828,
    "TotalMemInst": 627,
    "TotalFuncs": 29,
    "ArgsPhi": 0,
    "testUnary": 365
  },
  "baseline_oz_instcount": 828,
  "knowledge_base_entry": [
    "--loop-interchange",
    "--early-cse",
    "--aggressive-instcombine",
    "--gvn",
    "--instsimplify",
    "--loop-simplifycfg",
    "--mem2reg",
    "--globalopt",
    "--sroa",
    "--gvn-hoist",
    "--aggressive-instcombine",
    "--instsimplify",
    "--correlated-propagation",
    "--mergefunc",
    "--sroa",
    "--sccp",
    "--globalopt",
    "--sroa",
    "--gvn-hoist",
    "--aggressive-instcombine",
    "--instsimplify",
    "--instcombine",
    "--newgvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--div-rem-pairs",
          "--mergefunc",
          "--inject-tli-mappings",
          "--reassociate",
          "--gvn-hoist",
          "--elim-avail-extern",
          "--instsimplify",
          "--loop-vectorize",
          "--slsr",
          "--ee-instrument",
          "--dce",
          "--aggressive-instcombine",
          "--rpo-functionattrs",
          "--indvars",
          "--loop-fusion",
          "--globaldce",
          "--lcssa",
          "--adce",
          "--libcalls-shrinkwrap",
          "--early-cse"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--div-rem-pairs",
      "--mergefunc",
      "--inject-tli-mappings",
      "--reassociate",
      "--gvn-hoist",
      "--elim-avail-extern",
      "--instsimplify",
      "--loop-vectorize",
      "--slsr",
      "--ee-instrument",
      "--dce",
      "--aggressive-instcombine",
      "--rpo-functionattrs",
      "--indvars",
      "--loop-fusion",
      "--globaldce",
      "--lcssa",
      "--adce",
      "--libcalls-shrinkwrap",
      "--early-cse"
    ],
    "performance_vs_Oz": "+0.8%"
  }
}
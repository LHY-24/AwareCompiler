{
  "program_id": "linux-v0_2544.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 29,
    "onePredOneSuc": 16,
    "onePredTwoSuc": 9,
    "oneSuccessor": 26,
    "twoPred": 7,
    "twoPredOneSuc": 4,
    "twoEach": 0,
    "twoSuccessor": 13,
    "morePreds": 3,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 56,
    "BeginPhi": 0,
    "BranchCount": 39,
    "returnInt": 18,
    "CriticalCount": 7,
    "NumEdges": 52,
    "const32Bit": 188,
    "const64Bit": 16,
    "numConstZeroes": 65,
    "numConstOnes": 73,
    "UncondBranches": 26,
    "binaryConstArg": 17,
    "NumAShrInst": 0,
    "NumAddInst": 4,
    "NumAllocaInst": 62,
    "NumAndInst": 4,
    "BlockMid": 14,
    "BlockLow": 42,
    "NumBitCastInst": 12,
    "NumBrInst": 39,
    "NumCallInst": 40,
    "NumGetElementPtrInst": 51,
    "NumICmpInst": 15,
    "NumLShrInst": 2,
    "NumLoadInst": 141,
    "NumMulInst": 4,
    "NumOrInst": 2,
    "NumPHIInst": 0,
    "NumRetInst": 17,
    "NumSExtInst": 2,
    "NumSelectInst": 1,
    "NumShlInst": 1,
    "NumStoreInst": 65,
    "NumSubInst": 2,
    "NumTruncInst": 2,
    "NumXorInst": 1,
    "NumZExtInst": 10,
    "TotalBlocks": 56,
    "TotalInsts": 477,
    "TotalMemInst": 359,
    "TotalFuncs": 47,
    "ArgsPhi": 0,
    "testUnary": 229
  },
  "baseline_oz_instcount": 477,
  "knowledge_base_entry": [
    "--loop-vectorize",
    "--instcombine",
    "--aggressive-instcombine",
    "--die",
    "--loop-simplifycfg",
    "--newgvn",
    "--sroa",
    "--correlated-propagation",
    "--newgvn",
    "--loop-rotate"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-unroll-and-jam",
          "--simplifycfg",
          "--called-value-propagation",
          "--newgvn",
          "--licm",
          "--loop-load-elim",
          "--coro-split",
          "--loop-versioning-licm",
          "--aggressive-instcombine",
          "--loop-predication",
          "--coro-cleanup",
          "--mldst-motion",
          "--inline",
          "--lower-constant-intrinsics"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-unroll-and-jam",
      "--simplifycfg",
      "--called-value-propagation",
      "--newgvn",
      "--licm",
      "--loop-load-elim",
      "--coro-split",
      "--loop-versioning-licm",
      "--aggressive-instcombine",
      "--loop-predication",
      "--coro-cleanup",
      "--mldst-motion",
      "--inline",
      "--lower-constant-intrinsics"
    ],
    "performance_vs_Oz": "+0.8%"
  }
}
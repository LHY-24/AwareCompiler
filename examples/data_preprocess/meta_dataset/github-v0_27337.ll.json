{
  "program_id": "github-v0_27337.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 17,
    "onePredOneSuc": 10,
    "onePredTwoSuc": 7,
    "oneSuccessor": 17,
    "twoPred": 12,
    "twoPredOneSuc": 6,
    "twoEach": 5,
    "twoSuccessor": 12,
    "morePreds": 0,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 29,
    "BeginPhi": 1,
    "BranchCount": 29,
    "returnInt": 1,
    "CriticalCount": 8,
    "NumEdges": 41,
    "const32Bit": 102,
    "const64Bit": 2,
    "numConstZeroes": 51,
    "numConstOnes": 15,
    "UncondBranches": 17,
    "binaryConstArg": 3,
    "NumAShrInst": 0,
    "NumAddInst": 4,
    "NumAllocaInst": 12,
    "NumAndInst": 0,
    "BlockMid": 4,
    "BlockLow": 26,
    "NumBitCastInst": 1,
    "NumBrInst": 29,
    "NumCallInst": 2,
    "NumGetElementPtrInst": 38,
    "NumICmpInst": 12,
    "NumLShrInst": 0,
    "NumLoadInst": 88,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 1,
    "NumRetInst": 1,
    "NumSExtInst": 1,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 35,
    "NumSubInst": 3,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 1,
    "TotalBlocks": 30,
    "TotalInsts": 229,
    "TotalMemInst": 175,
    "TotalFuncs": 2,
    "ArgsPhi": 2,
    "testUnary": 103
  },
  "baseline_oz_instcount": 231,
  "knowledge_base_entry": [
    "--lowerinvoke",
    "--newgvn",
    "--adce",
    "--ipsccp",
    "--instcombine",
    "--lower-expect",
    "--jump-threading",
    "--dce",
    "--dse",
    "--mergefunc",
    "--gvn",
    "--die"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--scalarizer",
          "--libcalls-shrinkwrap",
          "--guard-widening",
          "--dce",
          "--float2int",
          "--loop-unroll-and-jam",
          "--newgvn",
          "--consthoist",
          "--hotcoldsplit",
          "--strip-nondebug"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--scalarizer",
      "--libcalls-shrinkwrap",
      "--guard-widening",
      "--dce",
      "--float2int",
      "--loop-unroll-and-jam",
      "--newgvn",
      "--consthoist",
      "--hotcoldsplit",
      "--strip-nondebug"
    ],
    "performance_vs_Oz": "+0.9%"
  }
}
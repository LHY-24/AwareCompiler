{
  "program_id": "github-v0_33251.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 1,
    "onePredOneSuc": 1,
    "onePredTwoSuc": 0,
    "oneSuccessor": 1,
    "twoPred": 1,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 1,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 7,
    "BeginPhi": 0,
    "BranchCount": 2,
    "returnInt": 0,
    "CriticalCount": 1,
    "NumEdges": 3,
    "const32Bit": 26,
    "const64Bit": 0,
    "numConstZeroes": 10,
    "numConstOnes": 11,
    "UncondBranches": 1,
    "binaryConstArg": 0,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 10,
    "NumAndInst": 0,
    "BlockMid": 1,
    "BlockLow": 6,
    "NumBitCastInst": 2,
    "NumBrInst": 2,
    "NumCallInst": 2,
    "NumGetElementPtrInst": 6,
    "NumICmpInst": 1,
    "NumLShrInst": 0,
    "NumLoadInst": 17,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 5,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 16,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 7,
    "TotalInsts": 61,
    "TotalMemInst": 51,
    "TotalFuncs": 7,
    "ArgsPhi": 0,
    "testUnary": 29
  },
  "baseline_oz_instcount": 61,
  "knowledge_base_entry": [
    "--mergereturn",
    "--jump-threading",
    "--adce",
    "--mergefunc",
    "--gvn",
    "--flattencfg",
    "--globalopt",
    "--aggressive-instcombine",
    "--mergefunc",
    "--gvn-hoist",
    "--lower-expect",
    "--early-cse",
    "--prune-eh"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--globaldce",
          "--coro-elide",
          "--mergefunc",
          "--scalarizer",
          "--irce",
          "--ee-instrument",
          "--functionattrs",
          "--consthoist",
          "--mergeicmps",
          "--bdce"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--globaldce",
      "--coro-elide",
      "--mergefunc",
      "--scalarizer",
      "--irce",
      "--ee-instrument",
      "--functionattrs",
      "--consthoist",
      "--mergeicmps",
      "--bdce"
    ],
    "performance_vs_Oz": "+3.3%"
  }
}
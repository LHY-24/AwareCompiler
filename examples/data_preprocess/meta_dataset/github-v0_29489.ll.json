{
  "program_id": "github-v0_29489.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 15,
    "onePredOneSuc": 10,
    "onePredTwoSuc": 3,
    "oneSuccessor": 13,
    "twoPred": 6,
    "twoPredOneSuc": 3,
    "twoEach": 2,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 24,
    "BeginPhi": 0,
    "BranchCount": 20,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 27,
    "const32Bit": 39,
    "const64Bit": 62,
    "numConstZeroes": 66,
    "numConstOnes": 25,
    "UncondBranches": 13,
    "binaryConstArg": 12,
    "NumAShrInst": 3,
    "NumAddInst": 10,
    "NumAllocaInst": 12,
    "NumAndInst": 3,
    "BlockMid": 5,
    "BlockLow": 19,
    "NumBitCastInst": 8,
    "NumBrInst": 20,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 39,
    "NumICmpInst": 7,
    "NumLShrInst": 0,
    "NumLoadInst": 37,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 24,
    "NumSubInst": 1,
    "NumTruncInst": 8,
    "NumXorInst": 0,
    "NumZExtInst": 17,
    "TotalBlocks": 24,
    "TotalInsts": 203,
    "TotalMemInst": 119,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 85
  },
  "baseline_oz_instcount": 203,
  "knowledge_base_entry": [
    "--separate-const-offset-from-gep",
    "--gvn",
    "--globalopt",
    "--loweratomic",
    "--aggressive-instcombine",
    "--mem2reg",
    "--licm",
    "--lower-expect",
    "--mem2reg",
    "--dce",
    "--loop-simplifycfg",
    "--flattencfg",
    "--globalopt"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--forceattrs",
          "--lower-guard-intrinsic",
          "--coro-early",
          "--loop-predication",
          "--ipsccp",
          "--hotcoldsplit",
          "--aggressive-instcombine",
          "--early-cse",
          "--canonicalize-aliases",
          "--lower-constant-intrinsics",
          "--elim-avail-extern",
          "--insert-gcov-profiling",
          "--partially-inline-libcalls",
          "--lowerinvoke",
          "--loop-unswitch",
          "--barrier",
          "--inline",
          "--coro-elide",
          "--coro-cleanup",
          "--loop-simplifycfg",
          "--break-crit-edges",
          "--float2int",
          "--indvars",
          "--constmerge",
          "--loop-load-elim"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+9.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--forceattrs",
      "--lower-guard-intrinsic",
      "--coro-early",
      "--loop-predication",
      "--ipsccp",
      "--hotcoldsplit",
      "--aggressive-instcombine",
      "--early-cse",
      "--canonicalize-aliases",
      "--lower-constant-intrinsics",
      "--elim-avail-extern",
      "--insert-gcov-profiling",
      "--partially-inline-libcalls",
      "--lowerinvoke",
      "--loop-unswitch",
      "--barrier",
      "--inline",
      "--coro-elide",
      "--coro-cleanup",
      "--loop-simplifycfg",
      "--break-crit-edges",
      "--float2int",
      "--indvars",
      "--constmerge",
      "--loop-load-elim"
    ],
    "performance_vs_Oz": "+9.4%"
  }
}
{
  "program_id": "linux-v0_12749.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 59,
    "onePredOneSuc": 43,
    "onePredTwoSuc": 14,
    "oneSuccessor": 50,
    "twoPred": 19,
    "twoPredOneSuc": 4,
    "twoEach": 10,
    "twoSuccessor": 32,
    "morePreds": 4,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 107,
    "BeginPhi": 0,
    "BranchCount": 81,
    "returnInt": 29,
    "CriticalCount": 11,
    "NumEdges": 114,
    "const32Bit": 358,
    "const64Bit": 24,
    "numConstZeroes": 168,
    "numConstOnes": 101,
    "UncondBranches": 50,
    "binaryConstArg": 27,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 70,
    "NumAndInst": 8,
    "BlockMid": 10,
    "BlockLow": 97,
    "NumBitCastInst": 9,
    "NumBrInst": 81,
    "NumCallInst": 66,
    "NumGetElementPtrInst": 109,
    "NumICmpInst": 32,
    "NumLShrInst": 0,
    "NumLoadInst": 228,
    "NumMulInst": 0,
    "NumOrInst": 9,
    "NumPHIInst": 0,
    "NumRetInst": 25,
    "NumSExtInst": 10,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 121,
    "NumSubInst": 2,
    "NumTruncInst": 4,
    "NumXorInst": 2,
    "NumZExtInst": 4,
    "TotalBlocks": 107,
    "TotalInsts": 791,
    "TotalMemInst": 594,
    "TotalFuncs": 44,
    "ArgsPhi": 0,
    "testUnary": 329
  },
  "baseline_oz_instcount": 792,
  "knowledge_base_entry": [
    "--loop-vectorize",
    "--newgvn",
    "--flattencfg",
    "--mergefunc",
    "--lower-expect",
    "--ipsccp",
    "--sroa",
    "--load-store-vectorizer",
    "--simplifycfg",
    "--aggressive-instcombine",
    "--loop-instsimplify",
    "--mergefunc",
    "--jump-threading",
    "--newgvn",
    "--flattencfg",
    "--mergefunc",
    "--lower-expect",
    "--ipsccp",
    "--aggressive-instcombine",
    "--loop-instsimplify",
    "--mergefunc",
    "--jump-threading",
    "--newgvn",
    "--dce",
    "--die",
    "--loop-instsimplify",
    "--mergefunc",
    "--gvn",
    "--memcpyopt"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--partial-inliner",
          "--instcombine",
          "--loop-data-prefetch",
          "--rpo-functionattrs",
          "--lower-widenable-condition",
          "--speculative-execution",
          "--mergefunc",
          "--sroa",
          "--redundant-dbg-inst-elim",
          "--name-anon-globals",
          "--aggressive-instcombine",
          "--always-inline",
          "--dce",
          "--loop-predication",
          "--strip-debug-declare",
          "--forceattrs",
          "--simplifycfg",
          "--inject-tli-mappings",
          "--constprop",
          "--libcalls-shrinkwrap",
          "--nary-reassociate",
          "--loop-deletion",
          "--div-rem-pairs",
          "--memcpyopt",
          "--instsimplify",
          "--lower-matrix-intrinsics",
          "--prune-eh",
          "--inline",
          "--pgo-memop-opt",
          "--loop-interchange"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--partial-inliner",
      "--instcombine",
      "--loop-data-prefetch",
      "--rpo-functionattrs",
      "--lower-widenable-condition",
      "--speculative-execution",
      "--mergefunc",
      "--sroa",
      "--redundant-dbg-inst-elim",
      "--name-anon-globals",
      "--aggressive-instcombine",
      "--always-inline",
      "--dce",
      "--loop-predication",
      "--strip-debug-declare",
      "--forceattrs",
      "--simplifycfg",
      "--inject-tli-mappings",
      "--constprop",
      "--libcalls-shrinkwrap",
      "--nary-reassociate",
      "--loop-deletion",
      "--div-rem-pairs",
      "--memcpyopt",
      "--instsimplify",
      "--lower-matrix-intrinsics",
      "--prune-eh",
      "--inline",
      "--pgo-memop-opt",
      "--loop-interchange"
    ],
    "performance_vs_Oz": "+2.3%"
  }
}
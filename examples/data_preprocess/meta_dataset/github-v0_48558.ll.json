{
  "program_id": "github-v0_48558.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 14,
    "onePredOneSuc": 9,
    "onePredTwoSuc": 2,
    "oneSuccessor": 12,
    "twoPred": 6,
    "twoPredOneSuc": 2,
    "twoEach": 4,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 23,
    "BeginPhi": 0,
    "BranchCount": 19,
    "returnInt": 4,
    "CriticalCount": 1,
    "NumEdges": 26,
    "const32Bit": 34,
    "const64Bit": 52,
    "numConstZeroes": 50,
    "numConstOnes": 29,
    "UncondBranches": 12,
    "binaryConstArg": 10,
    "NumAShrInst": 3,
    "NumAddInst": 4,
    "NumAllocaInst": 14,
    "NumAndInst": 2,
    "BlockMid": 6,
    "BlockLow": 17,
    "NumBitCastInst": 12,
    "NumBrInst": 19,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 38,
    "NumICmpInst": 7,
    "NumLShrInst": 0,
    "NumLoadInst": 41,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 4,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 25,
    "NumSubInst": 0,
    "NumTruncInst": 5,
    "NumXorInst": 0,
    "NumZExtInst": 17,
    "TotalBlocks": 23,
    "TotalInsts": 204,
    "TotalMemInst": 125,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 93
  },
  "baseline_oz_instcount": 204,
  "knowledge_base_entry": [
    "--mldst-motion",
    "--mem2reg",
    "--aggressive-instcombine",
    "--inline",
    "--dce",
    "--correlated-propagation",
    "--instcombine"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--sroa",
          "--strip-dead-prototypes",
          "--barrier",
          "--mergefunc",
          "--loop-unroll-and-jam",
          "--coro-elide",
          "--gvn",
          "--argpromotion",
          "--aggressive-instcombine",
          "--slsr"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.0%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--sroa",
      "--strip-dead-prototypes",
      "--barrier",
      "--mergefunc",
      "--loop-unroll-and-jam",
      "--coro-elide",
      "--gvn",
      "--argpromotion",
      "--aggressive-instcombine",
      "--slsr"
    ],
    "performance_vs_Oz": "+1.0%"
  }
}
{
  "program_id": "opencv-v0_195.ll",
  "autophase_features": {
    "BBNumArgsHi": 5,
    "BBNumArgsLo": 17,
    "onePred": 48,
    "onePredOneSuc": 28,
    "onePredTwoSuc": 20,
    "oneSuccessor": 39,
    "twoPred": 27,
    "twoPredOneSuc": 10,
    "twoEach": 12,
    "twoSuccessor": 43,
    "morePreds": 8,
    "BB03Phi": 21,
    "BBHiPhi": 1,
    "BBNoPhi": 67,
    "BeginPhi": 22,
    "BranchCount": 82,
    "returnInt": 16,
    "CriticalCount": 41,
    "NumEdges": 128,
    "const32Bit": 170,
    "const64Bit": 141,
    "numConstZeroes": 164,
    "numConstOnes": 53,
    "UncondBranches": 39,
    "binaryConstArg": 29,
    "NumAShrInst": 1,
    "NumAddInst": 24,
    "NumAllocaInst": 8,
    "NumAndInst": 7,
    "BlockMid": 7,
    "BlockLow": 82,
    "NumBitCastInst": 20,
    "NumBrInst": 82,
    "NumCallInst": 70,
    "NumGetElementPtrInst": 88,
    "NumICmpInst": 58,
    "NumLShrInst": 2,
    "NumLoadInst": 57,
    "NumMulInst": 3,
    "NumOrInst": 7,
    "NumPHIInst": 34,
    "NumRetInst": 6,
    "NumSExtInst": 5,
    "NumSelectInst": 6,
    "NumShlInst": 3,
    "NumStoreInst": 29,
    "NumSubInst": 1,
    "NumTruncInst": 3,
    "NumXorInst": 1,
    "NumZExtInst": 14,
    "TotalBlocks": 89,
    "TotalInsts": 537,
    "TotalMemInst": 252,
    "TotalFuncs": 31,
    "ArgsPhi": 84,
    "testUnary": 109
  },
  "baseline_oz_instcount": 528,
  "knowledge_base_entry": [
    "--mergefunc",
    "--newgvn",
    "--loop-reroll",
    "--slsr",
    "--indvars",
    "--instcombine",
    "--mldst-motion",
    "--loop-simplifycfg",
    "--mldst-motion",
    "--jump-threading",
    "--loop-rotate",
    "--lower-expect",
    "--simplifycfg",
    "--flattencfg",
    "--simplifycfg",
    "--early-cse-memssa",
    "--prune-eh",
    "--lower-constant-intrinsics",
    "--newgvn",
    "--globalopt",
    "--instsimplify",
    "--dce",
    "--ipsccp",
    "--early-cse"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--early-cse-memssa",
          "--loop-idiom",
          "--separate-const-offset-from-gep",
          "--instcombine",
          "--die",
          "--lower-guard-intrinsic",
          "--coro-cleanup",
          "--correlated-propagation",
          "--constprop",
          "--constmerge",
          "--globaldce",
          "--pgo-memop-opt",
          "--loop-reroll",
          "--argpromotion",
          "--flattencfg",
          "--loop-unroll",
          "--instsimplify",
          "--loop-simplify"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--early-cse-memssa",
      "--loop-idiom",
      "--separate-const-offset-from-gep",
      "--instcombine",
      "--die",
      "--lower-guard-intrinsic",
      "--coro-cleanup",
      "--correlated-propagation",
      "--constprop",
      "--constmerge",
      "--globaldce",
      "--pgo-memop-opt",
      "--loop-reroll",
      "--argpromotion",
      "--flattencfg",
      "--loop-unroll",
      "--instsimplify",
      "--loop-simplify"
    ],
    "performance_vs_Oz": "+0.4%"
  }
}
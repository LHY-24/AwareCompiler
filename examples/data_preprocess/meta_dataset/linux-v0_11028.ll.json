{
  "program_id": "linux-v0_11028.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 54,
    "onePredOneSuc": 29,
    "onePredTwoSuc": 24,
    "oneSuccessor": 43,
    "twoPred": 17,
    "twoPredOneSuc": 11,
    "twoEach": 4,
    "twoSuccessor": 36,
    "morePreds": 8,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 93,
    "BeginPhi": 2,
    "BranchCount": 79,
    "returnInt": 16,
    "CriticalCount": 22,
    "NumEdges": 115,
    "const32Bit": 477,
    "const64Bit": 4,
    "numConstZeroes": 225,
    "numConstOnes": 157,
    "UncondBranches": 43,
    "binaryConstArg": 23,
    "NumAShrInst": 0,
    "NumAddInst": 6,
    "NumAllocaInst": 119,
    "NumAndInst": 14,
    "BlockMid": 20,
    "BlockLow": 75,
    "NumBitCastInst": 23,
    "NumBrInst": 79,
    "NumCallInst": 65,
    "NumGetElementPtrInst": 135,
    "NumICmpInst": 38,
    "NumLShrInst": 0,
    "NumLoadInst": 270,
    "NumMulInst": 0,
    "NumOrInst": 4,
    "NumPHIInst": 2,
    "NumRetInst": 16,
    "NumSExtInst": 2,
    "NumSelectInst": 2,
    "NumShlInst": 0,
    "NumStoreInst": 150,
    "NumSubInst": 0,
    "NumTruncInst": 2,
    "NumXorInst": 2,
    "NumZExtInst": 5,
    "TotalBlocks": 95,
    "TotalInsts": 934,
    "TotalMemInst": 739,
    "TotalFuncs": 29,
    "ArgsPhi": 6,
    "testUnary": 421
  },
  "baseline_oz_instcount": 934,
  "knowledge_base_entry": [
    "--early-cse-memssa",
    "--loop-reroll",
    "--gvn",
    "--aggressive-instcombine",
    "--adce",
    "--loop-instsimplify",
    "--mem2reg",
    "--dse",
    "--bdce",
    "--correlated-propagation",
    "--ipsccp",
    "--loop-simplifycfg",
    "--slp-vectorizer",
    "--jump-threading",
    "--dce",
    "--gvn",
    "--prune-eh",
    "--early-cse-memssa",
    "--loop-reroll",
    "--gvn",
    "--globalopt",
    "--newgvn",
    "--instsimplify",
    "--reassociate",
    "--prune-eh",
    "--gvn-hoist"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--early-cse",
          "--aggressive-instcombine",
          "--coro-split",
          "--partial-inliner",
          "--lower-matrix-intrinsics",
          "--correlated-propagation",
          "--coro-early",
          "--sccp",
          "--newgvn",
          "--lowerswitch",
          "--cross-dso-cfi",
          "--sancov",
          "--insert-gcov-profiling",
          "--mem2reg",
          "--libcalls-shrinkwrap"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--early-cse",
      "--aggressive-instcombine",
      "--coro-split",
      "--partial-inliner",
      "--lower-matrix-intrinsics",
      "--correlated-propagation",
      "--coro-early",
      "--sccp",
      "--newgvn",
      "--lowerswitch",
      "--cross-dso-cfi",
      "--sancov",
      "--insert-gcov-profiling",
      "--mem2reg",
      "--libcalls-shrinkwrap"
    ],
    "performance_vs_Oz": "+0.2%"
  }
}
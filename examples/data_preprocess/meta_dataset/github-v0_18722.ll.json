{
  "program_id": "github-v0_18722.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 15,
    "onePredOneSuc": 10,
    "onePredTwoSuc": 3,
    "oneSuccessor": 13,
    "twoPred": 6,
    "twoPredOneSuc": 3,
    "twoEach": 2,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 24,
    "BeginPhi": 0,
    "BranchCount": 20,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 27,
    "const32Bit": 46,
    "const64Bit": 37,
    "numConstZeroes": 43,
    "numConstOnes": 26,
    "UncondBranches": 13,
    "binaryConstArg": 23,
    "NumAShrInst": 10,
    "NumAddInst": 3,
    "NumAllocaInst": 11,
    "NumAndInst": 8,
    "BlockMid": 7,
    "BlockLow": 17,
    "NumBitCastInst": 0,
    "NumBrInst": 20,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 21,
    "NumICmpInst": 7,
    "NumLShrInst": 0,
    "NumLoadInst": 29,
    "NumMulInst": 0,
    "NumOrInst": 4,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 7,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 17,
    "NumSubInst": 0,
    "NumTruncInst": 11,
    "NumXorInst": 1,
    "NumZExtInst": 15,
    "TotalBlocks": 24,
    "TotalInsts": 176,
    "TotalMemInst": 85,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 73
  },
  "baseline_oz_instcount": 176,
  "knowledge_base_entry": [
    "--sccp",
    "--gvn-hoist",
    "--loop-reroll",
    "--instcombine",
    "--reassociate",
    "--aggressive-instcombine",
    "--bdce",
    "--aggressive-instcombine",
    "--mergefunc",
    "--aggressive-instcombine",
    "--dce",
    "--loop-simplifycfg",
    "--correlated-propagation",
    "--gvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-simplifycfg",
          "--loop-instsimplify",
          "--mldst-motion",
          "--correlated-propagation",
          "--inline",
          "--early-cse",
          "--ipsccp",
          "--instsimplify",
          "--alignment-from-assumptions",
          "--elim-avail-extern",
          "--lower-matrix-intrinsics",
          "--aggressive-instcombine",
          "--pgo-memop-opt",
          "--loop-deletion",
          "--lower-expect",
          "--globalopt",
          "--constprop",
          "--mem2reg",
          "--guard-widening",
          "--coro-split",
          "--lower-widenable-condition",
          "--float2int",
          "--rewrite-statepoints-for-gc",
          "--ipconstprop",
          "--globalsplit",
          "--loop-idiom"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+6.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-simplifycfg",
      "--loop-instsimplify",
      "--mldst-motion",
      "--correlated-propagation",
      "--inline",
      "--early-cse",
      "--ipsccp",
      "--instsimplify",
      "--alignment-from-assumptions",
      "--elim-avail-extern",
      "--lower-matrix-intrinsics",
      "--aggressive-instcombine",
      "--pgo-memop-opt",
      "--loop-deletion",
      "--lower-expect",
      "--globalopt",
      "--constprop",
      "--mem2reg",
      "--guard-widening",
      "--coro-split",
      "--lower-widenable-condition",
      "--float2int",
      "--rewrite-statepoints-for-gc",
      "--ipconstprop",
      "--globalsplit",
      "--loop-idiom"
    ],
    "performance_vs_Oz": "+6.8%"
  }
}
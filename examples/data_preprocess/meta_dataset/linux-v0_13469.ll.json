{
  "program_id": "linux-v0_13469.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 28,
    "onePredOneSuc": 20,
    "onePredTwoSuc": 8,
    "oneSuccessor": 27,
    "twoPred": 13,
    "twoPredOneSuc": 5,
    "twoEach": 4,
    "twoSuccessor": 15,
    "morePreds": 1,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 51,
    "BeginPhi": 1,
    "BranchCount": 42,
    "returnInt": 7,
    "CriticalCount": 7,
    "NumEdges": 57,
    "const32Bit": 158,
    "const64Bit": 2,
    "numConstZeroes": 68,
    "numConstOnes": 60,
    "UncondBranches": 27,
    "binaryConstArg": 14,
    "NumAShrInst": 0,
    "NumAddInst": 7,
    "NumAllocaInst": 42,
    "NumAndInst": 2,
    "BlockMid": 9,
    "BlockLow": 43,
    "NumBitCastInst": 6,
    "NumBrInst": 42,
    "NumCallInst": 22,
    "NumGetElementPtrInst": 43,
    "NumICmpInst": 17,
    "NumLShrInst": 0,
    "NumLoadInst": 105,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 1,
    "NumRetInst": 10,
    "NumSExtInst": 5,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 58,
    "NumSubInst": 8,
    "NumTruncInst": 0,
    "NumXorInst": 5,
    "NumZExtInst": 5,
    "TotalBlocks": 52,
    "TotalInsts": 378,
    "TotalMemInst": 270,
    "TotalFuncs": 19,
    "ArgsPhi": 2,
    "testUnary": 163
  },
  "baseline_oz_instcount": 380,
  "knowledge_base_entry": [
    "--gvn",
    "--mem2reg",
    "--instsimplify",
    "--mergefunc",
    "--sroa",
    "--sccp",
    "--jump-threading",
    "--globalopt",
    "--instcombine",
    "--memcpyopt",
    "--slp-vectorizer",
    "--newgvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--called-value-propagation",
          "--aggressive-instcombine",
          "--libcalls-shrinkwrap",
          "--correlated-propagation",
          "--sancov",
          "--memcpyopt",
          "--inject-tli-mappings",
          "--cross-dso-cfi",
          "--mergereturn",
          "--strip-debug-declare"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--called-value-propagation",
      "--aggressive-instcombine",
      "--libcalls-shrinkwrap",
      "--correlated-propagation",
      "--sancov",
      "--memcpyopt",
      "--inject-tli-mappings",
      "--cross-dso-cfi",
      "--mergereturn",
      "--strip-debug-declare"
    ],
    "performance_vs_Oz": "+0.5%"
  }
}
{
  "program_id": "linux-v0_9115.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 81,
    "onePredOneSuc": 53,
    "onePredTwoSuc": 27,
    "oneSuccessor": 68,
    "twoPred": 27,
    "twoPredOneSuc": 11,
    "twoEach": 16,
    "twoSuccessor": 47,
    "morePreds": 7,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 123,
    "BeginPhi": 1,
    "BranchCount": 115,
    "returnInt": 3,
    "CriticalCount": 23,
    "NumEdges": 162,
    "const32Bit": 181,
    "const64Bit": 16,
    "numConstZeroes": 67,
    "numConstOnes": 107,
    "UncondBranches": 68,
    "binaryConstArg": 28,
    "NumAShrInst": 0,
    "NumAddInst": 11,
    "NumAllocaInst": 83,
    "NumAndInst": 7,
    "BlockMid": 14,
    "BlockLow": 110,
    "NumBitCastInst": 5,
    "NumBrInst": 115,
    "NumCallInst": 23,
    "NumGetElementPtrInst": 40,
    "NumICmpInst": 56,
    "NumLShrInst": 0,
    "NumLoadInst": 226,
    "NumMulInst": 1,
    "NumOrInst": 0,
    "NumPHIInst": 1,
    "NumRetInst": 9,
    "NumSExtInst": 13,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 130,
    "NumSubInst": 3,
    "NumTruncInst": 0,
    "NumXorInst": 10,
    "NumZExtInst": 37,
    "TotalBlocks": 124,
    "TotalInsts": 773,
    "TotalMemInst": 502,
    "TotalFuncs": 16,
    "ArgsPhi": 2,
    "testUnary": 367
  },
  "baseline_oz_instcount": 778,
  "knowledge_base_entry": [
    "--newgvn",
    "--mldst-motion",
    "--early-cse-memssa",
    "--early-cse-memssa",
    "--inline",
    "--gvn-hoist",
    "--correlated-propagation",
    "--newgvn",
    "--gvn-hoist",
    "--correlated-propagation",
    "--gvn-hoist",
    "--aggressive-instcombine",
    "--globaldce",
    "--mergefunc",
    "--gvn-hoist",
    "--correlated-propagation",
    "--gvn-hoist",
    "--aggressive-instcombine",
    "--loweratomic",
    "--globalopt",
    "--newgvn",
    "--lower-expect"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--instsimplify",
          "--jump-threading",
          "--load-store-vectorizer",
          "--coro-early",
          "--add-discriminators",
          "--correlated-propagation",
          "--separate-const-offset-from-gep",
          "--barrier",
          "--constprop",
          "--strip-debug-declare",
          "--cross-dso-cfi",
          "--insert-gcov-profiling",
          "--forceattrs",
          "--sroa",
          "--bdce",
          "--loop-data-prefetch",
          "--strip-nondebug",
          "--lower-guard-intrinsic",
          "--rewrite-statepoints-for-gc",
          "--gvn-hoist",
          "--partially-inline-libcalls"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--instsimplify",
      "--jump-threading",
      "--load-store-vectorizer",
      "--coro-early",
      "--add-discriminators",
      "--correlated-propagation",
      "--separate-const-offset-from-gep",
      "--barrier",
      "--constprop",
      "--strip-debug-declare",
      "--cross-dso-cfi",
      "--insert-gcov-profiling",
      "--forceattrs",
      "--sroa",
      "--bdce",
      "--loop-data-prefetch",
      "--strip-nondebug",
      "--lower-guard-intrinsic",
      "--rewrite-statepoints-for-gc",
      "--gvn-hoist",
      "--partially-inline-libcalls"
    ],
    "performance_vs_Oz": "+0.6%"
  }
}
{
  "program_id": "github-v0_29603.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 13,
    "onePredOneSuc": 9,
    "onePredTwoSuc": 1,
    "oneSuccessor": 11,
    "twoPred": 5,
    "twoPredOneSuc": 1,
    "twoEach": 4,
    "twoSuccessor": 6,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 21,
    "BeginPhi": 0,
    "BranchCount": 17,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 23,
    "const32Bit": 31,
    "const64Bit": 18,
    "numConstZeroes": 23,
    "numConstOnes": 18,
    "UncondBranches": 11,
    "binaryConstArg": 9,
    "NumAShrInst": 0,
    "NumAddInst": 9,
    "NumAllocaInst": 12,
    "NumAndInst": 0,
    "BlockMid": 4,
    "BlockLow": 17,
    "NumBitCastInst": 0,
    "NumBrInst": 17,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 12,
    "NumICmpInst": 6,
    "NumLShrInst": 0,
    "NumLoadInst": 26,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 18,
    "NumSubInst": 1,
    "NumTruncInst": 6,
    "NumXorInst": 0,
    "NumZExtInst": 12,
    "TotalBlocks": 21,
    "TotalInsts": 133,
    "TotalMemInst": 75,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 59
  },
  "baseline_oz_instcount": 133,
  "knowledge_base_entry": [
    "--reassociate",
    "--aggressive-instcombine",
    "--loop-rotate",
    "--jump-threading",
    "--memcpyopt",
    "--slp-vectorizer",
    "--early-cse-memssa",
    "--loop-deletion",
    "--early-cse"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--infer-address-spaces",
          "--inline",
          "--aggressive-instcombine",
          "--partial-inliner",
          "--callsite-splitting",
          "--instsimplify",
          "--die",
          "--functionattrs",
          "--lowerinvoke",
          "--gvn",
          "--div-rem-pairs",
          "--constprop",
          "--loop-load-elim",
          "--correlated-propagation",
          "--post-inline-ee-instrument",
          "--flattencfg",
          "--pgo-memop-opt",
          "--loop-reroll",
          "--called-value-propagation",
          "--loop-versioning",
          "--mergefunc",
          "-loop-reduce",
          "--always-inline",
          "--lower-widenable-condition"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+8.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--infer-address-spaces",
      "--inline",
      "--aggressive-instcombine",
      "--partial-inliner",
      "--callsite-splitting",
      "--instsimplify",
      "--die",
      "--functionattrs",
      "--lowerinvoke",
      "--gvn",
      "--div-rem-pairs",
      "--constprop",
      "--loop-load-elim",
      "--correlated-propagation",
      "--post-inline-ee-instrument",
      "--flattencfg",
      "--pgo-memop-opt",
      "--loop-reroll",
      "--called-value-propagation",
      "--loop-versioning",
      "--mergefunc",
      "-loop-reduce",
      "--always-inline",
      "--lower-widenable-condition"
    ],
    "performance_vs_Oz": "+8.3%"
  }
}
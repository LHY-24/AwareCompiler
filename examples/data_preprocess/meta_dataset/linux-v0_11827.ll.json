{
  "program_id": "linux-v0_11827.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 10,
    "onePredOneSuc": 7,
    "onePredTwoSuc": 3,
    "oneSuccessor": 7,
    "twoPred": 1,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 5,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 14,
    "BeginPhi": 0,
    "BranchCount": 12,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 17,
    "const32Bit": 86,
    "const64Bit": 4,
    "numConstZeroes": 46,
    "numConstOnes": 21,
    "UncondBranches": 7,
    "binaryConstArg": 2,
    "NumAShrInst": 0,
    "NumAddInst": 3,
    "NumAllocaInst": 11,
    "NumAndInst": 0,
    "BlockMid": 6,
    "BlockLow": 8,
    "NumBitCastInst": 3,
    "NumBrInst": 12,
    "NumCallInst": 6,
    "NumGetElementPtrInst": 30,
    "NumICmpInst": 5,
    "NumLShrInst": 0,
    "NumLoadInst": 45,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 2,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 30,
    "NumSubInst": 1,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 9,
    "TotalBlocks": 14,
    "TotalInsts": 159,
    "TotalMemInst": 122,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 70
  },
  "baseline_oz_instcount": 159,
  "knowledge_base_entry": [
    "--licm",
    "--adce",
    "--elim-avail-extern",
    "--aggressive-instcombine",
    "--bdce",
    "--sroa",
    "--licm",
    "--mldst-motion",
    "--load-store-vectorizer",
    "--instcombine",
    "--die",
    "--gvn",
    "--indvars"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--jump-threading",
          "--separate-const-offset-from-gep",
          "--early-cse-memssa",
          "--alignment-from-assumptions",
          "--mergefunc",
          "--loop-distribute",
          "--called-value-propagation",
          "--instsimplify",
          "--mergereturn",
          "--loop-guard-widening",
          "--loop-unswitch",
          "--break-crit-edges",
          "--licm",
          "--redundant-dbg-inst-elim",
          "--consthoist",
          "--slp-vectorizer",
          "--nary-reassociate",
          "--sccp",
          "--early-cse",
          "--strip-dead-prototypes",
          "--aggressive-instcombine",
          "--mergeicmps",
          "--tailcallelim",
          "--load-store-vectorizer",
          "--div-rem-pairs",
          "--loop-deletion",
          "--reassociate",
          "--functionattrs",
          "--sancov",
          "--speculative-execution"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--jump-threading",
      "--separate-const-offset-from-gep",
      "--early-cse-memssa",
      "--alignment-from-assumptions",
      "--mergefunc",
      "--loop-distribute",
      "--called-value-propagation",
      "--instsimplify",
      "--mergereturn",
      "--loop-guard-widening",
      "--loop-unswitch",
      "--break-crit-edges",
      "--licm",
      "--redundant-dbg-inst-elim",
      "--consthoist",
      "--slp-vectorizer",
      "--nary-reassociate",
      "--sccp",
      "--early-cse",
      "--strip-dead-prototypes",
      "--aggressive-instcombine",
      "--mergeicmps",
      "--tailcallelim",
      "--load-store-vectorizer",
      "--div-rem-pairs",
      "--loop-deletion",
      "--reassociate",
      "--functionattrs",
      "--sancov",
      "--speculative-execution"
    ],
    "performance_vs_Oz": "+1.3%"
  }
}
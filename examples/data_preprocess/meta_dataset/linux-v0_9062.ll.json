{
  "program_id": "linux-v0_9062.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 36,
    "onePredOneSuc": 29,
    "onePredTwoSuc": 2,
    "oneSuccessor": 35,
    "twoPred": 3,
    "twoPredOneSuc": 0,
    "twoEach": 1,
    "twoSuccessor": 5,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 56,
    "BeginPhi": 0,
    "BranchCount": 40,
    "returnInt": 8,
    "CriticalCount": 0,
    "NumEdges": 45,
    "const32Bit": 135,
    "const64Bit": 4,
    "numConstZeroes": 57,
    "numConstOnes": 70,
    "UncondBranches": 35,
    "binaryConstArg": 2,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 58,
    "NumAndInst": 0,
    "BlockMid": 6,
    "BlockLow": 50,
    "NumBitCastInst": 16,
    "NumBrInst": 40,
    "NumCallInst": 26,
    "NumGetElementPtrInst": 26,
    "NumICmpInst": 9,
    "NumLShrInst": 0,
    "NumLoadInst": 64,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 16,
    "NumSExtInst": 1,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 59,
    "NumSubInst": 0,
    "NumTruncInst": 1,
    "NumXorInst": 2,
    "NumZExtInst": 8,
    "TotalBlocks": 56,
    "TotalInsts": 330,
    "TotalMemInst": 233,
    "TotalFuncs": 28,
    "ArgsPhi": 0,
    "testUnary": 152
  },
  "baseline_oz_instcount": 330,
  "knowledge_base_entry": [
    "--hotcoldsplit",
    "--mergefunc",
    "--loop-simplifycfg",
    "--loop-instsimplify",
    "--early-cse",
    "--simplifycfg",
    "--mem2reg",
    "--flattencfg",
    "--simplifycfg",
    "--dse",
    "--mldst-motion",
    "--newgvn",
    "--ipsccp",
    "--nary-reassociate",
    "--load-store-vectorizer",
    "--loop-instsimplify",
    "--early-cse-memssa",
    "--early-cse-memssa"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--mergefunc",
          "--gvn",
          "--globalopt",
          "--partial-inliner",
          "--break-crit-edges",
          "--newgvn",
          "--irce",
          "--insert-gcov-profiling",
          "--strip",
          "--coro-elide",
          "--loop-guard-widening",
          "--slp-vectorizer",
          "--lower-matrix-intrinsics",
          "--scalarizer",
          "--speculative-execution",
          "--instsimplify",
          "--loop-reroll",
          "--lowerinvoke",
          "--lowerswitch",
          "--sancov",
          "--nary-reassociate",
          "--inline",
          "--pgo-memop-opt",
          "--mldst-motion",
          "--loop-vectorize",
          "--float2int",
          "--simplifycfg",
          "--coro-split"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--mergefunc",
      "--gvn",
      "--globalopt",
      "--partial-inliner",
      "--break-crit-edges",
      "--newgvn",
      "--irce",
      "--insert-gcov-profiling",
      "--strip",
      "--coro-elide",
      "--loop-guard-widening",
      "--slp-vectorizer",
      "--lower-matrix-intrinsics",
      "--scalarizer",
      "--speculative-execution",
      "--instsimplify",
      "--loop-reroll",
      "--lowerinvoke",
      "--lowerswitch",
      "--sancov",
      "--nary-reassociate",
      "--inline",
      "--pgo-memop-opt",
      "--mldst-motion",
      "--loop-vectorize",
      "--float2int",
      "--simplifycfg",
      "--coro-split"
    ],
    "performance_vs_Oz": "+0.3%"
  }
}
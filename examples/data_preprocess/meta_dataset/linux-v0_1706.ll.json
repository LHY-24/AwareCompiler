{
  "program_id": "linux-v0_1706.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 27,
    "onePredOneSuc": 20,
    "onePredTwoSuc": 6,
    "oneSuccessor": 24,
    "twoPred": 10,
    "twoPredOneSuc": 3,
    "twoEach": 3,
    "twoSuccessor": 15,
    "morePreds": 2,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 55,
    "BeginPhi": 1,
    "BranchCount": 39,
    "returnInt": 26,
    "CriticalCount": 4,
    "NumEdges": 54,
    "const32Bit": 113,
    "const64Bit": 18,
    "numConstZeroes": 38,
    "numConstOnes": 48,
    "UncondBranches": 24,
    "binaryConstArg": 22,
    "NumAShrInst": 0,
    "NumAddInst": 11,
    "NumAllocaInst": 34,
    "NumAndInst": 6,
    "BlockMid": 4,
    "BlockLow": 52,
    "NumBitCastInst": 1,
    "NumBrInst": 39,
    "NumCallInst": 60,
    "NumGetElementPtrInst": 12,
    "NumICmpInst": 17,
    "NumLShrInst": 0,
    "NumLoadInst": 76,
    "NumMulInst": 0,
    "NumOrInst": 3,
    "NumPHIInst": 1,
    "NumRetInst": 17,
    "NumSExtInst": 1,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 61,
    "NumSubInst": 0,
    "NumTruncInst": 17,
    "NumXorInst": 1,
    "NumZExtInst": 10,
    "TotalBlocks": 56,
    "TotalInsts": 369,
    "TotalMemInst": 243,
    "TotalFuncs": 35,
    "ArgsPhi": 2,
    "testUnary": 140
  },
  "baseline_oz_instcount": 369,
  "knowledge_base_entry": [
    "--dse",
    "--sroa",
    "--aggressive-instcombine",
    "--gvn-hoist",
    "--gvn",
    "--loop-simplifycfg",
    "--load-store-vectorizer",
    "--lower-expect",
    "--mergefunc",
    "--newgvn",
    "--aggressive-instcombine",
    "--mem2reg",
    "--globalopt",
    "--inline",
    "--loop-simplifycfg",
    "--slp-vectorizer",
    "--lower-constant-intrinsics",
    "--jump-threading",
    "--reassociate"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--instsimplify",
          "--loop-load-elim",
          "--argpromotion",
          "--called-value-propagation",
          "--lower-widenable-condition",
          "--libcalls-shrinkwrap",
          "--ee-instrument",
          "--prune-eh",
          "--loop-sink",
          "--always-inline",
          "--lower-expect",
          "--gvn",
          "--callsite-splitting",
          "--tailcallelim",
          "--sroa",
          "--aggressive-instcombine",
          "--instnamer",
          "--deadargelim",
          "--inferattrs",
          "--loop-data-prefetch"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--instsimplify",
      "--loop-load-elim",
      "--argpromotion",
      "--called-value-propagation",
      "--lower-widenable-condition",
      "--libcalls-shrinkwrap",
      "--ee-instrument",
      "--prune-eh",
      "--loop-sink",
      "--always-inline",
      "--lower-expect",
      "--gvn",
      "--callsite-splitting",
      "--tailcallelim",
      "--sroa",
      "--aggressive-instcombine",
      "--instnamer",
      "--deadargelim",
      "--inferattrs",
      "--loop-data-prefetch"
    ],
    "performance_vs_Oz": "+2.7%"
  }
}
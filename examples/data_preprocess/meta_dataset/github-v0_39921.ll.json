{
  "program_id": "github-v0_39921.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 80,
    "onePredOneSuc": 47,
    "onePredTwoSuc": 29,
    "oneSuccessor": 62,
    "twoPred": 26,
    "twoPredOneSuc": 11,
    "twoEach": 9,
    "twoSuccessor": 47,
    "morePreds": 5,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 120,
    "BeginPhi": 0,
    "BranchCount": 109,
    "returnInt": 36,
    "CriticalCount": 20,
    "NumEdges": 159,
    "const32Bit": 186,
    "const64Bit": 52,
    "numConstZeroes": 110,
    "numConstOnes": 68,
    "UncondBranches": 62,
    "binaryConstArg": 8,
    "NumAShrInst": 0,
    "NumAddInst": 9,
    "NumAllocaInst": 49,
    "NumAndInst": 1,
    "BlockMid": 8,
    "BlockLow": 112,
    "NumBitCastInst": 9,
    "NumBrInst": 109,
    "NumCallInst": 57,
    "NumGetElementPtrInst": 67,
    "NumICmpInst": 47,
    "NumLShrInst": 0,
    "NumLoadInst": 163,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 9,
    "NumSExtInst": 17,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 89,
    "NumSubInst": 0,
    "NumTruncInst": 4,
    "NumXorInst": 0,
    "NumZExtInst": 2,
    "TotalBlocks": 120,
    "TotalInsts": 634,
    "TotalMemInst": 425,
    "TotalFuncs": 23,
    "ArgsPhi": 0,
    "testUnary": 244
  },
  "baseline_oz_instcount": 637,
  "knowledge_base_entry": [
    "--gvn",
    "--early-cse",
    "--load-store-vectorizer",
    "--sroa",
    "--lower-constant-intrinsics",
    "--sroa",
    "--load-store-vectorizer",
    "--gvn-hoist",
    "--ipsccp",
    "--instsimplify",
    "--correlated-propagation",
    "--mergefunc",
    "--instcombine",
    "--globalopt",
    "--jump-threading",
    "--correlated-propagation",
    "--mergefunc",
    "--instcombine",
    "--lower-expect",
    "--gvn",
    "--dce",
    "--gvn-hoist",
    "--ipsccp"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--strip-dead-prototypes",
          "--inject-tli-mappings",
          "--lcssa",
          "--loop-data-prefetch",
          "--coro-split",
          "--float2int",
          "--add-discriminators",
          "--constprop",
          "--sccp",
          "--callsite-splitting",
          "--flattencfg",
          "--consthoist",
          "--functionattrs",
          "--lowerinvoke",
          "--strip-debug-declare"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--strip-dead-prototypes",
      "--inject-tli-mappings",
      "--lcssa",
      "--loop-data-prefetch",
      "--coro-split",
      "--float2int",
      "--add-discriminators",
      "--constprop",
      "--sccp",
      "--callsite-splitting",
      "--flattencfg",
      "--consthoist",
      "--functionattrs",
      "--lowerinvoke",
      "--strip-debug-declare"
    ],
    "performance_vs_Oz": "+0.5%"
  }
}
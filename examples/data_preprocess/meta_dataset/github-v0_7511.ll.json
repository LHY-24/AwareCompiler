{
  "program_id": "github-v0_7511.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 18,
    "onePredOneSuc": 11,
    "onePredTwoSuc": 5,
    "oneSuccessor": 16,
    "twoPred": 8,
    "twoPredOneSuc": 5,
    "twoEach": 2,
    "twoSuccessor": 9,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 29,
    "BeginPhi": 0,
    "BranchCount": 25,
    "returnInt": 4,
    "CriticalCount": 1,
    "NumEdges": 34,
    "const32Bit": 45,
    "const64Bit": 71,
    "numConstZeroes": 74,
    "numConstOnes": 31,
    "UncondBranches": 16,
    "binaryConstArg": 16,
    "NumAShrInst": 5,
    "NumAddInst": 9,
    "NumAllocaInst": 13,
    "NumAndInst": 5,
    "BlockMid": 5,
    "BlockLow": 24,
    "NumBitCastInst": 12,
    "NumBrInst": 25,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 45,
    "NumICmpInst": 9,
    "NumLShrInst": 0,
    "NumLoadInst": 38,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 25,
    "NumSubInst": 0,
    "NumTruncInst": 6,
    "NumXorInst": 0,
    "NumZExtInst": 15,
    "TotalBlocks": 29,
    "TotalInsts": 221,
    "TotalMemInst": 128,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 87
  },
  "baseline_oz_instcount": 221,
  "knowledge_base_entry": [
    "--strip-nondebug",
    "--mergefunc",
    "--simplifycfg",
    "--adce",
    "--aggressive-instcombine",
    "--adce",
    "--mergefunc",
    "--slp-vectorizer",
    "--reassociate",
    "--lower-constant-intrinsics",
    "--loop-rotate",
    "--loop-simplifycfg",
    "--prune-eh",
    "--inline",
    "--instsimplify",
    "--gvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--correlated-propagation",
          "--flattencfg",
          "--mergeicmps",
          "--hotcoldsplit",
          "--deadargelim",
          "--ee-instrument",
          "--loop-data-prefetch",
          "--gvn-hoist",
          "--loop-sink",
          "--loop-rotate",
          "--separate-const-offset-from-gep",
          "--canonicalize-aliases",
          "--aggressive-instcombine",
          "--loop-unswitch",
          "--loop-versioning",
          "--reassociate",
          "--strip-debug-declare",
          "--sancov",
          "--newgvn",
          "--constprop",
          "--loop-idiom",
          "--strip",
          "--partial-inliner",
          "--simplifycfg",
          "--slp-vectorizer",
          "--lower-matrix-intrinsics",
          "--loop-simplifycfg",
          "--loop-interchange",
          "--loweratomic"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+5.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--correlated-propagation",
      "--flattencfg",
      "--mergeicmps",
      "--hotcoldsplit",
      "--deadargelim",
      "--ee-instrument",
      "--loop-data-prefetch",
      "--gvn-hoist",
      "--loop-sink",
      "--loop-rotate",
      "--separate-const-offset-from-gep",
      "--canonicalize-aliases",
      "--aggressive-instcombine",
      "--loop-unswitch",
      "--loop-versioning",
      "--reassociate",
      "--strip-debug-declare",
      "--sancov",
      "--newgvn",
      "--constprop",
      "--loop-idiom",
      "--strip",
      "--partial-inliner",
      "--simplifycfg",
      "--slp-vectorizer",
      "--lower-matrix-intrinsics",
      "--loop-simplifycfg",
      "--loop-interchange",
      "--loweratomic"
    ],
    "performance_vs_Oz": "+5.9%"
  }
}
{
  "program_id": "github-v0_20104.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 11,
    "onePredOneSuc": 11,
    "onePredTwoSuc": 0,
    "oneSuccessor": 11,
    "twoPred": 0,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 0,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 20,
    "BeginPhi": 0,
    "BranchCount": 11,
    "returnInt": 2,
    "CriticalCount": 1,
    "NumEdges": 23,
    "const32Bit": 40,
    "const64Bit": 2,
    "numConstZeroes": 18,
    "numConstOnes": 18,
    "UncondBranches": 11,
    "binaryConstArg": 0,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 16,
    "NumAndInst": 0,
    "BlockMid": 1,
    "BlockLow": 19,
    "NumBitCastInst": 15,
    "NumBrInst": 11,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 5,
    "NumICmpInst": 0,
    "NumLShrInst": 0,
    "NumLoadInst": 18,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 7,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 24,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 20,
    "TotalInsts": 105,
    "TotalMemInst": 70,
    "TotalFuncs": 14,
    "ArgsPhi": 0,
    "testUnary": 49
  },
  "baseline_oz_instcount": 105,
  "knowledge_base_entry": [
    "--loop-predication",
    "--gvn-hoist",
    "--aggressive-instcombine",
    "--globaldce",
    "--ipsccp",
    "--gvn",
    "--flattencfg",
    "--adce",
    "--loop-simplifycfg",
    "--die",
    "--slp-vectorizer",
    "--indvars",
    "--newgvn",
    "--sccp",
    "--lower-expect",
    "--early-cse-memssa",
    "--mergefunc",
    "--gvn-hoist",
    "--mem2reg",
    "--reassociate",
    "--instcombine"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-versioning",
          "--div-rem-pairs",
          "--forceattrs",
          "--float2int",
          "--infer-address-spaces",
          "--lower-widenable-condition",
          "--loop-fusion",
          "--slsr",
          "--loweratomic",
          "--bdce",
          "--libcalls-shrinkwrap",
          "--inline",
          "--inject-tli-mappings",
          "--always-inline",
          "--globalsplit",
          "--barrier",
          "--loop-reroll",
          "--dce",
          "--mergefunc",
          "--nary-reassociate",
          "--loop-unroll-and-jam"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.0%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-versioning",
      "--div-rem-pairs",
      "--forceattrs",
      "--float2int",
      "--infer-address-spaces",
      "--lower-widenable-condition",
      "--loop-fusion",
      "--slsr",
      "--loweratomic",
      "--bdce",
      "--libcalls-shrinkwrap",
      "--inline",
      "--inject-tli-mappings",
      "--always-inline",
      "--globalsplit",
      "--barrier",
      "--loop-reroll",
      "--dce",
      "--mergefunc",
      "--nary-reassociate",
      "--loop-unroll-and-jam"
    ],
    "performance_vs_Oz": "+1.0%"
  }
}
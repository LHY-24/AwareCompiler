{
  "program_id": "github-v0_42387.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 3,
    "onePred": 8,
    "onePredOneSuc": 4,
    "onePredTwoSuc": 4,
    "oneSuccessor": 6,
    "twoPred": 5,
    "twoPredOneSuc": 2,
    "twoEach": 3,
    "twoSuccessor": 9,
    "morePreds": 2,
    "BB03Phi": 3,
    "BBHiPhi": 0,
    "BBNoPhi": 13,
    "BeginPhi": 3,
    "BranchCount": 15,
    "returnInt": 2,
    "CriticalCount": 10,
    "NumEdges": 24,
    "const32Bit": 23,
    "const64Bit": 6,
    "numConstZeroes": 8,
    "numConstOnes": 8,
    "UncondBranches": 6,
    "binaryConstArg": 18,
    "NumAShrInst": 3,
    "NumAddInst": 12,
    "NumAllocaInst": 0,
    "NumAndInst": 1,
    "BlockMid": 2,
    "BlockLow": 14,
    "NumBitCastInst": 0,
    "NumBrInst": 15,
    "NumCallInst": 5,
    "NumGetElementPtrInst": 9,
    "NumICmpInst": 16,
    "NumLShrInst": 0,
    "NumLoadInst": 7,
    "NumMulInst": 2,
    "NumOrInst": 2,
    "NumPHIInst": 3,
    "NumRetInst": 1,
    "NumSExtInst": 5,
    "NumSelectInst": 7,
    "NumShlInst": 4,
    "NumStoreInst": 4,
    "NumSubInst": 6,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 16,
    "TotalInsts": 104,
    "TotalMemInst": 25,
    "TotalFuncs": 4,
    "ArgsPhi": 7,
    "testUnary": 14
  },
  "baseline_oz_instcount": 107,
  "knowledge_base_entry": [
    "--speculative-execution",
    "--newgvn",
    "--instsimplify",
    "--early-cse-memssa",
    "--load-store-vectorizer",
    "--inline",
    "--reassociate",
    "--dse",
    "--newgvn",
    "--loop-fusion",
    "--early-cse",
    "--gvn-hoist",
    "--loop-reroll",
    "--instcombine",
    "--aggressive-instcombine"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--sroa",
          "--rpo-functionattrs",
          "--partial-inliner",
          "--speculative-execution",
          "--slp-vectorizer",
          "--consthoist",
          "--mergereturn",
          "--aggressive-instcombine",
          "--globalopt",
          "--strip-dead-prototypes",
          "--loop-predication",
          "--loop-sink",
          "--add-discriminators",
          "--inject-tli-mappings",
          "--loop-unroll",
          "--constmerge",
          "--cross-dso-cfi",
          "--early-cse",
          "--lower-matrix-intrinsics",
          "--lower-guard-intrinsic",
          "--callsite-splitting",
          "--memcpyopt",
          "--loop-idiom",
          "--strip-nondebug",
          "--mem2reg",
          "--coro-cleanup",
          "--redundant-dbg-inst-elim",
          "--loop-versioning-licm",
          "--loop-simplify",
          "--strip-debug-declare"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+6.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--sroa",
      "--rpo-functionattrs",
      "--partial-inliner",
      "--speculative-execution",
      "--slp-vectorizer",
      "--consthoist",
      "--mergereturn",
      "--aggressive-instcombine",
      "--globalopt",
      "--strip-dead-prototypes",
      "--loop-predication",
      "--loop-sink",
      "--add-discriminators",
      "--inject-tli-mappings",
      "--loop-unroll",
      "--constmerge",
      "--cross-dso-cfi",
      "--early-cse",
      "--lower-matrix-intrinsics",
      "--lower-guard-intrinsic",
      "--callsite-splitting",
      "--memcpyopt",
      "--loop-idiom",
      "--strip-nondebug",
      "--mem2reg",
      "--coro-cleanup",
      "--redundant-dbg-inst-elim",
      "--loop-versioning-licm",
      "--loop-simplify",
      "--strip-debug-declare"
    ],
    "performance_vs_Oz": "+6.5%"
  }
}
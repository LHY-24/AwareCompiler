{
  "program_id": "github-v0_27907.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 9,
    "onePredOneSuc": 6,
    "onePredTwoSuc": 0,
    "oneSuccessor": 9,
    "twoPred": 3,
    "twoPredOneSuc": 0,
    "twoEach": 3,
    "twoSuccessor": 3,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 24,
    "BeginPhi": 0,
    "BranchCount": 12,
    "returnInt": 10,
    "CriticalCount": 0,
    "NumEdges": 15,
    "const32Bit": 39,
    "const64Bit": 40,
    "numConstZeroes": 27,
    "numConstOnes": 36,
    "UncondBranches": 9,
    "binaryConstArg": 11,
    "NumAShrInst": 0,
    "NumAddInst": 8,
    "NumAllocaInst": 32,
    "NumAndInst": 0,
    "BlockMid": 3,
    "BlockLow": 21,
    "NumBitCastInst": 1,
    "NumBrInst": 12,
    "NumCallInst": 14,
    "NumGetElementPtrInst": 18,
    "NumICmpInst": 3,
    "NumLShrInst": 0,
    "NumLoadInst": 54,
    "NumMulInst": 2,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 12,
    "NumSExtInst": 8,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 37,
    "NumSubInst": 1,
    "NumTruncInst": 16,
    "NumXorInst": 0,
    "NumZExtInst": 7,
    "TotalBlocks": 24,
    "TotalInsts": 242,
    "TotalMemInst": 155,
    "TotalFuncs": 13,
    "ArgsPhi": 0,
    "testUnary": 127
  },
  "baseline_oz_instcount": 242,
  "knowledge_base_entry": [
    "--memcpyopt",
    "--load-store-vectorizer",
    "--sroa",
    "--inline",
    "--reassociate",
    "--aggressive-instcombine",
    "--loweratomic",
    "--aggressive-instcombine",
    "--elim-avail-extern",
    "--simplifycfg",
    "--slsr",
    "--slp-vectorizer"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--adce",
          "--always-inline",
          "--lower-expect",
          "--bdce",
          "--float2int",
          "--rewrite-statepoints-for-gc",
          "--lowerswitch",
          "--loop-load-elim",
          "--flattencfg",
          "--loop-simplifycfg",
          "--slsr",
          "--functionattrs",
          "--coro-early",
          "--cross-dso-cfi",
          "--early-cse-memssa",
          "--inject-tli-mappings",
          "--strip",
          "--lowerinvoke",
          "--dse",
          "--callsite-splitting",
          "--loop-unroll-and-jam",
          "--loweratomic",
          "--reassociate",
          "--nary-reassociate",
          "--loop-unswitch",
          "--aggressive-instcombine"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--adce",
      "--always-inline",
      "--lower-expect",
      "--bdce",
      "--float2int",
      "--rewrite-statepoints-for-gc",
      "--lowerswitch",
      "--loop-load-elim",
      "--flattencfg",
      "--loop-simplifycfg",
      "--slsr",
      "--functionattrs",
      "--coro-early",
      "--cross-dso-cfi",
      "--early-cse-memssa",
      "--inject-tli-mappings",
      "--strip",
      "--lowerinvoke",
      "--dse",
      "--callsite-splitting",
      "--loop-unroll-and-jam",
      "--loweratomic",
      "--reassociate",
      "--nary-reassociate",
      "--loop-unswitch",
      "--aggressive-instcombine"
    ],
    "performance_vs_Oz": "+2.5%"
  }
}
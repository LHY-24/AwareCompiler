{
  "program_id": "github-v0_4626.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 22,
    "onePredOneSuc": 11,
    "onePredTwoSuc": 10,
    "oneSuccessor": 16,
    "twoPred": 5,
    "twoPredOneSuc": 3,
    "twoEach": 1,
    "twoSuccessor": 13,
    "morePreds": 3,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 33,
    "BeginPhi": 0,
    "BranchCount": 29,
    "returnInt": 2,
    "CriticalCount": 9,
    "NumEdges": 46,
    "const32Bit": 55,
    "const64Bit": 5,
    "numConstZeroes": 18,
    "numConstOnes": 24,
    "UncondBranches": 16,
    "binaryConstArg": 12,
    "NumAShrInst": 0,
    "NumAddInst": 3,
    "NumAllocaInst": 12,
    "NumAndInst": 0,
    "BlockMid": 2,
    "BlockLow": 31,
    "NumBitCastInst": 0,
    "NumBrInst": 29,
    "NumCallInst": 12,
    "NumGetElementPtrInst": 3,
    "NumICmpInst": 12,
    "NumLShrInst": 4,
    "NumLoadInst": 57,
    "NumMulInst": 0,
    "NumOrInst": 3,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 3,
    "NumStoreInst": 45,
    "NumSubInst": 0,
    "NumTruncInst": 9,
    "NumXorInst": 2,
    "NumZExtInst": 14,
    "TotalBlocks": 33,
    "TotalInsts": 215,
    "TotalMemInst": 129,
    "TotalFuncs": 4,
    "ArgsPhi": 0,
    "testUnary": 95
  },
  "baseline_oz_instcount": 216,
  "knowledge_base_entry": [
    "--deadargelim",
    "--mergefunc",
    "--die",
    "--jump-threading",
    "--lower-expect",
    "--globalopt",
    "--aggressive-instcombine",
    "--gvn-hoist",
    "--newgvn",
    "--loop-fusion"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--nary-reassociate",
          "--loop-load-elim",
          "--mem2reg",
          "--ee-instrument",
          "--consthoist",
          "--speculative-execution",
          "--loop-vectorize",
          "--instsimplify",
          "--globaldce",
          "--float2int",
          "--dce",
          "--mergeicmps",
          "--irce",
          "--loop-fusion",
          "--called-value-propagation",
          "--slsr",
          "--aggressive-instcombine",
          "--mergefunc",
          "--strip-nondebug",
          "--loop-idiom",
          "--sccp",
          "--alignment-from-assumptions",
          "-loop-reduce",
          "--inject-tli-mappings",
          "--strip-debug-declare",
          "--lower-guard-intrinsic",
          "--argpromotion",
          "--simplifycfg",
          "--partial-inliner",
          "--strip"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--nary-reassociate",
      "--loop-load-elim",
      "--mem2reg",
      "--ee-instrument",
      "--consthoist",
      "--speculative-execution",
      "--loop-vectorize",
      "--instsimplify",
      "--globaldce",
      "--float2int",
      "--dce",
      "--mergeicmps",
      "--irce",
      "--loop-fusion",
      "--called-value-propagation",
      "--slsr",
      "--aggressive-instcombine",
      "--mergefunc",
      "--strip-nondebug",
      "--loop-idiom",
      "--sccp",
      "--alignment-from-assumptions",
      "-loop-reduce",
      "--inject-tli-mappings",
      "--strip-debug-declare",
      "--lower-guard-intrinsic",
      "--argpromotion",
      "--simplifycfg",
      "--partial-inliner",
      "--strip"
    ],
    "performance_vs_Oz": "+2.3%"
  }
}
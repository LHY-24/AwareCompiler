{
  "program_id": "linux-v0_7100.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 54,
    "onePredOneSuc": 41,
    "onePredTwoSuc": 11,
    "oneSuccessor": 52,
    "twoPred": 17,
    "twoPredOneSuc": 7,
    "twoEach": 6,
    "twoSuccessor": 21,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 93,
    "BeginPhi": 0,
    "BranchCount": 73,
    "returnInt": 12,
    "CriticalCount": 12,
    "NumEdges": 94,
    "const32Bit": 224,
    "const64Bit": 33,
    "numConstZeroes": 85,
    "numConstOnes": 133,
    "UncondBranches": 52,
    "binaryConstArg": 45,
    "NumAShrInst": 0,
    "NumAddInst": 6,
    "NumAllocaInst": 96,
    "NumAndInst": 8,
    "BlockMid": 15,
    "BlockLow": 78,
    "NumBitCastInst": 13,
    "NumBrInst": 73,
    "NumCallInst": 40,
    "NumGetElementPtrInst": 54,
    "NumICmpInst": 30,
    "NumLShrInst": 4,
    "NumLoadInst": 194,
    "NumMulInst": 0,
    "NumOrInst": 4,
    "NumPHIInst": 0,
    "NumRetInst": 20,
    "NumSExtInst": 14,
    "NumSelectInst": 0,
    "NumShlInst": 6,
    "NumStoreInst": 118,
    "NumSubInst": 2,
    "NumTruncInst": 6,
    "NumXorInst": 24,
    "NumZExtInst": 27,
    "TotalBlocks": 93,
    "TotalInsts": 753,
    "TotalMemInst": 502,
    "TotalFuncs": 29,
    "ArgsPhi": 0,
    "testUnary": 358
  },
  "baseline_oz_instcount": 754,
  "knowledge_base_entry": [
    "--gvn",
    "--sroa",
    "--early-cse",
    "--reassociate",
    "--globalopt",
    "--mergefunc",
    "--aggressive-instcombine",
    "--elim-avail-extern",
    "--lower-constant-intrinsics",
    "--mem2reg",
    "--dse",
    "--elim-avail-extern",
    "--newgvn",
    "--flattencfg",
    "--instcombine",
    "--mldst-motion",
    "--lower-constant-intrinsics",
    "--aggressive-instcombine",
    "--lower-expect",
    "--simplifycfg",
    "--lower-constant-intrinsics",
    "--mergefunc",
    "--globaldce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--aggressive-instcombine",
          "--lower-guard-intrinsic",
          "--div-rem-pairs",
          "--adce",
          "--slsr",
          "--instnamer",
          "--alignment-from-assumptions",
          "--post-inline-ee-instrument",
          "--mergefunc",
          "--die"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--aggressive-instcombine",
      "--lower-guard-intrinsic",
      "--div-rem-pairs",
      "--adce",
      "--slsr",
      "--instnamer",
      "--alignment-from-assumptions",
      "--post-inline-ee-instrument",
      "--mergefunc",
      "--die"
    ],
    "performance_vs_Oz": "+0.5%"
  }
}
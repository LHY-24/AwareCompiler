{
  "program_id": "linux-v0_13104.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 136,
    "onePredOneSuc": 101,
    "onePredTwoSuc": 29,
    "oneSuccessor": 136,
    "twoPred": 39,
    "twoPredOneSuc": 26,
    "twoEach": 6,
    "twoSuccessor": 39,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 190,
    "BeginPhi": 0,
    "BranchCount": 175,
    "returnInt": 8,
    "CriticalCount": 28,
    "NumEdges": 214,
    "const32Bit": 236,
    "const64Bit": 49,
    "numConstZeroes": 85,
    "numConstOnes": 122,
    "UncondBranches": 136,
    "binaryConstArg": 83,
    "NumAShrInst": 0,
    "NumAddInst": 11,
    "NumAllocaInst": 71,
    "NumAndInst": 7,
    "BlockMid": 18,
    "BlockLow": 172,
    "NumBitCastInst": 2,
    "NumBrInst": 175,
    "NumCallInst": 47,
    "NumGetElementPtrInst": 42,
    "NumICmpInst": 41,
    "NumLShrInst": 1,
    "NumLoadInst": 200,
    "NumMulInst": 15,
    "NumOrInst": 3,
    "NumPHIInst": 0,
    "NumRetInst": 15,
    "NumSExtInst": 9,
    "NumSelectInst": 0,
    "NumShlInst": 9,
    "NumStoreInst": 96,
    "NumSubInst": 2,
    "NumTruncInst": 20,
    "NumXorInst": 21,
    "NumZExtInst": 69,
    "TotalBlocks": 190,
    "TotalInsts": 887,
    "TotalMemInst": 456,
    "TotalFuncs": 16,
    "ArgsPhi": 0,
    "testUnary": 371
  },
  "baseline_oz_instcount": 861,
  "knowledge_base_entry": [
    "--partially-inline-libcalls",
    "--gvn",
    "--sccp",
    "--dce",
    "--ipsccp",
    "--aggressive-instcombine",
    "--globalopt",
    "--loweratomic",
    "--instcombine",
    "--dse",
    "--load-store-vectorizer",
    "--jump-threading",
    "--slp-vectorizer",
    "--mem2reg",
    "--instsimplify"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--constmerge",
          "--correlated-propagation",
          "--lower-matrix-intrinsics",
          "--mem2reg",
          "--called-value-propagation",
          "--callsite-splitting",
          "--ipsccp",
          "--constprop",
          "--instcombine",
          "--lower-widenable-condition",
          "--nary-reassociate",
          "--aggressive-instcombine",
          "--redundant-dbg-inst-elim",
          "--guard-widening",
          "--simplifycfg",
          "--loop-reroll",
          "--loop-sink",
          "--loop-unswitch",
          "--always-inline",
          "--mergereturn",
          "--functionattrs",
          "--strip",
          "--loop-unroll",
          "--forceattrs"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--constmerge",
      "--correlated-propagation",
      "--lower-matrix-intrinsics",
      "--mem2reg",
      "--called-value-propagation",
      "--callsite-splitting",
      "--ipsccp",
      "--constprop",
      "--instcombine",
      "--lower-widenable-condition",
      "--nary-reassociate",
      "--aggressive-instcombine",
      "--redundant-dbg-inst-elim",
      "--guard-widening",
      "--simplifycfg",
      "--loop-reroll",
      "--loop-sink",
      "--loop-unswitch",
      "--always-inline",
      "--mergereturn",
      "--functionattrs",
      "--strip",
      "--loop-unroll",
      "--forceattrs"
    ],
    "performance_vs_Oz": "+1.2%"
  }
}
{
  "program_id": "opencv-v0_66.ll",
  "autophase_features": {
    "BBNumArgsHi": 1,
    "BBNumArgsLo": 1,
    "onePred": 10,
    "onePredOneSuc": 4,
    "onePredTwoSuc": 4,
    "oneSuccessor": 5,
    "twoPred": 3,
    "twoPredOneSuc": 0,
    "twoEach": 2,
    "twoSuccessor": 7,
    "morePreds": 1,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 14,
    "BeginPhi": 2,
    "BranchCount": 7,
    "returnInt": 0,
    "CriticalCount": 4,
    "NumEdges": 19,
    "const32Bit": 17,
    "const64Bit": 5,
    "numConstZeroes": 14,
    "numConstOnes": 5,
    "UncondBranches": 5,
    "binaryConstArg": 2,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 3,
    "NumAndInst": 2,
    "BlockMid": 0,
    "BlockLow": 16,
    "NumBitCastInst": 1,
    "NumBrInst": 7,
    "NumCallInst": 10,
    "NumGetElementPtrInst": 2,
    "NumICmpInst": 2,
    "NumLShrInst": 0,
    "NumLoadInst": 4,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 4,
    "NumRetInst": 1,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 0,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 16,
    "TotalInsts": 57,
    "TotalMemInst": 24,
    "TotalFuncs": 14,
    "ArgsPhi": 10,
    "testUnary": 15
  },
  "baseline_oz_instcount": 57,
  "knowledge_base_entry": [
    "--lowerinvoke",
    "--simplifycfg",
    "--slp-vectorizer",
    "--early-cse-memssa",
    "--early-cse",
    "--simplifycfg",
    "--loop-reroll",
    "--gvn-hoist",
    "--slp-vectorizer",
    "--sroa",
    "--indvars",
    "--load-store-vectorizer",
    "--lower-expect",
    "--gvn",
    "--adce",
    "--aggressive-instcombine",
    "--loweratomic",
    "--globalopt",
    "--instcombine",
    "--lower-expect",
    "--gvn",
    "--flattencfg",
    "--mergefunc",
    "--jump-threading",
    "--nary-reassociate",
    "--ipsccp"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-rotate",
          "--coro-cleanup",
          "--speculative-execution",
          "--correlated-propagation",
          "--loop-versioning-licm",
          "--lowerinvoke",
          "--loop-reroll",
          "--dse",
          "--globalopt",
          "--irce",
          "--mem2reg",
          "--memcpyopt",
          "--lower-matrix-intrinsics",
          "--loop-instsimplify",
          "--instnamer",
          "--rewrite-statepoints-for-gc"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+56.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-rotate",
      "--coro-cleanup",
      "--speculative-execution",
      "--correlated-propagation",
      "--loop-versioning-licm",
      "--lowerinvoke",
      "--loop-reroll",
      "--dse",
      "--globalopt",
      "--irce",
      "--mem2reg",
      "--memcpyopt",
      "--lower-matrix-intrinsics",
      "--loop-instsimplify",
      "--instnamer",
      "--rewrite-statepoints-for-gc"
    ],
    "performance_vs_Oz": "+56.1%"
  }
}
{
  "program_id": "github-v0_42622.ll",
  "autophase_features": {
    "BBNumArgsHi": 4,
    "BBNumArgsLo": 2,
    "onePred": 16,
    "onePredOneSuc": 7,
    "onePredTwoSuc": 9,
    "oneSuccessor": 9,
    "twoPred": 2,
    "twoPredOneSuc": 0,
    "twoEach": 2,
    "twoSuccessor": 16,
    "morePreds": 7,
    "BB03Phi": 6,
    "BBHiPhi": 0,
    "BBNoPhi": 22,
    "BeginPhi": 6,
    "BranchCount": 25,
    "returnInt": 7,
    "CriticalCount": 16,
    "NumEdges": 41,
    "const32Bit": 40,
    "const64Bit": 9,
    "numConstZeroes": 16,
    "numConstOnes": 14,
    "UncondBranches": 9,
    "binaryConstArg": 13,
    "NumAShrInst": 0,
    "NumAddInst": 14,
    "NumAllocaInst": 0,
    "NumAndInst": 0,
    "BlockMid": 5,
    "BlockLow": 23,
    "NumBitCastInst": 0,
    "NumBrInst": 25,
    "NumCallInst": 16,
    "NumGetElementPtrInst": 25,
    "NumICmpInst": 12,
    "NumLShrInst": 0,
    "NumLoadInst": 19,
    "NumMulInst": 16,
    "NumOrInst": 0,
    "NumPHIInst": 12,
    "NumRetInst": 3,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 9,
    "NumSubInst": 6,
    "NumTruncInst": 4,
    "NumXorInst": 0,
    "NumZExtInst": 17,
    "TotalBlocks": 28,
    "TotalInsts": 216,
    "TotalMemInst": 69,
    "TotalFuncs": 8,
    "ArgsPhi": 30,
    "testUnary": 40
  },
  "baseline_oz_instcount": 213,
  "knowledge_base_entry": [
    "--scalarizer",
    "--early-cse",
    "--aggressive-instcombine",
    "--lower-constant-intrinsics",
    "--nary-reassociate",
    "-loop-reduce",
    "--load-store-vectorizer",
    "--adce",
    "--die",
    "--elim-avail-extern",
    "--aggressive-instcombine",
    "--early-cse",
    "--loop-rotate",
    "--loop-simplifycfg",
    "--jump-threading",
    "--gvn",
    "-loop-reduce",
    "--gvn-hoist",
    "--sccp",
    "--bdce",
    "--lower-constant-intrinsics",
    "--ipsccp",
    "--gvn",
    "--simplifycfg",
    "--ipsccp",
    "--aggressive-instcombine",
    "--prune-eh",
    "--newgvn",
    "--dse"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--consthoist",
          "--loop-guard-widening",
          "--rpo-functionattrs",
          "--scalarizer",
          "--insert-gcov-profiling",
          "--name-anon-globals",
          "--loop-rotate",
          "--lower-constant-intrinsics",
          "--instsimplify",
          "--lower-matrix-intrinsics",
          "--deadargelim"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+4.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--consthoist",
      "--loop-guard-widening",
      "--rpo-functionattrs",
      "--scalarizer",
      "--insert-gcov-profiling",
      "--name-anon-globals",
      "--loop-rotate",
      "--lower-constant-intrinsics",
      "--instsimplify",
      "--lower-matrix-intrinsics",
      "--deadargelim"
    ],
    "performance_vs_Oz": "+4.2%"
  }
}
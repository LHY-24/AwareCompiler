{
  "program_id": "linux-v0_676.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 3,
    "onePred": 85,
    "onePredOneSuc": 66,
    "onePredTwoSuc": 18,
    "oneSuccessor": 78,
    "twoPred": 21,
    "twoPredOneSuc": 9,
    "twoEach": 9,
    "twoSuccessor": 32,
    "morePreds": 8,
    "BB03Phi": 3,
    "BBHiPhi": 0,
    "BBNoPhi": 122,
    "BeginPhi": 3,
    "BranchCount": 110,
    "returnInt": 20,
    "CriticalCount": 20,
    "NumEdges": 162,
    "const32Bit": 227,
    "const64Bit": 26,
    "numConstZeroes": 91,
    "numConstOnes": 134,
    "UncondBranches": 78,
    "binaryConstArg": 22,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 100,
    "NumAndInst": 1,
    "BlockMid": 13,
    "BlockLow": 112,
    "NumBitCastInst": 47,
    "NumBrInst": 110,
    "NumCallInst": 65,
    "NumGetElementPtrInst": 34,
    "NumICmpInst": 35,
    "NumLShrInst": 0,
    "NumLoadInst": 196,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 3,
    "NumRetInst": 11,
    "NumSExtInst": 13,
    "NumSelectInst": 1,
    "NumShlInst": 0,
    "NumStoreInst": 131,
    "NumSubInst": 1,
    "NumTruncInst": 12,
    "NumXorInst": 19,
    "NumZExtInst": 18,
    "TotalBlocks": 125,
    "TotalInsts": 804,
    "TotalMemInst": 526,
    "TotalFuncs": 32,
    "ArgsPhi": 6,
    "testUnary": 388
  },
  "baseline_oz_instcount": 805,
  "knowledge_base_entry": [
    "--mergefunc",
    "--jump-threading",
    "--adce",
    "--gvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-guard-widening",
          "--mergefunc",
          "--tailcallelim",
          "--dse",
          "--bdce",
          "--inferattrs",
          "--slsr",
          "--loweratomic",
          "--loop-unroll-and-jam",
          "--loop-idiom",
          "--loop-predication",
          "--inject-tli-mappings"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-guard-widening",
      "--mergefunc",
      "--tailcallelim",
      "--dse",
      "--bdce",
      "--inferattrs",
      "--slsr",
      "--loweratomic",
      "--loop-unroll-and-jam",
      "--loop-idiom",
      "--loop-predication",
      "--inject-tli-mappings"
    ],
    "performance_vs_Oz": "+0.6%"
  }
}
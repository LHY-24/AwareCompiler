{
  "program_id": "github-v0_34592.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 11,
    "onePredOneSuc": 9,
    "onePredTwoSuc": 0,
    "oneSuccessor": 9,
    "twoPred": 3,
    "twoPredOneSuc": 0,
    "twoEach": 3,
    "twoSuccessor": 4,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 15,
    "BeginPhi": 0,
    "BranchCount": 13,
    "returnInt": 49,
    "CriticalCount": 0,
    "NumEdges": 17,
    "const32Bit": 66,
    "const64Bit": 50,
    "numConstZeroes": 6,
    "numConstOnes": 77,
    "UncondBranches": 9,
    "binaryConstArg": 40,
    "NumAShrInst": 7,
    "NumAddInst": 5,
    "NumAllocaInst": 24,
    "NumAndInst": 14,
    "BlockMid": 4,
    "BlockLow": 11,
    "NumBitCastInst": 8,
    "NumBrInst": 13,
    "NumCallInst": 64,
    "NumGetElementPtrInst": 4,
    "NumICmpInst": 4,
    "NumLShrInst": 1,
    "NumLoadInst": 140,
    "NumMulInst": 17,
    "NumOrInst": 2,
    "NumPHIInst": 0,
    "NumRetInst": 1,
    "NumSExtInst": 19,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 52,
    "NumSubInst": 5,
    "NumTruncInst": 19,
    "NumXorInst": 0,
    "NumZExtInst": 4,
    "TotalBlocks": 15,
    "TotalInsts": 419,
    "TotalMemInst": 284,
    "TotalFuncs": 14,
    "ArgsPhi": 0,
    "testUnary": 222
  },
  "baseline_oz_instcount": 419,
  "knowledge_base_entry": [
    "--instsimplify",
    "--newgvn",
    "--aggressive-instcombine",
    "--mem2reg",
    "--loop-instsimplify",
    "--load-store-vectorizer",
    "--dse",
    "--lower-constant-intrinsics",
    "--jump-threading",
    "--die",
    "--early-cse",
    "--prune-eh"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--post-inline-ee-instrument",
          "--lower-widenable-condition",
          "--coro-elide",
          "--loop-interchange",
          "--name-anon-globals",
          "--coro-split",
          "--add-discriminators",
          "--nary-reassociate",
          "--redundant-dbg-inst-elim",
          "--ipsccp",
          "--lower-guard-intrinsic",
          "--loop-unroll-and-jam",
          "--mldst-motion",
          "--early-cse-memssa",
          "--attributor",
          "--bdce",
          "--float2int",
          "--aggressive-instcombine",
          "--slp-vectorizer",
          "--inline",
          "--die",
          "--functionattrs",
          "--mergeicmps",
          "-loop-reduce",
          "--canonicalize-aliases",
          "--lower-matrix-intrinsics",
          "--lowerinvoke"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--post-inline-ee-instrument",
      "--lower-widenable-condition",
      "--coro-elide",
      "--loop-interchange",
      "--name-anon-globals",
      "--coro-split",
      "--add-discriminators",
      "--nary-reassociate",
      "--redundant-dbg-inst-elim",
      "--ipsccp",
      "--lower-guard-intrinsic",
      "--loop-unroll-and-jam",
      "--mldst-motion",
      "--early-cse-memssa",
      "--attributor",
      "--bdce",
      "--float2int",
      "--aggressive-instcombine",
      "--slp-vectorizer",
      "--inline",
      "--die",
      "--functionattrs",
      "--mergeicmps",
      "-loop-reduce",
      "--canonicalize-aliases",
      "--lower-matrix-intrinsics",
      "--lowerinvoke"
    ],
    "performance_vs_Oz": "+1.2%"
  }
}
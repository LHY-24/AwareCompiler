{
  "program_id": "blas-v0_87.ll",
  "autophase_features": {
    "BBNumArgsHi": 1,
    "BBNumArgsLo": 0,
    "onePred": 3,
    "onePredOneSuc": 2,
    "onePredTwoSuc": 1,
    "oneSuccessor": 2,
    "twoPred": 0,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 2,
    "morePreds": 1,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 4,
    "BeginPhi": 1,
    "BranchCount": 4,
    "returnInt": 0,
    "CriticalCount": 1,
    "NumEdges": 6,
    "const32Bit": 5,
    "const64Bit": 0,
    "numConstZeroes": 3,
    "numConstOnes": 2,
    "UncondBranches": 2,
    "binaryConstArg": 1,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 0,
    "NumAndInst": 0,
    "BlockMid": 1,
    "BlockLow": 4,
    "NumBitCastInst": 6,
    "NumBrInst": 4,
    "NumCallInst": 3,
    "NumGetElementPtrInst": 0,
    "NumICmpInst": 0,
    "NumLShrInst": 0,
    "NumLoadInst": 2,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 2,
    "NumRetInst": 1,
    "NumSExtInst": 0,
    "NumSelectInst": 3,
    "NumShlInst": 0,
    "NumStoreInst": 6,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 5,
    "TotalInsts": 48,
    "TotalMemInst": 11,
    "TotalFuncs": 3,
    "ArgsPhi": 6,
    "testUnary": 8
  },
  "baseline_oz_instcount": 48,
  "knowledge_base_entry": [
    "--scalarizer",
    "--early-cse",
    "--elim-avail-extern",
    "--prune-eh",
    "--elim-avail-extern",
    "--loop-instsimplify",
    "--lower-expect",
    "--gvn-hoist",
    "--dce",
    "--sroa"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--coro-elide",
          "--flattencfg",
          "--loop-versioning",
          "--lower-guard-intrinsic",
          "--loop-vectorize",
          "--loop-rotate",
          "--loop-interchange",
          "--aggressive-instcombine",
          "--loop-load-elim",
          "--strip-debug-declare",
          "--alignment-from-assumptions",
          "--instsimplify",
          "--pgo-memop-opt",
          "--scalarizer",
          "--loop-idiom",
          "--loop-reroll",
          "--dse",
          "--forceattrs",
          "--sccp",
          "--rpo-functionattrs",
          "--inject-tli-mappings",
          "--strip-nondebug",
          "--slsr",
          "--instcombine",
          "--newgvn",
          "--canonicalize-aliases"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+8.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--coro-elide",
      "--flattencfg",
      "--loop-versioning",
      "--lower-guard-intrinsic",
      "--loop-vectorize",
      "--loop-rotate",
      "--loop-interchange",
      "--aggressive-instcombine",
      "--loop-load-elim",
      "--strip-debug-declare",
      "--alignment-from-assumptions",
      "--instsimplify",
      "--pgo-memop-opt",
      "--scalarizer",
      "--loop-idiom",
      "--loop-reroll",
      "--dse",
      "--forceattrs",
      "--sccp",
      "--rpo-functionattrs",
      "--inject-tli-mappings",
      "--strip-nondebug",
      "--slsr",
      "--instcombine",
      "--newgvn",
      "--canonicalize-aliases"
    ],
    "performance_vs_Oz": "+8.3%"
  }
}
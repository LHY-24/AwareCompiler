{
  "program_id": "github-v0_12176.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 56,
    "onePredOneSuc": 44,
    "onePredTwoSuc": 10,
    "oneSuccessor": 51,
    "twoPred": 23,
    "twoPredOneSuc": 6,
    "twoEach": 7,
    "twoSuccessor": 32,
    "morePreds": 4,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 99,
    "BeginPhi": 0,
    "BranchCount": 83,
    "returnInt": 59,
    "CriticalCount": 11,
    "NumEdges": 115,
    "const32Bit": 111,
    "const64Bit": 30,
    "numConstZeroes": 84,
    "numConstOnes": 55,
    "UncondBranches": 51,
    "binaryConstArg": 4,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 48,
    "NumAndInst": 0,
    "BlockMid": 2,
    "BlockLow": 97,
    "NumBitCastInst": 0,
    "NumBrInst": 83,
    "NumCallInst": 103,
    "NumGetElementPtrInst": 41,
    "NumICmpInst": 32,
    "NumLShrInst": 0,
    "NumLoadInst": 137,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 15,
    "NumSExtInst": 11,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 55,
    "NumSubInst": 2,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 99,
    "TotalInsts": 530,
    "TotalMemInst": 384,
    "TotalFuncs": 43,
    "ArgsPhi": 0,
    "testUnary": 196
  },
  "baseline_oz_instcount": 531,
  "knowledge_base_entry": [
    "--newgvn",
    "--simplifycfg",
    "--ipsccp",
    "--loweratomic",
    "--early-cse",
    "--bdce",
    "--early-cse-memssa",
    "--instcombine",
    "--dce",
    "--reassociate",
    "--jump-threading"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loweratomic",
          "--lower-widenable-condition",
          "--guard-widening",
          "--strip",
          "--inject-tli-mappings",
          "--mergeicmps",
          "--argpromotion",
          "--cross-dso-cfi",
          "--rpo-functionattrs",
          "--sink",
          "--float2int",
          "--dse",
          "--instnamer",
          "--coro-elide",
          "--attributor",
          "--pgo-memop-opt",
          "--coro-early",
          "--elim-avail-extern",
          "--loop-distribute",
          "--load-store-vectorizer",
          "--speculative-execution",
          "--bdce",
          "--lowerinvoke",
          "--instsimplify",
          "--mergereturn",
          "--loop-vectorize",
          "--infer-address-spaces",
          "--redundant-dbg-inst-elim",
          "--lower-guard-intrinsic"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loweratomic",
      "--lower-widenable-condition",
      "--guard-widening",
      "--strip",
      "--inject-tli-mappings",
      "--mergeicmps",
      "--argpromotion",
      "--cross-dso-cfi",
      "--rpo-functionattrs",
      "--sink",
      "--float2int",
      "--dse",
      "--instnamer",
      "--coro-elide",
      "--attributor",
      "--pgo-memop-opt",
      "--coro-early",
      "--elim-avail-extern",
      "--loop-distribute",
      "--load-store-vectorizer",
      "--speculative-execution",
      "--bdce",
      "--lowerinvoke",
      "--instsimplify",
      "--mergereturn",
      "--loop-vectorize",
      "--infer-address-spaces",
      "--redundant-dbg-inst-elim",
      "--lower-guard-intrinsic"
    ],
    "performance_vs_Oz": "+0.2%"
  }
}
{
  "program_id": "linux-v0_8974.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 63,
    "onePredOneSuc": 38,
    "onePredTwoSuc": 24,
    "oneSuccessor": 50,
    "twoPred": 14,
    "twoPredOneSuc": 8,
    "twoEach": 4,
    "twoSuccessor": 29,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 105,
    "BeginPhi": 0,
    "BranchCount": 79,
    "returnInt": 18,
    "CriticalCount": 9,
    "NumEdges": 108,
    "const32Bit": 257,
    "const64Bit": 57,
    "numConstZeroes": 118,
    "numConstOnes": 131,
    "UncondBranches": 50,
    "binaryConstArg": 51,
    "NumAShrInst": 0,
    "NumAddInst": 9,
    "NumAllocaInst": 81,
    "NumAndInst": 13,
    "BlockMid": 15,
    "BlockLow": 90,
    "NumBitCastInst": 12,
    "NumBrInst": 79,
    "NumCallInst": 53,
    "NumGetElementPtrInst": 77,
    "NumICmpInst": 36,
    "NumLShrInst": 5,
    "NumLoadInst": 227,
    "NumMulInst": 1,
    "NumOrInst": 5,
    "NumPHIInst": 0,
    "NumRetInst": 26,
    "NumSExtInst": 24,
    "NumSelectInst": 1,
    "NumShlInst": 1,
    "NumStoreInst": 123,
    "NumSubInst": 9,
    "NumTruncInst": 5,
    "NumXorInst": 15,
    "NumZExtInst": 13,
    "TotalBlocks": 105,
    "TotalInsts": 820,
    "TotalMemInst": 561,
    "TotalFuncs": 34,
    "ArgsPhi": 0,
    "testUnary": 366
  },
  "baseline_oz_instcount": 819,
  "knowledge_base_entry": [
    "--loop-simplify",
    "--newgvn",
    "--loop-reroll",
    "--instcombine",
    "--loop-instsimplify",
    "--ipsccp",
    "--gvn",
    "--reassociate",
    "--prune-eh",
    "--licm",
    "--licm",
    "--globalopt",
    "--aggressive-instcombine",
    "--loop-rotate",
    "--lower-expect",
    "--instcombine",
    "--prune-eh",
    "--licm",
    "--licm",
    "--globalopt",
    "--aggressive-instcombine",
    "--dce",
    "--elim-avail-extern",
    "--dse"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--sroa",
          "--lower-expect",
          "--globalopt",
          "--sancov",
          "--reassociate",
          "--rpo-functionattrs",
          "--ipsccp",
          "--aggressive-instcombine",
          "--tailcallelim",
          "--strip",
          "--jump-threading"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--sroa",
      "--lower-expect",
      "--globalopt",
      "--sancov",
      "--reassociate",
      "--rpo-functionattrs",
      "--ipsccp",
      "--aggressive-instcombine",
      "--tailcallelim",
      "--strip",
      "--jump-threading"
    ],
    "performance_vs_Oz": "+0.2%"
  }
}
{
  "program_id": "github-v0_40680.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 15,
    "onePredOneSuc": 10,
    "onePredTwoSuc": 2,
    "oneSuccessor": 13,
    "twoPred": 6,
    "twoPredOneSuc": 2,
    "twoEach": 4,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 24,
    "BeginPhi": 0,
    "BranchCount": 20,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 27,
    "const32Bit": 39,
    "const64Bit": 32,
    "numConstZeroes": 34,
    "numConstOnes": 25,
    "UncondBranches": 13,
    "binaryConstArg": 12,
    "NumAShrInst": 0,
    "NumAddInst": 8,
    "NumAllocaInst": 14,
    "NumAndInst": 1,
    "BlockMid": 4,
    "BlockLow": 20,
    "NumBitCastInst": 4,
    "NumBrInst": 20,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 23,
    "NumICmpInst": 7,
    "NumLShrInst": 1,
    "NumLoadInst": 37,
    "NumMulInst": 1,
    "NumOrInst": 2,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 21,
    "NumSubInst": 0,
    "NumTruncInst": 3,
    "NumXorInst": 1,
    "NumZExtInst": 9,
    "TotalBlocks": 24,
    "TotalInsts": 168,
    "TotalMemInst": 102,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 70
  },
  "baseline_oz_instcount": 168,
  "knowledge_base_entry": [
    "--slp-vectorizer",
    "--instcombine",
    "--dse",
    "--loop-simplifycfg",
    "--loop-reroll",
    "--instsimplify",
    "--aggressive-instcombine",
    "--loop-simplifycfg",
    "--die",
    "--dse",
    "--lower-constant-intrinsics",
    "--newgvn",
    "--ipsccp"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--aggressive-instcombine",
          "--irce",
          "--post-inline-ee-instrument",
          "--separate-const-offset-from-gep",
          "--loop-versioning-licm",
          "--newgvn",
          "--bdce",
          "--pgo-memop-opt",
          "--insert-gcov-profiling",
          "--dse",
          "--early-cse-memssa",
          "--forceattrs",
          "--break-crit-edges",
          "--coro-split",
          "--ee-instrument",
          "--loop-simplify",
          "--inline",
          "--mergereturn",
          "--guard-widening",
          "--tailcallelim",
          "--consthoist",
          "--loop-load-elim",
          "--loop-predication",
          "--memcpyopt",
          "--lower-widenable-condition",
          "--sink",
          "--functionattrs",
          "--lowerinvoke",
          "--slsr",
          "-loop-reduce"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--aggressive-instcombine",
      "--irce",
      "--post-inline-ee-instrument",
      "--separate-const-offset-from-gep",
      "--loop-versioning-licm",
      "--newgvn",
      "--bdce",
      "--pgo-memop-opt",
      "--insert-gcov-profiling",
      "--dse",
      "--early-cse-memssa",
      "--forceattrs",
      "--break-crit-edges",
      "--coro-split",
      "--ee-instrument",
      "--loop-simplify",
      "--inline",
      "--mergereturn",
      "--guard-widening",
      "--tailcallelim",
      "--consthoist",
      "--loop-load-elim",
      "--loop-predication",
      "--memcpyopt",
      "--lower-widenable-condition",
      "--sink",
      "--functionattrs",
      "--lowerinvoke",
      "--slsr",
      "-loop-reduce"
    ],
    "performance_vs_Oz": "+2.4%"
  }
}
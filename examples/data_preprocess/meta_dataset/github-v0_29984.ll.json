{
  "program_id": "github-v0_29984.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 14,
    "onePredOneSuc": 9,
    "onePredTwoSuc": 2,
    "oneSuccessor": 12,
    "twoPred": 6,
    "twoPredOneSuc": 2,
    "twoEach": 4,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 23,
    "BeginPhi": 0,
    "BranchCount": 19,
    "returnInt": 4,
    "CriticalCount": 1,
    "NumEdges": 26,
    "const32Bit": 34,
    "const64Bit": 55,
    "numConstZeroes": 50,
    "numConstOnes": 27,
    "UncondBranches": 12,
    "binaryConstArg": 8,
    "NumAShrInst": 0,
    "NumAddInst": 8,
    "NumAllocaInst": 15,
    "NumAndInst": 0,
    "BlockMid": 6,
    "BlockLow": 17,
    "NumBitCastInst": 12,
    "NumBrInst": 19,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 39,
    "NumICmpInst": 7,
    "NumLShrInst": 0,
    "NumLoadInst": 41,
    "NumMulInst": 1,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 25,
    "NumSubInst": 0,
    "NumTruncInst": 3,
    "NumXorInst": 0,
    "NumZExtInst": 6,
    "TotalBlocks": 23,
    "TotalInsts": 190,
    "TotalMemInst": 127,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 80
  },
  "baseline_oz_instcount": 190,
  "knowledge_base_entry": [
    "--irce",
    "--instcombine",
    "--slp-vectorizer",
    "--early-cse",
    "--loop-rotate",
    "--lower-constant-intrinsics",
    "--aggressive-instcombine",
    "--globalopt",
    "--lower-expect",
    "--simplifycfg",
    "--reassociate",
    "--newgvn",
    "--loop-fusion",
    "--gvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--dse",
          "--constprop",
          "--lower-expect",
          "--simple-loop-unswitch",
          "--lower-widenable-condition",
          "--globalsplit",
          "-loop-reduce",
          "--loop-fusion",
          "--loop-vectorize",
          "--callsite-splitting",
          "--loop-unswitch",
          "--aggressive-instcombine",
          "--partial-inliner",
          "--dce",
          "--loop-rotate",
          "--cross-dso-cfi",
          "--consthoist",
          "--load-store-vectorizer",
          "--die",
          "--slsr",
          "--loop-simplifycfg",
          "--indvars",
          "--called-value-propagation",
          "--loop-simplify"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--dse",
      "--constprop",
      "--lower-expect",
      "--simple-loop-unswitch",
      "--lower-widenable-condition",
      "--globalsplit",
      "-loop-reduce",
      "--loop-fusion",
      "--loop-vectorize",
      "--callsite-splitting",
      "--loop-unswitch",
      "--aggressive-instcombine",
      "--partial-inliner",
      "--dce",
      "--loop-rotate",
      "--cross-dso-cfi",
      "--consthoist",
      "--load-store-vectorizer",
      "--die",
      "--slsr",
      "--loop-simplifycfg",
      "--indvars",
      "--called-value-propagation",
      "--loop-simplify"
    ],
    "performance_vs_Oz": "+2.1%"
  }
}
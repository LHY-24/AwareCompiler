{
  "program_id": "linux-v0_747.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 11,
    "onePredOneSuc": 6,
    "onePredTwoSuc": 5,
    "oneSuccessor": 9,
    "twoPred": 4,
    "twoPredOneSuc": 2,
    "twoEach": 2,
    "twoSuccessor": 7,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 18,
    "BeginPhi": 0,
    "BranchCount": 16,
    "returnInt": 1,
    "CriticalCount": 4,
    "NumEdges": 23,
    "const32Bit": 35,
    "const64Bit": 11,
    "numConstZeroes": 19,
    "numConstOnes": 15,
    "UncondBranches": 9,
    "binaryConstArg": 7,
    "NumAShrInst": 0,
    "NumAddInst": 4,
    "NumAllocaInst": 9,
    "NumAndInst": 0,
    "BlockMid": 2,
    "BlockLow": 16,
    "NumBitCastInst": 0,
    "NumBrInst": 16,
    "NumCallInst": 3,
    "NumGetElementPtrInst": 14,
    "NumICmpInst": 7,
    "NumLShrInst": 1,
    "NumLoadInst": 39,
    "NumMulInst": 1,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 2,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 15,
    "NumSubInst": 4,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 1,
    "TotalBlocks": 18,
    "TotalInsts": 124,
    "TotalMemInst": 80,
    "TotalFuncs": 4,
    "ArgsPhi": 0,
    "testUnary": 55
  },
  "baseline_oz_instcount": 125,
  "knowledge_base_entry": [
    "--adce",
    "--aggressive-instcombine",
    "--gvn",
    "--slsr",
    "--gvn-hoist",
    "--early-cse",
    "--bdce",
    "--ipsccp",
    "--flattencfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-distribute",
          "--always-inline",
          "--cross-dso-cfi",
          "--aggressive-instcombine",
          "--lower-expect",
          "--correlated-propagation",
          "--strip-nondebug",
          "--strip-debug-declare",
          "--canonicalize-aliases",
          "--sink"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-distribute",
      "--always-inline",
      "--cross-dso-cfi",
      "--aggressive-instcombine",
      "--lower-expect",
      "--correlated-propagation",
      "--strip-nondebug",
      "--strip-debug-declare",
      "--canonicalize-aliases",
      "--sink"
    ],
    "performance_vs_Oz": "+0.8%"
  }
}
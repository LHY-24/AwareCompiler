{
  "program_id": "github-v0_1502.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 49,
    "onePredOneSuc": 33,
    "onePredTwoSuc": 14,
    "oneSuccessor": 42,
    "twoPred": 20,
    "twoPredOneSuc": 7,
    "twoEach": 7,
    "twoSuccessor": 29,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 87,
    "BeginPhi": 0,
    "BranchCount": 71,
    "returnInt": 5,
    "CriticalCount": 12,
    "NumEdges": 100,
    "const32Bit": 307,
    "const64Bit": 50,
    "numConstZeroes": 212,
    "numConstOnes": 100,
    "UncondBranches": 42,
    "binaryConstArg": 10,
    "NumAShrInst": 0,
    "NumAddInst": 10,
    "NumAllocaInst": 55,
    "NumAndInst": 0,
    "BlockMid": 18,
    "BlockLow": 69,
    "NumBitCastInst": 0,
    "NumBrInst": 71,
    "NumCallInst": 26,
    "NumGetElementPtrInst": 151,
    "NumICmpInst": 29,
    "NumLShrInst": 0,
    "NumLoadInst": 250,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 16,
    "NumSExtInst": 52,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 104,
    "NumSubInst": 9,
    "NumTruncInst": 18,
    "NumXorInst": 0,
    "NumZExtInst": 36,
    "TotalBlocks": 87,
    "TotalInsts": 829,
    "TotalMemInst": 586,
    "TotalFuncs": 17,
    "ArgsPhi": 0,
    "testUnary": 411
  },
  "baseline_oz_instcount": 829,
  "knowledge_base_entry": [
    "--lowerinvoke",
    "--simplifycfg",
    "--sroa",
    "--nary-reassociate",
    "--slsr",
    "--indvars",
    "--jump-threading",
    "--elim-avail-extern",
    "--loop-rotate",
    "--licm",
    "--elim-avail-extern",
    "--load-store-vectorizer",
    "--aggressive-instcombine",
    "--newgvn",
    "--globalopt"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-load-elim",
          "--insert-gcov-profiling",
          "--callsite-splitting",
          "--attributor",
          "--nary-reassociate",
          "--loop-versioning-licm",
          "--lower-matrix-intrinsics",
          "--die",
          "--guard-widening",
          "--sancov",
          "--strip-dead-prototypes",
          "--coro-cleanup",
          "--ipconstprop",
          "--globalopt",
          "--coro-early",
          "--strip-debug-declare",
          "--mergefunc",
          "--functionattrs",
          "--inject-tli-mappings",
          "--slp-vectorizer",
          "--adce",
          "--add-discriminators",
          "--strip-nondebug",
          "--instnamer",
          "--partial-inliner",
          "--irce",
          "--simple-loop-unswitch",
          "--dce",
          "--aggressive-instcombine"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-load-elim",
      "--insert-gcov-profiling",
      "--callsite-splitting",
      "--attributor",
      "--nary-reassociate",
      "--loop-versioning-licm",
      "--lower-matrix-intrinsics",
      "--die",
      "--guard-widening",
      "--sancov",
      "--strip-dead-prototypes",
      "--coro-cleanup",
      "--ipconstprop",
      "--globalopt",
      "--coro-early",
      "--strip-debug-declare",
      "--mergefunc",
      "--functionattrs",
      "--inject-tli-mappings",
      "--slp-vectorizer",
      "--adce",
      "--add-discriminators",
      "--strip-nondebug",
      "--instnamer",
      "--partial-inliner",
      "--irce",
      "--simple-loop-unswitch",
      "--dce",
      "--aggressive-instcombine"
    ],
    "performance_vs_Oz": "+3.5%"
  }
}
{
  "program_id": "linux-v0_2419.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 54,
    "onePredOneSuc": 40,
    "onePredTwoSuc": 12,
    "oneSuccessor": 47,
    "twoPred": 14,
    "twoPredOneSuc": 3,
    "twoEach": 7,
    "twoSuccessor": 27,
    "morePreds": 8,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 90,
    "BeginPhi": 2,
    "BranchCount": 74,
    "returnInt": 27,
    "CriticalCount": 20,
    "NumEdges": 110,
    "const32Bit": 214,
    "const64Bit": 13,
    "numConstZeroes": 87,
    "numConstOnes": 96,
    "UncondBranches": 47,
    "binaryConstArg": 21,
    "NumAShrInst": 1,
    "NumAddInst": 6,
    "NumAllocaInst": 67,
    "NumAndInst": 9,
    "BlockMid": 14,
    "BlockLow": 78,
    "NumBitCastInst": 19,
    "NumBrInst": 74,
    "NumCallInst": 52,
    "NumGetElementPtrInst": 49,
    "NumICmpInst": 26,
    "NumLShrInst": 3,
    "NumLoadInst": 161,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 2,
    "NumRetInst": 16,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 95,
    "NumSubInst": 0,
    "NumTruncInst": 14,
    "NumXorInst": 2,
    "NumZExtInst": 20,
    "TotalBlocks": 92,
    "TotalInsts": 623,
    "TotalMemInst": 424,
    "TotalFuncs": 41,
    "ArgsPhi": 4,
    "testUnary": 284
  },
  "baseline_oz_instcount": 623,
  "knowledge_base_entry": [
    "--loop-reroll",
    "--lower-constant-intrinsics",
    "--adce",
    "--dce",
    "--aggressive-instcombine",
    "--gvn",
    "--memcpyopt",
    "--slp-vectorizer",
    "--mem2reg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--name-anon-globals",
          "--bdce",
          "--instcombine",
          "--partially-inline-libcalls",
          "--reassociate",
          "--redundant-dbg-inst-elim",
          "--loop-data-prefetch",
          "--lower-constant-intrinsics",
          "--instnamer",
          "--load-store-vectorizer",
          "--jump-threading",
          "--coro-cleanup",
          "--ipconstprop",
          "--loop-versioning",
          "--inject-tli-mappings",
          "--argpromotion",
          "--gvn-hoist",
          "--newgvn",
          "--consthoist",
          "--loweratomic",
          "--sancov",
          "--aggressive-instcombine",
          "--coro-split",
          "--constprop",
          "--canonicalize-aliases",
          "--div-rem-pairs",
          "--adce",
          "--die",
          "--insert-gcov-profiling",
          "--deadargelim"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--name-anon-globals",
      "--bdce",
      "--instcombine",
      "--partially-inline-libcalls",
      "--reassociate",
      "--redundant-dbg-inst-elim",
      "--loop-data-prefetch",
      "--lower-constant-intrinsics",
      "--instnamer",
      "--load-store-vectorizer",
      "--jump-threading",
      "--coro-cleanup",
      "--ipconstprop",
      "--loop-versioning",
      "--inject-tli-mappings",
      "--argpromotion",
      "--gvn-hoist",
      "--newgvn",
      "--consthoist",
      "--loweratomic",
      "--sancov",
      "--aggressive-instcombine",
      "--coro-split",
      "--constprop",
      "--canonicalize-aliases",
      "--div-rem-pairs",
      "--adce",
      "--die",
      "--insert-gcov-profiling",
      "--deadargelim"
    ],
    "performance_vs_Oz": "+1.3%"
  }
}
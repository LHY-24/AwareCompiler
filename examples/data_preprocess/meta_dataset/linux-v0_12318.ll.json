{
  "program_id": "linux-v0_12318.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 26,
    "onePredOneSuc": 19,
    "onePredTwoSuc": 5,
    "oneSuccessor": 30,
    "twoPred": 16,
    "twoPredOneSuc": 8,
    "twoEach": 4,
    "twoSuccessor": 14,
    "morePreds": 5,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 63,
    "BeginPhi": 0,
    "BranchCount": 44,
    "returnInt": 19,
    "CriticalCount": 17,
    "NumEdges": 73,
    "const32Bit": 268,
    "const64Bit": 8,
    "numConstZeroes": 112,
    "numConstOnes": 67,
    "UncondBranches": 30,
    "binaryConstArg": 23,
    "NumAShrInst": 1,
    "NumAddInst": 7,
    "NumAllocaInst": 51,
    "NumAndInst": 15,
    "BlockMid": 12,
    "BlockLow": 51,
    "NumBitCastInst": 8,
    "NumBrInst": 44,
    "NumCallInst": 33,
    "NumGetElementPtrInst": 75,
    "NumICmpInst": 16,
    "NumLShrInst": 0,
    "NumLoadInst": 168,
    "NumMulInst": 0,
    "NumOrInst": 5,
    "NumPHIInst": 0,
    "NumRetInst": 16,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 100,
    "NumSubInst": 2,
    "NumTruncInst": 16,
    "NumXorInst": 1,
    "NumZExtInst": 25,
    "TotalBlocks": 63,
    "TotalInsts": 588,
    "TotalMemInst": 427,
    "TotalFuncs": 33,
    "ArgsPhi": 0,
    "testUnary": 270
  },
  "baseline_oz_instcount": 588,
  "knowledge_base_entry": [
    "--deadargelim",
    "--mergefunc",
    "--globaldce",
    "--aggressive-instcombine",
    "--jump-threading",
    "--adce",
    "--ipsccp",
    "--early-cse",
    "--indvars",
    "--slsr",
    "--simplifycfg",
    "--slp-vectorizer"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--globaldce",
          "--simple-loop-unswitch",
          "--mergereturn",
          "--memcpyopt",
          "--scalarizer",
          "--always-inline",
          "--pgo-memop-opt",
          "--licm",
          "--inferattrs",
          "--loop-interchange",
          "--coro-split",
          "--inline",
          "--early-cse",
          "--aggressive-instcombine",
          "--loop-unroll-and-jam",
          "--loop-unroll",
          "--libcalls-shrinkwrap",
          "--load-store-vectorizer",
          "--coro-early",
          "--elim-avail-extern",
          "--early-cse-memssa",
          "--loop-instsimplify",
          "--lower-guard-intrinsic"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--globaldce",
      "--simple-loop-unswitch",
      "--mergereturn",
      "--memcpyopt",
      "--scalarizer",
      "--always-inline",
      "--pgo-memop-opt",
      "--licm",
      "--inferattrs",
      "--loop-interchange",
      "--coro-split",
      "--inline",
      "--early-cse",
      "--aggressive-instcombine",
      "--loop-unroll-and-jam",
      "--loop-unroll",
      "--libcalls-shrinkwrap",
      "--load-store-vectorizer",
      "--coro-early",
      "--elim-avail-extern",
      "--early-cse-memssa",
      "--loop-instsimplify",
      "--lower-guard-intrinsic"
    ],
    "performance_vs_Oz": "+2.4%"
  }
}
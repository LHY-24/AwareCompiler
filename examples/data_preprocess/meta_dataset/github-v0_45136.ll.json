{
  "program_id": "github-v0_45136.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 19,
    "onePredOneSuc": 15,
    "onePredTwoSuc": 1,
    "oneSuccessor": 19,
    "twoPred": 5,
    "twoPredOneSuc": 1,
    "twoEach": 3,
    "twoSuccessor": 5,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 28,
    "BeginPhi": 0,
    "BranchCount": 24,
    "returnInt": 7,
    "CriticalCount": 0,
    "NumEdges": 35,
    "const32Bit": 138,
    "const64Bit": 28,
    "numConstZeroes": 75,
    "numConstOnes": 54,
    "UncondBranches": 19,
    "binaryConstArg": 25,
    "NumAShrInst": 0,
    "NumAddInst": 10,
    "NumAllocaInst": 34,
    "NumAndInst": 0,
    "BlockMid": 8,
    "BlockLow": 20,
    "NumBitCastInst": 16,
    "NumBrInst": 24,
    "NumCallInst": 20,
    "NumGetElementPtrInst": 50,
    "NumICmpInst": 4,
    "NumLShrInst": 0,
    "NumLoadInst": 102,
    "NumMulInst": 15,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 8,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 77,
    "NumSubInst": 2,
    "NumTruncInst": 6,
    "NumXorInst": 0,
    "NumZExtInst": 9,
    "TotalBlocks": 28,
    "TotalInsts": 410,
    "TotalMemInst": 283,
    "TotalFuncs": 13,
    "ArgsPhi": 0,
    "testUnary": 184
  },
  "baseline_oz_instcount": 410,
  "knowledge_base_entry": [
    "--reassociate",
    "--aggressive-instcombine",
    "--die",
    "--load-store-vectorizer",
    "--loop-fusion",
    "--early-cse-memssa",
    "--dse"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--gvn-hoist",
          "--mergefunc",
          "--simplifycfg",
          "--barrier",
          "--lower-expect",
          "--loop-versioning-licm",
          "--aggressive-instcombine",
          "--licm",
          "--lower-matrix-intrinsics",
          "--lower-guard-intrinsic",
          "--loop-vectorize",
          "--loop-simplify",
          "--float2int",
          "--libcalls-shrinkwrap",
          "--called-value-propagation",
          "--instnamer",
          "--speculative-execution",
          "--sancov",
          "--load-store-vectorizer",
          "--separate-const-offset-from-gep",
          "--slsr",
          "--attributor",
          "--dce",
          "--lower-constant-intrinsics",
          "--lowerinvoke",
          "--scalarizer",
          "--rewrite-statepoints-for-gc",
          "--loop-unroll-and-jam"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--gvn-hoist",
      "--mergefunc",
      "--simplifycfg",
      "--barrier",
      "--lower-expect",
      "--loop-versioning-licm",
      "--aggressive-instcombine",
      "--licm",
      "--lower-matrix-intrinsics",
      "--lower-guard-intrinsic",
      "--loop-vectorize",
      "--loop-simplify",
      "--float2int",
      "--libcalls-shrinkwrap",
      "--called-value-propagation",
      "--instnamer",
      "--speculative-execution",
      "--sancov",
      "--load-store-vectorizer",
      "--separate-const-offset-from-gep",
      "--slsr",
      "--attributor",
      "--dce",
      "--lower-constant-intrinsics",
      "--lowerinvoke",
      "--scalarizer",
      "--rewrite-statepoints-for-gc",
      "--loop-unroll-and-jam"
    ],
    "performance_vs_Oz": "+1.7%"
  }
}
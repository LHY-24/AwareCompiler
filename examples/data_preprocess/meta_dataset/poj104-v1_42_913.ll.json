{
  "program_id": "poj104-v1_42_913.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 16,
    "onePredOneSuc": 13,
    "onePredTwoSuc": 2,
    "oneSuccessor": 16,
    "twoPred": 7,
    "twoPredOneSuc": 2,
    "twoEach": 4,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 31,
    "BeginPhi": 0,
    "BranchCount": 23,
    "returnInt": 5,
    "CriticalCount": 2,
    "NumEdges": 30,
    "const32Bit": 30,
    "const64Bit": 16,
    "numConstZeroes": 11,
    "numConstOnes": 21,
    "UncondBranches": 16,
    "binaryConstArg": 8,
    "NumAShrInst": 0,
    "NumAddInst": 7,
    "NumAllocaInst": 14,
    "NumAndInst": 0,
    "BlockMid": 1,
    "BlockLow": 30,
    "NumBitCastInst": 15,
    "NumBrInst": 23,
    "NumCallInst": 25,
    "NumGetElementPtrInst": 8,
    "NumICmpInst": 7,
    "NumLShrInst": 0,
    "NumLoadInst": 41,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 8,
    "NumSExtInst": 5,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 20,
    "NumSubInst": 1,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 31,
    "TotalInsts": 175,
    "TotalMemInst": 108,
    "TotalFuncs": 18,
    "ArgsPhi": 0,
    "testUnary": 75
  },
  "baseline_oz_instcount": 78,
  "knowledge_base_entry": [
    "--strip-nondebug",
    "--mergefunc",
    "--elim-avail-extern",
    "--licm",
    "--loop-simplifycfg",
    "--slp-vectorizer",
    "--load-store-vectorizer",
    "--adce",
    "--inline",
    "--mergefunc",
    "--mem2reg",
    "--loop-deletion",
    "--instcombine",
    "--nary-reassociate",
    "--correlated-propagation",
    "--dce",
    "--newgvn",
    "--jump-threading",
    "--inline",
    "--sroa",
    "--loop-reroll",
    "--correlated-propagation",
    "--simplifycfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--elim-avail-extern",
          "--ipconstprop",
          "--lower-guard-intrinsic",
          "--cross-dso-cfi",
          "--load-store-vectorizer",
          "--partially-inline-libcalls",
          "--canonicalize-aliases",
          "--sink",
          "--early-cse-memssa",
          "--mem2reg",
          "--infer-address-spaces",
          "--called-value-propagation",
          "--loweratomic",
          "--loop-versioning-licm",
          "--pgo-memop-opt",
          "--inject-tli-mappings",
          "--simplifycfg",
          "--inline",
          "--loop-guard-widening",
          "--sroa",
          "--always-inline",
          "--globalopt",
          "--mldst-motion",
          "--libcalls-shrinkwrap",
          "--dce",
          "--loop-simplifycfg",
          "--attributor"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--elim-avail-extern",
      "--ipconstprop",
      "--lower-guard-intrinsic",
      "--cross-dso-cfi",
      "--load-store-vectorizer",
      "--partially-inline-libcalls",
      "--canonicalize-aliases",
      "--sink",
      "--early-cse-memssa",
      "--mem2reg",
      "--infer-address-spaces",
      "--called-value-propagation",
      "--loweratomic",
      "--loop-versioning-licm",
      "--pgo-memop-opt",
      "--inject-tli-mappings",
      "--simplifycfg",
      "--inline",
      "--loop-guard-widening",
      "--sroa",
      "--always-inline",
      "--globalopt",
      "--mldst-motion",
      "--libcalls-shrinkwrap",
      "--dce",
      "--loop-simplifycfg",
      "--attributor"
    ],
    "performance_vs_Oz": "+3.8%"
  }
}
{
  "program_id": "github-v0_7688.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 15,
    "onePredOneSuc": 10,
    "onePredTwoSuc": 3,
    "oneSuccessor": 13,
    "twoPred": 6,
    "twoPredOneSuc": 3,
    "twoEach": 2,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 24,
    "BeginPhi": 0,
    "BranchCount": 20,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 27,
    "const32Bit": 47,
    "const64Bit": 71,
    "numConstZeroes": 72,
    "numConstOnes": 31,
    "UncondBranches": 13,
    "binaryConstArg": 20,
    "NumAShrInst": 0,
    "NumAddInst": 5,
    "NumAllocaInst": 13,
    "NumAndInst": 6,
    "BlockMid": 6,
    "BlockLow": 18,
    "NumBitCastInst": 12,
    "NumBrInst": 20,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 45,
    "NumICmpInst": 7,
    "NumLShrInst": 5,
    "NumLoadInst": 37,
    "NumMulInst": 1,
    "NumOrInst": 4,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 3,
    "NumStoreInst": 24,
    "NumSubInst": 1,
    "NumTruncInst": 3,
    "NumXorInst": 0,
    "NumZExtInst": 2,
    "TotalBlocks": 24,
    "TotalInsts": 202,
    "TotalMemInst": 126,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 70
  },
  "baseline_oz_instcount": 202,
  "knowledge_base_entry": [
    "--loop-simplify",
    "--jump-threading",
    "--aggressive-instcombine",
    "--adce",
    "--inline",
    "--instcombine",
    "--mergefunc",
    "--memcpyopt",
    "--elim-avail-extern",
    "--sroa",
    "--loop-deletion",
    "--newgvn",
    "--reassociate",
    "--jump-threading",
    "--early-cse-memssa",
    "--gvn",
    "--memcpyopt",
    "--elim-avail-extern",
    "--sroa",
    "--loop-deletion",
    "--mem2reg",
    "--newgvn",
    "--early-cse-memssa",
    "--dce",
    "--sroa",
    "--simplifycfg",
    "--gvn-hoist",
    "--slp-vectorizer"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-versioning",
          "--always-inline",
          "--ipsccp",
          "--redundant-dbg-inst-elim",
          "--bdce",
          "--mldst-motion",
          "--add-discriminators",
          "--globalopt",
          "--dce",
          "--sroa",
          "--instnamer",
          "--separate-const-offset-from-gep",
          "--aggressive-instcombine",
          "--constmerge"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.0%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-versioning",
      "--always-inline",
      "--ipsccp",
      "--redundant-dbg-inst-elim",
      "--bdce",
      "--mldst-motion",
      "--add-discriminators",
      "--globalopt",
      "--dce",
      "--sroa",
      "--instnamer",
      "--separate-const-offset-from-gep",
      "--aggressive-instcombine",
      "--constmerge"
    ],
    "performance_vs_Oz": "+2.0%"
  }
}
{
  "program_id": "linux-v0_1624.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 33,
    "onePredOneSuc": 20,
    "onePredTwoSuc": 11,
    "oneSuccessor": 33,
    "twoPred": 14,
    "twoPredOneSuc": 11,
    "twoEach": 3,
    "twoSuccessor": 14,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 58,
    "BeginPhi": 0,
    "BranchCount": 47,
    "returnInt": 20,
    "CriticalCount": 6,
    "NumEdges": 71,
    "const32Bit": 205,
    "const64Bit": 13,
    "numConstZeroes": 74,
    "numConstOnes": 70,
    "UncondBranches": 33,
    "binaryConstArg": 36,
    "NumAShrInst": 1,
    "NumAddInst": 2,
    "NumAllocaInst": 55,
    "NumAndInst": 8,
    "BlockMid": 15,
    "BlockLow": 43,
    "NumBitCastInst": 11,
    "NumBrInst": 47,
    "NumCallInst": 27,
    "NumGetElementPtrInst": 122,
    "NumICmpInst": 14,
    "NumLShrInst": 4,
    "NumLoadInst": 253,
    "NumMulInst": 6,
    "NumOrInst": 3,
    "NumPHIInst": 0,
    "NumRetInst": 9,
    "NumSExtInst": 72,
    "NumSelectInst": 0,
    "NumShlInst": 9,
    "NumStoreInst": 71,
    "NumSubInst": 12,
    "NumTruncInst": 16,
    "NumXorInst": 2,
    "NumZExtInst": 19,
    "TotalBlocks": 58,
    "TotalInsts": 775,
    "TotalMemInst": 528,
    "TotalFuncs": 12,
    "ArgsPhi": 0,
    "testUnary": 426
  },
  "baseline_oz_instcount": 775,
  "knowledge_base_entry": [
    "--inline",
    "--flattencfg",
    "--jump-threading",
    "--bdce",
    "--aggressive-instcombine",
    "--dse",
    "--die",
    "--early-cse",
    "--memcpyopt",
    "--loop-reroll",
    "--nary-reassociate",
    "--indvars",
    "--load-store-vectorizer",
    "--loop-simplifycfg",
    "--inline",
    "--ipsccp",
    "--flattencfg",
    "--mem2reg",
    "--aggressive-instcombine",
    "--lower-expect",
    "--loop-instsimplify",
    "--mergefunc",
    "--flattencfg",
    "--ipsccp"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--infer-address-spaces",
          "--simplifycfg",
          "--loweratomic",
          "--lower-expect",
          "--load-store-vectorizer",
          "--bdce",
          "--lowerinvoke",
          "--mldst-motion",
          "--inferattrs",
          "--loop-sink",
          "--ipsccp",
          "--slp-vectorizer",
          "--loop-fusion",
          "--strip-nondebug",
          "--partially-inline-libcalls",
          "--canonicalize-aliases",
          "--attributor",
          "--loop-unroll-and-jam",
          "--tailcallelim",
          "--inline",
          "--aggressive-instcombine",
          "--loop-simplify",
          "--strip-debug-declare",
          "--hotcoldsplit",
          "--loop-simplifycfg",
          "--ipconstprop",
          "--guard-widening"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--infer-address-spaces",
      "--simplifycfg",
      "--loweratomic",
      "--lower-expect",
      "--load-store-vectorizer",
      "--bdce",
      "--lowerinvoke",
      "--mldst-motion",
      "--inferattrs",
      "--loop-sink",
      "--ipsccp",
      "--slp-vectorizer",
      "--loop-fusion",
      "--strip-nondebug",
      "--partially-inline-libcalls",
      "--canonicalize-aliases",
      "--attributor",
      "--loop-unroll-and-jam",
      "--tailcallelim",
      "--inline",
      "--aggressive-instcombine",
      "--loop-simplify",
      "--strip-debug-declare",
      "--hotcoldsplit",
      "--loop-simplifycfg",
      "--ipconstprop",
      "--guard-widening"
    ],
    "performance_vs_Oz": "+0.3%"
  }
}
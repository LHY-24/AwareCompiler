{
  "program_id": "github-v0_2378.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 32,
    "onePredOneSuc": 23,
    "onePredTwoSuc": 7,
    "oneSuccessor": 30,
    "twoPred": 5,
    "twoPredOneSuc": 4,
    "twoEach": 1,
    "twoSuccessor": 9,
    "morePreds": 4,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 47,
    "BeginPhi": 0,
    "BranchCount": 39,
    "returnInt": 2,
    "CriticalCount": 7,
    "NumEdges": 66,
    "const32Bit": 117,
    "const64Bit": 0,
    "numConstZeroes": 53,
    "numConstOnes": 46,
    "UncondBranches": 30,
    "binaryConstArg": 9,
    "NumAShrInst": 0,
    "NumAddInst": 8,
    "NumAllocaInst": 27,
    "NumAndInst": 1,
    "BlockMid": 8,
    "BlockLow": 39,
    "NumBitCastInst": 5,
    "NumBrInst": 39,
    "NumCallInst": 11,
    "NumGetElementPtrInst": 36,
    "NumICmpInst": 9,
    "NumLShrInst": 0,
    "NumLoadInst": 99,
    "NumMulInst": 2,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 6,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 52,
    "NumSubInst": 1,
    "NumTruncInst": 7,
    "NumXorInst": 0,
    "NumZExtInst": 27,
    "TotalBlocks": 47,
    "TotalInsts": 336,
    "TotalMemInst": 225,
    "TotalFuncs": 10,
    "ArgsPhi": 0,
    "testUnary": 167
  },
  "baseline_oz_instcount": 336,
  "knowledge_base_entry": [
    "--loop-simplify",
    "--gvn",
    "--prune-eh",
    "--aggressive-instcombine",
    "--bdce",
    "--reassociate",
    "--mem2reg",
    "--lower-expect",
    "--reassociate",
    "--aggressive-instcombine",
    "--early-cse-memssa",
    "--nary-reassociate",
    "--slp-vectorizer",
    "--instcombine",
    "--memcpyopt",
    "--gvn",
    "--memcpyopt",
    "--sroa",
    "--early-cse",
    "--reassociate",
    "--ipsccp",
    "--simplifycfg",
    "--mergefunc",
    "--aggressive-instcombine",
    "--early-cse",
    "--globalopt",
    "--correlated-propagation"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--coro-early",
          "--aggressive-instcombine",
          "--slsr",
          "--simple-loop-unswitch",
          "--loop-predication",
          "--called-value-propagation",
          "--rpo-functionattrs",
          "--early-cse",
          "--loop-load-elim",
          "--lower-widenable-condition",
          "-loop-reduce",
          "--loop-rotate",
          "--strip",
          "--ipsccp",
          "--lowerinvoke",
          "--partial-inliner",
          "--always-inline",
          "--constprop",
          "--bdce",
          "--add-discriminators",
          "--irce",
          "--forceattrs",
          "--loop-distribute",
          "--lower-constant-intrinsics",
          "--nary-reassociate",
          "--loop-instsimplify"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--coro-early",
      "--aggressive-instcombine",
      "--slsr",
      "--simple-loop-unswitch",
      "--loop-predication",
      "--called-value-propagation",
      "--rpo-functionattrs",
      "--early-cse",
      "--loop-load-elim",
      "--lower-widenable-condition",
      "-loop-reduce",
      "--loop-rotate",
      "--strip",
      "--ipsccp",
      "--lowerinvoke",
      "--partial-inliner",
      "--always-inline",
      "--constprop",
      "--bdce",
      "--add-discriminators",
      "--irce",
      "--forceattrs",
      "--loop-distribute",
      "--lower-constant-intrinsics",
      "--nary-reassociate",
      "--loop-instsimplify"
    ],
    "performance_vs_Oz": "+3.9%"
  }
}
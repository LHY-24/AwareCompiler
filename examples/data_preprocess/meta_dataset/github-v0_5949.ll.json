{
  "program_id": "github-v0_5949.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 3,
    "onePredOneSuc": 3,
    "onePredTwoSuc": 0,
    "oneSuccessor": 3,
    "twoPred": 3,
    "twoPredOneSuc": 0,
    "twoEach": 2,
    "twoSuccessor": 3,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 7,
    "BeginPhi": 0,
    "BranchCount": 6,
    "returnInt": 0,
    "CriticalCount": 3,
    "NumEdges": 9,
    "const32Bit": 11,
    "const64Bit": 0,
    "numConstZeroes": 4,
    "numConstOnes": 4,
    "UncondBranches": 3,
    "binaryConstArg": 6,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 2,
    "NumAndInst": 3,
    "BlockMid": 0,
    "BlockLow": 7,
    "NumBitCastInst": 0,
    "NumBrInst": 6,
    "NumCallInst": 1,
    "NumGetElementPtrInst": 0,
    "NumICmpInst": 3,
    "NumLShrInst": 0,
    "NumLoadInst": 7,
    "NumMulInst": 0,
    "NumOrInst": 3,
    "NumPHIInst": 0,
    "NumRetInst": 1,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 5,
    "NumSubInst": 0,
    "NumTruncInst": 3,
    "NumXorInst": 0,
    "NumZExtInst": 6,
    "TotalBlocks": 7,
    "TotalInsts": 40,
    "TotalMemInst": 15,
    "TotalFuncs": 2,
    "ArgsPhi": 0,
    "testUnary": 18
  },
  "baseline_oz_instcount": 40,
  "knowledge_base_entry": [
    "--die",
    "--aggressive-instcombine",
    "--early-cse-memssa",
    "--early-cse",
    "--memcpyopt",
    "--lower-constant-intrinsics"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--argpromotion",
          "--load-store-vectorizer",
          "--coro-elide",
          "--libcalls-shrinkwrap",
          "--simplifycfg",
          "--lower-guard-intrinsic",
          "--jump-threading",
          "--lower-widenable-condition",
          "--instnamer",
          "--aggressive-instcombine",
          "--gvn-hoist",
          "--always-inline",
          "--separate-const-offset-from-gep",
          "--loop-predication",
          "--attributor",
          "--ipconstprop",
          "--dce",
          "--globalopt",
          "--forceattrs",
          "--ipsccp",
          "--redundant-dbg-inst-elim",
          "--loop-deletion",
          "--mldst-motion",
          "--lower-constant-intrinsics",
          "--early-cse-memssa",
          "--loop-distribute",
          "--div-rem-pairs",
          "--rpo-functionattrs"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+15.0%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--argpromotion",
      "--load-store-vectorizer",
      "--coro-elide",
      "--libcalls-shrinkwrap",
      "--simplifycfg",
      "--lower-guard-intrinsic",
      "--jump-threading",
      "--lower-widenable-condition",
      "--instnamer",
      "--aggressive-instcombine",
      "--gvn-hoist",
      "--always-inline",
      "--separate-const-offset-from-gep",
      "--loop-predication",
      "--attributor",
      "--ipconstprop",
      "--dce",
      "--globalopt",
      "--forceattrs",
      "--ipsccp",
      "--redundant-dbg-inst-elim",
      "--loop-deletion",
      "--mldst-motion",
      "--lower-constant-intrinsics",
      "--early-cse-memssa",
      "--loop-distribute",
      "--div-rem-pairs",
      "--rpo-functionattrs"
    ],
    "performance_vs_Oz": "+15.0%"
  }
}
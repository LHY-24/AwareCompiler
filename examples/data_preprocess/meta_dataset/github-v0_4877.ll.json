{
  "program_id": "github-v0_4877.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 14,
    "onePredOneSuc": 12,
    "onePredTwoSuc": 1,
    "oneSuccessor": 14,
    "twoPred": 5,
    "twoPredOneSuc": 1,
    "twoEach": 4,
    "twoSuccessor": 5,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 20,
    "BeginPhi": 0,
    "BranchCount": 19,
    "returnInt": 2,
    "CriticalCount": 1,
    "NumEdges": 24,
    "const32Bit": 23,
    "const64Bit": 7,
    "numConstZeroes": 10,
    "numConstOnes": 16,
    "UncondBranches": 14,
    "binaryConstArg": 7,
    "NumAShrInst": 0,
    "NumAddInst": 7,
    "NumAllocaInst": 8,
    "NumAndInst": 0,
    "BlockMid": 0,
    "BlockLow": 20,
    "NumBitCastInst": 0,
    "NumBrInst": 19,
    "NumCallInst": 2,
    "NumGetElementPtrInst": 7,
    "NumICmpInst": 5,
    "NumLShrInst": 0,
    "NumLoadInst": 23,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 1,
    "NumSExtInst": 7,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 13,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 20,
    "TotalInsts": 92,
    "TotalMemInst": 53,
    "TotalFuncs": 3,
    "ArgsPhi": 0,
    "testUnary": 38
  },
  "baseline_oz_instcount": 93,
  "knowledge_base_entry": [
    "--adce",
    "--sroa",
    "--mergefunc",
    "--bdce",
    "--aggressive-instcombine",
    "--load-store-vectorizer",
    "--correlated-propagation",
    "--reassociate",
    "--globalopt",
    "--globaldce",
    "--ipsccp"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-versioning",
          "--instnamer",
          "--constmerge",
          "--name-anon-globals",
          "--tailcallelim",
          "--loop-distribute",
          "--nary-reassociate",
          "--mem2reg",
          "--libcalls-shrinkwrap",
          "--inject-tli-mappings"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-versioning",
      "--instnamer",
      "--constmerge",
      "--name-anon-globals",
      "--tailcallelim",
      "--loop-distribute",
      "--nary-reassociate",
      "--mem2reg",
      "--libcalls-shrinkwrap",
      "--inject-tli-mappings"
    ],
    "performance_vs_Oz": "+1.1%"
  }
}
{
  "program_id": "github-v0_21039.ll",
  "autophase_features": {
    "BBNumArgsHi": 3,
    "BBNumArgsLo": 0,
    "onePred": 6,
    "onePredOneSuc": 4,
    "onePredTwoSuc": 2,
    "oneSuccessor": 5,
    "twoPred": 3,
    "twoPredOneSuc": 1,
    "twoEach": 2,
    "twoSuccessor": 5,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 3,
    "BBNoPhi": 8,
    "BeginPhi": 3,
    "BranchCount": 10,
    "returnInt": 20,
    "CriticalCount": 4,
    "NumEdges": 15,
    "const32Bit": 44,
    "const64Bit": 21,
    "numConstZeroes": 25,
    "numConstOnes": 11,
    "UncondBranches": 5,
    "binaryConstArg": 25,
    "NumAShrInst": 1,
    "NumAddInst": 16,
    "NumAllocaInst": 0,
    "NumAndInst": 0,
    "BlockMid": 5,
    "BlockLow": 6,
    "NumBitCastInst": 0,
    "NumBrInst": 10,
    "NumCallInst": 47,
    "NumGetElementPtrInst": 23,
    "NumICmpInst": 5,
    "NumLShrInst": 0,
    "NumLoadInst": 10,
    "NumMulInst": 2,
    "NumOrInst": 13,
    "NumPHIInst": 20,
    "NumRetInst": 1,
    "NumSExtInst": 4,
    "NumSelectInst": 0,
    "NumShlInst": 6,
    "NumStoreInst": 15,
    "NumSubInst": 0,
    "NumTruncInst": 3,
    "NumXorInst": 0,
    "NumZExtInst": 13,
    "TotalBlocks": 11,
    "TotalInsts": 257,
    "TotalMemInst": 95,
    "TotalFuncs": 9,
    "ArgsPhi": 40,
    "testUnary": 55
  },
  "baseline_oz_instcount": 259,
  "knowledge_base_entry": [
    "--bdce",
    "--instcombine",
    "--nary-reassociate",
    "--mem2reg",
    "--simplifycfg",
    "--sroa",
    "--lower-constant-intrinsics",
    "--dce",
    "--dse",
    "--mergefunc",
    "--inline",
    "--sccp",
    "--bdce",
    "--instcombine",
    "--nary-reassociate",
    "--mem2reg",
    "--simplifycfg",
    "--sroa",
    "--lower-constant-intrinsics",
    "--elim-avail-extern",
    "--instcombine",
    "--ipsccp"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-unroll",
          "--strip-dead-prototypes",
          "--loop-simplify",
          "--globalsplit",
          "--newgvn",
          "--libcalls-shrinkwrap",
          "--dce",
          "--coro-elide",
          "--barrier",
          "--nary-reassociate",
          "--gvn-hoist",
          "--loweratomic",
          "--partial-inliner"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-unroll",
      "--strip-dead-prototypes",
      "--loop-simplify",
      "--globalsplit",
      "--newgvn",
      "--libcalls-shrinkwrap",
      "--dce",
      "--coro-elide",
      "--barrier",
      "--nary-reassociate",
      "--gvn-hoist",
      "--loweratomic",
      "--partial-inliner"
    ],
    "performance_vs_Oz": "+1.9%"
  }
}
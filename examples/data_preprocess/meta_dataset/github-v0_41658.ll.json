{
  "program_id": "github-v0_41658.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 100,
    "onePredOneSuc": 69,
    "onePredTwoSuc": 30,
    "oneSuccessor": 102,
    "twoPred": 56,
    "twoPredOneSuc": 29,
    "twoEach": 18,
    "twoSuccessor": 56,
    "morePreds": 3,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 176,
    "BeginPhi": 0,
    "BranchCount": 158,
    "returnInt": 33,
    "CriticalCount": 55,
    "NumEdges": 253,
    "const32Bit": 223,
    "const64Bit": 14,
    "numConstZeroes": 82,
    "numConstOnes": 89,
    "UncondBranches": 102,
    "binaryConstArg": 34,
    "NumAShrInst": 0,
    "NumAddInst": 16,
    "NumAllocaInst": 57,
    "NumAndInst": 4,
    "BlockMid": 9,
    "BlockLow": 167,
    "NumBitCastInst": 22,
    "NumBrInst": 158,
    "NumCallInst": 75,
    "NumGetElementPtrInst": 44,
    "NumICmpInst": 56,
    "NumLShrInst": 0,
    "NumLoadInst": 268,
    "NumMulInst": 1,
    "NumOrInst": 11,
    "NumPHIInst": 0,
    "NumRetInst": 17,
    "NumSExtInst": 30,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 181,
    "NumSubInst": 6,
    "NumTruncInst": 1,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 176,
    "TotalInsts": 948,
    "TotalMemInst": 625,
    "TotalFuncs": 50,
    "ArgsPhi": 0,
    "testUnary": 378
  },
  "baseline_oz_instcount": 950,
  "knowledge_base_entry": [
    "--memcpyopt",
    "--mem2reg",
    "--newgvn",
    "--instcombine",
    "--newgvn",
    "--prune-eh",
    "--early-cse-memssa",
    "--aggressive-instcombine",
    "--bdce",
    "--gvn",
    "--elim-avail-extern",
    "--sroa",
    "--jump-threading",
    "--flattencfg",
    "--gvn",
    "--instcombine",
    "--newgvn",
    "--prune-eh",
    "--early-cse-memssa",
    "--mldst-motion",
    "--slp-vectorizer",
    "--die",
    "--sroa"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--die",
          "--inline",
          "--sccp",
          "--aggressive-instcombine",
          "--hotcoldsplit",
          "--loop-unroll-and-jam",
          "--rewrite-statepoints-for-gc",
          "--post-inline-ee-instrument",
          "--ipsccp",
          "--callsite-splitting",
          "--strip-debug-declare",
          "--reassociate",
          "--loop-versioning"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--die",
      "--inline",
      "--sccp",
      "--aggressive-instcombine",
      "--hotcoldsplit",
      "--loop-unroll-and-jam",
      "--rewrite-statepoints-for-gc",
      "--post-inline-ee-instrument",
      "--ipsccp",
      "--callsite-splitting",
      "--strip-debug-declare",
      "--reassociate",
      "--loop-versioning"
    ],
    "performance_vs_Oz": "+0.2%"
  }
}
{
  "program_id": "linux-v0_6489.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 69,
    "onePredOneSuc": 43,
    "onePredTwoSuc": 25,
    "oneSuccessor": 53,
    "twoPred": 17,
    "twoPredOneSuc": 9,
    "twoEach": 4,
    "twoSuccessor": 37,
    "morePreds": 5,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 123,
    "BeginPhi": 0,
    "BranchCount": 90,
    "returnInt": 40,
    "CriticalCount": 10,
    "NumEdges": 130,
    "const32Bit": 388,
    "const64Bit": 8,
    "numConstZeroes": 159,
    "numConstOnes": 147,
    "UncondBranches": 53,
    "binaryConstArg": 9,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 120,
    "NumAndInst": 0,
    "BlockMid": 15,
    "BlockLow": 108,
    "NumBitCastInst": 16,
    "NumBrInst": 90,
    "NumCallInst": 75,
    "NumGetElementPtrInst": 104,
    "NumICmpInst": 41,
    "NumLShrInst": 0,
    "NumLoadInst": 294,
    "NumMulInst": 1,
    "NumOrInst": 2,
    "NumPHIInst": 0,
    "NumRetInst": 32,
    "NumSExtInst": 7,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 171,
    "NumSubInst": 1,
    "NumTruncInst": 2,
    "NumXorInst": 4,
    "NumZExtInst": 10,
    "TotalBlocks": 123,
    "TotalInsts": 979,
    "TotalMemInst": 764,
    "TotalFuncs": 56,
    "ArgsPhi": 0,
    "testUnary": 455
  },
  "baseline_oz_instcount": 977,
  "knowledge_base_entry": [
    "--gvn-hoist",
    "--elim-avail-extern",
    "--ipsccp",
    "--globalopt",
    "--globaldce",
    "--mergefunc",
    "--die",
    "--gvn-hoist",
    "--lower-constant-intrinsics",
    "--simplifycfg",
    "--sccp",
    "--reassociate",
    "--dse",
    "--sroa"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--strip-nondebug",
          "--loweratomic",
          "--sroa",
          "--instsimplify",
          "--partial-inliner",
          "--add-discriminators",
          "--gvn-hoist",
          "--strip",
          "--consthoist",
          "--forceattrs",
          "--loop-unswitch",
          "--dce",
          "--ipsccp",
          "--mergefunc",
          "--always-inline"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--strip-nondebug",
      "--loweratomic",
      "--sroa",
      "--instsimplify",
      "--partial-inliner",
      "--add-discriminators",
      "--gvn-hoist",
      "--strip",
      "--consthoist",
      "--forceattrs",
      "--loop-unswitch",
      "--dce",
      "--ipsccp",
      "--mergefunc",
      "--always-inline"
    ],
    "performance_vs_Oz": "+0.3%"
  }
}
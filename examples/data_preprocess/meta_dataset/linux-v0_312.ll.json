{
  "program_id": "linux-v0_312.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 39,
    "onePredOneSuc": 30,
    "onePredTwoSuc": 8,
    "oneSuccessor": 37,
    "twoPred": 13,
    "twoPredOneSuc": 4,
    "twoEach": 7,
    "twoSuccessor": 17,
    "morePreds": 3,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 58,
    "BeginPhi": 0,
    "BranchCount": 54,
    "returnInt": 3,
    "CriticalCount": 10,
    "NumEdges": 76,
    "const32Bit": 165,
    "const64Bit": 7,
    "numConstZeroes": 67,
    "numConstOnes": 75,
    "UncondBranches": 37,
    "binaryConstArg": 44,
    "NumAShrInst": 0,
    "NumAddInst": 8,
    "NumAllocaInst": 48,
    "NumAndInst": 16,
    "BlockMid": 9,
    "BlockLow": 49,
    "NumBitCastInst": 4,
    "NumBrInst": 54,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 41,
    "NumICmpInst": 25,
    "NumLShrInst": 0,
    "NumLoadInst": 120,
    "NumMulInst": 0,
    "NumOrInst": 5,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 7,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 78,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 15,
    "NumZExtInst": 9,
    "TotalBlocks": 58,
    "TotalInsts": 446,
    "TotalMemInst": 294,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 188
  },
  "baseline_oz_instcount": 448,
  "knowledge_base_entry": [
    "--gvn",
    "--instsimplify",
    "--early-cse-memssa",
    "--dse",
    "--bdce",
    "--gvn",
    "--instcombine"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--rewrite-statepoints-for-gc",
          "--speculative-execution",
          "--always-inline",
          "--coro-elide",
          "--slp-vectorizer",
          "--called-value-propagation",
          "--coro-split",
          "--constprop",
          "--partially-inline-libcalls",
          "--lcssa"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--rewrite-statepoints-for-gc",
      "--speculative-execution",
      "--always-inline",
      "--coro-elide",
      "--slp-vectorizer",
      "--called-value-propagation",
      "--coro-split",
      "--constprop",
      "--partially-inline-libcalls",
      "--lcssa"
    ],
    "performance_vs_Oz": "+0.4%"
  }
}
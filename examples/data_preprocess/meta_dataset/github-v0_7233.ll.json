{
  "program_id": "github-v0_7233.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 28,
    "onePredOneSuc": 15,
    "onePredTwoSuc": 12,
    "oneSuccessor": 28,
    "twoPred": 16,
    "twoPredOneSuc": 11,
    "twoEach": 1,
    "twoSuccessor": 18,
    "morePreds": 4,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 54,
    "BeginPhi": 0,
    "BranchCount": 46,
    "returnInt": 0,
    "CriticalCount": 18,
    "NumEdges": 74,
    "const32Bit": 390,
    "const64Bit": 47,
    "numConstZeroes": 216,
    "numConstOnes": 72,
    "UncondBranches": 28,
    "binaryConstArg": 22,
    "NumAShrInst": 1,
    "NumAddInst": 9,
    "NumAllocaInst": 15,
    "NumAndInst": 1,
    "BlockMid": 9,
    "BlockLow": 45,
    "NumBitCastInst": 10,
    "NumBrInst": 46,
    "NumCallInst": 11,
    "NumGetElementPtrInst": 185,
    "NumICmpInst": 14,
    "NumLShrInst": 0,
    "NumLoadInst": 171,
    "NumMulInst": 0,
    "NumOrInst": 8,
    "NumPHIInst": 0,
    "NumRetInst": 6,
    "NumSExtInst": 1,
    "NumSelectInst": 0,
    "NumShlInst": 7,
    "NumStoreInst": 65,
    "NumSubInst": 1,
    "NumTruncInst": 12,
    "NumXorInst": 0,
    "NumZExtInst": 23,
    "TotalBlocks": 54,
    "TotalInsts": 591,
    "TotalMemInst": 447,
    "TotalFuncs": 10,
    "ArgsPhi": 0,
    "testUnary": 233
  },
  "baseline_oz_instcount": 591,
  "knowledge_base_entry": [
    "--loop-fusion",
    "--newgvn",
    "--indvars",
    "--early-cse-memssa",
    "--gvn",
    "-loop-reduce",
    "--gvn-hoist",
    "--loop-deletion",
    "--gvn-hoist",
    "--loop-rotate",
    "--aggressive-instcombine",
    "--jump-threading",
    "--loop-deletion",
    "--gvn-hoist",
    "--loop-deletion",
    "--gvn-hoist",
    "--loop-rotate",
    "--aggressive-instcombine",
    "--sroa",
    "--slp-vectorizer",
    "--nary-reassociate",
    "--correlated-propagation"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--correlated-propagation",
          "--globalsplit",
          "--simple-loop-unswitch",
          "--insert-gcov-profiling",
          "--loop-rotate",
          "--partial-inliner",
          "--bdce",
          "--aggressive-instcombine",
          "--mergeicmps",
          "--barrier",
          "--lower-expect",
          "--mem2reg",
          "--lower-guard-intrinsic",
          "--loop-versioning",
          "--load-store-vectorizer",
          "--loop-load-elim",
          "--slp-vectorizer",
          "--forceattrs",
          "--elim-avail-extern",
          "--div-rem-pairs",
          "--rewrite-statepoints-for-gc",
          "--lcssa"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--correlated-propagation",
      "--globalsplit",
      "--simple-loop-unswitch",
      "--insert-gcov-profiling",
      "--loop-rotate",
      "--partial-inliner",
      "--bdce",
      "--aggressive-instcombine",
      "--mergeicmps",
      "--barrier",
      "--lower-expect",
      "--mem2reg",
      "--lower-guard-intrinsic",
      "--loop-versioning",
      "--load-store-vectorizer",
      "--loop-load-elim",
      "--slp-vectorizer",
      "--forceattrs",
      "--elim-avail-extern",
      "--div-rem-pairs",
      "--rewrite-statepoints-for-gc",
      "--lcssa"
    ],
    "performance_vs_Oz": "+0.2%"
  }
}
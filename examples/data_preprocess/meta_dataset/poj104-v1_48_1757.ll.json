{
  "program_id": "poj104-v1_48_1757.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 26,
    "onePredOneSuc": 21,
    "onePredTwoSuc": 2,
    "oneSuccessor": 24,
    "twoPred": 10,
    "twoPredOneSuc": 2,
    "twoEach": 7,
    "twoSuccessor": 11,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 46,
    "BeginPhi": 0,
    "BranchCount": 35,
    "returnInt": 3,
    "CriticalCount": 2,
    "NumEdges": 46,
    "const32Bit": 63,
    "const64Bit": 71,
    "numConstZeroes": 65,
    "numConstOnes": 44,
    "UncondBranches": 24,
    "binaryConstArg": 20,
    "NumAShrInst": 0,
    "NumAddInst": 22,
    "NumAllocaInst": 19,
    "NumAndInst": 0,
    "BlockMid": 4,
    "BlockLow": 42,
    "NumBitCastInst": 19,
    "NumBrInst": 35,
    "NumCallInst": 34,
    "NumGetElementPtrInst": 57,
    "NumICmpInst": 11,
    "NumLShrInst": 0,
    "NumLoadInst": 105,
    "NumMulInst": 1,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 10,
    "NumSExtInst": 47,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 39,
    "NumSubInst": 6,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 1,
    "TotalBlocks": 46,
    "TotalInsts": 407,
    "TotalMemInst": 254,
    "TotalFuncs": 23,
    "ArgsPhi": 0,
    "testUnary": 191
  },
  "baseline_oz_instcount": 260,
  "knowledge_base_entry": [
    "--mergefunc",
    "--dce",
    "--loop-simplifycfg",
    "--prune-eh",
    "--instcombine",
    "--licm",
    "--adce",
    "--early-cse-memssa",
    "--elim-avail-extern",
    "--gvn",
    "--lower-expect",
    "--bdce",
    "--gvn-hoist",
    "--instcombine",
    "--nary-reassociate",
    "--instsimplify",
    "--reassociate",
    "--load-store-vectorizer",
    "--dse",
    "--dce",
    "--mergefunc",
    "--instcombine",
    "--early-cse",
    "--slp-vectorizer",
    "--indvars",
    "--simplifycfg",
    "--mem2reg",
    "--slp-vectorizer",
    "--inline"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--mergereturn",
          "--post-inline-ee-instrument",
          "--partially-inline-libcalls",
          "--sroa",
          "--coro-early",
          "--simplifycfg",
          "--inferattrs",
          "--loop-rotate",
          "--globaldce",
          "--loop-versioning",
          "--loop-guard-widening",
          "--globalopt",
          "--instnamer",
          "--irce",
          "--elim-avail-extern",
          "--float2int",
          "--sancov",
          "--div-rem-pairs",
          "--scalarizer",
          "--sink",
          "--add-discriminators",
          "--loop-load-elim",
          "--gvn-hoist",
          "--mem2reg",
          "--dse",
          "--always-inline",
          "--slp-vectorizer",
          "--lower-widenable-condition",
          "--newgvn",
          "--adce"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+33.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--mergereturn",
      "--post-inline-ee-instrument",
      "--partially-inline-libcalls",
      "--sroa",
      "--coro-early",
      "--simplifycfg",
      "--inferattrs",
      "--loop-rotate",
      "--globaldce",
      "--loop-versioning",
      "--loop-guard-widening",
      "--globalopt",
      "--instnamer",
      "--irce",
      "--elim-avail-extern",
      "--float2int",
      "--sancov",
      "--div-rem-pairs",
      "--scalarizer",
      "--sink",
      "--add-discriminators",
      "--loop-load-elim",
      "--gvn-hoist",
      "--mem2reg",
      "--dse",
      "--always-inline",
      "--slp-vectorizer",
      "--lower-widenable-condition",
      "--newgvn",
      "--adce"
    ],
    "performance_vs_Oz": "+33.8%"
  }
}
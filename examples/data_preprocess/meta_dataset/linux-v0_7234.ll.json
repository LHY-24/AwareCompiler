{
  "program_id": "linux-v0_7234.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 77,
    "onePredOneSuc": 55,
    "onePredTwoSuc": 21,
    "oneSuccessor": 61,
    "twoPred": 6,
    "twoPredOneSuc": 3,
    "twoEach": 2,
    "twoSuccessor": 29,
    "morePreds": 11,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 110,
    "BeginPhi": 0,
    "BranchCount": 90,
    "returnInt": 26,
    "CriticalCount": 3,
    "NumEdges": 135,
    "const32Bit": 195,
    "const64Bit": 28,
    "numConstZeroes": 79,
    "numConstOnes": 77,
    "UncondBranches": 61,
    "binaryConstArg": 18,
    "NumAShrInst": 0,
    "NumAddInst": 3,
    "NumAllocaInst": 63,
    "NumAndInst": 4,
    "BlockMid": 4,
    "BlockLow": 106,
    "NumBitCastInst": 2,
    "NumBrInst": 90,
    "NumCallInst": 32,
    "NumGetElementPtrInst": 32,
    "NumICmpInst": 31,
    "NumLShrInst": 1,
    "NumLoadInst": 143,
    "NumMulInst": 1,
    "NumOrInst": 6,
    "NumPHIInst": 0,
    "NumRetInst": 16,
    "NumSExtInst": 7,
    "NumSelectInst": 2,
    "NumShlInst": 4,
    "NumStoreInst": 117,
    "NumSubInst": 2,
    "NumTruncInst": 12,
    "NumXorInst": 0,
    "NumZExtInst": 11,
    "TotalBlocks": 110,
    "TotalInsts": 584,
    "TotalMemInst": 387,
    "TotalFuncs": 33,
    "ArgsPhi": 0,
    "testUnary": 238
  },
  "baseline_oz_instcount": 584,
  "knowledge_base_entry": [
    "--lower-expect",
    "--loop-simplifycfg",
    "--instcombine",
    "-loop-reduce",
    "--early-cse",
    "--aggressive-instcombine",
    "--globaldce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--gvn",
          "--div-rem-pairs",
          "--loop-data-prefetch",
          "--consthoist",
          "--inferattrs",
          "--aggressive-instcombine",
          "--redundant-dbg-inst-elim",
          "--constprop",
          "--strip-nondebug",
          "--loop-distribute",
          "--lowerinvoke",
          "--strip-debug-declare",
          "--loop-instsimplify",
          "--hotcoldsplit",
          "--loop-interchange",
          "--pgo-memop-opt",
          "--loop-simplify",
          "--mergereturn",
          "--name-anon-globals",
          "--insert-gcov-profiling",
          "--loop-unroll-and-jam",
          "--partial-inliner",
          "--loop-rotate",
          "--add-discriminators",
          "--dce",
          "--attributor",
          "--slsr",
          "--coro-split",
          "--loop-simplifycfg",
          "--prune-eh"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--gvn",
      "--div-rem-pairs",
      "--loop-data-prefetch",
      "--consthoist",
      "--inferattrs",
      "--aggressive-instcombine",
      "--redundant-dbg-inst-elim",
      "--constprop",
      "--strip-nondebug",
      "--loop-distribute",
      "--lowerinvoke",
      "--strip-debug-declare",
      "--loop-instsimplify",
      "--hotcoldsplit",
      "--loop-interchange",
      "--pgo-memop-opt",
      "--loop-simplify",
      "--mergereturn",
      "--name-anon-globals",
      "--insert-gcov-profiling",
      "--loop-unroll-and-jam",
      "--partial-inliner",
      "--loop-rotate",
      "--add-discriminators",
      "--dce",
      "--attributor",
      "--slsr",
      "--coro-split",
      "--loop-simplifycfg",
      "--prune-eh"
    ],
    "performance_vs_Oz": "+0.7%"
  }
}
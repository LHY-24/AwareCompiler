{
  "program_id": "linux-v0_7719.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 68,
    "onePredOneSuc": 50,
    "onePredTwoSuc": 15,
    "oneSuccessor": 68,
    "twoPred": 21,
    "twoPredOneSuc": 11,
    "twoEach": 3,
    "twoSuccessor": 21,
    "morePreds": 4,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 111,
    "BeginPhi": 2,
    "BranchCount": 89,
    "returnInt": 23,
    "CriticalCount": 9,
    "NumEdges": 122,
    "const32Bit": 299,
    "const64Bit": 37,
    "numConstZeroes": 163,
    "numConstOnes": 131,
    "UncondBranches": 68,
    "binaryConstArg": 7,
    "NumAShrInst": 1,
    "NumAddInst": 1,
    "NumAllocaInst": 104,
    "NumAndInst": 2,
    "BlockMid": 15,
    "BlockLow": 98,
    "NumBitCastInst": 35,
    "NumBrInst": 89,
    "NumCallInst": 49,
    "NumGetElementPtrInst": 82,
    "NumICmpInst": 19,
    "NumLShrInst": 0,
    "NumLoadInst": 162,
    "NumMulInst": 0,
    "NumOrInst": 3,
    "NumPHIInst": 2,
    "NumRetInst": 20,
    "NumSExtInst": 5,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 129,
    "NumSubInst": 0,
    "NumTruncInst": 3,
    "NumXorInst": 0,
    "NumZExtInst": 10,
    "TotalBlocks": 113,
    "TotalInsts": 721,
    "TotalMemInst": 526,
    "TotalFuncs": 35,
    "ArgsPhi": 5,
    "testUnary": 320
  },
  "baseline_oz_instcount": 715,
  "knowledge_base_entry": [
    "-loop-reduce",
    "--nary-reassociate",
    "--load-store-vectorizer",
    "--loop-reroll",
    "--correlated-propagation",
    "--globalopt",
    "--reassociate",
    "--aggressive-instcombine",
    "--ipsccp",
    "--early-cse",
    "--sccp",
    "--lower-constant-intrinsics",
    "--licm",
    "--mem2reg",
    "--adce",
    "--instcombine",
    "--globalopt",
    "--aggressive-instcombine",
    "--ipsccp",
    "--early-cse",
    "--sccp",
    "--gvn",
    "--memcpyopt"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--coro-early",
          "--licm",
          "--slsr",
          "--strip",
          "--indvars",
          "--lower-matrix-intrinsics",
          "--mem2reg",
          "--strip-nondebug",
          "--slp-vectorizer",
          "--hotcoldsplit",
          "--constmerge",
          "-loop-reduce",
          "--loop-unroll",
          "--instnamer",
          "--loop-rotate",
          "--loop-predication",
          "--loop-load-elim",
          "--instsimplify",
          "--globalopt",
          "--elim-avail-extern",
          "--partially-inline-libcalls",
          "--correlated-propagation",
          "--deadargelim",
          "--sancov",
          "--dce",
          "--aggressive-instcombine",
          "--barrier",
          "--post-inline-ee-instrument"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--coro-early",
      "--licm",
      "--slsr",
      "--strip",
      "--indvars",
      "--lower-matrix-intrinsics",
      "--mem2reg",
      "--strip-nondebug",
      "--slp-vectorizer",
      "--hotcoldsplit",
      "--constmerge",
      "-loop-reduce",
      "--loop-unroll",
      "--instnamer",
      "--loop-rotate",
      "--loop-predication",
      "--loop-load-elim",
      "--instsimplify",
      "--globalopt",
      "--elim-avail-extern",
      "--partially-inline-libcalls",
      "--correlated-propagation",
      "--deadargelim",
      "--sancov",
      "--dce",
      "--aggressive-instcombine",
      "--barrier",
      "--post-inline-ee-instrument"
    ],
    "performance_vs_Oz": "+0.6%"
  }
}
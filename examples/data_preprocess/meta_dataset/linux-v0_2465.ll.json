{
  "program_id": "linux-v0_2465.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 40,
    "onePredOneSuc": 21,
    "onePredTwoSuc": 17,
    "oneSuccessor": 40,
    "twoPred": 21,
    "twoPredOneSuc": 18,
    "twoEach": 2,
    "twoSuccessor": 22,
    "morePreds": 3,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 76,
    "BeginPhi": 0,
    "BranchCount": 61,
    "returnInt": 5,
    "CriticalCount": 22,
    "NumEdges": 94,
    "const32Bit": 165,
    "const64Bit": 14,
    "numConstZeroes": 63,
    "numConstOnes": 54,
    "UncondBranches": 40,
    "binaryConstArg": 24,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 38,
    "NumAndInst": 14,
    "BlockMid": 3,
    "BlockLow": 73,
    "NumBitCastInst": 0,
    "NumBrInst": 61,
    "NumCallInst": 18,
    "NumGetElementPtrInst": 44,
    "NumICmpInst": 24,
    "NumLShrInst": 3,
    "NumLoadInst": 116,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 12,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 56,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 7,
    "NumZExtInst": 13,
    "TotalBlocks": 76,
    "TotalInsts": 415,
    "TotalMemInst": 272,
    "TotalFuncs": 18,
    "ArgsPhi": 0,
    "testUnary": 172
  },
  "baseline_oz_instcount": 417,
  "knowledge_base_entry": [
    "--hotcoldsplit",
    "--mergefunc",
    "--correlated-propagation",
    "--slp-vectorizer",
    "--load-store-vectorizer",
    "--mldst-motion",
    "--jump-threading",
    "--slsr",
    "--gvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--memcpyopt",
          "--load-store-vectorizer",
          "--always-inline",
          "--flattencfg",
          "--argpromotion",
          "--lower-constant-intrinsics",
          "--tailcallelim",
          "--instsimplify",
          "--slp-vectorizer",
          "--barrier",
          "--speculative-execution",
          "--called-value-propagation",
          "--coro-elide",
          "--simplifycfg",
          "--globalsplit"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--memcpyopt",
      "--load-store-vectorizer",
      "--always-inline",
      "--flattencfg",
      "--argpromotion",
      "--lower-constant-intrinsics",
      "--tailcallelim",
      "--instsimplify",
      "--slp-vectorizer",
      "--barrier",
      "--speculative-execution",
      "--called-value-propagation",
      "--coro-elide",
      "--simplifycfg",
      "--globalsplit"
    ],
    "performance_vs_Oz": "+0.5%"
  }
}
{
  "program_id": "github-v0_27253.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 80,
    "onePredOneSuc": 44,
    "onePredTwoSuc": 35,
    "oneSuccessor": 59,
    "twoPred": 27,
    "twoPredOneSuc": 8,
    "twoEach": 12,
    "twoSuccessor": 58,
    "morePreds": 10,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 128,
    "BeginPhi": 2,
    "BranchCount": 117,
    "returnInt": 6,
    "CriticalCount": 40,
    "NumEdges": 175,
    "const32Bit": 440,
    "const64Bit": 7,
    "numConstZeroes": 206,
    "numConstOnes": 96,
    "UncondBranches": 59,
    "binaryConstArg": 18,
    "NumAShrInst": 0,
    "NumAddInst": 9,
    "NumAllocaInst": 58,
    "NumAndInst": 2,
    "BlockMid": 20,
    "BlockLow": 110,
    "NumBitCastInst": 10,
    "NumBrInst": 117,
    "NumCallInst": 28,
    "NumGetElementPtrInst": 177,
    "NumICmpInst": 58,
    "NumLShrInst": 0,
    "NumLoadInst": 346,
    "NumMulInst": 2,
    "NumOrInst": 0,
    "NumPHIInst": 2,
    "NumRetInst": 13,
    "NumSExtInst": 7,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 111,
    "NumSubInst": 9,
    "NumTruncInst": 1,
    "NumXorInst": 0,
    "NumZExtInst": 8,
    "TotalBlocks": 130,
    "TotalInsts": 961,
    "TotalMemInst": 720,
    "TotalFuncs": 20,
    "ArgsPhi": 4,
    "testUnary": 432
  },
  "baseline_oz_instcount": 963,
  "knowledge_base_entry": [
    "--ipsccp",
    "--globalopt",
    "--reassociate",
    "--early-cse",
    "--correlated-propagation",
    "--die",
    "--sccp",
    "--early-cse-memssa",
    "--instcombine",
    "--early-cse-memssa",
    "--nary-reassociate",
    "--gvn-hoist",
    "--elim-avail-extern",
    "--load-store-vectorizer",
    "--instcombine",
    "--sccp"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--memcpyopt",
          "--canonicalize-aliases",
          "--constmerge",
          "--loop-distribute",
          "--partially-inline-libcalls",
          "--inferattrs",
          "--pgo-memop-opt",
          "--partial-inliner",
          "--consthoist",
          "--loop-data-prefetch",
          "--inline",
          "--guard-widening",
          "--sancov",
          "--lowerswitch",
          "--coro-elide",
          "--slsr",
          "--instcombine",
          "--barrier",
          "--globalsplit",
          "--add-discriminators",
          "--called-value-propagation"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--memcpyopt",
      "--canonicalize-aliases",
      "--constmerge",
      "--loop-distribute",
      "--partially-inline-libcalls",
      "--inferattrs",
      "--pgo-memop-opt",
      "--partial-inliner",
      "--consthoist",
      "--loop-data-prefetch",
      "--inline",
      "--guard-widening",
      "--sancov",
      "--lowerswitch",
      "--coro-elide",
      "--slsr",
      "--instcombine",
      "--barrier",
      "--globalsplit",
      "--add-discriminators",
      "--called-value-propagation"
    ],
    "performance_vs_Oz": "+0.2%"
  }
}
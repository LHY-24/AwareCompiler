{
  "program_id": "linux-v0_11487.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 14,
    "onePredOneSuc": 10,
    "onePredTwoSuc": 2,
    "oneSuccessor": 11,
    "twoPred": 4,
    "twoPredOneSuc": 0,
    "twoEach": 2,
    "twoSuccessor": 7,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 27,
    "BeginPhi": 0,
    "BranchCount": 18,
    "returnInt": 9,
    "CriticalCount": 1,
    "NumEdges": 25,
    "const32Bit": 50,
    "const64Bit": 2,
    "numConstZeroes": 22,
    "numConstOnes": 17,
    "UncondBranches": 11,
    "binaryConstArg": 2,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 16,
    "NumAndInst": 1,
    "BlockMid": 2,
    "BlockLow": 25,
    "NumBitCastInst": 2,
    "NumBrInst": 18,
    "NumCallInst": 19,
    "NumGetElementPtrInst": 8,
    "NumICmpInst": 6,
    "NumLShrInst": 0,
    "NumLoadInst": 30,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 8,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 25,
    "NumSubInst": 0,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 1,
    "TotalBlocks": 27,
    "TotalInsts": 138,
    "TotalMemInst": 98,
    "TotalFuncs": 31,
    "ArgsPhi": 0,
    "testUnary": 51
  },
  "baseline_oz_instcount": 139,
  "knowledge_base_entry": [
    "--instsimplify",
    "--globalopt",
    "--aggressive-instcombine",
    "--newgvn",
    "--loop-instsimplify",
    "--bdce",
    "--reassociate",
    "--loop-simplifycfg",
    "--gvn-hoist",
    "--gvn",
    "--loop-instsimplify",
    "--load-store-vectorizer",
    "--mem2reg",
    "--globalopt",
    "--flattencfg",
    "--simplifycfg",
    "--mldst-motion",
    "--licm"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--partially-inline-libcalls",
          "--float2int",
          "--consthoist",
          "--sccp",
          "--instcombine",
          "--loop-interchange",
          "--loop-unroll",
          "--mergeicmps",
          "--partial-inliner",
          "--coro-cleanup",
          "--licm",
          "--gvn",
          "--globalopt",
          "--loop-unroll-and-jam",
          "--loop-guard-widening",
          "--loop-simplifycfg",
          "--jump-threading",
          "--correlated-propagation",
          "--slp-vectorizer",
          "--slsr",
          "--newgvn",
          "--reassociate",
          "--die",
          "--sink",
          "--separate-const-offset-from-gep",
          "--aggressive-instcombine",
          "--add-discriminators",
          "--post-inline-ee-instrument"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--partially-inline-libcalls",
      "--float2int",
      "--consthoist",
      "--sccp",
      "--instcombine",
      "--loop-interchange",
      "--loop-unroll",
      "--mergeicmps",
      "--partial-inliner",
      "--coro-cleanup",
      "--licm",
      "--gvn",
      "--globalopt",
      "--loop-unroll-and-jam",
      "--loop-guard-widening",
      "--loop-simplifycfg",
      "--jump-threading",
      "--correlated-propagation",
      "--slp-vectorizer",
      "--slsr",
      "--newgvn",
      "--reassociate",
      "--die",
      "--sink",
      "--separate-const-offset-from-gep",
      "--aggressive-instcombine",
      "--add-discriminators",
      "--post-inline-ee-instrument"
    ],
    "performance_vs_Oz": "+2.9%"
  }
}
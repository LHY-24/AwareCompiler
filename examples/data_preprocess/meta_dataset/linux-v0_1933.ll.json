{
  "program_id": "linux-v0_1933.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 18,
    "onePredOneSuc": 12,
    "onePredTwoSuc": 6,
    "oneSuccessor": 17,
    "twoPred": 9,
    "twoPredOneSuc": 3,
    "twoEach": 5,
    "twoSuccessor": 11,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 34,
    "BeginPhi": 0,
    "BranchCount": 28,
    "returnInt": 2,
    "CriticalCount": 7,
    "NumEdges": 39,
    "const32Bit": 90,
    "const64Bit": 10,
    "numConstZeroes": 47,
    "numConstOnes": 32,
    "UncondBranches": 17,
    "binaryConstArg": 8,
    "NumAShrInst": 0,
    "NumAddInst": 4,
    "NumAllocaInst": 25,
    "NumAndInst": 5,
    "BlockMid": 4,
    "BlockLow": 30,
    "NumBitCastInst": 12,
    "NumBrInst": 28,
    "NumCallInst": 19,
    "NumGetElementPtrInst": 31,
    "NumICmpInst": 12,
    "NumLShrInst": 0,
    "NumLoadInst": 83,
    "NumMulInst": 0,
    "NumOrInst": 2,
    "NumPHIInst": 0,
    "NumRetInst": 6,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 40,
    "NumSubInst": 2,
    "NumTruncInst": 4,
    "NumXorInst": 0,
    "NumZExtInst": 12,
    "TotalBlocks": 34,
    "TotalInsts": 288,
    "TotalMemInst": 198,
    "TotalFuncs": 14,
    "ArgsPhi": 0,
    "testUnary": 138
  },
  "baseline_oz_instcount": 288,
  "knowledge_base_entry": [
    "--float2int",
    "--early-cse",
    "--simplifycfg",
    "--globalopt",
    "--globaldce",
    "--ipsccp",
    "--early-cse",
    "--nary-reassociate",
    "--jump-threading",
    "--aggressive-instcombine",
    "--newgvn",
    "--simplifycfg",
    "--mergefunc",
    "--licm",
    "--instsimplify",
    "--loop-rotate",
    "--elim-avail-extern",
    "--lower-constant-intrinsics",
    "--gvn",
    "--early-cse-memssa",
    "-loop-reduce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--sancov",
          "--div-rem-pairs",
          "--scalarizer",
          "--newgvn",
          "--always-inline",
          "--sink",
          "--mergereturn",
          "--loop-guard-widening",
          "--lower-widenable-condition",
          "--loop-versioning-licm",
          "--simple-loop-unswitch",
          "--reassociate",
          "--mldst-motion",
          "--tailcallelim",
          "--lower-expect",
          "--instnamer",
          "--loop-unswitch",
          "--sroa",
          "--loop-idiom",
          "--strip-debug-declare",
          "--correlated-propagation",
          "--loop-deletion",
          "--instsimplify",
          "--aggressive-instcombine",
          "--mergeicmps",
          "--inferattrs"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.0%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--sancov",
      "--div-rem-pairs",
      "--scalarizer",
      "--newgvn",
      "--always-inline",
      "--sink",
      "--mergereturn",
      "--loop-guard-widening",
      "--lower-widenable-condition",
      "--loop-versioning-licm",
      "--simple-loop-unswitch",
      "--reassociate",
      "--mldst-motion",
      "--tailcallelim",
      "--lower-expect",
      "--instnamer",
      "--loop-unswitch",
      "--sroa",
      "--loop-idiom",
      "--strip-debug-declare",
      "--correlated-propagation",
      "--loop-deletion",
      "--instsimplify",
      "--aggressive-instcombine",
      "--mergeicmps",
      "--inferattrs"
    ],
    "performance_vs_Oz": "+1.0%"
  }
}
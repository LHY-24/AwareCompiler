{
  "program_id": "github-v0_18635.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 13,
    "onePredOneSuc": 8,
    "onePredTwoSuc": 2,
    "oneSuccessor": 11,
    "twoPred": 5,
    "twoPredOneSuc": 2,
    "twoEach": 3,
    "twoSuccessor": 6,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 21,
    "BeginPhi": 0,
    "BranchCount": 17,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 23,
    "const32Bit": 39,
    "const64Bit": 39,
    "numConstZeroes": 40,
    "numConstOnes": 24,
    "UncondBranches": 11,
    "binaryConstArg": 20,
    "NumAShrInst": 3,
    "NumAddInst": 5,
    "NumAllocaInst": 12,
    "NumAndInst": 5,
    "BlockMid": 5,
    "BlockLow": 16,
    "NumBitCastInst": 0,
    "NumBrInst": 17,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 23,
    "NumICmpInst": 6,
    "NumLShrInst": 0,
    "NumLoadInst": 36,
    "NumMulInst": 1,
    "NumOrInst": 6,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 5,
    "NumSelectInst": 0,
    "NumShlInst": 4,
    "NumStoreInst": 19,
    "NumSubInst": 1,
    "NumTruncInst": 9,
    "NumXorInst": 1,
    "NumZExtInst": 20,
    "TotalBlocks": 21,
    "TotalInsts": 184,
    "TotalMemInst": 97,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 82
  },
  "baseline_oz_instcount": 184,
  "knowledge_base_entry": [
    "--irce",
    "--gvn-hoist",
    "--mergefunc",
    "--mergefunc",
    "--ipsccp",
    "--flattencfg",
    "--licm",
    "--dce",
    "--newgvn",
    "--prune-eh",
    "--reassociate",
    "--aggressive-instcombine",
    "--inline",
    "--memcpyopt",
    "--mem2reg",
    "--mergefunc",
    "--bdce",
    "--loop-instsimplify",
    "--dse",
    "--instcombine",
    "--correlated-propagation",
    "--ipsccp"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--constmerge",
          "--strip-nondebug",
          "--loop-guard-widening",
          "--infer-address-spaces",
          "--lowerinvoke",
          "--sccp",
          "--partially-inline-libcalls",
          "--always-inline",
          "--callsite-splitting",
          "--argpromotion",
          "--sroa",
          "--loop-simplify",
          "--called-value-propagation",
          "--aggressive-instcombine",
          "--correlated-propagation",
          "--partial-inliner",
          "--speculative-execution",
          "--forceattrs",
          "--coro-early",
          "--jump-threading",
          "--slsr",
          "--gvn"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+4.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--constmerge",
      "--strip-nondebug",
      "--loop-guard-widening",
      "--infer-address-spaces",
      "--lowerinvoke",
      "--sccp",
      "--partially-inline-libcalls",
      "--always-inline",
      "--callsite-splitting",
      "--argpromotion",
      "--sroa",
      "--loop-simplify",
      "--called-value-propagation",
      "--aggressive-instcombine",
      "--correlated-propagation",
      "--partial-inliner",
      "--speculative-execution",
      "--forceattrs",
      "--coro-early",
      "--jump-threading",
      "--slsr",
      "--gvn"
    ],
    "performance_vs_Oz": "+4.3%"
  }
}
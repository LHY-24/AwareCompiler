{
  "program_id": "linux-v0_5915.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 52,
    "onePredOneSuc": 38,
    "onePredTwoSuc": 11,
    "oneSuccessor": 50,
    "twoPred": 16,
    "twoPredOneSuc": 8,
    "twoEach": 1,
    "twoSuccessor": 20,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 97,
    "BeginPhi": 0,
    "BranchCount": 68,
    "returnInt": 7,
    "CriticalCount": 9,
    "NumEdges": 90,
    "const32Bit": 309,
    "const64Bit": 20,
    "numConstZeroes": 134,
    "numConstOnes": 129,
    "UncondBranches": 50,
    "binaryConstArg": 21,
    "NumAShrInst": 0,
    "NumAddInst": 12,
    "NumAllocaInst": 94,
    "NumAndInst": 6,
    "BlockMid": 18,
    "BlockLow": 79,
    "NumBitCastInst": 19,
    "NumBrInst": 68,
    "NumCallInst": 47,
    "NumGetElementPtrInst": 93,
    "NumICmpInst": 20,
    "NumLShrInst": 2,
    "NumLoadInst": 199,
    "NumMulInst": 0,
    "NumOrInst": 3,
    "NumPHIInst": 0,
    "NumRetInst": 27,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 143,
    "NumSubInst": 0,
    "NumTruncInst": 2,
    "NumXorInst": 6,
    "NumZExtInst": 11,
    "TotalBlocks": 97,
    "TotalInsts": 761,
    "TotalMemInst": 576,
    "TotalFuncs": 44,
    "ArgsPhi": 0,
    "testUnary": 332
  },
  "baseline_oz_instcount": 763,
  "knowledge_base_entry": [
    "--early-cse-memssa",
    "--lower-constant-intrinsics",
    "--reassociate",
    "--mergefunc",
    "--die",
    "--early-cse-memssa",
    "--dce",
    "--simplifycfg",
    "--adce",
    "--simplifycfg",
    "--flattencfg",
    "--ipsccp",
    "--loop-simplifycfg",
    "--slsr",
    "--jump-threading",
    "--mem2reg",
    "--gvn",
    "-loop-reduce",
    "--reassociate",
    "--simplifycfg",
    "--loop-rotate",
    "--elim-avail-extern",
    "--aggressive-instcombine",
    "--mergefunc",
    "--memcpyopt",
    "--inline",
    "--memcpyopt",
    "--mem2reg",
    "--sccp"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--hotcoldsplit",
          "--float2int",
          "--redundant-dbg-inst-elim",
          "--mergefunc",
          "--inline",
          "--nary-reassociate",
          "--slsr",
          "--dse",
          "--aggressive-instcombine",
          "--strip",
          "--instcombine",
          "--loop-distribute",
          "--consthoist",
          "--loop-simplifycfg",
          "--sroa",
          "--partially-inline-libcalls",
          "--loop-unroll",
          "--simple-loop-unswitch",
          "--cross-dso-cfi",
          "--slp-vectorizer"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--hotcoldsplit",
      "--float2int",
      "--redundant-dbg-inst-elim",
      "--mergefunc",
      "--inline",
      "--nary-reassociate",
      "--slsr",
      "--dse",
      "--aggressive-instcombine",
      "--strip",
      "--instcombine",
      "--loop-distribute",
      "--consthoist",
      "--loop-simplifycfg",
      "--sroa",
      "--partially-inline-libcalls",
      "--loop-unroll",
      "--simple-loop-unswitch",
      "--cross-dso-cfi",
      "--slp-vectorizer"
    ],
    "performance_vs_Oz": "+1.2%"
  }
}
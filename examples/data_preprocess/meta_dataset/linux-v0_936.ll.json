{
  "program_id": "linux-v0_936.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 4,
    "onePred": 50,
    "onePredOneSuc": 37,
    "onePredTwoSuc": 13,
    "oneSuccessor": 42,
    "twoPred": 14,
    "twoPredOneSuc": 5,
    "twoEach": 5,
    "twoSuccessor": 24,
    "morePreds": 3,
    "BB03Phi": 4,
    "BBHiPhi": 0,
    "BBNoPhi": 88,
    "BeginPhi": 4,
    "BranchCount": 66,
    "returnInt": 13,
    "CriticalCount": 8,
    "NumEdges": 94,
    "const32Bit": 197,
    "const64Bit": 9,
    "numConstZeroes": 65,
    "numConstOnes": 98,
    "UncondBranches": 42,
    "binaryConstArg": 17,
    "NumAShrInst": 1,
    "NumAddInst": 2,
    "NumAllocaInst": 83,
    "NumAndInst": 6,
    "BlockMid": 11,
    "BlockLow": 81,
    "NumBitCastInst": 5,
    "NumBrInst": 66,
    "NumCallInst": 45,
    "NumGetElementPtrInst": 33,
    "NumICmpInst": 26,
    "NumLShrInst": 0,
    "NumLoadInst": 164,
    "NumMulInst": 0,
    "NumOrInst": 2,
    "NumPHIInst": 4,
    "NumRetInst": 25,
    "NumSExtInst": 13,
    "NumSelectInst": 2,
    "NumShlInst": 1,
    "NumStoreInst": 112,
    "NumSubInst": 0,
    "NumTruncInst": 13,
    "NumXorInst": 7,
    "NumZExtInst": 14,
    "TotalBlocks": 92,
    "TotalInsts": 631,
    "TotalMemInst": 437,
    "TotalFuncs": 51,
    "ArgsPhi": 8,
    "testUnary": 298
  },
  "baseline_oz_instcount": 631,
  "knowledge_base_entry": [
    "--loop-simplifycfg",
    "--slsr",
    "--instcombine",
    "--load-store-vectorizer",
    "--sroa",
    "--lower-expect",
    "--bdce",
    "--aggressive-instcombine",
    "--lower-constant-intrinsics",
    "--newgvn",
    "--reassociate",
    "-loop-reduce",
    "--instcombine",
    "--simplifycfg",
    "--loop-rotate",
    "--jump-threading",
    "--adce",
    "--mergefunc",
    "--flattencfg",
    "--globalopt"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--licm",
          "--gvn",
          "--dse",
          "--simple-loop-unswitch",
          "--globalopt",
          "--adce",
          "--always-inline",
          "--coro-elide",
          "--mldst-motion",
          "--infer-address-spaces",
          "--aggressive-instcombine",
          "--loop-simplify",
          "--reassociate",
          "--lower-widenable-condition",
          "--lower-expect",
          "--loop-instsimplify",
          "--sink",
          "--argpromotion",
          "--mergereturn",
          "--consthoist",
          "--slsr",
          "--sccp",
          "--forceattrs",
          "--mergefunc",
          "--loop-data-prefetch",
          "--loop-simplifycfg",
          "--nary-reassociate",
          "--deadargelim"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--licm",
      "--gvn",
      "--dse",
      "--simple-loop-unswitch",
      "--globalopt",
      "--adce",
      "--always-inline",
      "--coro-elide",
      "--mldst-motion",
      "--infer-address-spaces",
      "--aggressive-instcombine",
      "--loop-simplify",
      "--reassociate",
      "--lower-widenable-condition",
      "--lower-expect",
      "--loop-instsimplify",
      "--sink",
      "--argpromotion",
      "--mergereturn",
      "--consthoist",
      "--slsr",
      "--sccp",
      "--forceattrs",
      "--mergefunc",
      "--loop-data-prefetch",
      "--loop-simplifycfg",
      "--nary-reassociate",
      "--deadargelim"
    ],
    "performance_vs_Oz": "+0.2%"
  }
}
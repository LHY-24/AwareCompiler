{
  "program_id": "poj104-v1_73_2037.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 21,
    "onePredOneSuc": 17,
    "onePredTwoSuc": 4,
    "oneSuccessor": 21,
    "twoPred": 10,
    "twoPredOneSuc": 3,
    "twoEach": 5,
    "twoSuccessor": 10,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 40,
    "BeginPhi": 0,
    "BranchCount": 31,
    "returnInt": 5,
    "CriticalCount": 4,
    "NumEdges": 41,
    "const32Bit": 53,
    "const64Bit": 32,
    "numConstZeroes": 30,
    "numConstOnes": 31,
    "UncondBranches": 21,
    "binaryConstArg": 9,
    "NumAShrInst": 0,
    "NumAddInst": 9,
    "NumAllocaInst": 19,
    "NumAndInst": 0,
    "BlockMid": 3,
    "BlockLow": 37,
    "NumBitCastInst": 22,
    "NumBrInst": 31,
    "NumCallInst": 35,
    "NumGetElementPtrInst": 15,
    "NumICmpInst": 10,
    "NumLShrInst": 0,
    "NumLoadInst": 53,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 9,
    "NumSExtInst": 11,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 36,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 40,
    "TotalInsts": 251,
    "TotalMemInst": 158,
    "TotalFuncs": 20,
    "ArgsPhi": 0,
    "testUnary": 105
  },
  "baseline_oz_instcount": 132,
  "knowledge_base_entry": [
    "--ipconstprop",
    "--newgvn",
    "--ipsccp",
    "--instsimplify",
    "--instcombine",
    "--elim-avail-extern",
    "--inline",
    "--nary-reassociate",
    "--indvars",
    "--newgvn",
    "--sccp",
    "--sroa",
    "--reassociate",
    "--dse",
    "--bdce",
    "--mem2reg",
    "--gvn",
    "--nary-reassociate",
    "--slsr",
    "--jump-threading",
    "--simplifycfg",
    "--dse",
    "--loop-simplifycfg",
    "--load-store-vectorizer",
    "--elim-avail-extern",
    "--gvn",
    "--sccp",
    "--mem2reg",
    "--bdce",
    "--loop-instsimplify",
    "--aggressive-instcombine",
    "--instcombine",
    "--lower-expect",
    "--instcombine",
    "--mem2reg",
    "--instcombine",
    "--loop-rotate",
    "--sroa",
    "--mergefunc",
    "--elim-avail-extern",
    "--aggressive-instcombine",
    "--lower-constant-intrinsics",
    "--gvn",
    "--inline",
    "--instcombine",
    "--dce",
    "--lower-expect",
    "--mem2reg",
    "--bdce",
    "--loop-instsimplify",
    "--gvn",
    "--slsr",
    "--indvars",
    "--slp-vectorizer",
    "--lower-expect",
    "--gvn-hoist",
    "--instcombine",
    "--dce",
    "--lower-expect",
    "--mem2reg",
    "--inline",
    "--loop-instsimplify",
    "--aggressive-instcombine",
    "--instcombine",
    "--lower-expect",
    "--instcombine",
    "--mem2reg",
    "--instcombine",
    "--loop-rotate",
    "--sroa",
    "--loop-simplifycfg",
    "--nary-reassociate",
    "--correlated-propagation",
    "--dce",
    "--lower-expect",
    "--ipsccp",
    "--early-cse",
    "--lower-expect",
    "--instcombine",
    "--mem2reg",
    "--instcombine",
    "--loop-rotate",
    "--sroa",
    "--mergefunc",
    "--elim-avail-extern",
    "--aggressive-instcombine",
    "--instcombine",
    "--lower-expect",
    "--instcombine",
    "--mem2reg",
    "--instcombine",
    "--loop-rotate",
    "--sroa",
    "--mergefunc",
    "--elim-avail-extern",
    "--aggressive-instcombine",
    "--lower-constant-intrinsics",
    "--gvn",
    "--inline",
    "--instcombine",
    "--dce",
    "--simplifycfg",
    "--gvn-hoist"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--globalopt",
          "--dse",
          "--loop-fusion",
          "--sancov",
          "--loop-versioning-licm",
          "--partial-inliner",
          "--constprop",
          "--add-discriminators",
          "--loop-simplifycfg",
          "--ipsccp",
          "--nary-reassociate",
          "--lower-constant-intrinsics",
          "--barrier",
          "--flattencfg",
          "--deadargelim",
          "--ipconstprop",
          "--loop-distribute",
          "--sroa",
          "--ee-instrument",
          "--alignment-from-assumptions",
          "--slp-vectorizer",
          "--called-value-propagation",
          "--loop-vectorize",
          "--sccp",
          "--correlated-propagation",
          "--loop-load-elim",
          "--elim-avail-extern",
          "--gvn-hoist",
          "--tailcallelim"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+18.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--globalopt",
      "--dse",
      "--loop-fusion",
      "--sancov",
      "--loop-versioning-licm",
      "--partial-inliner",
      "--constprop",
      "--add-discriminators",
      "--loop-simplifycfg",
      "--ipsccp",
      "--nary-reassociate",
      "--lower-constant-intrinsics",
      "--barrier",
      "--flattencfg",
      "--deadargelim",
      "--ipconstprop",
      "--loop-distribute",
      "--sroa",
      "--ee-instrument",
      "--alignment-from-assumptions",
      "--slp-vectorizer",
      "--called-value-propagation",
      "--loop-vectorize",
      "--sccp",
      "--correlated-propagation",
      "--loop-load-elim",
      "--elim-avail-extern",
      "--gvn-hoist",
      "--tailcallelim"
    ],
    "performance_vs_Oz": "+18.9%"
  }
}
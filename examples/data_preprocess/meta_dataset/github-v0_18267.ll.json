{
  "program_id": "github-v0_18267.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 57,
    "onePredOneSuc": 38,
    "onePredTwoSuc": 15,
    "oneSuccessor": 47,
    "twoPred": 25,
    "twoPredOneSuc": 8,
    "twoEach": 11,
    "twoSuccessor": 35,
    "morePreds": 4,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 118,
    "BeginPhi": 0,
    "BranchCount": 82,
    "returnInt": 99,
    "CriticalCount": 22,
    "NumEdges": 123,
    "const32Bit": 244,
    "const64Bit": 3,
    "numConstZeroes": 111,
    "numConstOnes": 60,
    "UncondBranches": 47,
    "binaryConstArg": 18,
    "NumAShrInst": 1,
    "NumAddInst": 15,
    "NumAllocaInst": 46,
    "NumAndInst": 0,
    "BlockMid": 18,
    "BlockLow": 100,
    "NumBitCastInst": 2,
    "NumBrInst": 82,
    "NumCallInst": 127,
    "NumGetElementPtrInst": 66,
    "NumICmpInst": 35,
    "NumLShrInst": 0,
    "NumLoadInst": 205,
    "NumMulInst": 10,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 31,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 90,
    "NumSubInst": 7,
    "NumTruncInst": 26,
    "NumXorInst": 1,
    "NumZExtInst": 104,
    "TotalBlocks": 118,
    "TotalInsts": 862,
    "TotalMemInst": 534,
    "TotalFuncs": 43,
    "ArgsPhi": 0,
    "testUnary": 383
  },
  "baseline_oz_instcount": 865,
  "knowledge_base_entry": [
    "--prune-eh",
    "--early-cse",
    "--flattencfg",
    "--early-cse-memssa",
    "--load-store-vectorizer",
    "--mem2reg",
    "--inline",
    "--adce",
    "--sccp",
    "--elim-avail-extern",
    "--inline",
    "--memcpyopt",
    "--early-cse-memssa",
    "--lower-constant-intrinsics",
    "--prune-eh",
    "--early-cse",
    "--ipsccp",
    "--mergefunc",
    "--gvn",
    "--inline",
    "--die",
    "--aggressive-instcombine",
    "--flattencfg",
    "--simplifycfg",
    "--elim-avail-extern",
    "--simplifycfg",
    "--bdce",
    "--sroa"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--ipsccp",
          "--aggressive-instcombine",
          "--strip",
          "--lower-constant-intrinsics",
          "--loop-unroll",
          "--lowerinvoke",
          "--guard-widening",
          "--consthoist",
          "--coro-elide",
          "--slp-vectorizer",
          "--redundant-dbg-inst-elim",
          "--argpromotion",
          "--sccp"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+5.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--ipsccp",
      "--aggressive-instcombine",
      "--strip",
      "--lower-constant-intrinsics",
      "--loop-unroll",
      "--lowerinvoke",
      "--guard-widening",
      "--consthoist",
      "--coro-elide",
      "--slp-vectorizer",
      "--redundant-dbg-inst-elim",
      "--argpromotion",
      "--sccp"
    ],
    "performance_vs_Oz": "+5.5%"
  }
}
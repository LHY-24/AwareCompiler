{
  "program_id": "linux-v0_1513.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 33,
    "onePredOneSuc": 28,
    "onePredTwoSuc": 1,
    "oneSuccessor": 30,
    "twoPred": 5,
    "twoPredOneSuc": 0,
    "twoEach": 1,
    "twoSuccessor": 6,
    "morePreds": 3,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 59,
    "BeginPhi": 0,
    "BranchCount": 36,
    "returnInt": 6,
    "CriticalCount": 2,
    "NumEdges": 62,
    "const32Bit": 208,
    "const64Bit": 20,
    "numConstZeroes": 98,
    "numConstOnes": 74,
    "UncondBranches": 30,
    "binaryConstArg": 4,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 55,
    "NumAndInst": 0,
    "BlockMid": 8,
    "BlockLow": 51,
    "NumBitCastInst": 26,
    "NumBrInst": 36,
    "NumCallInst": 34,
    "NumGetElementPtrInst": 65,
    "NumICmpInst": 5,
    "NumLShrInst": 0,
    "NumLoadInst": 141,
    "NumMulInst": 0,
    "NumOrInst": 3,
    "NumPHIInst": 0,
    "NumRetInst": 18,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 97,
    "NumSubInst": 0,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 5,
    "TotalBlocks": 59,
    "TotalInsts": 497,
    "TotalMemInst": 392,
    "TotalFuncs": 28,
    "ArgsPhi": 0,
    "testUnary": 231
  },
  "baseline_oz_instcount": 496,
  "knowledge_base_entry": [
    "--ipconstprop",
    "--licm",
    "--early-cse",
    "--loop-rotate",
    "--instcombine",
    "--nary-reassociate",
    "--ipsccp",
    "--mergefunc",
    "--globalopt",
    "--licm",
    "--mldst-motion",
    "--instsimplify",
    "--inline",
    "--aggressive-instcombine",
    "--early-cse-memssa",
    "--gvn",
    "--loop-deletion",
    "--mem2reg",
    "--prune-eh",
    "--aggressive-instcombine",
    "--lower-constant-intrinsics",
    "--slp-vectorizer",
    "--dce",
    "--sccp",
    "--jump-threading"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--correlated-propagation",
          "--jump-threading",
          "--float2int",
          "--sancov",
          "--globalopt",
          "--scalarizer",
          "--sccp",
          "--gvn-hoist",
          "--functionattrs",
          "--separate-const-offset-from-gep",
          "--aggressive-instcombine"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--correlated-propagation",
      "--jump-threading",
      "--float2int",
      "--sancov",
      "--globalopt",
      "--scalarizer",
      "--sccp",
      "--gvn-hoist",
      "--functionattrs",
      "--separate-const-offset-from-gep",
      "--aggressive-instcombine"
    ],
    "performance_vs_Oz": "+0.2%"
  }
}
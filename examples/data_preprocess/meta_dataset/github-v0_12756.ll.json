{
  "program_id": "github-v0_12756.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 50,
    "onePredOneSuc": 37,
    "onePredTwoSuc": 13,
    "oneSuccessor": 41,
    "twoPred": 21,
    "twoPredOneSuc": 2,
    "twoEach": 15,
    "twoSuccessor": 36,
    "morePreds": 6,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 84,
    "BeginPhi": 0,
    "BranchCount": 77,
    "returnInt": 34,
    "CriticalCount": 24,
    "NumEdges": 113,
    "const32Bit": 473,
    "const64Bit": 4,
    "numConstZeroes": 254,
    "numConstOnes": 78,
    "UncondBranches": 41,
    "binaryConstArg": 4,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 16,
    "NumAndInst": 0,
    "BlockMid": 8,
    "BlockLow": 76,
    "NumBitCastInst": 22,
    "NumBrInst": 77,
    "NumCallInst": 45,
    "NumGetElementPtrInst": 206,
    "NumICmpInst": 36,
    "NumLShrInst": 0,
    "NumLoadInst": 290,
    "NumMulInst": 2,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 7,
    "NumSExtInst": 8,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 98,
    "NumSubInst": 0,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 84,
    "TotalInsts": 811,
    "TotalMemInst": 655,
    "TotalFuncs": 16,
    "ArgsPhi": 0,
    "testUnary": 338
  },
  "baseline_oz_instcount": 811,
  "knowledge_base_entry": [
    "--loweratomic",
    "--aggressive-instcombine",
    "--die",
    "--ipsccp",
    "--early-cse",
    "--licm",
    "--loop-instsimplify",
    "--globalopt",
    "--loop-deletion",
    "--sroa",
    "-loop-reduce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--sroa",
          "--globalsplit",
          "--lower-expect",
          "--lower-matrix-intrinsics",
          "--loop-interchange",
          "--guard-widening",
          "--slp-vectorizer",
          "-loop-reduce",
          "--lowerswitch",
          "--strip-debug-declare",
          "--loop-distribute",
          "--aggressive-instcombine",
          "--inject-tli-mappings",
          "--globaldce",
          "--bdce",
          "--reassociate",
          "--lcssa",
          "--simple-loop-unswitch",
          "--functionattrs",
          "--load-store-vectorizer",
          "--correlated-propagation",
          "--loop-instsimplify",
          "--loop-predication",
          "--coro-cleanup",
          "--jump-threading",
          "--licm",
          "--loop-load-elim",
          "--hotcoldsplit",
          "--instnamer",
          "--irce"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--sroa",
      "--globalsplit",
      "--lower-expect",
      "--lower-matrix-intrinsics",
      "--loop-interchange",
      "--guard-widening",
      "--slp-vectorizer",
      "-loop-reduce",
      "--lowerswitch",
      "--strip-debug-declare",
      "--loop-distribute",
      "--aggressive-instcombine",
      "--inject-tli-mappings",
      "--globaldce",
      "--bdce",
      "--reassociate",
      "--lcssa",
      "--simple-loop-unswitch",
      "--functionattrs",
      "--load-store-vectorizer",
      "--correlated-propagation",
      "--loop-instsimplify",
      "--loop-predication",
      "--coro-cleanup",
      "--jump-threading",
      "--licm",
      "--loop-load-elim",
      "--hotcoldsplit",
      "--instnamer",
      "--irce"
    ],
    "performance_vs_Oz": "+0.5%"
  }
}
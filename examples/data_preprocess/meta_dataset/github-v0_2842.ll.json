{
  "program_id": "github-v0_2842.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 24,
    "onePredOneSuc": 21,
    "onePredTwoSuc": 3,
    "oneSuccessor": 23,
    "twoPred": 14,
    "twoPredOneSuc": 2,
    "twoEach": 4,
    "twoSuccessor": 16,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 65,
    "BeginPhi": 0,
    "BranchCount": 39,
    "returnInt": 25,
    "CriticalCount": 8,
    "NumEdges": 55,
    "const32Bit": 128,
    "const64Bit": 13,
    "numConstZeroes": 52,
    "numConstOnes": 74,
    "UncondBranches": 23,
    "binaryConstArg": 5,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 55,
    "NumAndInst": 1,
    "BlockMid": 3,
    "BlockLow": 62,
    "NumBitCastInst": 8,
    "NumBrInst": 39,
    "NumCallInst": 34,
    "NumGetElementPtrInst": 10,
    "NumICmpInst": 25,
    "NumLShrInst": 0,
    "NumLoadInst": 83,
    "NumMulInst": 1,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 25,
    "NumSExtInst": 0,
    "NumSelectInst": 9,
    "NumShlInst": 0,
    "NumStoreInst": 69,
    "NumSubInst": 3,
    "NumTruncInst": 1,
    "NumXorInst": 0,
    "NumZExtInst": 9,
    "TotalBlocks": 65,
    "TotalInsts": 376,
    "TotalMemInst": 251,
    "TotalFuncs": 52,
    "ArgsPhi": 0,
    "testUnary": 156
  },
  "baseline_oz_instcount": 375,
  "knowledge_base_entry": [
    "--lower-expect",
    "--globalopt",
    "--globaldce",
    "--mergefunc",
    "--flattencfg",
    "--load-store-vectorizer",
    "--mldst-motion",
    "--newgvn",
    "--lower-constant-intrinsics",
    "--loop-reroll",
    "--slsr",
    "--jump-threading",
    "--sccp",
    "--die",
    "--jump-threading",
    "--newgvn",
    "--nary-reassociate",
    "--instcombine",
    "--gvn",
    "--early-cse",
    "--instcombine",
    "--mldst-motion",
    "--dse",
    "--aggressive-instcombine",
    "--instsimplify"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--ipsccp",
          "--mergefunc",
          "--globaldce",
          "--loop-fusion",
          "--barrier",
          "--irce",
          "--bdce",
          "--rewrite-statepoints-for-gc",
          "--hotcoldsplit",
          "--post-inline-ee-instrument",
          "--rpo-functionattrs",
          "--redundant-dbg-inst-elim"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--ipsccp",
      "--mergefunc",
      "--globaldce",
      "--loop-fusion",
      "--barrier",
      "--irce",
      "--bdce",
      "--rewrite-statepoints-for-gc",
      "--hotcoldsplit",
      "--post-inline-ee-instrument",
      "--rpo-functionattrs",
      "--redundant-dbg-inst-elim"
    ],
    "performance_vs_Oz": "+1.6%"
  }
}
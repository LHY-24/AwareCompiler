{
  "program_id": "github-v0_16954.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 3,
    "onePred": 79,
    "onePredOneSuc": 62,
    "onePredTwoSuc": 17,
    "oneSuccessor": 72,
    "twoPred": 30,
    "twoPredOneSuc": 8,
    "twoEach": 22,
    "twoSuccessor": 41,
    "morePreds": 4,
    "BB03Phi": 3,
    "BBHiPhi": 0,
    "BBNoPhi": 112,
    "BeginPhi": 3,
    "BranchCount": 113,
    "returnInt": 9,
    "CriticalCount": 19,
    "NumEdges": 154,
    "const32Bit": 126,
    "const64Bit": 64,
    "numConstZeroes": 44,
    "numConstOnes": 65,
    "UncondBranches": 72,
    "binaryConstArg": 40,
    "NumAShrInst": 1,
    "NumAddInst": 7,
    "NumAllocaInst": 34,
    "NumAndInst": 5,
    "BlockMid": 14,
    "BlockLow": 101,
    "NumBitCastInst": 5,
    "NumBrInst": 113,
    "NumCallInst": 19,
    "NumGetElementPtrInst": 79,
    "NumICmpInst": 71,
    "NumLShrInst": 5,
    "NumLoadInst": 253,
    "NumMulInst": 3,
    "NumOrInst": 8,
    "NumPHIInst": 3,
    "NumRetInst": 2,
    "NumSExtInst": 21,
    "NumSelectInst": 0,
    "NumShlInst": 6,
    "NumStoreInst": 140,
    "NumSubInst": 26,
    "NumTruncInst": 22,
    "NumXorInst": 0,
    "NumZExtInst": 65,
    "TotalBlocks": 115,
    "TotalInsts": 916,
    "TotalMemInst": 525,
    "TotalFuncs": 8,
    "ArgsPhi": 6,
    "testUnary": 428
  },
  "baseline_oz_instcount": 917,
  "knowledge_base_entry": [
    "--lower-constant-intrinsics",
    "--die",
    "--mergefunc",
    "--aggressive-instcombine",
    "--gvn-hoist",
    "--dce",
    "--reassociate",
    "--gvn-hoist",
    "--simplifycfg",
    "--ipsccp",
    "--mergefunc",
    "--aggressive-instcombine",
    "--gvn-hoist",
    "--elim-avail-extern",
    "--dce",
    "--slp-vectorizer",
    "--mergefunc",
    "--bdce",
    "--aggressive-instcombine",
    "--mergefunc",
    "--mem2reg",
    "--gvn",
    "--early-cse-memssa",
    "--memcpyopt"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--lower-widenable-condition",
          "--aggressive-instcombine",
          "--instnamer",
          "--forceattrs",
          "--lower-constant-intrinsics",
          "--coro-split",
          "--deadargelim",
          "--float2int",
          "--alignment-from-assumptions",
          "--mldst-motion",
          "--globaldce",
          "--scalarizer"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.0%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--lower-widenable-condition",
      "--aggressive-instcombine",
      "--instnamer",
      "--forceattrs",
      "--lower-constant-intrinsics",
      "--coro-split",
      "--deadargelim",
      "--float2int",
      "--alignment-from-assumptions",
      "--mldst-motion",
      "--globaldce",
      "--scalarizer"
    ],
    "performance_vs_Oz": "+1.0%"
  }
}
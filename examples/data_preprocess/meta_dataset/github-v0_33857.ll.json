{
  "program_id": "github-v0_33857.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 26,
    "onePredOneSuc": 13,
    "onePredTwoSuc": 12,
    "oneSuccessor": 23,
    "twoPred": 13,
    "twoPredOneSuc": 8,
    "twoEach": 5,
    "twoSuccessor": 18,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 43,
    "BeginPhi": 0,
    "BranchCount": 41,
    "returnInt": 6,
    "CriticalCount": 14,
    "NumEdges": 59,
    "const32Bit": 28,
    "const64Bit": 17,
    "numConstZeroes": 11,
    "numConstOnes": 28,
    "UncondBranches": 23,
    "binaryConstArg": 14,
    "NumAShrInst": 0,
    "NumAddInst": 14,
    "NumAllocaInst": 15,
    "NumAndInst": 0,
    "BlockMid": 4,
    "BlockLow": 39,
    "NumBitCastInst": 6,
    "NumBrInst": 41,
    "NumCallInst": 17,
    "NumGetElementPtrInst": 17,
    "NumICmpInst": 18,
    "NumLShrInst": 0,
    "NumLoadInst": 100,
    "NumMulInst": 3,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 2,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 33,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 43,
    "TotalInsts": 268,
    "TotalMemInst": 182,
    "TotalFuncs": 9,
    "ArgsPhi": 0,
    "testUnary": 123
  },
  "baseline_oz_instcount": 269,
  "knowledge_base_entry": [
    "--sroa",
    "--mem2reg",
    "--lower-constant-intrinsics",
    "--bdce",
    "--sroa",
    "--inline",
    "--elim-avail-extern",
    "--sccp",
    "--dse",
    "--dse"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--dse",
          "--dce",
          "--lower-widenable-condition",
          "--simplifycfg",
          "--div-rem-pairs",
          "--float2int",
          "--nary-reassociate",
          "--flattencfg",
          "--inline",
          "--libcalls-shrinkwrap",
          "--ipconstprop",
          "--slsr",
          "--consthoist"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--dse",
      "--dce",
      "--lower-widenable-condition",
      "--simplifycfg",
      "--div-rem-pairs",
      "--float2int",
      "--nary-reassociate",
      "--flattencfg",
      "--inline",
      "--libcalls-shrinkwrap",
      "--ipconstprop",
      "--slsr",
      "--consthoist"
    ],
    "performance_vs_Oz": "+0.4%"
  }
}
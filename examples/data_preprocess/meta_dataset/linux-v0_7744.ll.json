{
  "program_id": "linux-v0_7744.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 78,
    "onePredOneSuc": 55,
    "onePredTwoSuc": 21,
    "oneSuccessor": 65,
    "twoPred": 14,
    "twoPredOneSuc": 5,
    "twoEach": 7,
    "twoSuccessor": 33,
    "morePreds": 8,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 107,
    "BeginPhi": 1,
    "BranchCount": 98,
    "returnInt": 4,
    "CriticalCount": 14,
    "NumEdges": 151,
    "const32Bit": 364,
    "const64Bit": 75,
    "numConstZeroes": 159,
    "numConstOnes": 108,
    "UncondBranches": 65,
    "binaryConstArg": 20,
    "NumAShrInst": 3,
    "NumAddInst": 4,
    "NumAllocaInst": 81,
    "NumAndInst": 4,
    "BlockMid": 25,
    "BlockLow": 83,
    "NumBitCastInst": 7,
    "NumBrInst": 98,
    "NumCallInst": 27,
    "NumGetElementPtrInst": 185,
    "NumICmpInst": 34,
    "NumLShrInst": 2,
    "NumLoadInst": 333,
    "NumMulInst": 4,
    "NumOrInst": 3,
    "NumPHIInst": 1,
    "NumRetInst": 8,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 3,
    "NumStoreInst": 139,
    "NumSubInst": 2,
    "NumTruncInst": 10,
    "NumXorInst": 0,
    "NumZExtInst": 37,
    "TotalBlocks": 108,
    "TotalInsts": 990,
    "TotalMemInst": 765,
    "TotalFuncs": 17,
    "ArgsPhi": 2,
    "testUnary": 471
  },
  "baseline_oz_instcount": 991,
  "knowledge_base_entry": [
    "--correlated-propagation",
    "--slp-vectorizer",
    "--inline",
    "--load-store-vectorizer",
    "--mem2reg",
    "--aggressive-instcombine",
    "--dse",
    "--instcombine"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--coro-early",
          "--slp-vectorizer",
          "--elim-avail-extern",
          "--globalsplit",
          "--loop-data-prefetch",
          "--strip",
          "--simplifycfg",
          "--memcpyopt",
          "--hotcoldsplit",
          "--insert-gcov-profiling",
          "--newgvn",
          "--mergereturn",
          "--inline"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--coro-early",
      "--slp-vectorizer",
      "--elim-avail-extern",
      "--globalsplit",
      "--loop-data-prefetch",
      "--strip",
      "--simplifycfg",
      "--memcpyopt",
      "--hotcoldsplit",
      "--insert-gcov-profiling",
      "--newgvn",
      "--mergereturn",
      "--inline"
    ],
    "performance_vs_Oz": "+0.1%"
  }
}
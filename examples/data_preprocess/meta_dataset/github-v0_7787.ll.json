{
  "program_id": "github-v0_7787.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 17,
    "onePredOneSuc": 11,
    "onePredTwoSuc": 4,
    "oneSuccessor": 15,
    "twoPred": 7,
    "twoPredOneSuc": 4,
    "twoEach": 2,
    "twoSuccessor": 8,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 27,
    "BeginPhi": 0,
    "BranchCount": 23,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 31,
    "const32Bit": 41,
    "const64Bit": 92,
    "numConstZeroes": 91,
    "numConstOnes": 33,
    "UncondBranches": 15,
    "binaryConstArg": 11,
    "NumAShrInst": 0,
    "NumAddInst": 11,
    "NumAllocaInst": 14,
    "NumAndInst": 4,
    "BlockMid": 6,
    "BlockLow": 21,
    "NumBitCastInst": 16,
    "NumBrInst": 23,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 58,
    "NumICmpInst": 8,
    "NumLShrInst": 1,
    "NumLoadInst": 46,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 31,
    "NumSubInst": 1,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 1,
    "TotalBlocks": 27,
    "TotalInsts": 230,
    "TotalMemInst": 156,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 82
  },
  "baseline_oz_instcount": 230,
  "knowledge_base_entry": [
    "--nary-reassociate",
    "--correlated-propagation",
    "--jump-threading",
    "--loop-deletion",
    "--instcombine",
    "--bdce",
    "--aggressive-instcombine",
    "--instsimplify",
    "--slp-vectorizer",
    "--instsimplify",
    "--loop-simplifycfg",
    "--load-store-vectorizer",
    "--instsimplify",
    "--gvn",
    "--lower-expect",
    "--elim-avail-extern",
    "--reassociate",
    "--slp-vectorizer",
    "--loop-reroll",
    "--lower-constant-intrinsics",
    "--instsimplify",
    "--inline",
    "--loop-instsimplify",
    "--gvn-hoist",
    "--early-cse",
    "--dce",
    "--newgvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--separate-const-offset-from-gep",
          "--loop-versioning-licm",
          "--mergefunc",
          "--canonicalize-aliases",
          "--attributor",
          "--loop-data-prefetch",
          "--post-inline-ee-instrument",
          "--loop-deletion",
          "--instsimplify",
          "--insert-gcov-profiling",
          "--loop-reroll",
          "--lower-widenable-condition",
          "--aggressive-instcombine",
          "--lower-guard-intrinsic",
          "--sccp",
          "--inline",
          "--constmerge"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--separate-const-offset-from-gep",
      "--loop-versioning-licm",
      "--mergefunc",
      "--canonicalize-aliases",
      "--attributor",
      "--loop-data-prefetch",
      "--post-inline-ee-instrument",
      "--loop-deletion",
      "--instsimplify",
      "--insert-gcov-profiling",
      "--loop-reroll",
      "--lower-widenable-condition",
      "--aggressive-instcombine",
      "--lower-guard-intrinsic",
      "--sccp",
      "--inline",
      "--constmerge"
    ],
    "performance_vs_Oz": "+0.9%"
  }
}
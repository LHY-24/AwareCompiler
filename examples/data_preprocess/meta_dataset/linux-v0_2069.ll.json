{
  "program_id": "linux-v0_2069.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 33,
    "onePredOneSuc": 26,
    "onePredTwoSuc": 4,
    "oneSuccessor": 31,
    "twoPred": 9,
    "twoPredOneSuc": 1,
    "twoEach": 2,
    "twoSuccessor": 13,
    "morePreds": 4,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 62,
    "BeginPhi": 0,
    "BranchCount": 44,
    "returnInt": 8,
    "CriticalCount": 7,
    "NumEdges": 67,
    "const32Bit": 244,
    "const64Bit": 16,
    "numConstZeroes": 90,
    "numConstOnes": 99,
    "UncondBranches": 31,
    "binaryConstArg": 7,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 81,
    "NumAndInst": 4,
    "BlockMid": 11,
    "BlockLow": 51,
    "NumBitCastInst": 33,
    "NumBrInst": 44,
    "NumCallInst": 42,
    "NumGetElementPtrInst": 65,
    "NumICmpInst": 16,
    "NumLShrInst": 0,
    "NumLoadInst": 152,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 16,
    "NumSExtInst": 4,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 97,
    "NumSubInst": 2,
    "NumTruncInst": 2,
    "NumXorInst": 2,
    "NumZExtInst": 4,
    "TotalBlocks": 62,
    "TotalInsts": 567,
    "TotalMemInst": 437,
    "TotalFuncs": 25,
    "ArgsPhi": 0,
    "testUnary": 276
  },
  "baseline_oz_instcount": 567,
  "knowledge_base_entry": [
    "--globalopt",
    "--mergefunc",
    "--slp-vectorizer",
    "--bdce",
    "--licm",
    "--bdce",
    "--sccp",
    "--die",
    "--licm",
    "--aggressive-instcombine",
    "--loweratomic",
    "--early-cse-memssa",
    "--ipsccp",
    "--bdce",
    "--aggressive-instcombine",
    "--mergefunc",
    "--adce",
    "--aggressive-instcombine",
    "--jump-threading",
    "--loop-reroll",
    "--instsimplify",
    "--gvn",
    "--slp-vectorizer",
    "--lower-expect",
    "--aggressive-instcombine",
    "--lower-expect",
    "--dce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-load-elim",
          "--called-value-propagation",
          "--lower-matrix-intrinsics",
          "--loop-fusion",
          "--sroa",
          "--instcombine",
          "--lower-expect",
          "--partially-inline-libcalls",
          "--prune-eh",
          "--dce",
          "--sink",
          "--globaldce",
          "--deadargelim",
          "--guard-widening",
          "--correlated-propagation",
          "--gvn",
          "--instnamer",
          "--nary-reassociate",
          "--mergeicmps",
          "--instsimplify",
          "--simple-loop-unswitch",
          "--coro-cleanup",
          "--aggressive-instcombine",
          "--lower-constant-intrinsics",
          "--sancov",
          "--partial-inliner",
          "--mergefunc",
          "--gvn-hoist",
          "--loop-deletion"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-load-elim",
      "--called-value-propagation",
      "--lower-matrix-intrinsics",
      "--loop-fusion",
      "--sroa",
      "--instcombine",
      "--lower-expect",
      "--partially-inline-libcalls",
      "--prune-eh",
      "--dce",
      "--sink",
      "--globaldce",
      "--deadargelim",
      "--guard-widening",
      "--correlated-propagation",
      "--gvn",
      "--instnamer",
      "--nary-reassociate",
      "--mergeicmps",
      "--instsimplify",
      "--simple-loop-unswitch",
      "--coro-cleanup",
      "--aggressive-instcombine",
      "--lower-constant-intrinsics",
      "--sancov",
      "--partial-inliner",
      "--mergefunc",
      "--gvn-hoist",
      "--loop-deletion"
    ],
    "performance_vs_Oz": "+1.2%"
  }
}
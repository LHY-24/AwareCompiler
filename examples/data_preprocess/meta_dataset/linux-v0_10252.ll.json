{
  "program_id": "linux-v0_10252.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 32,
    "onePredOneSuc": 20,
    "onePredTwoSuc": 12,
    "oneSuccessor": 25,
    "twoPred": 9,
    "twoPredOneSuc": 3,
    "twoEach": 5,
    "twoSuccessor": 20,
    "morePreds": 4,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 48,
    "BeginPhi": 0,
    "BranchCount": 45,
    "returnInt": 0,
    "CriticalCount": 8,
    "NumEdges": 65,
    "const32Bit": 86,
    "const64Bit": 51,
    "numConstZeroes": 68,
    "numConstOnes": 32,
    "UncondBranches": 25,
    "binaryConstArg": 3,
    "NumAShrInst": 0,
    "NumAddInst": 7,
    "NumAllocaInst": 27,
    "NumAndInst": 0,
    "BlockMid": 7,
    "BlockLow": 41,
    "NumBitCastInst": 3,
    "NumBrInst": 45,
    "NumCallInst": 4,
    "NumGetElementPtrInst": 45,
    "NumICmpInst": 20,
    "NumLShrInst": 0,
    "NumLoadInst": 81,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 65,
    "NumSubInst": 2,
    "NumTruncInst": 4,
    "NumXorInst": 0,
    "NumZExtInst": 15,
    "TotalBlocks": 48,
    "TotalInsts": 324,
    "TotalMemInst": 222,
    "TotalFuncs": 5,
    "ArgsPhi": 0,
    "testUnary": 133
  },
  "baseline_oz_instcount": 324,
  "knowledge_base_entry": [
    "--separate-const-offset-from-gep",
    "--early-cse",
    "--dse",
    "--early-cse-memssa",
    "--die",
    "--reassociate",
    "--elim-avail-extern",
    "--memcpyopt",
    "--lower-constant-intrinsics",
    "--load-store-vectorizer",
    "--mem2reg",
    "--aggressive-instcombine",
    "--dce",
    "--sccp",
    "--early-cse",
    "--aggressive-instcombine",
    "--bdce",
    "--lower-constant-intrinsics",
    "--loop-rotate",
    "--instcombine",
    "--adce",
    "--simplifycfg",
    "--prune-eh",
    "--jump-threading",
    "--elim-avail-extern",
    "--loop-simplifycfg",
    "--bdce",
    "--aggressive-instcombine",
    "--dce",
    "--sccp",
    "--early-cse",
    "--aggressive-instcombine",
    "--bdce",
    "--lower-constant-intrinsics",
    "--loop-rotate",
    "--instcombine",
    "--adce",
    "--simplifycfg",
    "--prune-eh",
    "--lower-constant-intrinsics",
    "--jump-threading",
    "--inline",
    "--aggressive-instcombine",
    "--instsimplify",
    "--aggressive-instcombine",
    "--adce",
    "--elim-avail-extern",
    "--gvn",
    "--load-store-vectorizer",
    "--lower-constant-intrinsics",
    "--mem2reg",
    "--dse",
    "--mem2reg",
    "--mldst-motion",
    "--newgvn",
    "--mem2reg",
    "--die",
    "--reassociate",
    "--sroa",
    "--mergefunc",
    "--globaldce",
    "--aggressive-instcombine",
    "--prune-eh",
    "--early-cse",
    "--mldst-motion",
    "--newgvn",
    "--mem2reg",
    "--loop-instsimplify",
    "--loop-simplifycfg",
    "--sccp",
    "--reassociate",
    "--jump-threading",
    "--correlated-propagation",
    "--globalopt",
    "--licm",
    "--prune-eh",
    "--jump-threading",
    "--elim-avail-extern",
    "--loop-simplifycfg",
    "--bdce",
    "--aggressive-instcombine",
    "--dse",
    "--loop-simplifycfg",
    "--lower-expect"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--separate-const-offset-from-gep",
          "--insert-gcov-profiling",
          "--loop-load-elim",
          "--add-discriminators",
          "--dse",
          "--aggressive-instcombine",
          "--lower-expect",
          "--strip-dead-prototypes",
          "--lower-widenable-condition",
          "--gvn",
          "--strip",
          "--adce"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--separate-const-offset-from-gep",
      "--insert-gcov-profiling",
      "--loop-load-elim",
      "--add-discriminators",
      "--dse",
      "--aggressive-instcombine",
      "--lower-expect",
      "--strip-dead-prototypes",
      "--lower-widenable-condition",
      "--gvn",
      "--strip",
      "--adce"
    ],
    "performance_vs_Oz": "+1.9%"
  }
}
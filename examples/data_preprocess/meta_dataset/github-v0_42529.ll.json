{
  "program_id": "github-v0_42529.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 0,
    "onePredOneSuc": 0,
    "onePredTwoSuc": 0,
    "oneSuccessor": 0,
    "twoPred": 0,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 0,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 4,
    "BeginPhi": 0,
    "BranchCount": 0,
    "returnInt": 0,
    "CriticalCount": 0,
    "NumEdges": 0,
    "const32Bit": 33,
    "const64Bit": 99,
    "numConstZeroes": 57,
    "numConstOnes": 24,
    "UncondBranches": 0,
    "binaryConstArg": 59,
    "NumAShrInst": 0,
    "NumAddInst": 23,
    "NumAllocaInst": 0,
    "NumAndInst": 0,
    "BlockMid": 4,
    "BlockLow": 0,
    "NumBitCastInst": 0,
    "NumBrInst": 0,
    "NumCallInst": 0,
    "NumGetElementPtrInst": 31,
    "NumICmpInst": 4,
    "NumLShrInst": 0,
    "NumLoadInst": 12,
    "NumMulInst": 20,
    "NumOrInst": 17,
    "NumPHIInst": 0,
    "NumRetInst": 4,
    "NumSExtInst": 8,
    "NumSelectInst": 4,
    "NumShlInst": 0,
    "NumStoreInst": 28,
    "NumSubInst": 0,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 4,
    "TotalInsts": 155,
    "TotalMemInst": 71,
    "TotalFuncs": 4,
    "ArgsPhi": 0,
    "testUnary": 22
  },
  "baseline_oz_instcount": 155,
  "knowledge_base_entry": [
    "--slsr",
    "--indvars",
    "--loop-reroll",
    "--sroa",
    "--gvn",
    "--gvn-hoist",
    "--licm",
    "--instcombine",
    "--mergefunc",
    "--reassociate",
    "--slp-vectorizer",
    "--inline",
    "--slp-vectorizer",
    "--load-store-vectorizer",
    "--slp-vectorizer",
    "--dce",
    "--gvn-hoist",
    "--adce",
    "--early-cse-memssa",
    "--instsimplify",
    "--instcombine",
    "--gvn-hoist",
    "--loop-rotate",
    "--instcombine",
    "--instsimplify",
    "--correlated-propagation",
    "--early-cse",
    "--mldst-motion",
    "--load-store-vectorizer"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--ipsccp",
          "--lower-matrix-intrinsics",
          "--slsr",
          "--newgvn",
          "--guard-widening",
          "--slp-vectorizer",
          "--callsite-splitting",
          "--loop-simplifycfg",
          "--lower-constant-intrinsics",
          "--dce",
          "--elim-avail-extern",
          "--rpo-functionattrs",
          "--simplifycfg",
          "--mem2reg",
          "--deadargelim",
          "--loweratomic",
          "--instsimplify"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+10.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--ipsccp",
      "--lower-matrix-intrinsics",
      "--slsr",
      "--newgvn",
      "--guard-widening",
      "--slp-vectorizer",
      "--callsite-splitting",
      "--loop-simplifycfg",
      "--lower-constant-intrinsics",
      "--dce",
      "--elim-avail-extern",
      "--rpo-functionattrs",
      "--simplifycfg",
      "--mem2reg",
      "--deadargelim",
      "--loweratomic",
      "--instsimplify"
    ],
    "performance_vs_Oz": "+10.3%"
  }
}
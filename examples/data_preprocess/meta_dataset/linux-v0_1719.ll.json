{
  "program_id": "linux-v0_1719.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 8,
    "onePredOneSuc": 6,
    "onePredTwoSuc": 2,
    "oneSuccessor": 8,
    "twoPred": 2,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 2,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 12,
    "BeginPhi": 0,
    "BranchCount": 10,
    "returnInt": 2,
    "CriticalCount": 0,
    "NumEdges": 12,
    "const32Bit": 80,
    "const64Bit": 11,
    "numConstZeroes": 35,
    "numConstOnes": 43,
    "UncondBranches": 8,
    "binaryConstArg": 7,
    "NumAShrInst": 2,
    "NumAddInst": 1,
    "NumAllocaInst": 29,
    "NumAndInst": 4,
    "BlockMid": 4,
    "BlockLow": 8,
    "NumBitCastInst": 4,
    "NumBrInst": 10,
    "NumCallInst": 3,
    "NumGetElementPtrInst": 25,
    "NumICmpInst": 4,
    "NumLShrInst": 0,
    "NumLoadInst": 41,
    "NumMulInst": 0,
    "NumOrInst": 2,
    "NumPHIInst": 0,
    "NumRetInst": 2,
    "NumSExtInst": 2,
    "NumSelectInst": 2,
    "NumShlInst": 0,
    "NumStoreInst": 42,
    "NumSubInst": 0,
    "NumTruncInst": 5,
    "NumXorInst": 0,
    "NumZExtInst": 14,
    "TotalBlocks": 12,
    "TotalInsts": 192,
    "TotalMemInst": 140,
    "TotalFuncs": 4,
    "ArgsPhi": 0,
    "testUnary": 95
  },
  "baseline_oz_instcount": 192,
  "knowledge_base_entry": [
    "--loop-unroll",
    "--instcombine",
    "--flattencfg",
    "--aggressive-instcombine",
    "--globaldce",
    "--mergefunc",
    "--aggressive-instcombine",
    "--mergefunc",
    "--adce",
    "--lower-constant-intrinsics",
    "--bdce",
    "--load-store-vectorizer",
    "--early-cse",
    "--sroa",
    "--dse"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--lower-matrix-intrinsics",
          "--strip-debug-declare",
          "--loop-unroll-and-jam",
          "--guard-widening",
          "--loop-load-elim",
          "--loop-versioning-licm",
          "--name-anon-globals",
          "--loop-interchange",
          "--coro-cleanup",
          "--ee-instrument",
          "--reassociate",
          "--memcpyopt",
          "--loop-idiom",
          "--early-cse",
          "--gvn",
          "--ipconstprop",
          "--jump-threading",
          "--aggressive-instcombine",
          "--sink",
          "--libcalls-shrinkwrap",
          "--lower-guard-intrinsic",
          "--functionattrs",
          "--redundant-dbg-inst-elim",
          "--break-crit-edges"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--lower-matrix-intrinsics",
      "--strip-debug-declare",
      "--loop-unroll-and-jam",
      "--guard-widening",
      "--loop-load-elim",
      "--loop-versioning-licm",
      "--name-anon-globals",
      "--loop-interchange",
      "--coro-cleanup",
      "--ee-instrument",
      "--reassociate",
      "--memcpyopt",
      "--loop-idiom",
      "--early-cse",
      "--gvn",
      "--ipconstprop",
      "--jump-threading",
      "--aggressive-instcombine",
      "--sink",
      "--libcalls-shrinkwrap",
      "--lower-guard-intrinsic",
      "--functionattrs",
      "--redundant-dbg-inst-elim",
      "--break-crit-edges"
    ],
    "performance_vs_Oz": "+1.6%"
  }
}
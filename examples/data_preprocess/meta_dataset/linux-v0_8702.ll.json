{
  "program_id": "linux-v0_8702.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 39,
    "onePredOneSuc": 30,
    "onePredTwoSuc": 9,
    "oneSuccessor": 35,
    "twoPred": 7,
    "twoPredOneSuc": 2,
    "twoEach": 2,
    "twoSuccessor": 14,
    "morePreds": 5,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 66,
    "BeginPhi": 1,
    "BranchCount": 49,
    "returnInt": 20,
    "CriticalCount": 3,
    "NumEdges": 73,
    "const32Bit": 197,
    "const64Bit": 11,
    "numConstZeroes": 67,
    "numConstOnes": 95,
    "UncondBranches": 35,
    "binaryConstArg": 10,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 83,
    "NumAndInst": 0,
    "BlockMid": 13,
    "BlockLow": 54,
    "NumBitCastInst": 28,
    "NumBrInst": 49,
    "NumCallInst": 51,
    "NumGetElementPtrInst": 46,
    "NumICmpInst": 18,
    "NumLShrInst": 0,
    "NumLoadInst": 183,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 1,
    "NumRetInst": 16,
    "NumSExtInst": 12,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 102,
    "NumSubInst": 1,
    "NumTruncInst": 5,
    "NumXorInst": 10,
    "NumZExtInst": 8,
    "TotalBlocks": 67,
    "TotalInsts": 616,
    "TotalMemInst": 465,
    "TotalFuncs": 31,
    "ArgsPhi": 2,
    "testUnary": 319
  },
  "baseline_oz_instcount": 617,
  "knowledge_base_entry": [
    "--nary-reassociate",
    "--lower-constant-intrinsics",
    "--mergefunc",
    "--instcombine",
    "--dse",
    "--dse",
    "--mergefunc",
    "--reassociate",
    "--dse",
    "--globalopt",
    "--aggressive-instcombine",
    "--lower-expect",
    "--jump-threading",
    "--slp-vectorizer",
    "--nary-reassociate",
    "--lower-constant-intrinsics",
    "--mergefunc",
    "--reassociate",
    "--mergefunc",
    "--early-cse-memssa",
    "--gvn-hoist",
    "--elim-avail-extern",
    "--simplifycfg",
    "--newgvn",
    "--jump-threading",
    "--gvn",
    "--ipsccp",
    "--early-cse",
    "--flattencfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--mldst-motion",
          "--instnamer",
          "--globalopt",
          "--indvars",
          "--instsimplify",
          "--pgo-memop-opt",
          "--attributor",
          "--coro-elide",
          "--loop-sink",
          "--simple-loop-unswitch",
          "--sancov",
          "--loop-rotate",
          "--dse",
          "--loop-load-elim",
          "--insert-gcov-profiling",
          "--nary-reassociate",
          "--deadargelim",
          "--loop-simplifycfg",
          "--globalsplit",
          "--infer-address-spaces",
          "--partial-inliner",
          "--slp-vectorizer",
          "--libcalls-shrinkwrap",
          "--sccp",
          "--die",
          "--redundant-dbg-inst-elim",
          "--argpromotion",
          "--mergefunc",
          "--alignment-from-assumptions",
          "--loop-vectorize"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--mldst-motion",
      "--instnamer",
      "--globalopt",
      "--indvars",
      "--instsimplify",
      "--pgo-memop-opt",
      "--attributor",
      "--coro-elide",
      "--loop-sink",
      "--simple-loop-unswitch",
      "--sancov",
      "--loop-rotate",
      "--dse",
      "--loop-load-elim",
      "--insert-gcov-profiling",
      "--nary-reassociate",
      "--deadargelim",
      "--loop-simplifycfg",
      "--globalsplit",
      "--infer-address-spaces",
      "--partial-inliner",
      "--slp-vectorizer",
      "--libcalls-shrinkwrap",
      "--sccp",
      "--die",
      "--redundant-dbg-inst-elim",
      "--argpromotion",
      "--mergefunc",
      "--alignment-from-assumptions",
      "--loop-vectorize"
    ],
    "performance_vs_Oz": "+0.8%"
  }
}
{
  "program_id": "linux-v0_8888.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 42,
    "onePredOneSuc": 29,
    "onePredTwoSuc": 8,
    "oneSuccessor": 42,
    "twoPred": 26,
    "twoPredOneSuc": 8,
    "twoEach": 14,
    "twoSuccessor": 26,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 86,
    "BeginPhi": 0,
    "BranchCount": 68,
    "returnInt": 14,
    "CriticalCount": 15,
    "NumEdges": 94,
    "const32Bit": 259,
    "const64Bit": 92,
    "numConstZeroes": 60,
    "numConstOnes": 114,
    "UncondBranches": 42,
    "binaryConstArg": 211,
    "NumAShrInst": 0,
    "NumAddInst": 104,
    "NumAllocaInst": 65,
    "NumAndInst": 22,
    "BlockMid": 13,
    "BlockLow": 73,
    "NumBitCastInst": 2,
    "NumBrInst": 68,
    "NumCallInst": 42,
    "NumGetElementPtrInst": 61,
    "NumICmpInst": 30,
    "NumLShrInst": 4,
    "NumLoadInst": 225,
    "NumMulInst": 40,
    "NumOrInst": 31,
    "NumPHIInst": 0,
    "NumRetInst": 18,
    "NumSExtInst": 43,
    "NumSelectInst": 0,
    "NumShlInst": 3,
    "NumStoreInst": 128,
    "NumSubInst": 4,
    "NumTruncInst": 29,
    "NumXorInst": 8,
    "NumZExtInst": 49,
    "TotalBlocks": 86,
    "TotalInsts": 976,
    "TotalMemInst": 521,
    "TotalFuncs": 18,
    "ArgsPhi": 0,
    "testUnary": 413
  },
  "baseline_oz_instcount": 976,
  "knowledge_base_entry": [
    "--functionattrs",
    "--simplifycfg",
    "--prune-eh",
    "--early-cse",
    "--jump-threading",
    "--early-cse-memssa",
    "--prune-eh",
    "--aggressive-instcombine",
    "--jump-threading",
    "--dse",
    "--loop-simplifycfg",
    "--gvn",
    "--inline",
    "--loop-instsimplify",
    "--elim-avail-extern",
    "--nary-reassociate",
    "--loop-simplifycfg",
    "--gvn-hoist",
    "--licm",
    "--mergefunc",
    "--gvn",
    "--die",
    "--aggressive-instcombine",
    "--sroa",
    "--instcombine",
    "--prune-eh",
    "--early-cse-memssa",
    "--jump-threading"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--aggressive-instcombine",
          "--simplifycfg",
          "--strip-dead-prototypes",
          "--mem2reg",
          "--irce",
          "--slp-vectorizer",
          "--loop-versioning-licm",
          "--load-store-vectorizer",
          "--mergefunc",
          "--loop-idiom",
          "--die",
          "--sancov",
          "--globalopt",
          "--add-discriminators",
          "--gvn",
          "--loop-vectorize",
          "--rpo-functionattrs",
          "--licm",
          "--partial-inliner"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+7.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--aggressive-instcombine",
      "--simplifycfg",
      "--strip-dead-prototypes",
      "--mem2reg",
      "--irce",
      "--slp-vectorizer",
      "--loop-versioning-licm",
      "--load-store-vectorizer",
      "--mergefunc",
      "--loop-idiom",
      "--die",
      "--sancov",
      "--globalopt",
      "--add-discriminators",
      "--gvn",
      "--loop-vectorize",
      "--rpo-functionattrs",
      "--licm",
      "--partial-inliner"
    ],
    "performance_vs_Oz": "+7.3%"
  }
}
{
  "program_id": "linux-v0_13380.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 19,
    "onePredOneSuc": 15,
    "onePredTwoSuc": 1,
    "oneSuccessor": 21,
    "twoPred": 12,
    "twoPredOneSuc": 4,
    "twoEach": 7,
    "twoSuccessor": 10,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 39,
    "BeginPhi": 0,
    "BranchCount": 31,
    "returnInt": 1,
    "CriticalCount": 12,
    "NumEdges": 51,
    "const32Bit": 271,
    "const64Bit": 1,
    "numConstZeroes": 124,
    "numConstOnes": 33,
    "UncondBranches": 21,
    "binaryConstArg": 52,
    "NumAShrInst": 6,
    "NumAddInst": 24,
    "NumAllocaInst": 24,
    "NumAndInst": 20,
    "BlockMid": 5,
    "BlockLow": 34,
    "NumBitCastInst": 0,
    "NumBrInst": 31,
    "NumCallInst": 2,
    "NumGetElementPtrInst": 91,
    "NumICmpInst": 10,
    "NumLShrInst": 8,
    "NumLoadInst": 158,
    "NumMulInst": 0,
    "NumOrInst": 7,
    "NumPHIInst": 0,
    "NumRetInst": 6,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 77,
    "NumSubInst": 10,
    "NumTruncInst": 27,
    "NumXorInst": 0,
    "NumZExtInst": 13,
    "TotalBlocks": 39,
    "TotalInsts": 519,
    "TotalMemInst": 352,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 222
  },
  "baseline_oz_instcount": 519,
  "knowledge_base_entry": [
    "--aggressive-instcombine",
    "--loweratomic",
    "--instcombine",
    "--jump-threading",
    "--loop-reroll",
    "--slp-vectorizer",
    "--loop-reroll",
    "--memcpyopt",
    "--mergefunc",
    "--sroa",
    "--lower-constant-intrinsics",
    "--newgvn",
    "--instsimplify",
    "--bdce",
    "--aggressive-instcombine",
    "--loweratomic",
    "--instcombine",
    "--sroa"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--aggressive-instcombine",
          "--loop-vectorize",
          "--add-discriminators",
          "--ipconstprop",
          "--sccp",
          "--mem2reg",
          "--die",
          "--loop-reroll",
          "--cross-dso-cfi",
          "--redundant-dbg-inst-elim",
          "--loop-interchange",
          "--mldst-motion",
          "--alignment-from-assumptions",
          "--strip-debug-declare",
          "--globaldce",
          "--libcalls-shrinkwrap",
          "--inline",
          "--guard-widening",
          "--inferattrs"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--aggressive-instcombine",
      "--loop-vectorize",
      "--add-discriminators",
      "--ipconstprop",
      "--sccp",
      "--mem2reg",
      "--die",
      "--loop-reroll",
      "--cross-dso-cfi",
      "--redundant-dbg-inst-elim",
      "--loop-interchange",
      "--mldst-motion",
      "--alignment-from-assumptions",
      "--strip-debug-declare",
      "--globaldce",
      "--libcalls-shrinkwrap",
      "--inline",
      "--guard-widening",
      "--inferattrs"
    ],
    "performance_vs_Oz": "+3.1%"
  }
}
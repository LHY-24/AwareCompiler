{
  "program_id": "github-v0_32442.ll",
  "autophase_features": {
    "BBNumArgsHi": 1,
    "BBNumArgsLo": 6,
    "onePred": 7,
    "onePredOneSuc": 5,
    "onePredTwoSuc": 2,
    "oneSuccessor": 6,
    "twoPred": 7,
    "twoPredOneSuc": 1,
    "twoEach": 4,
    "twoSuccessor": 9,
    "morePreds": 1,
    "BB03Phi": 6,
    "BBHiPhi": 1,
    "BBNoPhi": 10,
    "BeginPhi": 7,
    "BranchCount": 15,
    "returnInt": 2,
    "CriticalCount": 11,
    "NumEdges": 24,
    "const32Bit": 21,
    "const64Bit": 0,
    "numConstZeroes": 8,
    "numConstOnes": 6,
    "UncondBranches": 6,
    "binaryConstArg": 11,
    "NumAShrInst": 0,
    "NumAddInst": 16,
    "NumAllocaInst": 0,
    "NumAndInst": 1,
    "BlockMid": 1,
    "BlockLow": 16,
    "NumBitCastInst": 0,
    "NumBrInst": 15,
    "NumCallInst": 4,
    "NumGetElementPtrInst": 10,
    "NumICmpInst": 11,
    "NumLShrInst": 1,
    "NumLoadInst": 8,
    "NumMulInst": 9,
    "NumOrInst": 2,
    "NumPHIInst": 13,
    "NumRetInst": 2,
    "NumSExtInst": 5,
    "NumSelectInst": 2,
    "NumShlInst": 0,
    "NumStoreInst": 2,
    "NumSubInst": 4,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 2,
    "TotalBlocks": 17,
    "TotalInsts": 126,
    "TotalMemInst": 24,
    "TotalFuncs": 4,
    "ArgsPhi": 27,
    "testUnary": 18
  },
  "baseline_oz_instcount": 131,
  "knowledge_base_entry": [
    "--sccp",
    "--simplifycfg",
    "--reassociate",
    "--early-cse-memssa",
    "--loop-fusion",
    "--jump-threading",
    "--ipsccp",
    "--lower-expect",
    "--mem2reg",
    "--prune-eh",
    "--elim-avail-extern",
    "--inline",
    "--aggressive-instcombine",
    "--mem2reg",
    "--ipsccp",
    "--inline",
    "--newgvn",
    "--load-store-vectorizer",
    "--mem2reg",
    "--instcombine",
    "--jump-threading",
    "--early-cse",
    "--sroa",
    "--slp-vectorizer",
    "--licm",
    "--globalopt",
    "--instcombine",
    "--loop-deletion",
    "--gvn",
    "--reassociate",
    "--early-cse-memssa",
    "--loop-fusion",
    "--jump-threading",
    "--early-cse",
    "--sroa",
    "--instsimplify",
    "--lower-constant-intrinsics",
    "--jump-threading",
    "--early-cse"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--memcpyopt",
          "--redundant-dbg-inst-elim",
          "--consthoist",
          "--flattencfg",
          "--separate-const-offset-from-gep",
          "--mergereturn",
          "--libcalls-shrinkwrap",
          "--scalarizer",
          "--rpo-functionattrs",
          "--load-store-vectorizer",
          "--irce",
          "--sroa",
          "--mldst-motion",
          "--globalopt",
          "--ipconstprop",
          "--partial-inliner",
          "--partially-inline-libcalls",
          "--early-cse",
          "--inline",
          "--functionattrs",
          "--tailcallelim",
          "--attributor",
          "--div-rem-pairs",
          "--constprop",
          "--jump-threading",
          "--strip-nondebug",
          "--deadargelim"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--memcpyopt",
      "--redundant-dbg-inst-elim",
      "--consthoist",
      "--flattencfg",
      "--separate-const-offset-from-gep",
      "--mergereturn",
      "--libcalls-shrinkwrap",
      "--scalarizer",
      "--rpo-functionattrs",
      "--load-store-vectorizer",
      "--irce",
      "--sroa",
      "--mldst-motion",
      "--globalopt",
      "--ipconstprop",
      "--partial-inliner",
      "--partially-inline-libcalls",
      "--early-cse",
      "--inline",
      "--functionattrs",
      "--tailcallelim",
      "--attributor",
      "--div-rem-pairs",
      "--constprop",
      "--jump-threading",
      "--strip-nondebug",
      "--deadargelim"
    ],
    "performance_vs_Oz": "+3.8%"
  }
}
{
  "program_id": "github-v0_7798.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 13,
    "onePredOneSuc": 8,
    "onePredTwoSuc": 2,
    "oneSuccessor": 11,
    "twoPred": 5,
    "twoPredOneSuc": 2,
    "twoEach": 3,
    "twoSuccessor": 6,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 21,
    "BeginPhi": 0,
    "BranchCount": 17,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 23,
    "const32Bit": 33,
    "const64Bit": 28,
    "numConstZeroes": 30,
    "numConstOnes": 25,
    "UncondBranches": 11,
    "binaryConstArg": 10,
    "NumAShrInst": 2,
    "NumAddInst": 4,
    "NumAllocaInst": 13,
    "NumAndInst": 2,
    "BlockMid": 5,
    "BlockLow": 16,
    "NumBitCastInst": 4,
    "NumBrInst": 17,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 22,
    "NumICmpInst": 6,
    "NumLShrInst": 0,
    "NumLoadInst": 33,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 4,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 19,
    "NumSubInst": 0,
    "NumTruncInst": 5,
    "NumXorInst": 0,
    "NumZExtInst": 14,
    "TotalBlocks": 21,
    "TotalInsts": 159,
    "TotalMemInst": 94,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 73
  },
  "baseline_oz_instcount": 159,
  "knowledge_base_entry": [
    "--flattencfg",
    "--aggressive-instcombine",
    "--die",
    "--licm",
    "--aggressive-instcombine",
    "--bdce",
    "--die",
    "--load-store-vectorizer",
    "--dse",
    "--loop-simplifycfg",
    "--loop-reroll",
    "--simplifycfg",
    "--flattencfg",
    "--mergefunc",
    "--mergefunc",
    "--globaldce",
    "--aggressive-instcombine",
    "--inline",
    "--loop-simplifycfg",
    "--mem2reg",
    "--adce",
    "--jump-threading",
    "--memcpyopt",
    "--early-cse-memssa",
    "--gvn-hoist",
    "--correlated-propagation"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--div-rem-pairs",
          "--lower-expect",
          "--separate-const-offset-from-gep",
          "--sancov",
          "--loop-vectorize",
          "--rewrite-statepoints-for-gc",
          "--aggressive-instcombine",
          "--lcssa",
          "--simple-loop-unswitch",
          "--lower-matrix-intrinsics",
          "--sroa",
          "--redundant-dbg-inst-elim",
          "--mldst-motion",
          "--coro-early",
          "--guard-widening",
          "--speculative-execution",
          "--lowerswitch",
          "--partial-inliner",
          "--loop-reroll",
          "--lower-constant-intrinsics",
          "--callsite-splitting"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--div-rem-pairs",
      "--lower-expect",
      "--separate-const-offset-from-gep",
      "--sancov",
      "--loop-vectorize",
      "--rewrite-statepoints-for-gc",
      "--aggressive-instcombine",
      "--lcssa",
      "--simple-loop-unswitch",
      "--lower-matrix-intrinsics",
      "--sroa",
      "--redundant-dbg-inst-elim",
      "--mldst-motion",
      "--coro-early",
      "--guard-widening",
      "--speculative-execution",
      "--lowerswitch",
      "--partial-inliner",
      "--loop-reroll",
      "--lower-constant-intrinsics",
      "--callsite-splitting"
    ],
    "performance_vs_Oz": "+1.3%"
  }
}
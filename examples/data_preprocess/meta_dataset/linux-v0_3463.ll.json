{
  "program_id": "linux-v0_3463.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 32,
    "onePredOneSuc": 28,
    "onePredTwoSuc": 4,
    "oneSuccessor": 33,
    "twoPred": 10,
    "twoPredOneSuc": 3,
    "twoEach": 1,
    "twoSuccessor": 9,
    "morePreds": 4,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 72,
    "BeginPhi": 1,
    "BranchCount": 42,
    "returnInt": 19,
    "CriticalCount": 3,
    "NumEdges": 67,
    "const32Bit": 191,
    "const64Bit": 12,
    "numConstZeroes": 57,
    "numConstOnes": 79,
    "UncondBranches": 33,
    "binaryConstArg": 12,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 62,
    "NumAndInst": 4,
    "BlockMid": 6,
    "BlockLow": 67,
    "NumBitCastInst": 12,
    "NumBrInst": 42,
    "NumCallInst": 51,
    "NumGetElementPtrInst": 38,
    "NumICmpInst": 9,
    "NumLShrInst": 0,
    "NumLoadInst": 127,
    "NumMulInst": 1,
    "NumOrInst": 3,
    "NumPHIInst": 1,
    "NumRetInst": 27,
    "NumSExtInst": 5,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 89,
    "NumSubInst": 1,
    "NumTruncInst": 12,
    "NumXorInst": 2,
    "NumZExtInst": 11,
    "TotalBlocks": 73,
    "TotalInsts": 508,
    "TotalMemInst": 367,
    "TotalFuncs": 50,
    "ArgsPhi": 2,
    "testUnary": 233
  },
  "baseline_oz_instcount": 508,
  "knowledge_base_entry": [
    "--loop-versioning-licm",
    "--jump-threading",
    "--sroa",
    "--instcombine",
    "--correlated-propagation",
    "--loop-reroll",
    "--lower-constant-intrinsics",
    "--loop-simplifycfg",
    "--aggressive-instcombine",
    "--early-cse-memssa",
    "--loop-reroll",
    "--indvars",
    "--gvn",
    "-loop-reduce",
    "--simplifycfg",
    "--licm",
    "--gvn-hoist",
    "--instsimplify",
    "--jump-threading",
    "--loop-rotate",
    "--elim-avail-extern",
    "--bdce",
    "--sccp"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--inline",
          "--name-anon-globals",
          "--globaldce",
          "--partially-inline-libcalls",
          "--aggressive-instcombine",
          "--globalsplit",
          "--separate-const-offset-from-gep",
          "--irce",
          "--partial-inliner",
          "--simple-loop-unswitch",
          "--loop-unswitch",
          "--loop-vectorize"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--inline",
      "--name-anon-globals",
      "--globaldce",
      "--partially-inline-libcalls",
      "--aggressive-instcombine",
      "--globalsplit",
      "--separate-const-offset-from-gep",
      "--irce",
      "--partial-inliner",
      "--simple-loop-unswitch",
      "--loop-unswitch",
      "--loop-vectorize"
    ],
    "performance_vs_Oz": "+2.8%"
  }
}
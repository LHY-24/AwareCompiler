{
  "program_id": "github-v0_40505.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 15,
    "onePredOneSuc": 10,
    "onePredTwoSuc": 2,
    "oneSuccessor": 13,
    "twoPred": 6,
    "twoPredOneSuc": 2,
    "twoEach": 4,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 24,
    "BeginPhi": 0,
    "BranchCount": 20,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 27,
    "const32Bit": 36,
    "const64Bit": 79,
    "numConstZeroes": 65,
    "numConstOnes": 29,
    "UncondBranches": 13,
    "binaryConstArg": 8,
    "NumAShrInst": 0,
    "NumAddInst": 5,
    "NumAllocaInst": 17,
    "NumAndInst": 2,
    "BlockMid": 5,
    "BlockLow": 19,
    "NumBitCastInst": 24,
    "NumBrInst": 20,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 59,
    "NumICmpInst": 7,
    "NumLShrInst": 1,
    "NumLoadInst": 55,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 35,
    "NumSubInst": 0,
    "NumTruncInst": 5,
    "NumXorInst": 0,
    "NumZExtInst": 18,
    "TotalBlocks": 24,
    "TotalInsts": 263,
    "TotalMemInst": 173,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 122
  },
  "baseline_oz_instcount": 263,
  "knowledge_base_entry": [
    "-loop-reduce",
    "--nary-reassociate",
    "--jump-threading",
    "--gvn-hoist",
    "--instcombine",
    "--newgvn",
    "--elim-avail-extern",
    "--inline",
    "--instsimplify",
    "--aggressive-instcombine",
    "--gvn-hoist",
    "--loop-simplifycfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--lower-widenable-condition",
          "--alignment-from-assumptions",
          "--cross-dso-cfi",
          "--loop-vectorize",
          "--separate-const-offset-from-gep",
          "--loweratomic",
          "--loop-guard-widening",
          "--loop-interchange",
          "--loop-unswitch",
          "--elim-avail-extern",
          "--loop-versioning",
          "--speculative-execution",
          "--reg2mem",
          "--instsimplify",
          "--mldst-motion",
          "--loop-unroll-and-jam",
          "--lowerswitch",
          "--strip-nondebug",
          "--loop-data-prefetch",
          "--sancov",
          "--div-rem-pairs",
          "--jump-threading",
          "--constmerge",
          "--called-value-propagation",
          "--consthoist",
          "--add-discriminators",
          "--aggressive-instcombine",
          "--ipconstprop"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--lower-widenable-condition",
      "--alignment-from-assumptions",
      "--cross-dso-cfi",
      "--loop-vectorize",
      "--separate-const-offset-from-gep",
      "--loweratomic",
      "--loop-guard-widening",
      "--loop-interchange",
      "--loop-unswitch",
      "--elim-avail-extern",
      "--loop-versioning",
      "--speculative-execution",
      "--reg2mem",
      "--instsimplify",
      "--mldst-motion",
      "--loop-unroll-and-jam",
      "--lowerswitch",
      "--strip-nondebug",
      "--loop-data-prefetch",
      "--sancov",
      "--div-rem-pairs",
      "--jump-threading",
      "--constmerge",
      "--called-value-propagation",
      "--consthoist",
      "--add-discriminators",
      "--aggressive-instcombine",
      "--ipconstprop"
    ],
    "performance_vs_Oz": "+2.3%"
  }
}
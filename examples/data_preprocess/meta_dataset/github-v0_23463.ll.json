{
  "program_id": "github-v0_23463.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 15,
    "onePredOneSuc": 13,
    "onePredTwoSuc": 2,
    "oneSuccessor": 14,
    "twoPred": 6,
    "twoPredOneSuc": 1,
    "twoEach": 2,
    "twoSuccessor": 8,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 28,
    "BeginPhi": 0,
    "BranchCount": 22,
    "returnInt": 8,
    "CriticalCount": 2,
    "NumEdges": 30,
    "const32Bit": 474,
    "const64Bit": 18,
    "numConstZeroes": 305,
    "numConstOnes": 89,
    "UncondBranches": 14,
    "binaryConstArg": 4,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 36,
    "NumAndInst": 0,
    "BlockMid": 10,
    "BlockLow": 18,
    "NumBitCastInst": 1,
    "NumBrInst": 22,
    "NumCallInst": 92,
    "NumGetElementPtrInst": 212,
    "NumICmpInst": 8,
    "NumLShrInst": 0,
    "NumLoadInst": 243,
    "NumMulInst": 0,
    "NumOrInst": 3,
    "NumPHIInst": 0,
    "NumRetInst": 6,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 3,
    "NumStoreInst": 50,
    "NumSubInst": 0,
    "NumTruncInst": 2,
    "NumXorInst": 1,
    "NumZExtInst": 7,
    "TotalBlocks": 28,
    "TotalInsts": 690,
    "TotalMemInst": 633,
    "TotalFuncs": 29,
    "ArgsPhi": 0,
    "testUnary": 292
  },
  "baseline_oz_instcount": 690,
  "knowledge_base_entry": [
    "--prune-eh",
    "--aggressive-instcombine",
    "--globaldce",
    "--aggressive-instcombine",
    "--licm",
    "--instsimplify",
    "--nary-reassociate",
    "-loop-reduce",
    "--instcombine",
    "--aggressive-instcombine",
    "--flattencfg",
    "--loop-simplifycfg",
    "--loop-deletion",
    "--newgvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--lower-expect",
          "--aggressive-instcombine",
          "--loop-unswitch",
          "--loop-vectorize",
          "--memcpyopt",
          "--always-inline",
          "--deadargelim",
          "--cross-dso-cfi",
          "--load-store-vectorizer",
          "--loop-unroll",
          "--simplifycfg",
          "--lower-widenable-condition",
          "--irce",
          "--strip-dead-prototypes",
          "--mldst-motion",
          "--coro-early",
          "--tailcallelim",
          "--lower-constant-intrinsics",
          "--mem2reg",
          "--inline",
          "--loop-reroll",
          "--infer-address-spaces",
          "--loop-distribute",
          "--loop-load-elim"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--lower-expect",
      "--aggressive-instcombine",
      "--loop-unswitch",
      "--loop-vectorize",
      "--memcpyopt",
      "--always-inline",
      "--deadargelim",
      "--cross-dso-cfi",
      "--load-store-vectorizer",
      "--loop-unroll",
      "--simplifycfg",
      "--lower-widenable-condition",
      "--irce",
      "--strip-dead-prototypes",
      "--mldst-motion",
      "--coro-early",
      "--tailcallelim",
      "--lower-constant-intrinsics",
      "--mem2reg",
      "--inline",
      "--loop-reroll",
      "--infer-address-spaces",
      "--loop-distribute",
      "--loop-load-elim"
    ],
    "performance_vs_Oz": "+0.4%"
  }
}
{
  "program_id": "linux-v0_8431.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 22,
    "onePredOneSuc": 15,
    "onePredTwoSuc": 7,
    "oneSuccessor": 18,
    "twoPred": 6,
    "twoPredOneSuc": 3,
    "twoEach": 1,
    "twoSuccessor": 13,
    "morePreds": 3,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 47,
    "BeginPhi": 0,
    "BranchCount": 31,
    "returnInt": 28,
    "CriticalCount": 4,
    "NumEdges": 44,
    "const32Bit": 219,
    "const64Bit": 29,
    "numConstZeroes": 97,
    "numConstOnes": 69,
    "UncondBranches": 18,
    "binaryConstArg": 23,
    "NumAShrInst": 0,
    "NumAddInst": 4,
    "NumAllocaInst": 47,
    "NumAndInst": 10,
    "BlockMid": 11,
    "BlockLow": 36,
    "NumBitCastInst": 11,
    "NumBrInst": 31,
    "NumCallInst": 46,
    "NumGetElementPtrInst": 81,
    "NumICmpInst": 15,
    "NumLShrInst": 0,
    "NumLoadInst": 155,
    "NumMulInst": 1,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 16,
    "NumSExtInst": 1,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 78,
    "NumSubInst": 2,
    "NumTruncInst": 18,
    "NumXorInst": 4,
    "NumZExtInst": 20,
    "TotalBlocks": 47,
    "TotalInsts": 547,
    "TotalMemInst": 407,
    "TotalFuncs": 30,
    "ArgsPhi": 0,
    "testUnary": 256
  },
  "baseline_oz_instcount": 547,
  "knowledge_base_entry": [
    "--partially-inline-libcalls",
    "--gvn",
    "--inline",
    "--loop-rotate",
    "--aggressive-instcombine",
    "--bdce",
    "--inline",
    "--ipsccp",
    "--dse",
    "--instcombine",
    "--loop-instsimplify",
    "--dce",
    "--jump-threading",
    "--flattencfg",
    "--load-store-vectorizer",
    "--instsimplify",
    "--lower-expect",
    "--correlated-propagation",
    "--early-cse"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--bdce",
          "--prune-eh",
          "--loop-reroll",
          "--tailcallelim",
          "--early-cse-memssa",
          "--attributor",
          "--gvn",
          "--flattencfg",
          "--libcalls-shrinkwrap",
          "--lcssa",
          "--lower-widenable-condition",
          "--mergefunc",
          "--loop-fusion",
          "--loop-unroll-and-jam",
          "--ipconstprop",
          "--aggressive-instcombine",
          "--loweratomic",
          "--lower-constant-intrinsics",
          "--globalsplit",
          "--loop-versioning-licm",
          "--scalarizer",
          "--inline",
          "--mergeicmps",
          "--simplifycfg",
          "--slp-vectorizer",
          "--coro-cleanup",
          "--coro-elide",
          "--loop-simplifycfg",
          "--loop-guard-widening"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+4.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--bdce",
      "--prune-eh",
      "--loop-reroll",
      "--tailcallelim",
      "--early-cse-memssa",
      "--attributor",
      "--gvn",
      "--flattencfg",
      "--libcalls-shrinkwrap",
      "--lcssa",
      "--lower-widenable-condition",
      "--mergefunc",
      "--loop-fusion",
      "--loop-unroll-and-jam",
      "--ipconstprop",
      "--aggressive-instcombine",
      "--loweratomic",
      "--lower-constant-intrinsics",
      "--globalsplit",
      "--loop-versioning-licm",
      "--scalarizer",
      "--inline",
      "--mergeicmps",
      "--simplifycfg",
      "--slp-vectorizer",
      "--coro-cleanup",
      "--coro-elide",
      "--loop-simplifycfg",
      "--loop-guard-widening"
    ],
    "performance_vs_Oz": "+4.9%"
  }
}
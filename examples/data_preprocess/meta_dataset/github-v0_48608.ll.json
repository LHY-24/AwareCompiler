{
  "program_id": "github-v0_48608.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 11,
    "onePredOneSuc": 7,
    "onePredTwoSuc": 1,
    "oneSuccessor": 9,
    "twoPred": 4,
    "twoPredOneSuc": 1,
    "twoEach": 3,
    "twoSuccessor": 5,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 18,
    "BeginPhi": 0,
    "BranchCount": 14,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 19,
    "const32Bit": 33,
    "const64Bit": 22,
    "numConstZeroes": 25,
    "numConstOnes": 22,
    "UncondBranches": 9,
    "binaryConstArg": 8,
    "NumAShrInst": 0,
    "NumAddInst": 7,
    "NumAllocaInst": 13,
    "NumAndInst": 0,
    "BlockMid": 4,
    "BlockLow": 14,
    "NumBitCastInst": 4,
    "NumBrInst": 14,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 18,
    "NumICmpInst": 5,
    "NumLShrInst": 0,
    "NumLoadInst": 27,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 18,
    "NumSubInst": 1,
    "NumTruncInst": 3,
    "NumXorInst": 0,
    "NumZExtInst": 6,
    "TotalBlocks": 18,
    "TotalInsts": 130,
    "TotalMemInst": 83,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 56
  },
  "baseline_oz_instcount": 130,
  "knowledge_base_entry": [
    "--jump-threading",
    "--instcombine",
    "--loop-simplifycfg",
    "--dce",
    "--ipsccp",
    "--mem2reg",
    "--adce",
    "--aggressive-instcombine",
    "--sroa",
    "--gvn-hoist",
    "--gvn",
    "--nary-reassociate",
    "--indvars",
    "--early-cse"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--jump-threading",
          "--flattencfg",
          "--inline",
          "--die",
          "--insert-gcov-profiling",
          "--inject-tli-mappings",
          "--slp-vectorizer",
          "--loop-deletion",
          "--libcalls-shrinkwrap",
          "--instsimplify",
          "--loop-versioning-licm",
          "--constmerge",
          "--sink",
          "--scalarizer",
          "--loop-unroll",
          "--sroa",
          "--div-rem-pairs",
          "--loop-idiom",
          "--loop-guard-widening",
          "--early-cse",
          "--canonicalize-aliases",
          "--correlated-propagation",
          "--loop-load-elim",
          "--loop-predication",
          "--guard-widening",
          "--indvars",
          "--lower-widenable-condition",
          "--aggressive-instcombine"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--jump-threading",
      "--flattencfg",
      "--inline",
      "--die",
      "--insert-gcov-profiling",
      "--inject-tli-mappings",
      "--slp-vectorizer",
      "--loop-deletion",
      "--libcalls-shrinkwrap",
      "--instsimplify",
      "--loop-versioning-licm",
      "--constmerge",
      "--sink",
      "--scalarizer",
      "--loop-unroll",
      "--sroa",
      "--div-rem-pairs",
      "--loop-idiom",
      "--loop-guard-widening",
      "--early-cse",
      "--canonicalize-aliases",
      "--correlated-propagation",
      "--loop-load-elim",
      "--loop-predication",
      "--guard-widening",
      "--indvars",
      "--lower-widenable-condition",
      "--aggressive-instcombine"
    ],
    "performance_vs_Oz": "+3.1%"
  }
}
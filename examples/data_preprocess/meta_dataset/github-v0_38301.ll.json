{
  "program_id": "github-v0_38301.ll",
  "autophase_features": {
    "BBNumArgsHi": 1,
    "BBNumArgsLo": 1,
    "onePred": 53,
    "onePredOneSuc": 32,
    "onePredTwoSuc": 21,
    "oneSuccessor": 41,
    "twoPred": 19,
    "twoPredOneSuc": 7,
    "twoEach": 9,
    "twoSuccessor": 35,
    "morePreds": 4,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 80,
    "BeginPhi": 2,
    "BranchCount": 76,
    "returnInt": 25,
    "CriticalCount": 20,
    "NumEdges": 111,
    "const32Bit": 263,
    "const64Bit": 5,
    "numConstZeroes": 137,
    "numConstOnes": 59,
    "UncondBranches": 41,
    "binaryConstArg": 6,
    "NumAShrInst": 0,
    "NumAddInst": 8,
    "NumAllocaInst": 34,
    "NumAndInst": 1,
    "BlockMid": 10,
    "BlockLow": 72,
    "NumBitCastInst": 7,
    "NumBrInst": 76,
    "NumCallInst": 28,
    "NumGetElementPtrInst": 83,
    "NumICmpInst": 36,
    "NumLShrInst": 0,
    "NumLoadInst": 165,
    "NumMulInst": 1,
    "NumOrInst": 0,
    "NumPHIInst": 2,
    "NumRetInst": 6,
    "NumSExtInst": 10,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 67,
    "NumSubInst": 3,
    "NumTruncInst": 1,
    "NumXorInst": 0,
    "NumZExtInst": 1,
    "TotalBlocks": 82,
    "TotalInsts": 529,
    "TotalMemInst": 377,
    "TotalFuncs": 21,
    "ArgsPhi": 8,
    "testUnary": 218
  },
  "baseline_oz_instcount": 529,
  "knowledge_base_entry": [
    "--loop-rotate",
    "--jump-threading",
    "--newgvn",
    "--sroa",
    "--sccp",
    "--dse",
    "--loop-rotate",
    "--inline",
    "--aggressive-instcombine",
    "--ipsccp",
    "--lower-constant-intrinsics",
    "--die",
    "--die",
    "--ipsccp",
    "--early-cse",
    "--instcombine",
    "--correlated-propagation",
    "--instcombine",
    "--nary-reassociate",
    "--loop-simplifycfg",
    "--mem2reg",
    "--adce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-unroll-and-jam",
          "--instsimplify",
          "--loop-unroll",
          "--globalopt",
          "--dse",
          "--newgvn",
          "--consthoist",
          "--loop-load-elim",
          "--mergefunc",
          "--bdce",
          "--slsr",
          "--coro-split",
          "--aggressive-instcombine"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-unroll-and-jam",
      "--instsimplify",
      "--loop-unroll",
      "--globalopt",
      "--dse",
      "--newgvn",
      "--consthoist",
      "--loop-load-elim",
      "--mergefunc",
      "--bdce",
      "--slsr",
      "--coro-split",
      "--aggressive-instcombine"
    ],
    "performance_vs_Oz": "+0.4%"
  }
}
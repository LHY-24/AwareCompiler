{
  "program_id": "linux-v0_6629.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 62,
    "onePredOneSuc": 44,
    "onePredTwoSuc": 17,
    "oneSuccessor": 49,
    "twoPred": 7,
    "twoPredOneSuc": 2,
    "twoEach": 1,
    "twoSuccessor": 26,
    "morePreds": 9,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 98,
    "BeginPhi": 1,
    "BranchCount": 75,
    "returnInt": 20,
    "CriticalCount": 7,
    "NumEdges": 115,
    "const32Bit": 125,
    "const64Bit": 21,
    "numConstZeroes": 51,
    "numConstOnes": 73,
    "UncondBranches": 49,
    "binaryConstArg": 16,
    "NumAShrInst": 1,
    "NumAddInst": 0,
    "NumAllocaInst": 59,
    "NumAndInst": 6,
    "BlockMid": 6,
    "BlockLow": 93,
    "NumBitCastInst": 22,
    "NumBrInst": 75,
    "NumCallInst": 50,
    "NumGetElementPtrInst": 19,
    "NumICmpInst": 28,
    "NumLShrInst": 2,
    "NumLoadInst": 129,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 1,
    "NumRetInst": 21,
    "NumSExtInst": 4,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 87,
    "NumSubInst": 1,
    "NumTruncInst": 2,
    "NumXorInst": 4,
    "NumZExtInst": 6,
    "TotalBlocks": 99,
    "TotalInsts": 525,
    "TotalMemInst": 344,
    "TotalFuncs": 42,
    "ArgsPhi": 2,
    "testUnary": 224
  },
  "baseline_oz_instcount": 525,
  "knowledge_base_entry": [
    "--loop-simplifycfg",
    "--mem2reg",
    "--mldst-motion",
    "--load-store-vectorizer",
    "--dse",
    "--early-cse",
    "--prune-eh",
    "--inline",
    "--slp-vectorizer",
    "--mergefunc",
    "--lower-constant-intrinsics",
    "--sroa",
    "--indvars",
    "--instcombine",
    "--elim-avail-extern",
    "--mldst-motion",
    "--licm"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--indvars",
          "--called-value-propagation",
          "--add-discriminators",
          "--strip-debug-declare",
          "--sink",
          "--loop-versioning-licm",
          "--mergefunc",
          "--loop-vectorize",
          "--loop-data-prefetch",
          "--strip-dead-prototypes",
          "--loop-predication",
          "--rpo-functionattrs",
          "--separate-const-offset-from-gep",
          "--slsr",
          "--infer-address-spaces",
          "--irce",
          "--hotcoldsplit",
          "--partial-inliner",
          "--barrier",
          "--simple-loop-unswitch",
          "--loop-reroll",
          "--ipconstprop",
          "--coro-split"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.0%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--indvars",
      "--called-value-propagation",
      "--add-discriminators",
      "--strip-debug-declare",
      "--sink",
      "--loop-versioning-licm",
      "--mergefunc",
      "--loop-vectorize",
      "--loop-data-prefetch",
      "--strip-dead-prototypes",
      "--loop-predication",
      "--rpo-functionattrs",
      "--separate-const-offset-from-gep",
      "--slsr",
      "--infer-address-spaces",
      "--irce",
      "--hotcoldsplit",
      "--partial-inliner",
      "--barrier",
      "--simple-loop-unswitch",
      "--loop-reroll",
      "--ipconstprop",
      "--coro-split"
    ],
    "performance_vs_Oz": "+1.0%"
  }
}
{
  "program_id": "linux-v0_6360.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 50,
    "onePredOneSuc": 35,
    "onePredTwoSuc": 15,
    "oneSuccessor": 48,
    "twoPred": 29,
    "twoPredOneSuc": 13,
    "twoEach": 9,
    "twoSuccessor": 32,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 90,
    "BeginPhi": 0,
    "BranchCount": 80,
    "returnInt": 4,
    "CriticalCount": 20,
    "NumEdges": 112,
    "const32Bit": 271,
    "const64Bit": 33,
    "numConstZeroes": 159,
    "numConstOnes": 87,
    "UncondBranches": 48,
    "binaryConstArg": 20,
    "NumAShrInst": 0,
    "NumAddInst": 13,
    "NumAllocaInst": 60,
    "NumAndInst": 8,
    "BlockMid": 13,
    "BlockLow": 77,
    "NumBitCastInst": 18,
    "NumBrInst": 80,
    "NumCallInst": 17,
    "NumGetElementPtrInst": 118,
    "NumICmpInst": 36,
    "NumLShrInst": 0,
    "NumLoadInst": 217,
    "NumMulInst": 1,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 10,
    "NumSExtInst": 45,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 88,
    "NumSubInst": 0,
    "NumTruncInst": 11,
    "NumXorInst": 2,
    "NumZExtInst": 13,
    "TotalBlocks": 90,
    "TotalInsts": 743,
    "TotalMemInst": 500,
    "TotalFuncs": 18,
    "ArgsPhi": 0,
    "testUnary": 367
  },
  "baseline_oz_instcount": 743,
  "knowledge_base_entry": [
    "--early-cse-memssa",
    "--dse",
    "--early-cse",
    "--die",
    "--loop-instsimplify",
    "--lower-constant-intrinsics",
    "--mergefunc",
    "--bdce",
    "--mergefunc",
    "--early-cse-memssa",
    "--lower-constant-intrinsics",
    "--aggressive-instcombine",
    "--loweratomic",
    "--instcombine",
    "--instsimplify",
    "--die",
    "--loop-instsimplify",
    "--dse",
    "--slp-vectorizer",
    "--lower-expect",
    "--adce",
    "--elim-avail-extern"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--sink",
          "--lowerswitch",
          "--lowerinvoke",
          "--loop-versioning",
          "--called-value-propagation",
          "--aggressive-instcombine",
          "--insert-gcov-profiling",
          "--loop-guard-widening",
          "--lower-expect",
          "--loop-simplify",
          "--argpromotion",
          "--loop-unroll-and-jam",
          "--ipsccp",
          "--globaldce"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--sink",
      "--lowerswitch",
      "--lowerinvoke",
      "--loop-versioning",
      "--called-value-propagation",
      "--aggressive-instcombine",
      "--insert-gcov-profiling",
      "--loop-guard-widening",
      "--lower-expect",
      "--loop-simplify",
      "--argpromotion",
      "--loop-unroll-and-jam",
      "--ipsccp",
      "--globaldce"
    ],
    "performance_vs_Oz": "+0.5%"
  }
}
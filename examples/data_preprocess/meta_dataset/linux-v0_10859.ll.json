{
  "program_id": "linux-v0_10859.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 37,
    "onePredOneSuc": 28,
    "onePredTwoSuc": 7,
    "oneSuccessor": 35,
    "twoPred": 16,
    "twoPredOneSuc": 2,
    "twoEach": 8,
    "twoSuccessor": 20,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 72,
    "BeginPhi": 0,
    "BranchCount": 55,
    "returnInt": 20,
    "CriticalCount": 9,
    "NumEdges": 75,
    "const32Bit": 85,
    "const64Bit": 22,
    "numConstZeroes": 30,
    "numConstOnes": 74,
    "UncondBranches": 35,
    "binaryConstArg": 28,
    "NumAShrInst": 0,
    "NumAddInst": 8,
    "NumAllocaInst": 40,
    "NumAndInst": 10,
    "BlockMid": 7,
    "BlockLow": 65,
    "NumBitCastInst": 2,
    "NumBrInst": 55,
    "NumCallInst": 71,
    "NumGetElementPtrInst": 2,
    "NumICmpInst": 20,
    "NumLShrInst": 0,
    "NumLoadInst": 99,
    "NumMulInst": 0,
    "NumOrInst": 3,
    "NumPHIInst": 0,
    "NumRetInst": 17,
    "NumSExtInst": 9,
    "NumSelectInst": 0,
    "NumShlInst": 13,
    "NumStoreInst": 76,
    "NumSubInst": 0,
    "NumTruncInst": 27,
    "NumXorInst": 8,
    "NumZExtInst": 26,
    "TotalBlocks": 72,
    "TotalInsts": 486,
    "TotalMemInst": 288,
    "TotalFuncs": 19,
    "ArgsPhi": 0,
    "testUnary": 203
  },
  "baseline_oz_instcount": 490,
  "knowledge_base_entry": [
    "--reassociate",
    "--aggressive-instcombine",
    "--loweratomic",
    "--ipsccp",
    "--jump-threading",
    "--slp-vectorizer",
    "--die",
    "--early-cse-memssa",
    "--gvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--functionattrs",
          "--attributor",
          "--loop-simplifycfg",
          "--loop-idiom",
          "--instnamer",
          "--ipsccp",
          "--lcssa",
          "--globalsplit",
          "--mergeicmps",
          "--loop-instsimplify",
          "--lower-widenable-condition"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--functionattrs",
      "--attributor",
      "--loop-simplifycfg",
      "--loop-idiom",
      "--instnamer",
      "--ipsccp",
      "--lcssa",
      "--globalsplit",
      "--mergeicmps",
      "--loop-instsimplify",
      "--lower-widenable-condition"
    ],
    "performance_vs_Oz": "+2.7%"
  }
}
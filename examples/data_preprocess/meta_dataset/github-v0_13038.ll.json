{
  "program_id": "github-v0_13038.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 15,
    "onePredOneSuc": 12,
    "onePredTwoSuc": 2,
    "oneSuccessor": 12,
    "twoPred": 0,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 5,
    "morePreds": 3,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 20,
    "BeginPhi": 0,
    "BranchCount": 17,
    "returnInt": 12,
    "CriticalCount": 0,
    "NumEdges": 26,
    "const32Bit": 186,
    "const64Bit": 24,
    "numConstZeroes": 160,
    "numConstOnes": 41,
    "UncondBranches": 12,
    "binaryConstArg": 14,
    "NumAShrInst": 1,
    "NumAddInst": 1,
    "NumAllocaInst": 25,
    "NumAndInst": 2,
    "BlockMid": 5,
    "BlockLow": 15,
    "NumBitCastInst": 1,
    "NumBrInst": 17,
    "NumCallInst": 33,
    "NumGetElementPtrInst": 80,
    "NumICmpInst": 5,
    "NumLShrInst": 3,
    "NumLoadInst": 63,
    "NumMulInst": 1,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 2,
    "NumSExtInst": 1,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 25,
    "NumSubInst": 2,
    "NumTruncInst": 1,
    "NumXorInst": 3,
    "NumZExtInst": 5,
    "TotalBlocks": 20,
    "TotalInsts": 275,
    "TotalMemInst": 226,
    "TotalFuncs": 17,
    "ArgsPhi": 0,
    "testUnary": 96
  },
  "baseline_oz_instcount": 276,
  "knowledge_base_entry": [
    "--correlated-propagation",
    "--simplifycfg",
    "--aggressive-instcombine",
    "--early-cse",
    "--gvn-hoist",
    "--slp-vectorizer",
    "--mem2reg",
    "--mergefunc",
    "--adce",
    "--instsimplify"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--post-inline-ee-instrument",
          "--globaldce",
          "--argpromotion",
          "--aggressive-instcombine",
          "--libcalls-shrinkwrap",
          "--gvn",
          "--loop-versioning-licm",
          "--correlated-propagation",
          "--strip",
          "--forceattrs",
          "--reassociate"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--post-inline-ee-instrument",
      "--globaldce",
      "--argpromotion",
      "--aggressive-instcombine",
      "--libcalls-shrinkwrap",
      "--gvn",
      "--loop-versioning-licm",
      "--correlated-propagation",
      "--strip",
      "--forceattrs",
      "--reassociate"
    ],
    "performance_vs_Oz": "+0.7%"
  }
}
{
  "program_id": "github-v0_29504.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 14,
    "onePredOneSuc": 9,
    "onePredTwoSuc": 3,
    "oneSuccessor": 12,
    "twoPred": 6,
    "twoPredOneSuc": 3,
    "twoEach": 2,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 23,
    "BeginPhi": 0,
    "BranchCount": 19,
    "returnInt": 4,
    "CriticalCount": 1,
    "NumEdges": 26,
    "const32Bit": 48,
    "const64Bit": 56,
    "numConstZeroes": 62,
    "numConstOnes": 24,
    "UncondBranches": 12,
    "binaryConstArg": 21,
    "NumAShrInst": 3,
    "NumAddInst": 6,
    "NumAllocaInst": 12,
    "NumAndInst": 7,
    "BlockMid": 7,
    "BlockLow": 16,
    "NumBitCastInst": 4,
    "NumBrInst": 19,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 34,
    "NumICmpInst": 7,
    "NumLShrInst": 0,
    "NumLoadInst": 37,
    "NumMulInst": 1,
    "NumOrInst": 5,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 5,
    "NumStoreInst": 21,
    "NumSubInst": 2,
    "NumTruncInst": 8,
    "NumXorInst": 0,
    "NumZExtInst": 20,
    "TotalBlocks": 23,
    "TotalInsts": 205,
    "TotalMemInst": 111,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 84
  },
  "baseline_oz_instcount": 205,
  "knowledge_base_entry": [
    "--sroa",
    "--load-store-vectorizer",
    "--aggressive-instcombine",
    "--early-cse",
    "--adce",
    "--aggressive-instcombine",
    "--reassociate",
    "--licm",
    "--jump-threading",
    "--loop-reroll",
    "--newgvn",
    "--gvn-hoist",
    "--early-cse",
    "--early-cse-memssa",
    "--bdce",
    "--load-store-vectorizer",
    "--memcpyopt",
    "--loop-simplifycfg",
    "--die",
    "--gvn",
    "--lower-expect",
    "--loop-rotate",
    "--inline",
    "--mergefunc",
    "--dse"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-idiom",
          "--redundant-dbg-inst-elim",
          "--argpromotion",
          "--instcombine",
          "--correlated-propagation",
          "--rewrite-statepoints-for-gc",
          "--deadargelim",
          "--globalopt",
          "--loop-versioning-licm",
          "--hotcoldsplit",
          "--loop-unroll",
          "--aggressive-instcombine",
          "--sroa",
          "--strip-dead-prototypes",
          "--gvn",
          "--loop-unswitch",
          "--lower-widenable-condition",
          "--separate-const-offset-from-gep",
          "--libcalls-shrinkwrap",
          "--bdce",
          "--canonicalize-aliases"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-idiom",
      "--redundant-dbg-inst-elim",
      "--argpromotion",
      "--instcombine",
      "--correlated-propagation",
      "--rewrite-statepoints-for-gc",
      "--deadargelim",
      "--globalopt",
      "--loop-versioning-licm",
      "--hotcoldsplit",
      "--loop-unroll",
      "--aggressive-instcombine",
      "--sroa",
      "--strip-dead-prototypes",
      "--gvn",
      "--loop-unswitch",
      "--lower-widenable-condition",
      "--separate-const-offset-from-gep",
      "--libcalls-shrinkwrap",
      "--bdce",
      "--canonicalize-aliases"
    ],
    "performance_vs_Oz": "+2.4%"
  }
}
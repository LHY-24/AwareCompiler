{
  "program_id": "github-v0_17760.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 40,
    "onePredOneSuc": 30,
    "onePredTwoSuc": 7,
    "oneSuccessor": 38,
    "twoPred": 8,
    "twoPredOneSuc": 3,
    "twoEach": 3,
    "twoSuccessor": 12,
    "morePreds": 5,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 60,
    "BeginPhi": 0,
    "BranchCount": 50,
    "returnInt": 2,
    "CriticalCount": 10,
    "NumEdges": 85,
    "const32Bit": 132,
    "const64Bit": 0,
    "numConstZeroes": 59,
    "numConstOnes": 53,
    "UncondBranches": 38,
    "binaryConstArg": 15,
    "NumAShrInst": 0,
    "NumAddInst": 10,
    "NumAllocaInst": 28,
    "NumAndInst": 4,
    "BlockMid": 8,
    "BlockLow": 52,
    "NumBitCastInst": 5,
    "NumBrInst": 50,
    "NumCallInst": 12,
    "NumGetElementPtrInst": 39,
    "NumICmpInst": 12,
    "NumLShrInst": 0,
    "NumLoadInst": 113,
    "NumMulInst": 1,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 7,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 3,
    "NumStoreInst": 57,
    "NumSubInst": 1,
    "NumTruncInst": 10,
    "NumXorInst": 1,
    "NumZExtInst": 34,
    "TotalBlocks": 60,
    "TotalInsts": 394,
    "TotalMemInst": 249,
    "TotalFuncs": 11,
    "ArgsPhi": 0,
    "testUnary": 193
  },
  "baseline_oz_instcount": 394,
  "knowledge_base_entry": [
    "--speculative-execution",
    "--gvn-hoist",
    "--dce",
    "--aggressive-instcombine",
    "--instsimplify",
    "--aggressive-instcombine",
    "--mem2reg",
    "--simplifycfg",
    "--loop-deletion",
    "--jump-threading"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--float2int",
          "--redundant-dbg-inst-elim",
          "--strip-debug-declare",
          "--loop-reroll",
          "--prune-eh",
          "--slp-vectorizer",
          "--lower-constant-intrinsics",
          "--loop-versioning-licm",
          "--rewrite-statepoints-for-gc",
          "--hotcoldsplit",
          "--sancov",
          "--lcssa",
          "--cross-dso-cfi",
          "--guard-widening",
          "--always-inline",
          "--instcombine",
          "--div-rem-pairs",
          "--early-cse-memssa",
          "--slsr",
          "--loop-load-elim",
          "--coro-cleanup",
          "--globalopt",
          "--correlated-propagation",
          "--loop-distribute",
          "--aggressive-instcombine"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+4.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--float2int",
      "--redundant-dbg-inst-elim",
      "--strip-debug-declare",
      "--loop-reroll",
      "--prune-eh",
      "--slp-vectorizer",
      "--lower-constant-intrinsics",
      "--loop-versioning-licm",
      "--rewrite-statepoints-for-gc",
      "--hotcoldsplit",
      "--sancov",
      "--lcssa",
      "--cross-dso-cfi",
      "--guard-widening",
      "--always-inline",
      "--instcombine",
      "--div-rem-pairs",
      "--early-cse-memssa",
      "--slsr",
      "--loop-load-elim",
      "--coro-cleanup",
      "--globalopt",
      "--correlated-propagation",
      "--loop-distribute",
      "--aggressive-instcombine"
    ],
    "performance_vs_Oz": "+4.8%"
  }
}
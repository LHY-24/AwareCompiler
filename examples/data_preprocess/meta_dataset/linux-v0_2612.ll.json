{
  "program_id": "linux-v0_2612.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 34,
    "onePredOneSuc": 28,
    "onePredTwoSuc": 6,
    "oneSuccessor": 32,
    "twoPred": 16,
    "twoPredOneSuc": 3,
    "twoEach": 5,
    "twoSuccessor": 20,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 72,
    "BeginPhi": 0,
    "BranchCount": 52,
    "returnInt": 14,
    "CriticalCount": 7,
    "NumEdges": 72,
    "const32Bit": 307,
    "const64Bit": 5,
    "numConstZeroes": 136,
    "numConstOnes": 102,
    "UncondBranches": 32,
    "binaryConstArg": 28,
    "NumAShrInst": 1,
    "NumAddInst": 7,
    "NumAllocaInst": 75,
    "NumAndInst": 5,
    "BlockMid": 18,
    "BlockLow": 54,
    "NumBitCastInst": 15,
    "NumBrInst": 52,
    "NumCallInst": 40,
    "NumGetElementPtrInst": 93,
    "NumICmpInst": 22,
    "NumLShrInst": 0,
    "NumLoadInst": 217,
    "NumMulInst": 2,
    "NumOrInst": 3,
    "NumPHIInst": 0,
    "NumRetInst": 20,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 15,
    "NumStoreInst": 103,
    "NumSubInst": 9,
    "NumTruncInst": 14,
    "NumXorInst": 4,
    "NumZExtInst": 8,
    "TotalBlocks": 72,
    "TotalInsts": 716,
    "TotalMemInst": 528,
    "TotalFuncs": 36,
    "ArgsPhi": 0,
    "testUnary": 336
  },
  "baseline_oz_instcount": 716,
  "knowledge_base_entry": [
    "--prune-eh",
    "--instcombine",
    "--early-cse",
    "--elim-avail-extern",
    "--prune-eh",
    "--aggressive-instcombine",
    "--simplifycfg",
    "--loop-simplifycfg",
    "--elim-avail-extern",
    "--early-cse-memssa",
    "--bdce",
    "--simplifycfg",
    "--correlated-propagation",
    "--globalopt",
    "--globaldce",
    "--mergefunc",
    "--instcombine",
    "--memcpyopt",
    "--gvn",
    "--correlated-propagation",
    "--slp-vectorizer",
    "--sroa",
    "--adce",
    "--inline"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--guard-widening",
          "--aggressive-instcombine",
          "--inject-tli-mappings",
          "--called-value-propagation",
          "--div-rem-pairs",
          "-loop-reduce",
          "--elim-avail-extern",
          "--flattencfg",
          "--loop-fusion",
          "--sroa",
          "--lower-widenable-condition",
          "--nary-reassociate",
          "--licm",
          "--loop-distribute",
          "--hotcoldsplit",
          "--early-cse-memssa",
          "--early-cse",
          "--coro-early",
          "--loop-predication",
          "--sancov"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--guard-widening",
      "--aggressive-instcombine",
      "--inject-tli-mappings",
      "--called-value-propagation",
      "--div-rem-pairs",
      "-loop-reduce",
      "--elim-avail-extern",
      "--flattencfg",
      "--loop-fusion",
      "--sroa",
      "--lower-widenable-condition",
      "--nary-reassociate",
      "--licm",
      "--loop-distribute",
      "--hotcoldsplit",
      "--early-cse-memssa",
      "--early-cse",
      "--coro-early",
      "--loop-predication",
      "--sancov"
    ],
    "performance_vs_Oz": "+0.6%"
  }
}
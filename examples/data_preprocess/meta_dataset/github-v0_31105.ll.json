{
  "program_id": "github-v0_31105.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 30,
    "onePredOneSuc": 25,
    "onePredTwoSuc": 4,
    "oneSuccessor": 30,
    "twoPred": 21,
    "twoPredOneSuc": 2,
    "twoEach": 13,
    "twoSuccessor": 21,
    "morePreds": 0,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 62,
    "BeginPhi": 2,
    "BranchCount": 51,
    "returnInt": 18,
    "CriticalCount": 13,
    "NumEdges": 72,
    "const32Bit": 155,
    "const64Bit": 32,
    "numConstZeroes": 69,
    "numConstOnes": 68,
    "UncondBranches": 30,
    "binaryConstArg": 9,
    "NumAShrInst": 0,
    "NumAddInst": 7,
    "NumAllocaInst": 56,
    "NumAndInst": 0,
    "BlockMid": 10,
    "BlockLow": 54,
    "NumBitCastInst": 13,
    "NumBrInst": 51,
    "NumCallInst": 62,
    "NumGetElementPtrInst": 50,
    "NumICmpInst": 21,
    "NumLShrInst": 0,
    "NumLoadInst": 155,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 2,
    "NumRetInst": 13,
    "NumSExtInst": 10,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 74,
    "NumSubInst": 2,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 64,
    "TotalInsts": 519,
    "TotalMemInst": 397,
    "TotalFuncs": 31,
    "ArgsPhi": 4,
    "testUnary": 235
  },
  "baseline_oz_instcount": 520,
  "knowledge_base_entry": [
    "--prune-eh",
    "--gvn-hoist",
    "--mem2reg",
    "--load-store-vectorizer",
    "--inline",
    "--globalopt",
    "--gvn-hoist",
    "--load-store-vectorizer",
    "--inline",
    "--mem2reg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--simplifycfg",
          "--ipconstprop",
          "--globaldce",
          "--hotcoldsplit",
          "--lower-constant-intrinsics",
          "--partially-inline-libcalls",
          "--sancov",
          "--alignment-from-assumptions",
          "--dse",
          "--loop-unroll-and-jam",
          "--lcssa",
          "--lower-widenable-condition",
          "--inject-tli-mappings"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--simplifycfg",
      "--ipconstprop",
      "--globaldce",
      "--hotcoldsplit",
      "--lower-constant-intrinsics",
      "--partially-inline-libcalls",
      "--sancov",
      "--alignment-from-assumptions",
      "--dse",
      "--loop-unroll-and-jam",
      "--lcssa",
      "--lower-widenable-condition",
      "--inject-tli-mappings"
    ],
    "performance_vs_Oz": "+0.2%"
  }
}
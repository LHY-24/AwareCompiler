{
  "program_id": "linux-v0_8083.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 49,
    "onePredOneSuc": 32,
    "onePredTwoSuc": 14,
    "oneSuccessor": 38,
    "twoPred": 6,
    "twoPredOneSuc": 1,
    "twoEach": 0,
    "twoSuccessor": 22,
    "morePreds": 7,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 83,
    "BeginPhi": 0,
    "BranchCount": 60,
    "returnInt": 69,
    "CriticalCount": 9,
    "NumEdges": 90,
    "const32Bit": 314,
    "const64Bit": 14,
    "numConstZeroes": 143,
    "numConstOnes": 109,
    "UncondBranches": 38,
    "binaryConstArg": 16,
    "NumAShrInst": 1,
    "NumAddInst": 0,
    "NumAllocaInst": 85,
    "NumAndInst": 1,
    "BlockMid": 18,
    "BlockLow": 65,
    "NumBitCastInst": 15,
    "NumBrInst": 60,
    "NumCallInst": 106,
    "NumGetElementPtrInst": 90,
    "NumICmpInst": 17,
    "NumLShrInst": 0,
    "NumLoadInst": 282,
    "NumMulInst": 4,
    "NumOrInst": 2,
    "NumPHIInst": 0,
    "NumRetInst": 21,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 133,
    "NumSubInst": 18,
    "NumTruncInst": 25,
    "NumXorInst": 2,
    "NumZExtInst": 27,
    "TotalBlocks": 83,
    "TotalInsts": 898,
    "TotalMemInst": 696,
    "TotalFuncs": 70,
    "ArgsPhi": 0,
    "testUnary": 441
  },
  "baseline_oz_instcount": 898,
  "knowledge_base_entry": [
    "--loop-rotate",
    "--aggressive-instcombine",
    "--gvn",
    "--slsr",
    "--early-cse"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-sink",
          "--infer-address-spaces",
          "--argpromotion",
          "--loop-simplifycfg",
          "--strip-dead-prototypes",
          "--post-inline-ee-instrument",
          "--gvn",
          "--loop-load-elim",
          "--loop-data-prefetch",
          "--aggressive-instcombine",
          "--loop-rotate",
          "--lower-matrix-intrinsics",
          "--instnamer",
          "--mergereturn",
          "--load-store-vectorizer",
          "--name-anon-globals",
          "--partially-inline-libcalls",
          "--elim-avail-extern",
          "--slsr",
          "--canonicalize-aliases",
          "--add-discriminators",
          "--strip-debug-declare",
          "--loop-interchange",
          "--lcssa",
          "--loop-guard-widening",
          "--ipconstprop",
          "--always-inline",
          "--instsimplify",
          "--newgvn"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-sink",
      "--infer-address-spaces",
      "--argpromotion",
      "--loop-simplifycfg",
      "--strip-dead-prototypes",
      "--post-inline-ee-instrument",
      "--gvn",
      "--loop-load-elim",
      "--loop-data-prefetch",
      "--aggressive-instcombine",
      "--loop-rotate",
      "--lower-matrix-intrinsics",
      "--instnamer",
      "--mergereturn",
      "--load-store-vectorizer",
      "--name-anon-globals",
      "--partially-inline-libcalls",
      "--elim-avail-extern",
      "--slsr",
      "--canonicalize-aliases",
      "--add-discriminators",
      "--strip-debug-declare",
      "--loop-interchange",
      "--lcssa",
      "--loop-guard-widening",
      "--ipconstprop",
      "--always-inline",
      "--instsimplify",
      "--newgvn"
    ],
    "performance_vs_Oz": "+1.1%"
  }
}
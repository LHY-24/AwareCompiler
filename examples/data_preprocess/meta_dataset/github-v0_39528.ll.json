{
  "program_id": "github-v0_39528.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 11,
    "onePredOneSuc": 8,
    "onePredTwoSuc": 3,
    "oneSuccessor": 9,
    "twoPred": 2,
    "twoPredOneSuc": 0,
    "twoEach": 1,
    "twoSuccessor": 5,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 16,
    "BeginPhi": 0,
    "BranchCount": 14,
    "returnInt": 1,
    "CriticalCount": 1,
    "NumEdges": 19,
    "const32Bit": 22,
    "const64Bit": 3,
    "numConstZeroes": 10,
    "numConstOnes": 13,
    "UncondBranches": 9,
    "binaryConstArg": 1,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 8,
    "NumAndInst": 0,
    "BlockMid": 0,
    "BlockLow": 16,
    "NumBitCastInst": 0,
    "NumBrInst": 14,
    "NumCallInst": 3,
    "NumGetElementPtrInst": 4,
    "NumICmpInst": 5,
    "NumLShrInst": 0,
    "NumLoadInst": 16,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 2,
    "NumSExtInst": 1,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 15,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 4,
    "TotalBlocks": 16,
    "TotalInsts": 73,
    "TotalMemInst": 46,
    "TotalFuncs": 4,
    "ArgsPhi": 0,
    "testUnary": 29
  },
  "baseline_oz_instcount": 74,
  "knowledge_base_entry": [
    "--lowerinvoke",
    "--newgvn",
    "--instcombine"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--lower-matrix-intrinsics",
          "--attributor",
          "--loweratomic",
          "--lowerswitch",
          "--loop-data-prefetch",
          "--gvn",
          "--instcombine",
          "--newgvn",
          "--deadargelim",
          "--gvn-hoist",
          "--float2int"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--lower-matrix-intrinsics",
      "--attributor",
      "--loweratomic",
      "--lowerswitch",
      "--loop-data-prefetch",
      "--gvn",
      "--instcombine",
      "--newgvn",
      "--deadargelim",
      "--gvn-hoist",
      "--float2int"
    ],
    "performance_vs_Oz": "+1.4%"
  }
}
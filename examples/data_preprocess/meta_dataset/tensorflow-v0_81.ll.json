{
  "program_id": "tensorflow-v0_81.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 1,
    "onePredOneSuc": 1,
    "onePredTwoSuc": 0,
    "oneSuccessor": 1,
    "twoPred": 1,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 1,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 3,
    "BeginPhi": 0,
    "BranchCount": 2,
    "returnInt": 0,
    "CriticalCount": 1,
    "NumEdges": 3,
    "const32Bit": 8,
    "const64Bit": 7,
    "numConstZeroes": 10,
    "numConstOnes": 3,
    "UncondBranches": 1,
    "binaryConstArg": 0,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 2,
    "NumAndInst": 0,
    "BlockMid": 0,
    "BlockLow": 3,
    "NumBitCastInst": 1,
    "NumBrInst": 2,
    "NumCallInst": 8,
    "NumGetElementPtrInst": 3,
    "NumICmpInst": 1,
    "NumLShrInst": 0,
    "NumLoadInst": 1,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 1,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 3,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 3,
    "TotalInsts": 22,
    "TotalMemInst": 17,
    "TotalFuncs": 7,
    "ArgsPhi": 0,
    "testUnary": 4
  },
  "baseline_oz_instcount": 22,
  "knowledge_base_entry": [
    "--instcombine",
    "--dce",
    "--loop-simplifycfg",
    "--die",
    "--inline",
    "--jump-threading",
    "--ipsccp",
    "--inline",
    "--dse",
    "--load-store-vectorizer",
    "--aggressive-instcombine",
    "--globalopt",
    "--dse",
    "--licm",
    "--mem2reg",
    "--newgvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--rewrite-statepoints-for-gc",
          "--loop-vectorize",
          "--coro-elide",
          "--loop-interchange",
          "--partial-inliner",
          "--jump-threading",
          "--scalarizer",
          "--div-rem-pairs",
          "--rpo-functionattrs",
          "--mergeicmps",
          "--callsite-splitting",
          "--libcalls-shrinkwrap",
          "--lower-guard-intrinsic",
          "--loop-fusion",
          "--loop-deletion",
          "--ipconstprop",
          "--early-cse-memssa",
          "--tailcallelim",
          "--early-cse",
          "--load-store-vectorizer",
          "--inferattrs",
          "--mem2reg",
          "--aggressive-instcombine",
          "--memcpyopt",
          "--lower-matrix-intrinsics",
          "--loop-unroll-and-jam"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+4.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--rewrite-statepoints-for-gc",
      "--loop-vectorize",
      "--coro-elide",
      "--loop-interchange",
      "--partial-inliner",
      "--jump-threading",
      "--scalarizer",
      "--div-rem-pairs",
      "--rpo-functionattrs",
      "--mergeicmps",
      "--callsite-splitting",
      "--libcalls-shrinkwrap",
      "--lower-guard-intrinsic",
      "--loop-fusion",
      "--loop-deletion",
      "--ipconstprop",
      "--early-cse-memssa",
      "--tailcallelim",
      "--early-cse",
      "--load-store-vectorizer",
      "--inferattrs",
      "--mem2reg",
      "--aggressive-instcombine",
      "--memcpyopt",
      "--lower-matrix-intrinsics",
      "--loop-unroll-and-jam"
    ],
    "performance_vs_Oz": "+4.5%"
  }
}
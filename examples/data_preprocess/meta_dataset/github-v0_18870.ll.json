{
  "program_id": "github-v0_18870.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 16,
    "onePredOneSuc": 9,
    "onePredTwoSuc": 4,
    "oneSuccessor": 14,
    "twoPred": 7,
    "twoPredOneSuc": 4,
    "twoEach": 3,
    "twoSuccessor": 8,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 26,
    "BeginPhi": 0,
    "BranchCount": 22,
    "returnInt": 4,
    "CriticalCount": 1,
    "NumEdges": 30,
    "const32Bit": 33,
    "const64Bit": 46,
    "numConstZeroes": 43,
    "numConstOnes": 26,
    "UncondBranches": 14,
    "binaryConstArg": 8,
    "NumAShrInst": 0,
    "NumAddInst": 6,
    "NumAllocaInst": 14,
    "NumAndInst": 0,
    "BlockMid": 5,
    "BlockLow": 21,
    "NumBitCastInst": 8,
    "NumBrInst": 22,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 33,
    "NumICmpInst": 8,
    "NumLShrInst": 0,
    "NumLoadInst": 41,
    "NumMulInst": 2,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 22,
    "NumSubInst": 1,
    "NumTruncInst": 3,
    "NumXorInst": 0,
    "NumZExtInst": 7,
    "TotalBlocks": 26,
    "TotalInsts": 181,
    "TotalMemInst": 117,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 76
  },
  "baseline_oz_instcount": 181,
  "knowledge_base_entry": [
    "--elim-avail-extern",
    "--die",
    "--mergefunc",
    "--flattencfg",
    "--newgvn",
    "--indvars",
    "--sroa",
    "--flattencfg",
    "--simplifycfg",
    "--lower-expect",
    "--newgvn",
    "--loop-rotate",
    "--dse",
    "--gvn-hoist",
    "--adce",
    "--aggressive-instcombine",
    "--ipsccp",
    "--licm",
    "--dce",
    "--jump-threading",
    "--loop-simplifycfg",
    "--globalopt",
    "--sroa",
    "--memcpyopt",
    "--gvn",
    "--aggressive-instcombine",
    "--reassociate"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--name-anon-globals",
          "--tailcallelim",
          "--loop-versioning-licm",
          "--globalopt",
          "--sancov",
          "--adce",
          "--sroa",
          "--gvn",
          "--libcalls-shrinkwrap",
          "--redundant-dbg-inst-elim",
          "--ipsccp",
          "--hotcoldsplit",
          "--licm",
          "--loop-deletion",
          "--coro-split",
          "--mem2reg",
          "--inject-tli-mappings",
          "--mergefunc",
          "--aggressive-instcombine"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--name-anon-globals",
      "--tailcallelim",
      "--loop-versioning-licm",
      "--globalopt",
      "--sancov",
      "--adce",
      "--sroa",
      "--gvn",
      "--libcalls-shrinkwrap",
      "--redundant-dbg-inst-elim",
      "--ipsccp",
      "--hotcoldsplit",
      "--licm",
      "--loop-deletion",
      "--coro-split",
      "--mem2reg",
      "--inject-tli-mappings",
      "--mergefunc",
      "--aggressive-instcombine"
    ],
    "performance_vs_Oz": "+2.2%"
  }
}
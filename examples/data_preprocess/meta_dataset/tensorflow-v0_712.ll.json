{
  "program_id": "tensorflow-v0_712.ll",
  "autophase_features": {
    "BBNumArgsHi": 4,
    "BBNumArgsLo": 12,
    "onePred": 46,
    "onePredOneSuc": 29,
    "onePredTwoSuc": 16,
    "oneSuccessor": 36,
    "twoPred": 24,
    "twoPredOneSuc": 6,
    "twoEach": 17,
    "twoSuccessor": 39,
    "morePreds": 6,
    "BB03Phi": 15,
    "BBHiPhi": 1,
    "BBNoPhi": 64,
    "BeginPhi": 16,
    "BranchCount": 75,
    "returnInt": 5,
    "CriticalCount": 32,
    "NumEdges": 114,
    "const32Bit": 178,
    "const64Bit": 172,
    "numConstZeroes": 204,
    "numConstOnes": 65,
    "UncondBranches": 36,
    "binaryConstArg": 44,
    "NumAShrInst": 0,
    "NumAddInst": 28,
    "NumAllocaInst": 21,
    "NumAndInst": 11,
    "BlockMid": 12,
    "BlockLow": 68,
    "NumBitCastInst": 50,
    "NumBrInst": 75,
    "NumCallInst": 87,
    "NumGetElementPtrInst": 109,
    "NumICmpInst": 52,
    "NumLShrInst": 0,
    "NumLoadInst": 75,
    "NumMulInst": 13,
    "NumOrInst": 3,
    "NumPHIInst": 24,
    "NumRetInst": 4,
    "NumSExtInst": 10,
    "NumSelectInst": 11,
    "NumShlInst": 1,
    "NumStoreInst": 65,
    "NumSubInst": 7,
    "NumTruncInst": 7,
    "NumXorInst": 0,
    "NumZExtInst": 5,
    "TotalBlocks": 80,
    "TotalInsts": 662,
    "TotalMemInst": 357,
    "TotalFuncs": 27,
    "ArgsPhi": 59,
    "testUnary": 171
  },
  "baseline_oz_instcount": 647,
  "knowledge_base_entry": [
    "--speculative-execution",
    "--early-cse",
    "--loop-instsimplify",
    "--instcombine",
    "--gvn-hoist",
    "--mergefunc",
    "--flattencfg",
    "--simplifycfg",
    "--loop-reroll",
    "--indvars",
    "--early-cse-memssa",
    "--mem2reg",
    "--slp-vectorizer",
    "--dce",
    "--correlated-propagation",
    "--load-store-vectorizer",
    "--jump-threading",
    "--instcombine",
    "--correlated-propagation",
    "--early-cse-memssa",
    "--slsr",
    "--nary-reassociate",
    "--lower-constant-intrinsics",
    "--early-cse",
    "--lower-expect",
    "--prune-eh",
    "--aggressive-instcombine",
    "--gvn-hoist",
    "--mem2reg",
    "--gvn",
    "--slp-vectorizer",
    "--die",
    "--simplifycfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--lcssa",
          "--early-cse-memssa",
          "--libcalls-shrinkwrap",
          "--partially-inline-libcalls",
          "--scalarizer",
          "--indvars",
          "--sroa",
          "--constprop",
          "--mldst-motion",
          "--load-store-vectorizer",
          "--inject-tli-mappings",
          "--gvn-hoist",
          "--memcpyopt",
          "--sccp",
          "--infer-address-spaces",
          "--mergefunc",
          "--lower-constant-intrinsics",
          "--coro-elide",
          "--loop-distribute",
          "--irce",
          "--callsite-splitting",
          "--attributor",
          "--dse",
          "--instcombine",
          "--lower-matrix-intrinsics",
          "--loop-simplifycfg",
          "--instsimplify",
          "--consthoist"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--lcssa",
      "--early-cse-memssa",
      "--libcalls-shrinkwrap",
      "--partially-inline-libcalls",
      "--scalarizer",
      "--indvars",
      "--sroa",
      "--constprop",
      "--mldst-motion",
      "--load-store-vectorizer",
      "--inject-tli-mappings",
      "--gvn-hoist",
      "--memcpyopt",
      "--sccp",
      "--infer-address-spaces",
      "--mergefunc",
      "--lower-constant-intrinsics",
      "--coro-elide",
      "--loop-distribute",
      "--irce",
      "--callsite-splitting",
      "--attributor",
      "--dse",
      "--instcombine",
      "--lower-matrix-intrinsics",
      "--loop-simplifycfg",
      "--instsimplify",
      "--consthoist"
    ],
    "performance_vs_Oz": "+0.5%"
  }
}
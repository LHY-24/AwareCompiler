{
  "program_id": "github-v0_21855.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 9,
    "onePredOneSuc": 6,
    "onePredTwoSuc": 2,
    "oneSuccessor": 9,
    "twoPred": 5,
    "twoPredOneSuc": 2,
    "twoEach": 3,
    "twoSuccessor": 5,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 15,
    "BeginPhi": 0,
    "BranchCount": 14,
    "returnInt": 2,
    "CriticalCount": 3,
    "NumEdges": 19,
    "const32Bit": 17,
    "const64Bit": 0,
    "numConstZeroes": 5,
    "numConstOnes": 9,
    "UncondBranches": 9,
    "binaryConstArg": 3,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 5,
    "NumAndInst": 0,
    "BlockMid": 0,
    "BlockLow": 15,
    "NumBitCastInst": 0,
    "NumBrInst": 14,
    "NumCallInst": 2,
    "NumGetElementPtrInst": 0,
    "NumICmpInst": 5,
    "NumLShrInst": 0,
    "NumLoadInst": 12,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 1,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 7,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 15,
    "TotalInsts": 51,
    "TotalMemInst": 26,
    "TotalFuncs": 3,
    "ArgsPhi": 0,
    "testUnary": 17
  },
  "baseline_oz_instcount": 52,
  "knowledge_base_entry": [
    "--prune-eh",
    "--lower-expect",
    "--reassociate",
    "--ipsccp",
    "--jump-threading",
    "--newgvn",
    "--gvn",
    "--correlated-propagation",
    "--nary-reassociate",
    "--lower-expect",
    "--slp-vectorizer",
    "--mergefunc",
    "--adce",
    "--elim-avail-extern",
    "--bdce",
    "--dse"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--instsimplify",
          "--constmerge",
          "--add-discriminators",
          "--slp-vectorizer",
          "--guard-widening",
          "--lower-expect",
          "--mergefunc",
          "--loop-vectorize",
          "--lowerinvoke",
          "--post-inline-ee-instrument",
          "--rpo-functionattrs",
          "--strip-nondebug",
          "--consthoist"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--instsimplify",
      "--constmerge",
      "--add-discriminators",
      "--slp-vectorizer",
      "--guard-widening",
      "--lower-expect",
      "--mergefunc",
      "--loop-vectorize",
      "--lowerinvoke",
      "--post-inline-ee-instrument",
      "--rpo-functionattrs",
      "--strip-nondebug",
      "--consthoist"
    ],
    "performance_vs_Oz": "+1.9%"
  }
}
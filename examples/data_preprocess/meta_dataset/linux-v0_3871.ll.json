{
  "program_id": "linux-v0_3871.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 59,
    "onePredOneSuc": 38,
    "onePredTwoSuc": 19,
    "oneSuccessor": 55,
    "twoPred": 23,
    "twoPredOneSuc": 14,
    "twoEach": 3,
    "twoSuccessor": 30,
    "morePreds": 6,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 101,
    "BeginPhi": 2,
    "BranchCount": 85,
    "returnInt": 8,
    "CriticalCount": 25,
    "NumEdges": 128,
    "const32Bit": 311,
    "const64Bit": 10,
    "numConstZeroes": 146,
    "numConstOnes": 86,
    "UncondBranches": 55,
    "binaryConstArg": 12,
    "NumAShrInst": 1,
    "NumAddInst": 5,
    "NumAllocaInst": 61,
    "NumAndInst": 4,
    "BlockMid": 13,
    "BlockLow": 90,
    "NumBitCastInst": 25,
    "NumBrInst": 85,
    "NumCallInst": 57,
    "NumGetElementPtrInst": 101,
    "NumICmpInst": 25,
    "NumLShrInst": 0,
    "NumLoadInst": 199,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 2,
    "NumRetInst": 15,
    "NumSExtInst": 1,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 79,
    "NumSubInst": 0,
    "NumTruncInst": 7,
    "NumXorInst": 0,
    "NumZExtInst": 19,
    "TotalBlocks": 103,
    "TotalInsts": 694,
    "TotalMemInst": 497,
    "TotalFuncs": 34,
    "ArgsPhi": 4,
    "testUnary": 315
  },
  "baseline_oz_instcount": 694,
  "knowledge_base_entry": [
    "--aggressive-instcombine",
    "--mem2reg",
    "--early-cse",
    "--memcpyopt",
    "--jump-threading",
    "--licm",
    "--bdce",
    "--simplifycfg",
    "--early-cse-memssa",
    "--loop-deletion",
    "--gvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--tailcallelim",
          "--partially-inline-libcalls",
          "--aggressive-instcombine",
          "--barrier",
          "--deadargelim",
          "--guard-widening",
          "--loop-fusion",
          "-loop-reduce",
          "--dce",
          "--ipconstprop",
          "--loop-simplifycfg",
          "--speculative-execution",
          "--strip-debug-declare",
          "--loweratomic",
          "--simplifycfg",
          "--inferattrs",
          "--mldst-motion",
          "--sroa",
          "--memcpyopt",
          "--always-inline",
          "--die",
          "--simple-loop-unswitch",
          "--insert-gcov-profiling",
          "--lower-expect",
          "--loop-unroll",
          "--loop-simplify",
          "--elim-avail-extern",
          "--globaldce",
          "--mergereturn",
          "--lcssa"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--tailcallelim",
      "--partially-inline-libcalls",
      "--aggressive-instcombine",
      "--barrier",
      "--deadargelim",
      "--guard-widening",
      "--loop-fusion",
      "-loop-reduce",
      "--dce",
      "--ipconstprop",
      "--loop-simplifycfg",
      "--speculative-execution",
      "--strip-debug-declare",
      "--loweratomic",
      "--simplifycfg",
      "--inferattrs",
      "--mldst-motion",
      "--sroa",
      "--memcpyopt",
      "--always-inline",
      "--die",
      "--simple-loop-unswitch",
      "--insert-gcov-profiling",
      "--lower-expect",
      "--loop-unroll",
      "--loop-simplify",
      "--elim-avail-extern",
      "--globaldce",
      "--mergereturn",
      "--lcssa"
    ],
    "performance_vs_Oz": "+0.9%"
  }
}
{
  "program_id": "linux-v0_10035.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 64,
    "onePredOneSuc": 40,
    "onePredTwoSuc": 21,
    "oneSuccessor": 59,
    "twoPred": 35,
    "twoPredOneSuc": 16,
    "twoEach": 16,
    "twoSuccessor": 44,
    "morePreds": 4,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 121,
    "BeginPhi": 0,
    "BranchCount": 103,
    "returnInt": 1,
    "CriticalCount": 29,
    "NumEdges": 147,
    "const32Bit": 320,
    "const64Bit": 12,
    "numConstZeroes": 152,
    "numConstOnes": 109,
    "UncondBranches": 59,
    "binaryConstArg": 26,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 76,
    "NumAndInst": 6,
    "BlockMid": 15,
    "BlockLow": 106,
    "NumBitCastInst": 15,
    "NumBrInst": 103,
    "NumCallInst": 40,
    "NumGetElementPtrInst": 100,
    "NumICmpInst": 53,
    "NumLShrInst": 1,
    "NumLoadInst": 259,
    "NumMulInst": 1,
    "NumOrInst": 2,
    "NumPHIInst": 0,
    "NumRetInst": 18,
    "NumSExtInst": 5,
    "NumSelectInst": 2,
    "NumShlInst": 0,
    "NumStoreInst": 132,
    "NumSubInst": 6,
    "NumTruncInst": 9,
    "NumXorInst": 12,
    "NumZExtInst": 23,
    "TotalBlocks": 121,
    "TotalInsts": 865,
    "TotalMemInst": 607,
    "TotalFuncs": 32,
    "ArgsPhi": 0,
    "testUnary": 388
  },
  "baseline_oz_instcount": 865,
  "knowledge_base_entry": [
    "--bdce",
    "--aggressive-instcombine",
    "--dce",
    "--licm",
    "--aggressive-instcombine",
    "--load-store-vectorizer",
    "--lower-constant-intrinsics",
    "--prune-eh",
    "--instsimplify",
    "--dse",
    "--mem2reg",
    "--loop-simplifycfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--name-anon-globals",
          "--float2int",
          "--loop-distribute",
          "--functionattrs",
          "--rewrite-statepoints-for-gc",
          "--loop-idiom",
          "--aggressive-instcombine",
          "--sccp",
          "--lower-matrix-intrinsics",
          "--coro-split",
          "--jump-threading",
          "--slsr",
          "-loop-reduce",
          "--loop-versioning-licm",
          "--always-inline",
          "--redundant-dbg-inst-elim",
          "--loop-load-elim",
          "--loop-data-prefetch",
          "--sink",
          "--strip-dead-prototypes",
          "--loop-unroll-and-jam",
          "--inline",
          "--loop-sink"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--name-anon-globals",
      "--float2int",
      "--loop-distribute",
      "--functionattrs",
      "--rewrite-statepoints-for-gc",
      "--loop-idiom",
      "--aggressive-instcombine",
      "--sccp",
      "--lower-matrix-intrinsics",
      "--coro-split",
      "--jump-threading",
      "--slsr",
      "-loop-reduce",
      "--loop-versioning-licm",
      "--always-inline",
      "--redundant-dbg-inst-elim",
      "--loop-load-elim",
      "--loop-data-prefetch",
      "--sink",
      "--strip-dead-prototypes",
      "--loop-unroll-and-jam",
      "--inline",
      "--loop-sink"
    ],
    "performance_vs_Oz": "+0.2%"
  }
}
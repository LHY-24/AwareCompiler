{
  "program_id": "github-v0_6789.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 8,
    "onePredOneSuc": 7,
    "onePredTwoSuc": 1,
    "oneSuccessor": 8,
    "twoPred": 0,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 1,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 11,
    "BeginPhi": 0,
    "BranchCount": 9,
    "returnInt": 11,
    "CriticalCount": 1,
    "NumEdges": 17,
    "const32Bit": 22,
    "const64Bit": 0,
    "numConstZeroes": 10,
    "numConstOnes": 14,
    "UncondBranches": 8,
    "binaryConstArg": 3,
    "NumAShrInst": 1,
    "NumAddInst": 0,
    "NumAllocaInst": 6,
    "NumAndInst": 0,
    "BlockMid": 2,
    "BlockLow": 9,
    "NumBitCastInst": 1,
    "NumBrInst": 9,
    "NumCallInst": 18,
    "NumGetElementPtrInst": 3,
    "NumICmpInst": 1,
    "NumLShrInst": 0,
    "NumLoadInst": 47,
    "NumMulInst": 0,
    "NumOrInst": 2,
    "NumPHIInst": 0,
    "NumRetInst": 1,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 10,
    "NumSubInst": 0,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 4,
    "TotalBlocks": 11,
    "TotalInsts": 106,
    "TotalMemInst": 84,
    "TotalFuncs": 9,
    "ArgsPhi": 0,
    "testUnary": 60
  },
  "baseline_oz_instcount": 106,
  "knowledge_base_entry": [
    "--mem2reg",
    "--ipsccp",
    "--loop-deletion",
    "--jump-threading",
    "--loop-deletion",
    "--mem2reg",
    "--gvn",
    "--aggressive-instcombine",
    "--lower-expect",
    "--lower-constant-intrinsics",
    "--nary-reassociate"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--bdce",
          "--memcpyopt",
          "--licm",
          "--aggressive-instcombine",
          "--canonicalize-aliases",
          "--coro-cleanup",
          "--loop-sink",
          "--forceattrs",
          "--lowerinvoke",
          "--correlated-propagation"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--bdce",
      "--memcpyopt",
      "--licm",
      "--aggressive-instcombine",
      "--canonicalize-aliases",
      "--coro-cleanup",
      "--loop-sink",
      "--forceattrs",
      "--lowerinvoke",
      "--correlated-propagation"
    ],
    "performance_vs_Oz": "+1.9%"
  }
}
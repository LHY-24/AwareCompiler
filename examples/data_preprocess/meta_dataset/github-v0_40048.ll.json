{
  "program_id": "github-v0_40048.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 2,
    "onePredOneSuc": 2,
    "onePredTwoSuc": 0,
    "oneSuccessor": 2,
    "twoPred": 1,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 1,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 31,
    "BeginPhi": 0,
    "BranchCount": 3,
    "returnInt": 25,
    "CriticalCount": 0,
    "NumEdges": 4,
    "const32Bit": 240,
    "const64Bit": 63,
    "numConstZeroes": 70,
    "numConstOnes": 190,
    "UncondBranches": 2,
    "binaryConstArg": 2,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 189,
    "NumAndInst": 0,
    "BlockMid": 27,
    "BlockLow": 4,
    "NumBitCastInst": 8,
    "NumBrInst": 3,
    "NumCallInst": 53,
    "NumGetElementPtrInst": 70,
    "NumICmpInst": 1,
    "NumLShrInst": 0,
    "NumLoadInst": 269,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 28,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 214,
    "NumSubInst": 0,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 1,
    "TotalBlocks": 31,
    "TotalInsts": 840,
    "TotalMemInst": 795,
    "TotalFuncs": 35,
    "ArgsPhi": 0,
    "testUnary": 469
  },
  "baseline_oz_instcount": 840,
  "knowledge_base_entry": [
    "--scalarizer",
    "--instcombine",
    "--mergefunc",
    "--loop-instsimplify",
    "--lower-expect",
    "--ipsccp",
    "--mem2reg",
    "--sccp",
    "--simplifycfg",
    "--loop-reroll",
    "--jump-threading",
    "--reassociate",
    "--dse",
    "--ipsccp",
    "--loop-simplifycfg",
    "--memcpyopt",
    "--instsimplify",
    "--gvn",
    "--instcombine",
    "--sccp",
    "--elim-avail-extern",
    "--die",
    "--correlated-propagation",
    "--globalopt",
    "--loop-deletion",
    "--sccp",
    "--loop-deletion",
    "--gvn-hoist"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--reassociate",
          "--aggressive-instcombine",
          "--elim-avail-extern",
          "-loop-reduce",
          "--mergefunc",
          "--barrier",
          "--mldst-motion",
          "--instsimplify",
          "--loop-predication",
          "--guard-widening",
          "--loop-vectorize",
          "--loop-deletion",
          "--cross-dso-cfi",
          "--called-value-propagation",
          "--inferattrs",
          "--rpo-functionattrs",
          "--name-anon-globals",
          "--separate-const-offset-from-gep",
          "--lower-expect"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+4.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--reassociate",
      "--aggressive-instcombine",
      "--elim-avail-extern",
      "-loop-reduce",
      "--mergefunc",
      "--barrier",
      "--mldst-motion",
      "--instsimplify",
      "--loop-predication",
      "--guard-widening",
      "--loop-vectorize",
      "--loop-deletion",
      "--cross-dso-cfi",
      "--called-value-propagation",
      "--inferattrs",
      "--rpo-functionattrs",
      "--name-anon-globals",
      "--separate-const-offset-from-gep",
      "--lower-expect"
    ],
    "performance_vs_Oz": "+4.8%"
  }
}
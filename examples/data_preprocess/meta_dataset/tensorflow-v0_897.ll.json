{
  "program_id": "tensorflow-v0_897.ll",
  "autophase_features": {
    "BBNumArgsHi": 6,
    "BBNumArgsLo": 11,
    "onePred": 54,
    "onePredOneSuc": 27,
    "onePredTwoSuc": 27,
    "oneSuccessor": 32,
    "twoPred": 9,
    "twoPredOneSuc": 1,
    "twoEach": 5,
    "twoSuccessor": 41,
    "morePreds": 10,
    "BB03Phi": 15,
    "BBHiPhi": 2,
    "BBNoPhi": 71,
    "BeginPhi": 17,
    "BranchCount": 73,
    "returnInt": 0,
    "CriticalCount": 30,
    "NumEdges": 114,
    "const32Bit": 59,
    "const64Bit": 101,
    "numConstZeroes": 46,
    "numConstOnes": 30,
    "UncondBranches": 32,
    "binaryConstArg": 54,
    "NumAShrInst": 0,
    "NumAddInst": 3,
    "NumAllocaInst": 5,
    "NumAndInst": 14,
    "BlockMid": 2,
    "BlockLow": 86,
    "NumBitCastInst": 6,
    "NumBrInst": 73,
    "NumCallInst": 15,
    "NumGetElementPtrInst": 49,
    "NumICmpInst": 42,
    "NumLShrInst": 17,
    "NumLoadInst": 16,
    "NumMulInst": 0,
    "NumOrInst": 28,
    "NumPHIInst": 34,
    "NumRetInst": 15,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 12,
    "NumStoreInst": 43,
    "NumSubInst": 4,
    "NumTruncInst": 26,
    "NumXorInst": 0,
    "NumZExtInst": 12,
    "TotalBlocks": 88,
    "TotalInsts": 422,
    "TotalMemInst": 128,
    "TotalFuncs": 18,
    "ArgsPhi": 102,
    "testUnary": 73
  },
  "baseline_oz_instcount": 409,
  "knowledge_base_entry": [
    "--ipsccp",
    "--gvn",
    "--lower-constant-intrinsics",
    "--dce",
    "--loop-simplifycfg",
    "--licm",
    "--licm",
    "--loop-rotate",
    "--mem2reg",
    "--inline",
    "--prune-eh",
    "--aggressive-instcombine",
    "--globaldce",
    "--ipsccp",
    "--mergefunc",
    "--gvn-hoist",
    "--loop-instsimplify",
    "--mergefunc",
    "--flattencfg",
    "--sroa",
    "--gvn-hoist",
    "--loop-instsimplify",
    "--early-cse-memssa",
    "--reassociate",
    "--aggressive-instcombine",
    "--globalopt",
    "--newgvn",
    "--early-cse",
    "--reassociate",
    "--loop-simplifycfg",
    "--licm",
    "--licm",
    "--loop-rotate",
    "--mem2reg",
    "--inline",
    "--prune-eh",
    "--aggressive-instcombine",
    "--globaldce",
    "--ipsccp",
    "--mergefunc",
    "--gvn-hoist",
    "--loop-instsimplify",
    "--mergefunc",
    "--flattencfg",
    "--newgvn",
    "--early-cse-memssa",
    "-loop-reduce",
    "--slsr",
    "--newgvn",
    "--slsr",
    "--simplifycfg",
    "--sroa",
    "--slp-vectorizer",
    "--mem2reg",
    "--mergefunc",
    "--newgvn",
    "--slp-vectorizer",
    "--loop-simplifycfg",
    "--slp-vectorizer",
    "--early-cse",
    "--reassociate",
    "--loop-simplifycfg",
    "--dce",
    "--early-cse",
    "--elim-avail-extern",
    "--sccp",
    "--early-cse-memssa",
    "-loop-reduce",
    "--gvn",
    "--gvn-hoist",
    "--mem2reg",
    "--sccp",
    "--gvn-hoist",
    "--dce",
    "--die",
    "--early-cse-memssa",
    "--gvn",
    "--flattencfg",
    "--jump-threading",
    "--inline",
    "--loop-rotate",
    "--elim-avail-extern",
    "--mem2reg",
    "--nary-reassociate",
    "--simplifycfg",
    "--flattencfg",
    "--instcombine",
    "--jump-threading",
    "--flattencfg",
    "--inline",
    "--instsimplify",
    "--adce",
    "--die"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--coro-elide",
          "--mergeicmps",
          "--coro-split",
          "--functionattrs",
          "--simple-loop-unswitch",
          "--consthoist",
          "--lower-guard-intrinsic",
          "--tailcallelim",
          "--bdce",
          "--forceattrs",
          "--lowerswitch",
          "--name-anon-globals",
          "--lower-constant-intrinsics",
          "--inject-tli-mappings",
          "--lower-expect",
          "--jump-threading",
          "--gvn-hoist",
          "--scalarizer",
          "--lcssa",
          "--partially-inline-libcalls",
          "--canonicalize-aliases",
          "--attributor",
          "--constmerge",
          "--slsr",
          "--simplifycfg",
          "--strip-dead-prototypes",
          "--mergereturn",
          "--correlated-propagation",
          "--early-cse-memssa"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+9.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--coro-elide",
      "--mergeicmps",
      "--coro-split",
      "--functionattrs",
      "--simple-loop-unswitch",
      "--consthoist",
      "--lower-guard-intrinsic",
      "--tailcallelim",
      "--bdce",
      "--forceattrs",
      "--lowerswitch",
      "--name-anon-globals",
      "--lower-constant-intrinsics",
      "--inject-tli-mappings",
      "--lower-expect",
      "--jump-threading",
      "--gvn-hoist",
      "--scalarizer",
      "--lcssa",
      "--partially-inline-libcalls",
      "--canonicalize-aliases",
      "--attributor",
      "--constmerge",
      "--slsr",
      "--simplifycfg",
      "--strip-dead-prototypes",
      "--mergereturn",
      "--correlated-propagation",
      "--early-cse-memssa"
    ],
    "performance_vs_Oz": "+9.3%"
  }
}
{
  "program_id": "github-v0_18543.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 17,
    "onePredOneSuc": 10,
    "onePredTwoSuc": 4,
    "oneSuccessor": 15,
    "twoPred": 7,
    "twoPredOneSuc": 4,
    "twoEach": 3,
    "twoSuccessor": 8,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 27,
    "BeginPhi": 0,
    "BranchCount": 23,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 31,
    "const32Bit": 32,
    "const64Bit": 65,
    "numConstZeroes": 62,
    "numConstOnes": 30,
    "UncondBranches": 15,
    "binaryConstArg": 7,
    "NumAShrInst": 0,
    "NumAddInst": 6,
    "NumAllocaInst": 14,
    "NumAndInst": 0,
    "BlockMid": 5,
    "BlockLow": 22,
    "NumBitCastInst": 16,
    "NumBrInst": 23,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 49,
    "NumICmpInst": 8,
    "NumLShrInst": 0,
    "NumLoadInst": 52,
    "NumMulInst": 2,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 29,
    "NumSubInst": 1,
    "NumTruncInst": 5,
    "NumXorInst": 0,
    "NumZExtInst": 25,
    "TotalBlocks": 27,
    "TotalInsts": 244,
    "TotalMemInst": 151,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 115
  },
  "baseline_oz_instcount": 244,
  "knowledge_base_entry": [
    "--loop-simplifycfg",
    "--jump-threading",
    "--prune-eh",
    "--aggressive-instcombine",
    "--inline",
    "--reassociate",
    "--die",
    "--loop-instsimplify",
    "--sroa",
    "--load-store-vectorizer",
    "--nary-reassociate",
    "-loop-reduce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--mergeicmps",
          "--constprop",
          "--lower-expect",
          "--bdce",
          "--globaldce",
          "--guard-widening",
          "--sccp",
          "--dse",
          "--simple-loop-unswitch",
          "--loop-versioning-licm",
          "--loop-fusion",
          "--loop-reroll",
          "--die",
          "--correlated-propagation",
          "--mergefunc",
          "--break-crit-edges",
          "--aggressive-instcombine",
          "--lower-guard-intrinsic",
          "--globalopt",
          "--barrier",
          "--prune-eh",
          "--reassociate",
          "--instcombine",
          "--loop-simplifycfg"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+4.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--mergeicmps",
      "--constprop",
      "--lower-expect",
      "--bdce",
      "--globaldce",
      "--guard-widening",
      "--sccp",
      "--dse",
      "--simple-loop-unswitch",
      "--loop-versioning-licm",
      "--loop-fusion",
      "--loop-reroll",
      "--die",
      "--correlated-propagation",
      "--mergefunc",
      "--break-crit-edges",
      "--aggressive-instcombine",
      "--lower-guard-intrinsic",
      "--globalopt",
      "--barrier",
      "--prune-eh",
      "--reassociate",
      "--instcombine",
      "--loop-simplifycfg"
    ],
    "performance_vs_Oz": "+4.1%"
  }
}
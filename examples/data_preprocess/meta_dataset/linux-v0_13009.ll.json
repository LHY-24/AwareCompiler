{
  "program_id": "linux-v0_13009.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 30,
    "onePredOneSuc": 17,
    "onePredTwoSuc": 10,
    "oneSuccessor": 27,
    "twoPred": 12,
    "twoPredOneSuc": 8,
    "twoEach": 3,
    "twoSuccessor": 19,
    "morePreds": 5,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 67,
    "BeginPhi": 0,
    "BranchCount": 46,
    "returnInt": 9,
    "CriticalCount": 16,
    "NumEdges": 70,
    "const32Bit": 404,
    "const64Bit": 74,
    "numConstZeroes": 241,
    "numConstOnes": 78,
    "UncondBranches": 27,
    "binaryConstArg": 32,
    "NumAShrInst": 0,
    "NumAddInst": 15,
    "NumAllocaInst": 49,
    "NumAndInst": 12,
    "BlockMid": 20,
    "BlockLow": 47,
    "NumBitCastInst": 6,
    "NumBrInst": 46,
    "NumCallInst": 51,
    "NumGetElementPtrInst": 170,
    "NumICmpInst": 21,
    "NumLShrInst": 0,
    "NumLoadInst": 241,
    "NumMulInst": 8,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 20,
    "NumSExtInst": 12,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 103,
    "NumSubInst": 0,
    "NumTruncInst": 7,
    "NumXorInst": 5,
    "NumZExtInst": 43,
    "TotalBlocks": 67,
    "TotalInsts": 812,
    "TotalMemInst": 614,
    "TotalFuncs": 37,
    "ArgsPhi": 0,
    "testUnary": 359
  },
  "baseline_oz_instcount": 812,
  "knowledge_base_entry": [
    "--loop-rotate",
    "--aggressive-instcombine",
    "--adce",
    "--instcombine",
    "--simplifycfg",
    "--loop-instsimplify"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-vectorize",
          "--libcalls-shrinkwrap",
          "--inject-tli-mappings",
          "--functionattrs",
          "--mergefunc",
          "--loop-reroll",
          "--loop-versioning",
          "--coro-cleanup",
          "--globalopt",
          "--instsimplify",
          "--rpo-functionattrs",
          "--sancov",
          "--loop-distribute",
          "--lower-constant-intrinsics",
          "--partial-inliner",
          "--div-rem-pairs",
          "--flattencfg",
          "--always-inline",
          "--hotcoldsplit",
          "--mem2reg",
          "--aggressive-instcombine",
          "--loop-deletion",
          "--strip",
          "--simplifycfg"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-vectorize",
      "--libcalls-shrinkwrap",
      "--inject-tli-mappings",
      "--functionattrs",
      "--mergefunc",
      "--loop-reroll",
      "--loop-versioning",
      "--coro-cleanup",
      "--globalopt",
      "--instsimplify",
      "--rpo-functionattrs",
      "--sancov",
      "--loop-distribute",
      "--lower-constant-intrinsics",
      "--partial-inliner",
      "--div-rem-pairs",
      "--flattencfg",
      "--always-inline",
      "--hotcoldsplit",
      "--mem2reg",
      "--aggressive-instcombine",
      "--loop-deletion",
      "--strip",
      "--simplifycfg"
    ],
    "performance_vs_Oz": "+0.5%"
  }
}
{
  "program_id": "poj104-v1_47_5351.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 6,
    "onePredOneSuc": 5,
    "onePredTwoSuc": 0,
    "oneSuccessor": 6,
    "twoPred": 2,
    "twoPredOneSuc": 0,
    "twoEach": 2,
    "twoSuccessor": 2,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 12,
    "BeginPhi": 0,
    "BranchCount": 8,
    "returnInt": 1,
    "CriticalCount": 0,
    "NumEdges": 10,
    "const32Bit": 12,
    "const64Bit": 11,
    "numConstZeroes": 5,
    "numConstOnes": 12,
    "UncondBranches": 6,
    "binaryConstArg": 2,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 6,
    "NumAndInst": 0,
    "BlockMid": 0,
    "BlockLow": 12,
    "NumBitCastInst": 6,
    "NumBrInst": 8,
    "NumCallInst": 15,
    "NumGetElementPtrInst": 3,
    "NumICmpInst": 2,
    "NumLShrInst": 0,
    "NumLoadInst": 11,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 4,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 7,
    "NumSubInst": 1,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 12,
    "TotalInsts": 66,
    "TotalMemInst": 42,
    "TotalFuncs": 12,
    "ArgsPhi": 0,
    "testUnary": 25
  },
  "baseline_oz_instcount": 42,
  "knowledge_base_entry": [
    "--lowerinvoke",
    "--instcombine",
    "--gvn-hoist",
    "--loop-reroll",
    "--jump-threading",
    "--inline",
    "--gvn",
    "--indvars",
    "--correlated-propagation",
    "--sroa",
    "--loop-reroll",
    "--simplifycfg",
    "--gvn",
    "--lower-constant-intrinsics",
    "--aggressive-instcombine",
    "--newgvn",
    "--mergefunc",
    "--newgvn",
    "--globalopt",
    "--elim-avail-extern",
    "--ipsccp",
    "--mergefunc",
    "--ipsccp",
    "--gvn",
    "--jump-threading",
    "--lower-expect",
    "--slp-vectorizer",
    "--licm",
    "--mem2reg",
    "--dse",
    "--lower-expect",
    "--adce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-simplifycfg",
          "--guard-widening",
          "--sancov",
          "--inline",
          "-loop-reduce",
          "--div-rem-pairs",
          "--constmerge",
          "--early-cse",
          "--called-value-propagation",
          "--rewrite-statepoints-for-gc",
          "--rpo-functionattrs",
          "--aggressive-instcombine",
          "--libcalls-shrinkwrap",
          "--loop-distribute",
          "--lower-guard-intrinsic",
          "--globalsplit",
          "--loop-interchange",
          "--loop-versioning-licm",
          "--coro-split",
          "--simple-loop-unswitch",
          "--post-inline-ee-instrument",
          "--partially-inline-libcalls",
          "--tailcallelim",
          "--elim-avail-extern",
          "--coro-early",
          "--mem2reg",
          "--simplifycfg",
          "--adce",
          "--gvn-hoist"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+4.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-simplifycfg",
      "--guard-widening",
      "--sancov",
      "--inline",
      "-loop-reduce",
      "--div-rem-pairs",
      "--constmerge",
      "--early-cse",
      "--called-value-propagation",
      "--rewrite-statepoints-for-gc",
      "--rpo-functionattrs",
      "--aggressive-instcombine",
      "--libcalls-shrinkwrap",
      "--loop-distribute",
      "--lower-guard-intrinsic",
      "--globalsplit",
      "--loop-interchange",
      "--loop-versioning-licm",
      "--coro-split",
      "--simple-loop-unswitch",
      "--post-inline-ee-instrument",
      "--partially-inline-libcalls",
      "--tailcallelim",
      "--elim-avail-extern",
      "--coro-early",
      "--mem2reg",
      "--simplifycfg",
      "--adce",
      "--gvn-hoist"
    ],
    "performance_vs_Oz": "+4.8%"
  }
}
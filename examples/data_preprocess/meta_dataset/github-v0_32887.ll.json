{
  "program_id": "github-v0_32887.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 9,
    "onePredOneSuc": 7,
    "onePredTwoSuc": 2,
    "oneSuccessor": 9,
    "twoPred": 4,
    "twoPredOneSuc": 1,
    "twoEach": 2,
    "twoSuccessor": 4,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 14,
    "BeginPhi": 0,
    "BranchCount": 13,
    "returnInt": 5,
    "CriticalCount": 1,
    "NumEdges": 17,
    "const32Bit": 20,
    "const64Bit": 3,
    "numConstZeroes": 12,
    "numConstOnes": 11,
    "UncondBranches": 9,
    "binaryConstArg": 4,
    "NumAShrInst": 0,
    "NumAddInst": 3,
    "NumAllocaInst": 5,
    "NumAndInst": 0,
    "BlockMid": 0,
    "BlockLow": 14,
    "NumBitCastInst": 0,
    "NumBrInst": 13,
    "NumCallInst": 5,
    "NumGetElementPtrInst": 5,
    "NumICmpInst": 4,
    "NumLShrInst": 0,
    "NumLoadInst": 10,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 1,
    "NumSExtInst": 6,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 7,
    "NumSubInst": 1,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 14,
    "TotalInsts": 60,
    "TotalMemInst": 32,
    "TotalFuncs": 4,
    "ArgsPhi": 0,
    "testUnary": 21
  },
  "baseline_oz_instcount": 61,
  "knowledge_base_entry": [
    "--globalopt",
    "--gvn",
    "--dce",
    "--reassociate"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--slp-vectorizer",
          "--called-value-propagation",
          "--aggressive-instcombine",
          "--mldst-motion",
          "--gvn-hoist",
          "--lower-guard-intrinsic",
          "--coro-cleanup",
          "--infer-address-spaces",
          "--bdce",
          "--functionattrs"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--slp-vectorizer",
      "--called-value-propagation",
      "--aggressive-instcombine",
      "--mldst-motion",
      "--gvn-hoist",
      "--lower-guard-intrinsic",
      "--coro-cleanup",
      "--infer-address-spaces",
      "--bdce",
      "--functionattrs"
    ],
    "performance_vs_Oz": "+1.6%"
  }
}
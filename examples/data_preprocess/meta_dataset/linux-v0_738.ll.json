{
  "program_id": "linux-v0_738.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 10,
    "onePredOneSuc": 9,
    "onePredTwoSuc": 1,
    "oneSuccessor": 9,
    "twoPred": 3,
    "twoPredOneSuc": 0,
    "twoEach": 2,
    "twoSuccessor": 5,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 22,
    "BeginPhi": 0,
    "BranchCount": 14,
    "returnInt": 19,
    "CriticalCount": 1,
    "NumEdges": 19,
    "const32Bit": 40,
    "const64Bit": 5,
    "numConstZeroes": 21,
    "numConstOnes": 18,
    "UncondBranches": 9,
    "binaryConstArg": 2,
    "NumAShrInst": 0,
    "NumAddInst": 6,
    "NumAllocaInst": 13,
    "NumAndInst": 0,
    "BlockMid": 2,
    "BlockLow": 20,
    "NumBitCastInst": 1,
    "NumBrInst": 14,
    "NumCallInst": 24,
    "NumGetElementPtrInst": 8,
    "NumICmpInst": 5,
    "NumLShrInst": 0,
    "NumLoadInst": 31,
    "NumMulInst": 0,
    "NumOrInst": 2,
    "NumPHIInst": 0,
    "NumRetInst": 6,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 24,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 22,
    "TotalInsts": 140,
    "TotalMemInst": 100,
    "TotalFuncs": 11,
    "ArgsPhi": 0,
    "testUnary": 48
  },
  "baseline_oz_instcount": 123,
  "knowledge_base_entry": [
    "--jump-threading",
    "--ipsccp",
    "--globalopt",
    "--globaldce",
    "--mergefunc",
    "--flattencfg",
    "--ipsccp",
    "--elim-avail-extern",
    "--sccp",
    "--elim-avail-extern",
    "--sccp",
    "--globalopt",
    "--correlated-propagation",
    "--simplifycfg",
    "--correlated-propagation",
    "--adce",
    "--correlated-propagation",
    "--reassociate",
    "--prune-eh",
    "--gvn-hoist",
    "--dse",
    "--gvn-hoist",
    "--aggressive-instcombine",
    "--die"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-sink",
          "--loop-vectorize",
          "--loop-simplify",
          "--load-store-vectorizer",
          "--globalopt",
          "--loop-rotate",
          "--bdce",
          "--loop-reroll",
          "--functionattrs",
          "--insert-gcov-profiling",
          "--ipsccp",
          "--barrier",
          "--indvars",
          "--licm",
          "--loop-fusion"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-sink",
      "--loop-vectorize",
      "--loop-simplify",
      "--load-store-vectorizer",
      "--globalopt",
      "--loop-rotate",
      "--bdce",
      "--loop-reroll",
      "--functionattrs",
      "--insert-gcov-profiling",
      "--ipsccp",
      "--barrier",
      "--indvars",
      "--licm",
      "--loop-fusion"
    ],
    "performance_vs_Oz": "+2.4%"
  }
}
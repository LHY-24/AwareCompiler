{
  "program_id": "github-v0_7110.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 23,
    "onePredOneSuc": 15,
    "onePredTwoSuc": 8,
    "oneSuccessor": 20,
    "twoPred": 9,
    "twoPredOneSuc": 5,
    "twoEach": 1,
    "twoSuccessor": 12,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 35,
    "BeginPhi": 0,
    "BranchCount": 30,
    "returnInt": 2,
    "CriticalCount": 6,
    "NumEdges": 47,
    "const32Bit": 88,
    "const64Bit": 20,
    "numConstZeroes": 45,
    "numConstOnes": 15,
    "UncondBranches": 20,
    "binaryConstArg": 2,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 11,
    "NumAndInst": 0,
    "BlockMid": 5,
    "BlockLow": 30,
    "NumBitCastInst": 17,
    "NumBrInst": 30,
    "NumCallInst": 11,
    "NumGetElementPtrInst": 41,
    "NumICmpInst": 10,
    "NumLShrInst": 0,
    "NumLoadInst": 82,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 2,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 32,
    "NumSubInst": 1,
    "NumTruncInst": 5,
    "NumXorInst": 0,
    "NumZExtInst": 10,
    "TotalBlocks": 35,
    "TotalInsts": 258,
    "TotalMemInst": 177,
    "TotalFuncs": 11,
    "ArgsPhi": 0,
    "testUnary": 125
  },
  "baseline_oz_instcount": 260,
  "knowledge_base_entry": [
    "--loweratomic",
    "--aggressive-instcombine",
    "--gvn-hoist",
    "--mem2reg",
    "--mldst-motion",
    "--load-store-vectorizer",
    "--instsimplify",
    "--reassociate",
    "--bdce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--partially-inline-libcalls",
          "--lower-guard-intrinsic",
          "--called-value-propagation",
          "--loop-simplifycfg",
          "--constprop",
          "--ipconstprop",
          "--gvn",
          "--alignment-from-assumptions",
          "--inferattrs",
          "--newgvn",
          "--callsite-splitting",
          "--loop-vectorize",
          "--reassociate",
          "--bdce",
          "--canonicalize-aliases",
          "--div-rem-pairs",
          "--loop-unswitch",
          "--name-anon-globals",
          "--dce",
          "--dse",
          "--loop-idiom",
          "--lower-widenable-condition",
          "--irce",
          "--redundant-dbg-inst-elim",
          "--inline",
          "--aggressive-instcombine",
          "--loop-reroll"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--partially-inline-libcalls",
      "--lower-guard-intrinsic",
      "--called-value-propagation",
      "--loop-simplifycfg",
      "--constprop",
      "--ipconstprop",
      "--gvn",
      "--alignment-from-assumptions",
      "--inferattrs",
      "--newgvn",
      "--callsite-splitting",
      "--loop-vectorize",
      "--reassociate",
      "--bdce",
      "--canonicalize-aliases",
      "--div-rem-pairs",
      "--loop-unswitch",
      "--name-anon-globals",
      "--dce",
      "--dse",
      "--loop-idiom",
      "--lower-widenable-condition",
      "--irce",
      "--redundant-dbg-inst-elim",
      "--inline",
      "--aggressive-instcombine",
      "--loop-reroll"
    ],
    "performance_vs_Oz": "+1.5%"
  }
}
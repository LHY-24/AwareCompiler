{
  "program_id": "github-v0_7737.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 15,
    "onePredOneSuc": 9,
    "onePredTwoSuc": 3,
    "oneSuccessor": 13,
    "twoPred": 6,
    "twoPredOneSuc": 3,
    "twoEach": 3,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 24,
    "BeginPhi": 0,
    "BranchCount": 20,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 27,
    "const32Bit": 33,
    "const64Bit": 38,
    "numConstZeroes": 41,
    "numConstOnes": 22,
    "UncondBranches": 13,
    "binaryConstArg": 8,
    "NumAShrInst": 0,
    "NumAddInst": 9,
    "NumAllocaInst": 13,
    "NumAndInst": 0,
    "BlockMid": 5,
    "BlockLow": 19,
    "NumBitCastInst": 4,
    "NumBrInst": 20,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 28,
    "NumICmpInst": 7,
    "NumLShrInst": 0,
    "NumLoadInst": 41,
    "NumMulInst": 2,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 21,
    "NumSubInst": 0,
    "NumTruncInst": 3,
    "NumXorInst": 0,
    "NumZExtInst": 10,
    "TotalBlocks": 24,
    "TotalInsts": 172,
    "TotalMemInst": 110,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 74
  },
  "baseline_oz_instcount": 172,
  "knowledge_base_entry": [
    "--scalarizer",
    "--early-cse",
    "--loop-fusion",
    "--gvn",
    "--mergefunc",
    "--reassociate",
    "--loop-simplifycfg",
    "--adce",
    "--aggressive-instcombine",
    "--lower-expect",
    "--load-store-vectorizer",
    "--mergefunc",
    "--jump-threading",
    "--loop-deletion",
    "--instcombine",
    "--instsimplify",
    "--aggressive-instcombine",
    "--newgvn",
    "--die",
    "--slp-vectorizer",
    "--newgvn",
    "--sccp",
    "--gvn",
    "--adce",
    "--aggressive-instcombine",
    "--lower-expect",
    "--die",
    "--reassociate",
    "--dce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--aggressive-instcombine",
          "--strip-dead-prototypes",
          "--loop-simplify",
          "--prune-eh",
          "--coro-split",
          "--lower-widenable-condition",
          "--simple-loop-unswitch",
          "--insert-gcov-profiling",
          "--break-crit-edges",
          "--constprop",
          "--always-inline"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--aggressive-instcombine",
      "--strip-dead-prototypes",
      "--loop-simplify",
      "--prune-eh",
      "--coro-split",
      "--lower-widenable-condition",
      "--simple-loop-unswitch",
      "--insert-gcov-profiling",
      "--break-crit-edges",
      "--constprop",
      "--always-inline"
    ],
    "performance_vs_Oz": "+2.3%"
  }
}
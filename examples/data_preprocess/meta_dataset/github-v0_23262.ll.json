{
  "program_id": "github-v0_23262.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 15,
    "onePredOneSuc": 14,
    "onePredTwoSuc": 1,
    "oneSuccessor": 16,
    "twoPred": 5,
    "twoPredOneSuc": 1,
    "twoEach": 2,
    "twoSuccessor": 4,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 23,
    "BeginPhi": 0,
    "BranchCount": 20,
    "returnInt": 15,
    "CriticalCount": 0,
    "NumEdges": 29,
    "const32Bit": 31,
    "const64Bit": 0,
    "numConstZeroes": 7,
    "numConstOnes": 21,
    "UncondBranches": 16,
    "binaryConstArg": 7,
    "NumAShrInst": 4,
    "NumAddInst": 3,
    "NumAllocaInst": 14,
    "NumAndInst": 0,
    "BlockMid": 2,
    "BlockLow": 21,
    "NumBitCastInst": 2,
    "NumBrInst": 20,
    "NumCallInst": 20,
    "NumGetElementPtrInst": 3,
    "NumICmpInst": 4,
    "NumLShrInst": 0,
    "NumLoadInst": 45,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 2,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 19,
    "NumSubInst": 0,
    "NumTruncInst": 5,
    "NumXorInst": 0,
    "NumZExtInst": 11,
    "TotalBlocks": 23,
    "TotalInsts": 153,
    "TotalMemInst": 101,
    "TotalFuncs": 9,
    "ArgsPhi": 0,
    "testUnary": 77
  },
  "baseline_oz_instcount": 153,
  "knowledge_base_entry": [
    "--break-crit-edges",
    "--simplifycfg",
    "--sroa",
    "--correlated-propagation",
    "--bdce",
    "--early-cse",
    "--aggressive-instcombine",
    "--instcombine",
    "--sccp",
    "--globalopt",
    "--loweratomic",
    "--globalopt",
    "--gvn-hoist",
    "--elim-avail-extern",
    "--mldst-motion",
    "--load-store-vectorizer",
    "--lower-constant-intrinsics",
    "--dce",
    "--die",
    "--dse",
    "--newgvn",
    "--mergefunc",
    "--inline"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--mldst-motion",
          "--attributor",
          "--functionattrs",
          "--lcssa",
          "--inject-tli-mappings",
          "--jump-threading",
          "--reassociate",
          "--add-discriminators",
          "--lower-widenable-condition",
          "--deadargelim",
          "--die",
          "--canonicalize-aliases",
          "--strip-debug-declare",
          "--coro-cleanup",
          "--mem2reg",
          "--aggressive-instcombine",
          "--dse",
          "--loop-unswitch",
          "--loop-vectorize",
          "--instsimplify",
          "--globaldce",
          "--nary-reassociate",
          "--called-value-propagation",
          "--always-inline",
          "--loop-fusion",
          "--memcpyopt",
          "--pgo-memop-opt",
          "--cross-dso-cfi",
          "--sccp"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--mldst-motion",
      "--attributor",
      "--functionattrs",
      "--lcssa",
      "--inject-tli-mappings",
      "--jump-threading",
      "--reassociate",
      "--add-discriminators",
      "--lower-widenable-condition",
      "--deadargelim",
      "--die",
      "--canonicalize-aliases",
      "--strip-debug-declare",
      "--coro-cleanup",
      "--mem2reg",
      "--aggressive-instcombine",
      "--dse",
      "--loop-unswitch",
      "--loop-vectorize",
      "--instsimplify",
      "--globaldce",
      "--nary-reassociate",
      "--called-value-propagation",
      "--always-inline",
      "--loop-fusion",
      "--memcpyopt",
      "--pgo-memop-opt",
      "--cross-dso-cfi",
      "--sccp"
    ],
    "performance_vs_Oz": "+1.3%"
  }
}
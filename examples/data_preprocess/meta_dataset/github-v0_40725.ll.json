{
  "program_id": "github-v0_40725.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 15,
    "onePredOneSuc": 9,
    "onePredTwoSuc": 3,
    "oneSuccessor": 13,
    "twoPred": 6,
    "twoPredOneSuc": 3,
    "twoEach": 3,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 24,
    "BeginPhi": 0,
    "BranchCount": 20,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 27,
    "const32Bit": 34,
    "const64Bit": 47,
    "numConstZeroes": 47,
    "numConstOnes": 27,
    "UncondBranches": 13,
    "binaryConstArg": 11,
    "NumAShrInst": 2,
    "NumAddInst": 7,
    "NumAllocaInst": 14,
    "NumAndInst": 1,
    "BlockMid": 5,
    "BlockLow": 19,
    "NumBitCastInst": 8,
    "NumBrInst": 20,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 36,
    "NumICmpInst": 7,
    "NumLShrInst": 1,
    "NumLoadInst": 48,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 4,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 24,
    "NumSubInst": 1,
    "NumTruncInst": 7,
    "NumXorInst": 1,
    "NumZExtInst": 27,
    "TotalBlocks": 24,
    "TotalInsts": 220,
    "TotalMemInst": 129,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 108
  },
  "baseline_oz_instcount": 220,
  "knowledge_base_entry": [
    "--aggressive-instcombine",
    "--mergefunc",
    "--die",
    "--dse",
    "--gvn-hoist",
    "--lower-constant-intrinsics",
    "--adce",
    "--bdce",
    "--lower-expect",
    "--dce",
    "--load-store-vectorizer",
    "--loop-fusion",
    "--simplifycfg",
    "--instcombine",
    "--elim-avail-extern"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--mem2reg",
          "--mergefunc",
          "--sccp",
          "--loop-rotate",
          "--aggressive-instcombine",
          "--mergereturn",
          "--correlated-propagation",
          "--loop-data-prefetch",
          "--ipsccp",
          "--mldst-motion",
          "--nary-reassociate",
          "--memcpyopt",
          "--slp-vectorizer",
          "--loop-unroll-and-jam",
          "--functionattrs",
          "--lowerswitch",
          "--adce",
          "--loop-deletion",
          "--loop-load-elim",
          "--elim-avail-extern",
          "--div-rem-pairs",
          "--loop-idiom",
          "--forceattrs",
          "--loop-unroll",
          "--insert-gcov-profiling",
          "--slsr",
          "--loop-distribute",
          "--loop-unswitch",
          "--early-cse"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+4.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--mem2reg",
      "--mergefunc",
      "--sccp",
      "--loop-rotate",
      "--aggressive-instcombine",
      "--mergereturn",
      "--correlated-propagation",
      "--loop-data-prefetch",
      "--ipsccp",
      "--mldst-motion",
      "--nary-reassociate",
      "--memcpyopt",
      "--slp-vectorizer",
      "--loop-unroll-and-jam",
      "--functionattrs",
      "--lowerswitch",
      "--adce",
      "--loop-deletion",
      "--loop-load-elim",
      "--elim-avail-extern",
      "--div-rem-pairs",
      "--loop-idiom",
      "--forceattrs",
      "--loop-unroll",
      "--insert-gcov-profiling",
      "--slsr",
      "--loop-distribute",
      "--loop-unswitch",
      "--early-cse"
    ],
    "performance_vs_Oz": "+4.5%"
  }
}
{
  "program_id": "github-v0_45830.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 26,
    "onePredOneSuc": 19,
    "onePredTwoSuc": 6,
    "oneSuccessor": 26,
    "twoPred": 17,
    "twoPredOneSuc": 2,
    "twoEach": 9,
    "twoSuccessor": 17,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 53,
    "BeginPhi": 0,
    "BranchCount": 43,
    "returnInt": 33,
    "CriticalCount": 9,
    "NumEdges": 60,
    "const32Bit": 128,
    "const64Bit": 10,
    "numConstZeroes": 79,
    "numConstOnes": 65,
    "UncondBranches": 26,
    "binaryConstArg": 8,
    "NumAShrInst": 0,
    "NumAddInst": 9,
    "NumAllocaInst": 51,
    "NumAndInst": 0,
    "BlockMid": 9,
    "BlockLow": 44,
    "NumBitCastInst": 0,
    "NumBrInst": 43,
    "NumCallInst": 81,
    "NumGetElementPtrInst": 31,
    "NumICmpInst": 17,
    "NumLShrInst": 0,
    "NumLoadInst": 83,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 9,
    "NumSExtInst": 7,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 61,
    "NumSubInst": 0,
    "NumTruncInst": 3,
    "NumXorInst": 1,
    "NumZExtInst": 0,
    "TotalBlocks": 53,
    "TotalInsts": 397,
    "TotalMemInst": 307,
    "TotalFuncs": 30,
    "ArgsPhi": 0,
    "testUnary": 144
  },
  "baseline_oz_instcount": 400,
  "knowledge_base_entry": [
    "--early-cse-memssa",
    "--aggressive-instcombine",
    "--die",
    "--aggressive-instcombine",
    "--ipsccp",
    "--nary-reassociate",
    "--lower-constant-intrinsics",
    "--jump-threading",
    "--mem2reg",
    "--sccp",
    "--sroa",
    "--load-store-vectorizer",
    "--bdce",
    "--reassociate",
    "--instsimplify",
    "--gvn",
    "--gvn",
    "--globalopt",
    "--newgvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--instcombine",
          "--coro-elide",
          "--consthoist",
          "--alignment-from-assumptions",
          "--partial-inliner",
          "--scalarizer",
          "--inferattrs",
          "--lower-expect",
          "--load-store-vectorizer",
          "--ipsccp",
          "--aggressive-instcombine",
          "--ipconstprop",
          "--adce"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.0%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--instcombine",
      "--coro-elide",
      "--consthoist",
      "--alignment-from-assumptions",
      "--partial-inliner",
      "--scalarizer",
      "--inferattrs",
      "--lower-expect",
      "--load-store-vectorizer",
      "--ipsccp",
      "--aggressive-instcombine",
      "--ipconstprop",
      "--adce"
    ],
    "performance_vs_Oz": "+1.0%"
  }
}
{
  "program_id": "github-v0_6847.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 6,
    "onePredOneSuc": 3,
    "onePredTwoSuc": 1,
    "oneSuccessor": 6,
    "twoPred": 4,
    "twoPredOneSuc": 2,
    "twoEach": 2,
    "twoSuccessor": 4,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 13,
    "BeginPhi": 0,
    "BranchCount": 10,
    "returnInt": 0,
    "CriticalCount": 2,
    "NumEdges": 14,
    "const32Bit": 15,
    "const64Bit": 0,
    "numConstZeroes": 4,
    "numConstOnes": 9,
    "UncondBranches": 6,
    "binaryConstArg": 4,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 5,
    "NumAndInst": 2,
    "BlockMid": 1,
    "BlockLow": 12,
    "NumBitCastInst": 0,
    "NumBrInst": 10,
    "NumCallInst": 4,
    "NumGetElementPtrInst": 1,
    "NumICmpInst": 4,
    "NumLShrInst": 0,
    "NumLoadInst": 14,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 20,
    "NumSubInst": 0,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 3,
    "TotalBlocks": 13,
    "TotalInsts": 72,
    "TotalMemInst": 44,
    "TotalFuncs": 3,
    "ArgsPhi": 0,
    "testUnary": 26
  },
  "baseline_oz_instcount": 73,
  "knowledge_base_entry": [
    "--reassociate",
    "--dce",
    "--aggressive-instcombine",
    "--gvn",
    "--elim-avail-extern",
    "--slp-vectorizer",
    "--mergefunc",
    "--globaldce",
    "--mergefunc",
    "--mergefunc",
    "--dce",
    "--aggressive-instcombine",
    "--gvn",
    "--loop-reroll",
    "-loop-reduce",
    "--early-cse-memssa",
    "--instsimplify",
    "--loop-rotate"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--tailcallelim",
          "--mergereturn",
          "--loop-simplify",
          "--flattencfg",
          "--rpo-functionattrs",
          "--aggressive-instcombine",
          "--called-value-propagation",
          "--bdce",
          "--guard-widening",
          "--dce",
          "--canonicalize-aliases",
          "--instsimplify",
          "--ipsccp",
          "--load-store-vectorizer",
          "--reassociate",
          "--loop-load-elim",
          "--loop-vectorize",
          "--newgvn",
          "--elim-avail-extern",
          "--strip-debug-declare",
          "--libcalls-shrinkwrap",
          "--jump-threading",
          "--irce",
          "--coro-early",
          "-loop-reduce",
          "--strip",
          "--loop-simplifycfg",
          "--gvn-hoist",
          "--loop-guard-widening"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+6.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--tailcallelim",
      "--mergereturn",
      "--loop-simplify",
      "--flattencfg",
      "--rpo-functionattrs",
      "--aggressive-instcombine",
      "--called-value-propagation",
      "--bdce",
      "--guard-widening",
      "--dce",
      "--canonicalize-aliases",
      "--instsimplify",
      "--ipsccp",
      "--load-store-vectorizer",
      "--reassociate",
      "--loop-load-elim",
      "--loop-vectorize",
      "--newgvn",
      "--elim-avail-extern",
      "--strip-debug-declare",
      "--libcalls-shrinkwrap",
      "--jump-threading",
      "--irce",
      "--coro-early",
      "-loop-reduce",
      "--strip",
      "--loop-simplifycfg",
      "--gvn-hoist",
      "--loop-guard-widening"
    ],
    "performance_vs_Oz": "+6.8%"
  }
}
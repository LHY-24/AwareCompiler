{
  "program_id": "github-v0_20574.ll",
  "autophase_features": {
    "BBNumArgsHi": 3,
    "BBNumArgsLo": 1,
    "onePred": 3,
    "onePredOneSuc": 3,
    "onePredTwoSuc": 0,
    "oneSuccessor": 3,
    "twoPred": 4,
    "twoPredOneSuc": 0,
    "twoEach": 3,
    "twoSuccessor": 4,
    "morePreds": 0,
    "BB03Phi": 4,
    "BBHiPhi": 0,
    "BBNoPhi": 4,
    "BeginPhi": 4,
    "BranchCount": 7,
    "returnInt": 2,
    "CriticalCount": 5,
    "NumEdges": 11,
    "const32Bit": 12,
    "const64Bit": 8,
    "numConstZeroes": 5,
    "numConstOnes": 5,
    "UncondBranches": 3,
    "binaryConstArg": 9,
    "NumAShrInst": 0,
    "NumAddInst": 10,
    "NumAllocaInst": 0,
    "NumAndInst": 0,
    "BlockMid": 2,
    "BlockLow": 6,
    "NumBitCastInst": 0,
    "NumBrInst": 7,
    "NumCallInst": 4,
    "NumGetElementPtrInst": 3,
    "NumICmpInst": 8,
    "NumLShrInst": 0,
    "NumLoadInst": 3,
    "NumMulInst": 2,
    "NumOrInst": 0,
    "NumPHIInst": 11,
    "NumRetInst": 1,
    "NumSExtInst": 3,
    "NumSelectInst": 4,
    "NumShlInst": 0,
    "NumStoreInst": 1,
    "NumSubInst": 5,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 2,
    "TotalBlocks": 8,
    "TotalInsts": 82,
    "TotalMemInst": 11,
    "TotalFuncs": 4,
    "ArgsPhi": 22,
    "testUnary": 14
  },
  "baseline_oz_instcount": 85,
  "knowledge_base_entry": [
    "--partially-inline-libcalls",
    "--gvn",
    "--loop-deletion",
    "--gvn-hoist",
    "--instcombine",
    "--loop-rotate",
    "--loop-simplifycfg",
    "--instsimplify",
    "--nary-reassociate",
    "--lower-constant-intrinsics",
    "--mem2reg",
    "--ipsccp",
    "--jump-threading",
    "--early-cse",
    "--early-cse-memssa",
    "--licm",
    "--licm",
    "--simplifycfg",
    "--correlated-propagation",
    "--reassociate",
    "--slp-vectorizer",
    "--simplifycfg",
    "--load-store-vectorizer",
    "--mergefunc",
    "--bdce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--scalarizer",
          "--barrier",
          "--ipsccp",
          "--instcombine",
          "--pgo-memop-opt",
          "--ee-instrument",
          "--callsite-splitting",
          "--post-inline-ee-instrument",
          "--gvn",
          "--coro-early",
          "--partially-inline-libcalls"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+12.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--scalarizer",
      "--barrier",
      "--ipsccp",
      "--instcombine",
      "--pgo-memop-opt",
      "--ee-instrument",
      "--callsite-splitting",
      "--post-inline-ee-instrument",
      "--gvn",
      "--coro-early",
      "--partially-inline-libcalls"
    ],
    "performance_vs_Oz": "+12.9%"
  }
}
{
  "program_id": "github-v0_7614.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 15,
    "onePredOneSuc": 10,
    "onePredTwoSuc": 3,
    "oneSuccessor": 13,
    "twoPred": 6,
    "twoPredOneSuc": 3,
    "twoEach": 2,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 24,
    "BeginPhi": 0,
    "BranchCount": 20,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 27,
    "const32Bit": 47,
    "const64Bit": 62,
    "numConstZeroes": 62,
    "numConstOnes": 31,
    "UncondBranches": 13,
    "binaryConstArg": 23,
    "NumAShrInst": 7,
    "NumAddInst": 3,
    "NumAllocaInst": 13,
    "NumAndInst": 7,
    "BlockMid": 7,
    "BlockLow": 17,
    "NumBitCastInst": 8,
    "NumBrInst": 20,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 37,
    "NumICmpInst": 7,
    "NumLShrInst": 1,
    "NumLoadInst": 35,
    "NumMulInst": 0,
    "NumOrInst": 5,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 7,
    "NumSelectInst": 0,
    "NumShlInst": 3,
    "NumStoreInst": 23,
    "NumSubInst": 0,
    "NumTruncInst": 11,
    "NumXorInst": 1,
    "NumZExtInst": 15,
    "TotalBlocks": 24,
    "TotalInsts": 214,
    "TotalMemInst": 115,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 89
  },
  "baseline_oz_instcount": 214,
  "knowledge_base_entry": [
    "--loop-idiom",
    "--early-cse",
    "--simplifycfg",
    "--loop-rotate",
    "--aggressive-instcombine",
    "--dce",
    "--elim-avail-extern",
    "--early-cse",
    "--loop-deletion",
    "--newgvn",
    "--newgvn",
    "--newgvn",
    "--aggressive-instcombine",
    "--gvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--coro-cleanup",
          "--lower-guard-intrinsic",
          "--break-crit-edges",
          "--aggressive-instcombine",
          "--adce",
          "--licm",
          "--loop-unroll",
          "--sroa",
          "--lcssa",
          "--lower-constant-intrinsics",
          "--callsite-splitting",
          "--slp-vectorizer",
          "--alignment-from-assumptions",
          "--instnamer",
          "--guard-widening",
          "--deadargelim",
          "--mergeicmps",
          "--redundant-dbg-inst-elim",
          "--scalarizer",
          "--sancov",
          "--early-cse",
          "--coro-early",
          "--consthoist",
          "--elim-avail-extern",
          "--loop-instsimplify",
          "--reassociate",
          "--strip",
          "--inject-tli-mappings"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--coro-cleanup",
      "--lower-guard-intrinsic",
      "--break-crit-edges",
      "--aggressive-instcombine",
      "--adce",
      "--licm",
      "--loop-unroll",
      "--sroa",
      "--lcssa",
      "--lower-constant-intrinsics",
      "--callsite-splitting",
      "--slp-vectorizer",
      "--alignment-from-assumptions",
      "--instnamer",
      "--guard-widening",
      "--deadargelim",
      "--mergeicmps",
      "--redundant-dbg-inst-elim",
      "--scalarizer",
      "--sancov",
      "--early-cse",
      "--coro-early",
      "--consthoist",
      "--elim-avail-extern",
      "--loop-instsimplify",
      "--reassociate",
      "--strip",
      "--inject-tli-mappings"
    ],
    "performance_vs_Oz": "+3.7%"
  }
}
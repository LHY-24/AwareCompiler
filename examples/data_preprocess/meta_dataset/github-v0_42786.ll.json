{
  "program_id": "github-v0_42786.ll",
  "autophase_features": {
    "BBNumArgsHi": 2,
    "BBNumArgsLo": 1,
    "onePred": 3,
    "onePredOneSuc": 2,
    "onePredTwoSuc": 1,
    "oneSuccessor": 2,
    "twoPred": 2,
    "twoPredOneSuc": 0,
    "twoEach": 2,
    "twoSuccessor": 4,
    "morePreds": 1,
    "BB03Phi": 3,
    "BBHiPhi": 0,
    "BBNoPhi": 4,
    "BeginPhi": 3,
    "BranchCount": 6,
    "returnInt": 3,
    "CriticalCount": 5,
    "NumEdges": 10,
    "const32Bit": 13,
    "const64Bit": 1,
    "numConstZeroes": 7,
    "numConstOnes": 4,
    "UncondBranches": 2,
    "binaryConstArg": 5,
    "NumAShrInst": 0,
    "NumAddInst": 9,
    "NumAllocaInst": 0,
    "NumAndInst": 2,
    "BlockMid": 1,
    "BlockLow": 6,
    "NumBitCastInst": 0,
    "NumBrInst": 6,
    "NumCallInst": 6,
    "NumGetElementPtrInst": 7,
    "NumICmpInst": 4,
    "NumLShrInst": 0,
    "NumLoadInst": 7,
    "NumMulInst": 5,
    "NumOrInst": 1,
    "NumPHIInst": 7,
    "NumRetInst": 1,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 1,
    "NumSubInst": 1,
    "NumTruncInst": 3,
    "NumXorInst": 0,
    "NumZExtInst": 6,
    "TotalBlocks": 7,
    "TotalInsts": 66,
    "TotalMemInst": 21,
    "TotalFuncs": 4,
    "ArgsPhi": 15,
    "testUnary": 16
  },
  "baseline_oz_instcount": 65,
  "knowledge_base_entry": [
    "--instcombine",
    "--dce",
    "--lower-constant-intrinsics",
    "--sccp",
    "--gvn",
    "--mldst-motion",
    "--licm",
    "--instsimplify",
    "--jump-threading",
    "-loop-reduce",
    "--sroa",
    "--loop-rotate",
    "--dse",
    "--sroa",
    "--adce",
    "--jump-threading",
    "--slsr",
    "-loop-reduce",
    "--nary-reassociate",
    "-loop-reduce",
    "--indvars",
    "-loop-reduce",
    "--indvars",
    "--load-store-vectorizer",
    "--lower-constant-intrinsics",
    "--dce",
    "--early-cse",
    "--loop-instsimplify",
    "--loop-simplifycfg",
    "--dse",
    "--early-cse-memssa",
    "--correlated-propagation",
    "--die",
    "--gvn-hoist",
    "--simplifycfg",
    "--loop-rotate",
    "--jump-threading",
    "--slsr",
    "--early-cse",
    "--nary-reassociate",
    "--gvn-hoist"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--argpromotion",
          "--irce",
          "--mergefunc",
          "--constprop",
          "--loop-unswitch",
          "--nary-reassociate",
          "--guard-widening",
          "--loop-instsimplify",
          "--coro-split",
          "--slsr",
          "--partially-inline-libcalls",
          "--instnamer",
          "--aggressive-instcombine",
          "--mem2reg",
          "--infer-address-spaces",
          "--mergereturn",
          "--sccp",
          "--loop-interchange",
          "--lowerswitch",
          "--loop-sink",
          "--jump-threading",
          "--flattencfg",
          "--globalsplit",
          "--dse",
          "--sink",
          "--reassociate",
          "--always-inline",
          "--newgvn"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--argpromotion",
      "--irce",
      "--mergefunc",
      "--constprop",
      "--loop-unswitch",
      "--nary-reassociate",
      "--guard-widening",
      "--loop-instsimplify",
      "--coro-split",
      "--slsr",
      "--partially-inline-libcalls",
      "--instnamer",
      "--aggressive-instcombine",
      "--mem2reg",
      "--infer-address-spaces",
      "--mergereturn",
      "--sccp",
      "--loop-interchange",
      "--lowerswitch",
      "--loop-sink",
      "--jump-threading",
      "--flattencfg",
      "--globalsplit",
      "--dse",
      "--sink",
      "--reassociate",
      "--always-inline",
      "--newgvn"
    ],
    "performance_vs_Oz": "+1.5%"
  }
}
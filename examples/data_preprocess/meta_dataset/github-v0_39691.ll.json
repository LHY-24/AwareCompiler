{
  "program_id": "github-v0_39691.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 4,
    "onePred": 69,
    "onePredOneSuc": 46,
    "onePredTwoSuc": 23,
    "oneSuccessor": 64,
    "twoPred": 34,
    "twoPredOneSuc": 16,
    "twoEach": 15,
    "twoSuccessor": 43,
    "morePreds": 4,
    "BB03Phi": 4,
    "BBHiPhi": 0,
    "BBNoPhi": 108,
    "BeginPhi": 4,
    "BranchCount": 107,
    "returnInt": 8,
    "CriticalCount": 27,
    "NumEdges": 150,
    "const32Bit": 293,
    "const64Bit": 41,
    "numConstZeroes": 161,
    "numConstOnes": 67,
    "UncondBranches": 64,
    "binaryConstArg": 19,
    "NumAShrInst": 0,
    "NumAddInst": 15,
    "NumAllocaInst": 30,
    "NumAndInst": 4,
    "BlockMid": 19,
    "BlockLow": 93,
    "NumBitCastInst": 5,
    "NumBrInst": 107,
    "NumCallInst": 30,
    "NumGetElementPtrInst": 161,
    "NumICmpInst": 43,
    "NumLShrInst": 0,
    "NumLoadInst": 362,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 4,
    "NumRetInst": 5,
    "NumSExtInst": 15,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 95,
    "NumSubInst": 36,
    "NumTruncInst": 0,
    "NumXorInst": 2,
    "NumZExtInst": 4,
    "TotalBlocks": 112,
    "TotalInsts": 968,
    "TotalMemInst": 678,
    "TotalFuncs": 18,
    "ArgsPhi": 8,
    "testUnary": 466
  },
  "baseline_oz_instcount": 970,
  "knowledge_base_entry": [
    "--instcombine",
    "--instsimplify",
    "--ipsccp",
    "--dce",
    "--slp-vectorizer",
    "--correlated-propagation"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--inject-tli-mappings",
          "--partially-inline-libcalls",
          "--inline",
          "--consthoist",
          "--mldst-motion",
          "--loop-distribute",
          "--pgo-memop-opt",
          "--loop-unroll-and-jam",
          "--sccp",
          "--div-rem-pairs",
          "--adce",
          "--slp-vectorizer"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--inject-tli-mappings",
      "--partially-inline-libcalls",
      "--inline",
      "--consthoist",
      "--mldst-motion",
      "--loop-distribute",
      "--pgo-memop-opt",
      "--loop-unroll-and-jam",
      "--sccp",
      "--div-rem-pairs",
      "--adce",
      "--slp-vectorizer"
    ],
    "performance_vs_Oz": "+0.2%"
  }
}
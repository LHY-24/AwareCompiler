{
  "program_id": "github-v0_42968.ll",
  "autophase_features": {
    "BBNumArgsHi": 2,
    "BBNumArgsLo": 2,
    "onePred": 6,
    "onePredOneSuc": 4,
    "onePredTwoSuc": 2,
    "oneSuccessor": 5,
    "twoPred": 4,
    "twoPredOneSuc": 1,
    "twoEach": 3,
    "twoSuccessor": 6,
    "morePreds": 1,
    "BB03Phi": 3,
    "BBHiPhi": 1,
    "BBNoPhi": 8,
    "BeginPhi": 4,
    "BranchCount": 11,
    "returnInt": 0,
    "CriticalCount": 6,
    "NumEdges": 17,
    "const32Bit": 0,
    "const64Bit": 21,
    "numConstZeroes": 9,
    "numConstOnes": 8,
    "UncondBranches": 5,
    "binaryConstArg": 11,
    "NumAShrInst": 0,
    "NumAddInst": 8,
    "NumAllocaInst": 0,
    "NumAndInst": 1,
    "BlockMid": 1,
    "BlockLow": 11,
    "NumBitCastInst": 0,
    "NumBrInst": 11,
    "NumCallInst": 0,
    "NumGetElementPtrInst": 3,
    "NumICmpInst": 6,
    "NumLShrInst": 3,
    "NumLoadInst": 0,
    "NumMulInst": 3,
    "NumOrInst": 2,
    "NumPHIInst": 9,
    "NumRetInst": 1,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 3,
    "NumSubInst": 1,
    "NumTruncInst": 3,
    "NumXorInst": 0,
    "NumZExtInst": 6,
    "TotalBlocks": 12,
    "TotalInsts": 60,
    "TotalMemInst": 6,
    "TotalFuncs": 1,
    "ArgsPhi": 18,
    "testUnary": 9
  },
  "baseline_oz_instcount": 57,
  "knowledge_base_entry": [
    "--nary-reassociate",
    "--loop-instsimplify",
    "--sroa",
    "--correlated-propagation",
    "--simplifycfg",
    "--mldst-motion",
    "--instsimplify",
    "--instcombine",
    "-loop-reduce",
    "--indvars",
    "--sroa",
    "--early-cse-memssa",
    "--licm",
    "--elim-avail-extern",
    "--bdce",
    "--early-cse-memssa",
    "--sroa",
    "--mldst-motion",
    "--simplifycfg",
    "--bdce",
    "--loop-simplifycfg",
    "--jump-threading",
    "--memcpyopt",
    "--newgvn",
    "--globalopt"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--strip-nondebug",
          "--memcpyopt",
          "--nary-reassociate",
          "--loop-vectorize",
          "--lcssa",
          "--jump-threading",
          "--early-cse-memssa",
          "--gvn",
          "-loop-reduce",
          "--correlated-propagation",
          "--elim-avail-extern",
          "--newgvn",
          "--loop-guard-widening",
          "--hotcoldsplit",
          "--instcombine",
          "--lower-matrix-intrinsics",
          "--lower-guard-intrinsic",
          "--partial-inliner",
          "--lower-expect",
          "--aggressive-instcombine",
          "--simplifycfg",
          "--alignment-from-assumptions",
          "--rewrite-statepoints-for-gc",
          "--loop-instsimplify"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+10.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--strip-nondebug",
      "--memcpyopt",
      "--nary-reassociate",
      "--loop-vectorize",
      "--lcssa",
      "--jump-threading",
      "--early-cse-memssa",
      "--gvn",
      "-loop-reduce",
      "--correlated-propagation",
      "--elim-avail-extern",
      "--newgvn",
      "--loop-guard-widening",
      "--hotcoldsplit",
      "--instcombine",
      "--lower-matrix-intrinsics",
      "--lower-guard-intrinsic",
      "--partial-inliner",
      "--lower-expect",
      "--aggressive-instcombine",
      "--simplifycfg",
      "--alignment-from-assumptions",
      "--rewrite-statepoints-for-gc",
      "--loop-instsimplify"
    ],
    "performance_vs_Oz": "+10.5%"
  }
}
{
  "program_id": "github-v0_37416.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 1,
    "onePredOneSuc": 1,
    "onePredTwoSuc": 0,
    "oneSuccessor": 1,
    "twoPred": 1,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 1,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 21,
    "BeginPhi": 0,
    "BranchCount": 2,
    "returnInt": 10,
    "CriticalCount": 1,
    "NumEdges": 3,
    "const32Bit": 48,
    "const64Bit": 10,
    "numConstZeroes": 19,
    "numConstOnes": 39,
    "UncondBranches": 1,
    "binaryConstArg": 0,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 35,
    "NumAndInst": 0,
    "BlockMid": 1,
    "BlockLow": 20,
    "NumBitCastInst": 2,
    "NumBrInst": 2,
    "NumCallInst": 18,
    "NumGetElementPtrInst": 10,
    "NumICmpInst": 1,
    "NumLShrInst": 0,
    "NumLoadInst": 11,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 19,
    "NumSExtInst": 7,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 33,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 21,
    "TotalInsts": 138,
    "TotalMemInst": 107,
    "TotalFuncs": 22,
    "ArgsPhi": 0,
    "testUnary": 55
  },
  "baseline_oz_instcount": 138,
  "knowledge_base_entry": [
    "--strip",
    "--mergefunc",
    "--instsimplify",
    "--loop-instsimplify",
    "--sroa",
    "--flattencfg",
    "--aggressive-instcombine",
    "--mem2reg",
    "--bdce",
    "--early-cse-memssa",
    "--ipsccp",
    "--nary-reassociate"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--alignment-from-assumptions",
          "--loop-simplify",
          "--dse",
          "--aggressive-instcombine",
          "--globalsplit",
          "--memcpyopt",
          "--loop-data-prefetch",
          "--lcssa",
          "--barrier",
          "--guard-widening",
          "--cross-dso-cfi",
          "--loop-guard-widening",
          "--infer-address-spaces",
          "--mergefunc",
          "--strip-dead-prototypes",
          "--sancov",
          "--gvn",
          "--rpo-functionattrs",
          "--coro-cleanup",
          "--lower-widenable-condition",
          "--inferattrs",
          "--die"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+34.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--alignment-from-assumptions",
      "--loop-simplify",
      "--dse",
      "--aggressive-instcombine",
      "--globalsplit",
      "--memcpyopt",
      "--loop-data-prefetch",
      "--lcssa",
      "--barrier",
      "--guard-widening",
      "--cross-dso-cfi",
      "--loop-guard-widening",
      "--infer-address-spaces",
      "--mergefunc",
      "--strip-dead-prototypes",
      "--sancov",
      "--gvn",
      "--rpo-functionattrs",
      "--coro-cleanup",
      "--lower-widenable-condition",
      "--inferattrs",
      "--die"
    ],
    "performance_vs_Oz": "+34.1%"
  }
}
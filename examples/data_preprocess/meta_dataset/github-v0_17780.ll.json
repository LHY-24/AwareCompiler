{
  "program_id": "github-v0_17780.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 10,
    "onePredOneSuc": 8,
    "onePredTwoSuc": 0,
    "oneSuccessor": 10,
    "twoPred": 4,
    "twoPredOneSuc": 0,
    "twoEach": 4,
    "twoSuccessor": 4,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 20,
    "BeginPhi": 0,
    "BranchCount": 14,
    "returnInt": 0,
    "CriticalCount": 0,
    "NumEdges": 18,
    "const32Bit": 148,
    "const64Bit": 37,
    "numConstZeroes": 100,
    "numConstOnes": 69,
    "UncondBranches": 10,
    "binaryConstArg": 25,
    "NumAShrInst": 0,
    "NumAddInst": 29,
    "NumAllocaInst": 42,
    "NumAndInst": 0,
    "BlockMid": 6,
    "BlockLow": 14,
    "NumBitCastInst": 0,
    "NumBrInst": 14,
    "NumCallInst": 28,
    "NumGetElementPtrInst": 70,
    "NumICmpInst": 4,
    "NumLShrInst": 0,
    "NumLoadInst": 214,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 6,
    "NumSExtInst": 63,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 98,
    "NumSubInst": 20,
    "NumTruncInst": 34,
    "NumXorInst": 0,
    "NumZExtInst": 9,
    "TotalBlocks": 20,
    "TotalInsts": 631,
    "TotalMemInst": 452,
    "TotalFuncs": 15,
    "ArgsPhi": 0,
    "testUnary": 362
  },
  "baseline_oz_instcount": 631,
  "knowledge_base_entry": [
    "--gvn",
    "--aggressive-instcombine",
    "--jump-threading",
    "--memcpyopt",
    "--simplifycfg",
    "--mldst-motion",
    "--early-cse-memssa",
    "--lower-constant-intrinsics",
    "--simplifycfg",
    "--sroa",
    "--inline",
    "--licm",
    "--gvn-hoist",
    "--lower-expect",
    "--lower-constant-intrinsics",
    "--memcpyopt",
    "--elim-avail-extern",
    "--sccp",
    "--loop-instsimplify",
    "--dce",
    "--early-cse-memssa",
    "--loop-simplifycfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--irce",
          "--always-inline",
          "--sroa",
          "--globalsplit",
          "--aggressive-instcombine",
          "--lowerinvoke",
          "--sink",
          "--loop-instsimplify",
          "--loop-idiom",
          "--indvars",
          "--mergereturn",
          "--loop-unroll-and-jam",
          "--loop-rotate",
          "--consthoist",
          "--callsite-splitting",
          "--pgo-memop-opt",
          "--div-rem-pairs"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+14.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--irce",
      "--always-inline",
      "--sroa",
      "--globalsplit",
      "--aggressive-instcombine",
      "--lowerinvoke",
      "--sink",
      "--loop-instsimplify",
      "--loop-idiom",
      "--indvars",
      "--mergereturn",
      "--loop-unroll-and-jam",
      "--loop-rotate",
      "--consthoist",
      "--callsite-splitting",
      "--pgo-memop-opt",
      "--div-rem-pairs"
    ],
    "performance_vs_Oz": "+14.6%"
  }
}
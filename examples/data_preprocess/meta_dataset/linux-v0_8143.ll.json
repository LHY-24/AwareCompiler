{
  "program_id": "linux-v0_8143.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 21,
    "onePredOneSuc": 17,
    "onePredTwoSuc": 4,
    "oneSuccessor": 18,
    "twoPred": 6,
    "twoPredOneSuc": 1,
    "twoEach": 1,
    "twoSuccessor": 10,
    "morePreds": 1,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 48,
    "BeginPhi": 1,
    "BranchCount": 28,
    "returnInt": 11,
    "CriticalCount": 2,
    "NumEdges": 38,
    "const32Bit": 146,
    "const64Bit": 13,
    "numConstZeroes": 62,
    "numConstOnes": 66,
    "UncondBranches": 18,
    "binaryConstArg": 7,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 57,
    "NumAndInst": 1,
    "BlockMid": 8,
    "BlockLow": 41,
    "NumBitCastInst": 11,
    "NumBrInst": 28,
    "NumCallInst": 37,
    "NumGetElementPtrInst": 35,
    "NumICmpInst": 9,
    "NumLShrInst": 0,
    "NumLoadInst": 114,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 1,
    "NumRetInst": 21,
    "NumSExtInst": 1,
    "NumSelectInst": 1,
    "NumShlInst": 2,
    "NumStoreInst": 69,
    "NumSubInst": 0,
    "NumTruncInst": 7,
    "NumXorInst": 0,
    "NumZExtInst": 8,
    "TotalBlocks": 49,
    "TotalInsts": 408,
    "TotalMemInst": 312,
    "TotalFuncs": 38,
    "ArgsPhi": 2,
    "testUnary": 198
  },
  "baseline_oz_instcount": 407,
  "knowledge_base_entry": [
    "--dse",
    "--load-store-vectorizer",
    "--aggressive-instcombine",
    "--loweratomic",
    "--ipsccp",
    "--aggressive-instcombine",
    "--loop-simplifycfg",
    "--sccp",
    "--loop-simplifycfg",
    "--dce",
    "--loop-instsimplify",
    "--inline",
    "--sroa",
    "--newgvn",
    "--loop-fusion",
    "--gvn",
    "--mem2reg",
    "--early-cse"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--ipsccp",
          "--correlated-propagation",
          "--loop-deletion",
          "--alignment-from-assumptions",
          "--canonicalize-aliases",
          "--dse",
          "--load-store-vectorizer",
          "--loop-idiom",
          "--dce",
          "--loop-fusion",
          "--partially-inline-libcalls",
          "--aggressive-instcombine",
          "--loop-simplifycfg",
          "--loop-instsimplify",
          "--sancov",
          "--mergeicmps",
          "--loop-rotate",
          "--reassociate",
          "--coro-early",
          "--mldst-motion",
          "--globaldce",
          "--sccp",
          "--strip-nondebug",
          "--mergereturn",
          "--loop-reroll",
          "--loop-sink",
          "--globalsplit",
          "--gvn",
          "--early-cse-memssa"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--ipsccp",
      "--correlated-propagation",
      "--loop-deletion",
      "--alignment-from-assumptions",
      "--canonicalize-aliases",
      "--dse",
      "--load-store-vectorizer",
      "--loop-idiom",
      "--dce",
      "--loop-fusion",
      "--partially-inline-libcalls",
      "--aggressive-instcombine",
      "--loop-simplifycfg",
      "--loop-instsimplify",
      "--sancov",
      "--mergeicmps",
      "--loop-rotate",
      "--reassociate",
      "--coro-early",
      "--mldst-motion",
      "--globaldce",
      "--sccp",
      "--strip-nondebug",
      "--mergereturn",
      "--loop-reroll",
      "--loop-sink",
      "--globalsplit",
      "--gvn",
      "--early-cse-memssa"
    ],
    "performance_vs_Oz": "+0.5%"
  }
}
{
  "program_id": "github-v0_29768.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 17,
    "onePredOneSuc": 10,
    "onePredTwoSuc": 4,
    "oneSuccessor": 15,
    "twoPred": 7,
    "twoPredOneSuc": 4,
    "twoEach": 3,
    "twoSuccessor": 8,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 27,
    "BeginPhi": 0,
    "BranchCount": 23,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 31,
    "const32Bit": 37,
    "const64Bit": 31,
    "numConstZeroes": 38,
    "numConstOnes": 20,
    "UncondBranches": 15,
    "binaryConstArg": 12,
    "NumAShrInst": 0,
    "NumAddInst": 6,
    "NumAllocaInst": 12,
    "NumAndInst": 3,
    "BlockMid": 7,
    "BlockLow": 20,
    "NumBitCastInst": 0,
    "NumBrInst": 23,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 25,
    "NumICmpInst": 8,
    "NumLShrInst": 0,
    "NumLoadInst": 46,
    "NumMulInst": 2,
    "NumOrInst": 3,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 3,
    "NumStoreInst": 19,
    "NumSubInst": 1,
    "NumTruncInst": 7,
    "NumXorInst": 0,
    "NumZExtInst": 30,
    "TotalBlocks": 27,
    "TotalInsts": 202,
    "TotalMemInst": 109,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 98
  },
  "baseline_oz_instcount": 202,
  "knowledge_base_entry": [
    "--loop-load-elim",
    "--gvn",
    "--slp-vectorizer",
    "--early-cse",
    "--slsr",
    "--loop-reroll",
    "--slp-vectorizer",
    "--gvn-hoist",
    "--bdce",
    "--licm",
    "--reassociate",
    "--lower-constant-intrinsics",
    "--gvn-hoist",
    "--newgvn",
    "--reassociate",
    "--aggressive-instcombine",
    "--loweratomic",
    "--ipsccp",
    "--loop-simplifycfg",
    "--simplifycfg",
    "--dse",
    "--instsimplify",
    "--die",
    "--lower-expect",
    "--mem2reg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--mldst-motion",
          "--instcombine",
          "--post-inline-ee-instrument",
          "-loop-reduce",
          "--loop-vectorize",
          "--callsite-splitting",
          "--globalsplit",
          "--scalarizer",
          "--inject-tli-mappings",
          "--correlated-propagation",
          "--loop-rotate",
          "--aggressive-instcombine",
          "--loop-deletion",
          "--loop-guard-widening",
          "--loop-data-prefetch",
          "--coro-cleanup",
          "--indvars",
          "--always-inline",
          "--globaldce",
          "--constprop",
          "--called-value-propagation"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--mldst-motion",
      "--instcombine",
      "--post-inline-ee-instrument",
      "-loop-reduce",
      "--loop-vectorize",
      "--callsite-splitting",
      "--globalsplit",
      "--scalarizer",
      "--inject-tli-mappings",
      "--correlated-propagation",
      "--loop-rotate",
      "--aggressive-instcombine",
      "--loop-deletion",
      "--loop-guard-widening",
      "--loop-data-prefetch",
      "--coro-cleanup",
      "--indvars",
      "--always-inline",
      "--globaldce",
      "--constprop",
      "--called-value-propagation"
    ],
    "performance_vs_Oz": "+3.5%"
  }
}
{
  "program_id": "linux-v0_7768.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 42,
    "onePredOneSuc": 32,
    "onePredTwoSuc": 8,
    "oneSuccessor": 40,
    "twoPred": 12,
    "twoPredOneSuc": 4,
    "twoEach": 6,
    "twoSuccessor": 15,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 66,
    "BeginPhi": 0,
    "BranchCount": 55,
    "returnInt": 12,
    "CriticalCount": 3,
    "NumEdges": 70,
    "const32Bit": 268,
    "const64Bit": 19,
    "numConstZeroes": 130,
    "numConstOnes": 61,
    "UncondBranches": 40,
    "binaryConstArg": 22,
    "NumAShrInst": 0,
    "NumAddInst": 11,
    "NumAllocaInst": 40,
    "NumAndInst": 1,
    "BlockMid": 10,
    "BlockLow": 56,
    "NumBitCastInst": 20,
    "NumBrInst": 55,
    "NumCallInst": 36,
    "NumGetElementPtrInst": 103,
    "NumICmpInst": 16,
    "NumLShrInst": 0,
    "NumLoadInst": 168,
    "NumMulInst": 2,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 11,
    "NumSExtInst": 1,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 76,
    "NumSubInst": 3,
    "NumTruncInst": 0,
    "NumXorInst": 2,
    "NumZExtInst": 12,
    "TotalBlocks": 66,
    "TotalInsts": 564,
    "TotalMemInst": 423,
    "TotalFuncs": 22,
    "ArgsPhi": 0,
    "testUnary": 242
  },
  "baseline_oz_instcount": 562,
  "knowledge_base_entry": [
    "--strip",
    "--mergefunc",
    "--ipsccp",
    "--nary-reassociate",
    "--inline",
    "--prune-eh",
    "--reassociate",
    "--inline",
    "--die"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--instcombine",
          "--speculative-execution",
          "--ipsccp",
          "--inject-tli-mappings",
          "--coro-split",
          "--globalopt",
          "--sink",
          "--lowerinvoke",
          "--partially-inline-libcalls",
          "--deadargelim"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--instcombine",
      "--speculative-execution",
      "--ipsccp",
      "--inject-tli-mappings",
      "--coro-split",
      "--globalopt",
      "--sink",
      "--lowerinvoke",
      "--partially-inline-libcalls",
      "--deadargelim"
    ],
    "performance_vs_Oz": "+0.2%"
  }
}
{
  "program_id": "linux-v0_8710.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 31,
    "onePredOneSuc": 22,
    "onePredTwoSuc": 8,
    "oneSuccessor": 29,
    "twoPred": 13,
    "twoPredOneSuc": 4,
    "twoEach": 2,
    "twoSuccessor": 17,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 60,
    "BeginPhi": 0,
    "BranchCount": 45,
    "returnInt": 11,
    "CriticalCount": 10,
    "NumEdges": 63,
    "const32Bit": 332,
    "const64Bit": 18,
    "numConstZeroes": 181,
    "numConstOnes": 105,
    "UncondBranches": 29,
    "binaryConstArg": 13,
    "NumAShrInst": 0,
    "NumAddInst": 5,
    "NumAllocaInst": 58,
    "NumAndInst": 3,
    "BlockMid": 15,
    "BlockLow": 45,
    "NumBitCastInst": 26,
    "NumBrInst": 45,
    "NumCallInst": 37,
    "NumGetElementPtrInst": 129,
    "NumICmpInst": 14,
    "NumLShrInst": 1,
    "NumLoadInst": 214,
    "NumMulInst": 2,
    "NumOrInst": 2,
    "NumPHIInst": 0,
    "NumRetInst": 14,
    "NumSExtInst": 1,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 97,
    "NumSubInst": 2,
    "NumTruncInst": 17,
    "NumXorInst": 0,
    "NumZExtInst": 21,
    "TotalBlocks": 60,
    "TotalInsts": 689,
    "TotalMemInst": 535,
    "TotalFuncs": 26,
    "ArgsPhi": 0,
    "testUnary": 337
  },
  "baseline_oz_instcount": 691,
  "knowledge_base_entry": [
    "--globaldce",
    "--aggressive-instcombine",
    "--simplifycfg",
    "--bdce",
    "--sccp",
    "--gvn-hoist",
    "--ipsccp",
    "--lower-expect",
    "--reassociate",
    "--gvn",
    "--early-cse"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--lcssa",
          "--sccp",
          "--aggressive-instcombine",
          "--instsimplify",
          "--lower-matrix-intrinsics",
          "--ipconstprop",
          "--sroa",
          "--loop-instsimplify",
          "--loop-idiom",
          "--partially-inline-libcalls",
          "--callsite-splitting",
          "--reassociate",
          "--nary-reassociate",
          "--cross-dso-cfi",
          "--coro-early",
          "--simplifycfg",
          "--div-rem-pairs",
          "--slp-vectorizer",
          "--globalsplit",
          "--load-store-vectorizer",
          "--instcombine",
          "--strip",
          "--lower-constant-intrinsics",
          "-loop-reduce",
          "--newgvn",
          "--partial-inliner",
          "--coro-elide",
          "--functionattrs",
          "--lower-guard-intrinsic"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.0%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--lcssa",
      "--sccp",
      "--aggressive-instcombine",
      "--instsimplify",
      "--lower-matrix-intrinsics",
      "--ipconstprop",
      "--sroa",
      "--loop-instsimplify",
      "--loop-idiom",
      "--partially-inline-libcalls",
      "--callsite-splitting",
      "--reassociate",
      "--nary-reassociate",
      "--cross-dso-cfi",
      "--coro-early",
      "--simplifycfg",
      "--div-rem-pairs",
      "--slp-vectorizer",
      "--globalsplit",
      "--load-store-vectorizer",
      "--instcombine",
      "--strip",
      "--lower-constant-intrinsics",
      "-loop-reduce",
      "--newgvn",
      "--partial-inliner",
      "--coro-elide",
      "--functionattrs",
      "--lower-guard-intrinsic"
    ],
    "performance_vs_Oz": "+2.0%"
  }
}
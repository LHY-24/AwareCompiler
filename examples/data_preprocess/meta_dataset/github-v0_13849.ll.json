{
  "program_id": "github-v0_13849.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 35,
    "onePredOneSuc": 24,
    "onePredTwoSuc": 10,
    "oneSuccessor": 34,
    "twoPred": 20,
    "twoPredOneSuc": 7,
    "twoEach": 7,
    "twoSuccessor": 22,
    "morePreds": 1,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 67,
    "BeginPhi": 1,
    "BranchCount": 56,
    "returnInt": 14,
    "CriticalCount": 11,
    "NumEdges": 78,
    "const32Bit": 88,
    "const64Bit": 5,
    "numConstZeroes": 27,
    "numConstOnes": 46,
    "UncondBranches": 34,
    "binaryConstArg": 6,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 32,
    "NumAndInst": 2,
    "BlockMid": 2,
    "BlockLow": 66,
    "NumBitCastInst": 0,
    "NumBrInst": 56,
    "NumCallInst": 27,
    "NumGetElementPtrInst": 21,
    "NumICmpInst": 22,
    "NumLShrInst": 0,
    "NumLoadInst": 81,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 1,
    "NumRetInst": 12,
    "NumSExtInst": 5,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 59,
    "NumSubInst": 2,
    "NumTruncInst": 6,
    "NumXorInst": 0,
    "NumZExtInst": 2,
    "TotalBlocks": 68,
    "TotalInsts": 330,
    "TotalMemInst": 220,
    "TotalFuncs": 25,
    "ArgsPhi": 2,
    "testUnary": 126
  },
  "baseline_oz_instcount": 334,
  "knowledge_base_entry": [
    "--functionattrs",
    "--gvn-hoist",
    "--newgvn",
    "--aggressive-instcombine",
    "--ipsccp",
    "--adce",
    "--dse",
    "--load-store-vectorizer",
    "--slp-vectorizer",
    "--lower-expect",
    "--sccp"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--mem2reg",
          "--ipsccp",
          "--functionattrs",
          "--mldst-motion",
          "--slsr",
          "--float2int",
          "--libcalls-shrinkwrap",
          "--loop-unroll-and-jam",
          "--reassociate",
          "--gvn"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--mem2reg",
      "--ipsccp",
      "--functionattrs",
      "--mldst-motion",
      "--slsr",
      "--float2int",
      "--libcalls-shrinkwrap",
      "--loop-unroll-and-jam",
      "--reassociate",
      "--gvn"
    ],
    "performance_vs_Oz": "+1.2%"
  }
}
{
  "program_id": "github-v0_43365.ll",
  "autophase_features": {
    "BBNumArgsHi": 1,
    "BBNumArgsLo": 0,
    "onePred": 4,
    "onePredOneSuc": 3,
    "onePredTwoSuc": 1,
    "oneSuccessor": 3,
    "twoPred": 0,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 2,
    "morePreds": 1,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 6,
    "BeginPhi": 1,
    "BranchCount": 5,
    "returnInt": 3,
    "CriticalCount": 0,
    "NumEdges": 7,
    "const32Bit": 6,
    "const64Bit": 4,
    "numConstZeroes": 2,
    "numConstOnes": 3,
    "UncondBranches": 3,
    "binaryConstArg": 5,
    "NumAShrInst": 2,
    "NumAddInst": 2,
    "NumAllocaInst": 0,
    "NumAndInst": 0,
    "BlockMid": 0,
    "BlockLow": 7,
    "NumBitCastInst": 0,
    "NumBrInst": 5,
    "NumCallInst": 3,
    "NumGetElementPtrInst": 5,
    "NumICmpInst": 2,
    "NumLShrInst": 0,
    "NumLoadInst": 4,
    "NumMulInst": 2,
    "NumOrInst": 0,
    "NumPHIInst": 2,
    "NumRetInst": 2,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 1,
    "NumSubInst": 0,
    "NumTruncInst": 1,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 7,
    "TotalInsts": 37,
    "TotalMemInst": 13,
    "TotalFuncs": 4,
    "ArgsPhi": 6,
    "testUnary": 5
  },
  "baseline_oz_instcount": 37,
  "knowledge_base_entry": [
    "--dce",
    "--lower-expect",
    "--jump-threading",
    "--prune-eh",
    "--gvn-hoist",
    "--inline",
    "--memcpyopt",
    "--instcombine",
    "--loop-simplifycfg",
    "--load-store-vectorizer",
    "--lower-constant-intrinsics",
    "--loop-reroll",
    "--gvn-hoist",
    "--simplifycfg",
    "--adce",
    "--reassociate",
    "--jump-threading"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--early-cse",
          "--strip-dead-prototypes",
          "--flattencfg",
          "--called-value-propagation",
          "--mergefunc",
          "--rewrite-statepoints-for-gc",
          "--constmerge",
          "--always-inline",
          "--attributor",
          "--gvn-hoist",
          "--dce",
          "--simplifycfg",
          "--loop-interchange",
          "--simple-loop-unswitch",
          "--name-anon-globals",
          "--div-rem-pairs",
          "--memcpyopt",
          "--indvars",
          "--slp-vectorizer",
          "--mldst-motion",
          "--hotcoldsplit",
          "--infer-address-spaces",
          "--pgo-memop-opt",
          "--loop-sink",
          "--loop-rotate",
          "--lower-widenable-condition",
          "--add-discriminators",
          "--functionattrs"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+29.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--early-cse",
      "--strip-dead-prototypes",
      "--flattencfg",
      "--called-value-propagation",
      "--mergefunc",
      "--rewrite-statepoints-for-gc",
      "--constmerge",
      "--always-inline",
      "--attributor",
      "--gvn-hoist",
      "--dce",
      "--simplifycfg",
      "--loop-interchange",
      "--simple-loop-unswitch",
      "--name-anon-globals",
      "--div-rem-pairs",
      "--memcpyopt",
      "--indvars",
      "--slp-vectorizer",
      "--mldst-motion",
      "--hotcoldsplit",
      "--infer-address-spaces",
      "--pgo-memop-opt",
      "--loop-sink",
      "--loop-rotate",
      "--lower-widenable-condition",
      "--add-discriminators",
      "--functionattrs"
    ],
    "performance_vs_Oz": "+29.7%"
  }
}
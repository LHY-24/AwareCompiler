{
  "program_id": "github-v0_48555.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 14,
    "onePredOneSuc": 8,
    "onePredTwoSuc": 3,
    "oneSuccessor": 12,
    "twoPred": 6,
    "twoPredOneSuc": 3,
    "twoEach": 3,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 23,
    "BeginPhi": 0,
    "BranchCount": 19,
    "returnInt": 4,
    "CriticalCount": 1,
    "NumEdges": 26,
    "const32Bit": 35,
    "const64Bit": 25,
    "numConstZeroes": 32,
    "numConstOnes": 20,
    "UncondBranches": 12,
    "binaryConstArg": 10,
    "NumAShrInst": 1,
    "NumAddInst": 6,
    "NumAllocaInst": 12,
    "NumAndInst": 1,
    "BlockMid": 6,
    "BlockLow": 17,
    "NumBitCastInst": 0,
    "NumBrInst": 19,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 19,
    "NumICmpInst": 7,
    "NumLShrInst": 0,
    "NumLoadInst": 34,
    "NumMulInst": 1,
    "NumOrInst": 2,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 17,
    "NumSubInst": 1,
    "NumTruncInst": 5,
    "NumXorInst": 0,
    "NumZExtInst": 19,
    "TotalBlocks": 23,
    "TotalInsts": 160,
    "TotalMemInst": 89,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 73
  },
  "baseline_oz_instcount": 160,
  "knowledge_base_entry": [
    "--early-cse-memssa",
    "--ipsccp",
    "--licm",
    "--die",
    "--lower-constant-intrinsics",
    "--instsimplify",
    "--mergefunc",
    "--early-cse-memssa",
    "--bdce",
    "--aggressive-instcombine",
    "--prune-eh",
    "--jump-threading",
    "--simplifycfg",
    "--loop-deletion",
    "--sroa",
    "--prune-eh",
    "--newgvn",
    "--early-cse-memssa",
    "--slsr",
    "--load-store-vectorizer",
    "--nary-reassociate",
    "--loop-instsimplify",
    "--reassociate",
    "--aggressive-instcombine",
    "--loop-rotate",
    "--lower-expect"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-data-prefetch",
          "--coro-split",
          "--inline",
          "--called-value-propagation",
          "--loop-guard-widening",
          "--nary-reassociate",
          "--aggressive-instcombine",
          "--flattencfg",
          "--lower-constant-intrinsics",
          "--float2int",
          "--loop-load-elim",
          "--lower-matrix-intrinsics",
          "--coro-early",
          "--coro-cleanup",
          "--simple-loop-unswitch",
          "--loop-idiom",
          "--strip",
          "--loop-versioning-licm"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-data-prefetch",
      "--coro-split",
      "--inline",
      "--called-value-propagation",
      "--loop-guard-widening",
      "--nary-reassociate",
      "--aggressive-instcombine",
      "--flattencfg",
      "--lower-constant-intrinsics",
      "--float2int",
      "--loop-load-elim",
      "--lower-matrix-intrinsics",
      "--coro-early",
      "--coro-cleanup",
      "--simple-loop-unswitch",
      "--loop-idiom",
      "--strip",
      "--loop-versioning-licm"
    ],
    "performance_vs_Oz": "+3.1%"
  }
}
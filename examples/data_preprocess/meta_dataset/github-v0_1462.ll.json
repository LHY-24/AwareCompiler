{
  "program_id": "github-v0_1462.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 21,
    "onePredOneSuc": 16,
    "onePredTwoSuc": 5,
    "oneSuccessor": 20,
    "twoPred": 4,
    "twoPredOneSuc": 3,
    "twoEach": 0,
    "twoSuccessor": 7,
    "morePreds": 3,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 31,
    "BeginPhi": 0,
    "BranchCount": 27,
    "returnInt": 12,
    "CriticalCount": 1,
    "NumEdges": 39,
    "const32Bit": 58,
    "const64Bit": 0,
    "numConstZeroes": 19,
    "numConstOnes": 24,
    "UncondBranches": 20,
    "binaryConstArg": 8,
    "NumAShrInst": 1,
    "NumAddInst": 2,
    "NumAllocaInst": 18,
    "NumAndInst": 1,
    "BlockMid": 3,
    "BlockLow": 28,
    "NumBitCastInst": 4,
    "NumBrInst": 27,
    "NumCallInst": 22,
    "NumGetElementPtrInst": 11,
    "NumICmpInst": 7,
    "NumLShrInst": 0,
    "NumLoadInst": 65,
    "NumMulInst": 2,
    "NumOrInst": 3,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 28,
    "NumSubInst": 0,
    "NumTruncInst": 6,
    "NumXorInst": 0,
    "NumZExtInst": 15,
    "TotalBlocks": 31,
    "TotalInsts": 216,
    "TotalMemInst": 144,
    "TotalFuncs": 11,
    "ArgsPhi": 0,
    "testUnary": 108
  },
  "baseline_oz_instcount": 216,
  "knowledge_base_entry": [
    "--float2int",
    "--newgvn",
    "--flattencfg",
    "--ipsccp",
    "--aggressive-instcombine",
    "--adce",
    "--early-cse-memssa",
    "--early-cse-memssa",
    "--licm",
    "--mem2reg",
    "--licm",
    "--inline",
    "--die",
    "--early-cse",
    "--slp-vectorizer",
    "--load-store-vectorizer",
    "--slsr",
    "--loop-simplifycfg",
    "--lower-expect"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--strip-dead-prototypes",
          "--loop-predication",
          "--redundant-dbg-inst-elim",
          "--coro-elide",
          "--early-cse-memssa",
          "--loop-idiom",
          "--correlated-propagation",
          "--loop-unswitch",
          "--elim-avail-extern",
          "--ee-instrument",
          "--always-inline",
          "--guard-widening",
          "--div-rem-pairs",
          "--irce",
          "--add-discriminators",
          "--aggressive-instcombine"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+5.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--strip-dead-prototypes",
      "--loop-predication",
      "--redundant-dbg-inst-elim",
      "--coro-elide",
      "--early-cse-memssa",
      "--loop-idiom",
      "--correlated-propagation",
      "--loop-unswitch",
      "--elim-avail-extern",
      "--ee-instrument",
      "--always-inline",
      "--guard-widening",
      "--div-rem-pairs",
      "--irce",
      "--add-discriminators",
      "--aggressive-instcombine"
    ],
    "performance_vs_Oz": "+5.1%"
  }
}
{
  "program_id": "linux-v0_8952.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 91,
    "onePredOneSuc": 67,
    "onePredTwoSuc": 24,
    "oneSuccessor": 70,
    "twoPred": 12,
    "twoPredOneSuc": 1,
    "twoEach": 4,
    "twoSuccessor": 45,
    "morePreds": 13,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 146,
    "BeginPhi": 0,
    "BranchCount": 113,
    "returnInt": 92,
    "CriticalCount": 9,
    "NumEdges": 168,
    "const32Bit": 305,
    "const64Bit": 7,
    "numConstZeroes": 133,
    "numConstOnes": 127,
    "UncondBranches": 70,
    "binaryConstArg": 18,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 94,
    "NumAndInst": 5,
    "BlockMid": 16,
    "BlockLow": 130,
    "NumBitCastInst": 4,
    "NumBrInst": 113,
    "NumCallInst": 109,
    "NumGetElementPtrInst": 41,
    "NumICmpInst": 45,
    "NumLShrInst": 1,
    "NumLoadInst": 274,
    "NumMulInst": 0,
    "NumOrInst": 4,
    "NumPHIInst": 0,
    "NumRetInst": 30,
    "NumSExtInst": 4,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 155,
    "NumSubInst": 0,
    "NumTruncInst": 13,
    "NumXorInst": 11,
    "NumZExtInst": 20,
    "TotalBlocks": 146,
    "TotalInsts": 929,
    "TotalMemInst": 673,
    "TotalFuncs": 49,
    "ArgsPhi": 0,
    "testUnary": 411
  },
  "baseline_oz_instcount": 935,
  "knowledge_base_entry": [
    "--flattencfg",
    "--globalopt",
    "--inline",
    "--load-store-vectorizer",
    "--aggressive-instcombine",
    "--loop-simplifycfg",
    "--jump-threading",
    "--loop-reroll",
    "--gvn-hoist",
    "--prune-eh",
    "--aggressive-instcombine",
    "--loweratomic",
    "--instcombine",
    "--loop-instsimplify",
    "--reassociate",
    "--adce",
    "--die",
    "--slp-vectorizer",
    "--lower-constant-intrinsics"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--licm",
          "--lower-matrix-intrinsics",
          "--gvn",
          "--globalopt",
          "--loweratomic",
          "--loop-unswitch",
          "--constmerge",
          "--float2int",
          "--strip",
          "--infer-address-spaces",
          "--loop-idiom",
          "--sccp",
          "--forceattrs",
          "--cross-dso-cfi",
          "--scalarizer",
          "--sancov",
          "--adce",
          "--coro-elide",
          "--mergefunc",
          "--irce",
          "--dse",
          "--coro-early",
          "--alignment-from-assumptions",
          "--lcssa",
          "--inferattrs",
          "--div-rem-pairs",
          "--aggressive-instcombine"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--licm",
      "--lower-matrix-intrinsics",
      "--gvn",
      "--globalopt",
      "--loweratomic",
      "--loop-unswitch",
      "--constmerge",
      "--float2int",
      "--strip",
      "--infer-address-spaces",
      "--loop-idiom",
      "--sccp",
      "--forceattrs",
      "--cross-dso-cfi",
      "--scalarizer",
      "--sancov",
      "--adce",
      "--coro-elide",
      "--mergefunc",
      "--irce",
      "--dse",
      "--coro-early",
      "--alignment-from-assumptions",
      "--lcssa",
      "--inferattrs",
      "--div-rem-pairs",
      "--aggressive-instcombine"
    ],
    "performance_vs_Oz": "+1.1%"
  }
}
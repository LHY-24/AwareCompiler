{
  "program_id": "github-v0_28334.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 0,
    "onePredOneSuc": 0,
    "onePredTwoSuc": 0,
    "oneSuccessor": 0,
    "twoPred": 0,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 0,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 1,
    "BeginPhi": 0,
    "BranchCount": 0,
    "returnInt": 0,
    "CriticalCount": 0,
    "NumEdges": 0,
    "const32Bit": 3,
    "const64Bit": 2,
    "numConstZeroes": 0,
    "numConstOnes": 4,
    "UncondBranches": 0,
    "binaryConstArg": 1,
    "NumAShrInst": 0,
    "NumAddInst": 3,
    "NumAllocaInst": 2,
    "NumAndInst": 0,
    "BlockMid": 1,
    "BlockLow": 0,
    "NumBitCastInst": 0,
    "NumBrInst": 0,
    "NumCallInst": 0,
    "NumGetElementPtrInst": 2,
    "NumICmpInst": 1,
    "NumLShrInst": 0,
    "NumLoadInst": 12,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 1,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 4,
    "NumSubInst": 1,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 7,
    "TotalBlocks": 1,
    "TotalInsts": 35,
    "TotalMemInst": 20,
    "TotalFuncs": 1,
    "ArgsPhi": 0,
    "testUnary": 23
  },
  "baseline_oz_instcount": 35,
  "knowledge_base_entry": [
    "--partially-inline-libcalls",
    "--gvn",
    "--aggressive-instcombine",
    "--die",
    "--sccp",
    "--reassociate",
    "--instcombine",
    "--nary-reassociate",
    "--gvn",
    "--mergefunc"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--strip",
          "--deadargelim",
          "--coro-split",
          "--aggressive-instcombine",
          "--float2int",
          "--reassociate",
          "--adce",
          "--callsite-splitting",
          "--bdce",
          "--guard-widening",
          "--loop-unswitch",
          "--argpromotion",
          "--libcalls-shrinkwrap",
          "--lower-expect",
          "--mem2reg",
          "--irce"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+17.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--strip",
      "--deadargelim",
      "--coro-split",
      "--aggressive-instcombine",
      "--float2int",
      "--reassociate",
      "--adce",
      "--callsite-splitting",
      "--bdce",
      "--guard-widening",
      "--loop-unswitch",
      "--argpromotion",
      "--libcalls-shrinkwrap",
      "--lower-expect",
      "--mem2reg",
      "--irce"
    ],
    "performance_vs_Oz": "+17.1%"
  }
}
{
  "program_id": "opencv-v0_221.ll",
  "autophase_features": {
    "BBNumArgsHi": 3,
    "BBNumArgsLo": 9,
    "onePred": 50,
    "onePredOneSuc": 11,
    "onePredTwoSuc": 39,
    "oneSuccessor": 14,
    "twoPred": 3,
    "twoPredOneSuc": 1,
    "twoEach": 2,
    "twoSuccessor": 48,
    "morePreds": 9,
    "BB03Phi": 12,
    "BBHiPhi": 0,
    "BBNoPhi": 54,
    "BeginPhi": 12,
    "BranchCount": 62,
    "returnInt": 8,
    "CriticalCount": 46,
    "NumEdges": 110,
    "const32Bit": 112,
    "const64Bit": 73,
    "numConstZeroes": 72,
    "numConstOnes": 35,
    "UncondBranches": 14,
    "binaryConstArg": 10,
    "NumAShrInst": 4,
    "NumAddInst": 0,
    "NumAllocaInst": 5,
    "NumAndInst": 5,
    "BlockMid": 1,
    "BlockLow": 65,
    "NumBitCastInst": 11,
    "NumBrInst": 62,
    "NumCallInst": 24,
    "NumGetElementPtrInst": 40,
    "NumICmpInst": 60,
    "NumLShrInst": 0,
    "NumLoadInst": 46,
    "NumMulInst": 0,
    "NumOrInst": 8,
    "NumPHIInst": 14,
    "NumRetInst": 4,
    "NumSExtInst": 1,
    "NumSelectInst": 4,
    "NumShlInst": 4,
    "NumStoreInst": 9,
    "NumSubInst": 0,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 66,
    "TotalInsts": 307,
    "TotalMemInst": 124,
    "TotalFuncs": 13,
    "ArgsPhi": 64,
    "testUnary": 67
  },
  "baseline_oz_instcount": 307,
  "knowledge_base_entry": [
    "--scalarizer",
    "--early-cse-memssa",
    "--loop-instsimplify",
    "--dce",
    "--load-store-vectorizer",
    "--slp-vectorizer",
    "--early-cse-memssa",
    "--slp-vectorizer",
    "--loop-simplifycfg",
    "--early-cse",
    "--sroa",
    "--lower-expect",
    "--prune-eh",
    "--sroa",
    "--inline",
    "--instcombine",
    "--lower-expect",
    "--globalopt",
    "--loop-deletion",
    "--gvn-hoist",
    "--load-store-vectorizer",
    "--licm",
    "--lower-expect",
    "--correlated-propagation",
    "--simplifycfg",
    "--mem2reg",
    "--nary-reassociate",
    "--loop-fusion"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--name-anon-globals",
          "--gvn-hoist",
          "--loop-versioning-licm",
          "--sroa",
          "--load-store-vectorizer",
          "--add-discriminators",
          "--argpromotion",
          "--strip",
          "--instcombine",
          "--strip-nondebug",
          "--mergereturn",
          "--loop-interchange",
          "--mergeicmps",
          "--flattencfg",
          "--strip-debug-declare",
          "--lower-guard-intrinsic",
          "--aggressive-instcombine",
          "--loop-rotate"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--name-anon-globals",
      "--gvn-hoist",
      "--loop-versioning-licm",
      "--sroa",
      "--load-store-vectorizer",
      "--add-discriminators",
      "--argpromotion",
      "--strip",
      "--instcombine",
      "--strip-nondebug",
      "--mergereturn",
      "--loop-interchange",
      "--mergeicmps",
      "--flattencfg",
      "--strip-debug-declare",
      "--lower-guard-intrinsic",
      "--aggressive-instcombine",
      "--loop-rotate"
    ],
    "performance_vs_Oz": "+0.3%"
  }
}
{
  "program_id": "github-v0_27919.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 3,
    "onePredOneSuc": 2,
    "onePredTwoSuc": 0,
    "oneSuccessor": 3,
    "twoPred": 1,
    "twoPredOneSuc": 0,
    "twoEach": 1,
    "twoSuccessor": 1,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 17,
    "BeginPhi": 0,
    "BranchCount": 4,
    "returnInt": 0,
    "CriticalCount": 0,
    "NumEdges": 5,
    "const32Bit": 64,
    "const64Bit": 3,
    "numConstZeroes": 14,
    "numConstOnes": 37,
    "UncondBranches": 3,
    "binaryConstArg": 8,
    "NumAShrInst": 0,
    "NumAddInst": 8,
    "NumAllocaInst": 32,
    "NumAndInst": 0,
    "BlockMid": 2,
    "BlockLow": 15,
    "NumBitCastInst": 3,
    "NumBrInst": 4,
    "NumCallInst": 10,
    "NumGetElementPtrInst": 8,
    "NumICmpInst": 1,
    "NumLShrInst": 0,
    "NumLoadInst": 29,
    "NumMulInst": 3,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 13,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 41,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 17,
    "TotalInsts": 152,
    "TotalMemInst": 120,
    "TotalFuncs": 14,
    "ArgsPhi": 0,
    "testUnary": 64
  },
  "baseline_oz_instcount": 152,
  "knowledge_base_entry": [
    "--die",
    "--mem2reg",
    "--newgvn",
    "--mem2reg",
    "--adce",
    "--aggressive-instcombine",
    "--flattencfg",
    "--load-store-vectorizer",
    "--mergefunc",
    "--ipsccp",
    "--correlated-propagation",
    "--early-cse",
    "--loop-instsimplify",
    "--gvn",
    "--jump-threading",
    "--sroa",
    "--dse",
    "--mldst-motion",
    "--jump-threading",
    "--nary-reassociate",
    "--early-cse-memssa",
    "--lower-expect",
    "--simplifycfg",
    "--early-cse-memssa",
    "--mergefunc",
    "--die",
    "--correlated-propagation"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-deletion",
          "--cross-dso-cfi",
          "--simple-loop-unswitch",
          "--partially-inline-libcalls",
          "--pgo-memop-opt",
          "--called-value-propagation",
          "--mergeicmps",
          "--loop-vectorize",
          "--loop-versioning",
          "--elim-avail-extern",
          "--loop-data-prefetch",
          "--slsr",
          "--forceattrs",
          "--constprop",
          "--lowerinvoke",
          "--argpromotion",
          "--add-discriminators",
          "--aggressive-instcombine",
          "--inline",
          "--instcombine",
          "--mergefunc",
          "--barrier",
          "--inferattrs",
          "--loop-simplifycfg",
          "--loop-unroll-and-jam",
          "--coro-split",
          "--die",
          "--deadargelim",
          "--globalopt"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+21.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-deletion",
      "--cross-dso-cfi",
      "--simple-loop-unswitch",
      "--partially-inline-libcalls",
      "--pgo-memop-opt",
      "--called-value-propagation",
      "--mergeicmps",
      "--loop-vectorize",
      "--loop-versioning",
      "--elim-avail-extern",
      "--loop-data-prefetch",
      "--slsr",
      "--forceattrs",
      "--constprop",
      "--lowerinvoke",
      "--argpromotion",
      "--add-discriminators",
      "--aggressive-instcombine",
      "--inline",
      "--instcombine",
      "--mergefunc",
      "--barrier",
      "--inferattrs",
      "--loop-simplifycfg",
      "--loop-unroll-and-jam",
      "--coro-split",
      "--die",
      "--deadargelim",
      "--globalopt"
    ],
    "performance_vs_Oz": "+21.1%"
  }
}
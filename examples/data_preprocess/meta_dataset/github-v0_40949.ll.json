{
  "program_id": "github-v0_40949.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 15,
    "onePredOneSuc": 10,
    "onePredTwoSuc": 2,
    "oneSuccessor": 13,
    "twoPred": 6,
    "twoPredOneSuc": 2,
    "twoEach": 4,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 24,
    "BeginPhi": 0,
    "BranchCount": 20,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 27,
    "const32Bit": 38,
    "const64Bit": 60,
    "numConstZeroes": 56,
    "numConstOnes": 30,
    "UncondBranches": 13,
    "binaryConstArg": 10,
    "NumAShrInst": 0,
    "NumAddInst": 7,
    "NumAllocaInst": 15,
    "NumAndInst": 1,
    "BlockMid": 5,
    "BlockLow": 19,
    "NumBitCastInst": 12,
    "NumBrInst": 20,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 40,
    "NumICmpInst": 7,
    "NumLShrInst": 0,
    "NumLoadInst": 42,
    "NumMulInst": 1,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 28,
    "NumSubInst": 3,
    "NumTruncInst": 3,
    "NumXorInst": 0,
    "NumZExtInst": 7,
    "TotalBlocks": 24,
    "TotalInsts": 202,
    "TotalMemInst": 132,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 82
  },
  "baseline_oz_instcount": 202,
  "knowledge_base_entry": [
    "--separate-const-offset-from-gep",
    "--simplifycfg",
    "--newgvn",
    "--die",
    "--elim-avail-extern",
    "--dse",
    "--loop-simplifycfg",
    "--aggressive-instcombine",
    "--globaldce",
    "--ipsccp",
    "--lower-expect",
    "--jump-threading",
    "--dce",
    "--correlated-propagation",
    "--bdce",
    "--reassociate",
    "--elim-avail-extern",
    "--sroa",
    "--early-cse-memssa",
    "--inline",
    "--slp-vectorizer",
    "--instsimplify"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "-loop-reduce",
          "--mergereturn",
          "--callsite-splitting",
          "--simplifycfg",
          "--libcalls-shrinkwrap",
          "--reg2mem",
          "--ipsccp",
          "--mem2reg",
          "--loop-versioning-licm",
          "--nary-reassociate",
          "--loop-data-prefetch",
          "--inline",
          "--loop-predication",
          "--coro-elide",
          "--prune-eh",
          "--lower-widenable-condition",
          "--coro-early",
          "--loweratomic",
          "--lcssa",
          "--aggressive-instcombine",
          "--instcombine",
          "--strip-debug-declare",
          "--add-discriminators",
          "--newgvn",
          "--globalopt",
          "--loop-vectorize",
          "--tailcallelim",
          "--consthoist"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.0%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "-loop-reduce",
      "--mergereturn",
      "--callsite-splitting",
      "--simplifycfg",
      "--libcalls-shrinkwrap",
      "--reg2mem",
      "--ipsccp",
      "--mem2reg",
      "--loop-versioning-licm",
      "--nary-reassociate",
      "--loop-data-prefetch",
      "--inline",
      "--loop-predication",
      "--coro-elide",
      "--prune-eh",
      "--lower-widenable-condition",
      "--coro-early",
      "--loweratomic",
      "--lcssa",
      "--aggressive-instcombine",
      "--instcombine",
      "--strip-debug-declare",
      "--add-discriminators",
      "--newgvn",
      "--globalopt",
      "--loop-vectorize",
      "--tailcallelim",
      "--consthoist"
    ],
    "performance_vs_Oz": "+2.0%"
  }
}
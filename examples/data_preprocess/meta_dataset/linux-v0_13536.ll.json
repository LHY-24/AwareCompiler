{
  "program_id": "linux-v0_13536.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 55,
    "onePredOneSuc": 47,
    "onePredTwoSuc": 3,
    "oneSuccessor": 55,
    "twoPred": 12,
    "twoPredOneSuc": 2,
    "twoEach": 5,
    "twoSuccessor": 12,
    "morePreds": 5,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 89,
    "BeginPhi": 1,
    "BranchCount": 67,
    "returnInt": 5,
    "CriticalCount": 5,
    "NumEdges": 104,
    "const32Bit": 230,
    "const64Bit": 5,
    "numConstZeroes": 93,
    "numConstOnes": 116,
    "UncondBranches": 55,
    "binaryConstArg": 0,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 94,
    "NumAndInst": 0,
    "BlockMid": 15,
    "BlockLow": 75,
    "NumBitCastInst": 65,
    "NumBrInst": 67,
    "NumCallInst": 50,
    "NumGetElementPtrInst": 50,
    "NumICmpInst": 10,
    "NumLShrInst": 0,
    "NumLoadInst": 209,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 1,
    "NumRetInst": 18,
    "NumSExtInst": 5,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 128,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 7,
    "TotalBlocks": 90,
    "TotalInsts": 712,
    "TotalMemInst": 531,
    "TotalFuncs": 26,
    "ArgsPhi": 2,
    "testUnary": 383
  },
  "baseline_oz_instcount": 713,
  "knowledge_base_entry": [
    "--sccp",
    "--adce",
    "--correlated-propagation",
    "--ipsccp",
    "--flattencfg",
    "--jump-threading",
    "--early-cse",
    "--sroa",
    "--globalopt",
    "--elim-avail-extern",
    "--ipsccp",
    "--flattencfg",
    "--inline",
    "--mergefunc",
    "--ipsccp",
    "--globaldce",
    "--ipsccp",
    "--lower-expect"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--mergefunc",
          "--inline",
          "-loop-reduce",
          "--sccp",
          "--lower-guard-intrinsic",
          "--lower-constant-intrinsics",
          "--loop-unroll-and-jam",
          "--correlated-propagation",
          "--ipsccp",
          "--loop-idiom",
          "--instsimplify",
          "--partially-inline-libcalls"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--mergefunc",
      "--inline",
      "-loop-reduce",
      "--sccp",
      "--lower-guard-intrinsic",
      "--lower-constant-intrinsics",
      "--loop-unroll-and-jam",
      "--correlated-propagation",
      "--ipsccp",
      "--loop-idiom",
      "--instsimplify",
      "--partially-inline-libcalls"
    ],
    "performance_vs_Oz": "+0.7%"
  }
}
{
  "program_id": "github-v0_29576.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 15,
    "onePredOneSuc": 9,
    "onePredTwoSuc": 3,
    "oneSuccessor": 13,
    "twoPred": 6,
    "twoPredOneSuc": 3,
    "twoEach": 3,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 24,
    "BeginPhi": 0,
    "BranchCount": 20,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 27,
    "const32Bit": 33,
    "const64Bit": 68,
    "numConstZeroes": 58,
    "numConstOnes": 26,
    "UncondBranches": 13,
    "binaryConstArg": 8,
    "NumAShrInst": 0,
    "NumAddInst": 4,
    "NumAllocaInst": 15,
    "NumAndInst": 0,
    "BlockMid": 6,
    "BlockLow": 18,
    "NumBitCastInst": 20,
    "NumBrInst": 20,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 53,
    "NumICmpInst": 7,
    "NumLShrInst": 1,
    "NumLoadInst": 53,
    "NumMulInst": 0,
    "NumOrInst": 2,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 30,
    "NumSubInst": 0,
    "NumTruncInst": 4,
    "NumXorInst": 1,
    "NumZExtInst": 15,
    "TotalBlocks": 24,
    "TotalInsts": 239,
    "TotalMemInst": 158,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 110
  },
  "baseline_oz_instcount": 239,
  "knowledge_base_entry": [
    "--slp-vectorizer",
    "--early-cse-memssa",
    "--elim-avail-extern",
    "--mergefunc",
    "--inline",
    "--nary-reassociate",
    "--jump-threading",
    "--sccp",
    "--dce",
    "--newgvn",
    "--mem2reg",
    "--aggressive-instcombine",
    "--mergefunc",
    "--instsimplify",
    "--newgvn",
    "--loop-instsimplify",
    "--aggressive-instcombine",
    "--instcombine",
    "--aggressive-instcombine",
    "--newgvn",
    "--licm",
    "--licm",
    "--instcombine",
    "--memcpyopt"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-versioning-licm",
          "--loop-predication",
          "-loop-reduce",
          "--nary-reassociate",
          "--infer-address-spaces",
          "--aggressive-instcombine",
          "--separate-const-offset-from-gep",
          "--strip-dead-prototypes",
          "--irce",
          "--add-discriminators",
          "--early-cse",
          "--lower-guard-intrinsic",
          "--globalopt",
          "--loop-simplify",
          "--loop-unroll-and-jam",
          "--always-inline",
          "--argpromotion"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-versioning-licm",
      "--loop-predication",
      "-loop-reduce",
      "--nary-reassociate",
      "--infer-address-spaces",
      "--aggressive-instcombine",
      "--separate-const-offset-from-gep",
      "--strip-dead-prototypes",
      "--irce",
      "--add-discriminators",
      "--early-cse",
      "--lower-guard-intrinsic",
      "--globalopt",
      "--loop-simplify",
      "--loop-unroll-and-jam",
      "--always-inline",
      "--argpromotion"
    ],
    "performance_vs_Oz": "+1.7%"
  }
}
{
  "program_id": "linux-v0_9206.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 31,
    "onePredOneSuc": 18,
    "onePredTwoSuc": 13,
    "oneSuccessor": 29,
    "twoPred": 16,
    "twoPredOneSuc": 9,
    "twoEach": 3,
    "twoSuccessor": 20,
    "morePreds": 2,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 57,
    "BeginPhi": 2,
    "BranchCount": 49,
    "returnInt": 2,
    "CriticalCount": 12,
    "NumEdges": 69,
    "const32Bit": 190,
    "const64Bit": 14,
    "numConstZeroes": 83,
    "numConstOnes": 84,
    "UncondBranches": 29,
    "binaryConstArg": 11,
    "NumAShrInst": 0,
    "NumAddInst": 7,
    "NumAllocaInst": 50,
    "NumAndInst": 2,
    "BlockMid": 7,
    "BlockLow": 52,
    "NumBitCastInst": 12,
    "NumBrInst": 49,
    "NumCallInst": 26,
    "NumGetElementPtrInst": 61,
    "NumICmpInst": 22,
    "NumLShrInst": 0,
    "NumLoadInst": 136,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 2,
    "NumRetInst": 10,
    "NumSExtInst": 10,
    "NumSelectInst": 0,
    "NumShlInst": 3,
    "NumStoreInst": 75,
    "NumSubInst": 3,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 59,
    "TotalInsts": 473,
    "TotalMemInst": 348,
    "TotalFuncs": 18,
    "ArgsPhi": 4,
    "testUnary": 213
  },
  "baseline_oz_instcount": 473,
  "knowledge_base_entry": [
    "--memcpyopt",
    "--mem2reg",
    "--adce",
    "--dce",
    "--dse",
    "--newgvn",
    "--sccp",
    "--bdce",
    "--correlated-propagation",
    "--early-cse-memssa",
    "--globalopt",
    "--globaldce",
    "--aggressive-instcombine",
    "--loop-rotate",
    "--gvn-hoist",
    "--loop-instsimplify"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--lcssa",
          "--lowerinvoke",
          "--aggressive-instcombine",
          "--gvn",
          "--sancov",
          "--cross-dso-cfi",
          "--sccp",
          "--ipsccp",
          "--loop-load-elim",
          "--add-discriminators",
          "--scalarizer",
          "--loop-versioning",
          "--speculative-execution",
          "--elim-avail-extern",
          "--dse",
          "--guard-widening",
          "--globalsplit",
          "--mergereturn",
          "--loop-rotate",
          "--hotcoldsplit",
          "--memcpyopt",
          "--loop-simplify",
          "--prune-eh",
          "--lower-matrix-intrinsics",
          "--simple-loop-unswitch",
          "--correlated-propagation",
          "-loop-reduce",
          "--loop-simplifycfg",
          "--lowerswitch",
          "--strip-dead-prototypes"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--lcssa",
      "--lowerinvoke",
      "--aggressive-instcombine",
      "--gvn",
      "--sancov",
      "--cross-dso-cfi",
      "--sccp",
      "--ipsccp",
      "--loop-load-elim",
      "--add-discriminators",
      "--scalarizer",
      "--loop-versioning",
      "--speculative-execution",
      "--elim-avail-extern",
      "--dse",
      "--guard-widening",
      "--globalsplit",
      "--mergereturn",
      "--loop-rotate",
      "--hotcoldsplit",
      "--memcpyopt",
      "--loop-simplify",
      "--prune-eh",
      "--lower-matrix-intrinsics",
      "--simple-loop-unswitch",
      "--correlated-propagation",
      "-loop-reduce",
      "--loop-simplifycfg",
      "--lowerswitch",
      "--strip-dead-prototypes"
    ],
    "performance_vs_Oz": "+0.4%"
  }
}
{
  "program_id": "github-v0_4827.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 3,
    "onePredOneSuc": 2,
    "onePredTwoSuc": 0,
    "oneSuccessor": 3,
    "twoPred": 1,
    "twoPredOneSuc": 0,
    "twoEach": 1,
    "twoSuccessor": 1,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 30,
    "BeginPhi": 0,
    "BranchCount": 4,
    "returnInt": 0,
    "CriticalCount": 0,
    "NumEdges": 5,
    "const32Bit": 133,
    "const64Bit": 1,
    "numConstZeroes": 25,
    "numConstOnes": 107,
    "UncondBranches": 3,
    "binaryConstArg": 1,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 106,
    "NumAndInst": 0,
    "BlockMid": 8,
    "BlockLow": 22,
    "NumBitCastInst": 0,
    "NumBrInst": 4,
    "NumCallInst": 0,
    "NumGetElementPtrInst": 1,
    "NumICmpInst": 1,
    "NumLShrInst": 0,
    "NumLoadInst": 4,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 26,
    "NumSExtInst": 1,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 109,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 30,
    "TotalInsts": 253,
    "TotalMemInst": 220,
    "TotalFuncs": 26,
    "ArgsPhi": 0,
    "testUnary": 111
  },
  "baseline_oz_instcount": 252,
  "knowledge_base_entry": [
    "--loop-simplifycfg",
    "--correlated-propagation",
    "--lower-constant-intrinsics",
    "--globalopt",
    "--mergefunc",
    "--correlated-propagation",
    "--lower-constant-intrinsics",
    "--reassociate",
    "--adce",
    "--sccp",
    "--dse"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--constprop",
          "--sink",
          "--forceattrs",
          "--sroa",
          "--barrier",
          "--rpo-functionattrs",
          "--called-value-propagation",
          "--loop-idiom",
          "--loop-unroll-and-jam",
          "--libcalls-shrinkwrap",
          "--lower-widenable-condition",
          "--rewrite-statepoints-for-gc",
          "--tailcallelim",
          "--sccp",
          "--ee-instrument",
          "--add-discriminators",
          "--gvn",
          "--mem2reg",
          "-loop-reduce",
          "--guard-widening",
          "--mergefunc",
          "--flattencfg",
          "--lcssa",
          "--mergeicmps",
          "--lower-matrix-intrinsics",
          "--loop-unswitch",
          "--pgo-memop-opt",
          "--scalarizer",
          "--speculative-execution",
          "--lowerinvoke"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+12.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--constprop",
      "--sink",
      "--forceattrs",
      "--sroa",
      "--barrier",
      "--rpo-functionattrs",
      "--called-value-propagation",
      "--loop-idiom",
      "--loop-unroll-and-jam",
      "--libcalls-shrinkwrap",
      "--lower-widenable-condition",
      "--rewrite-statepoints-for-gc",
      "--tailcallelim",
      "--sccp",
      "--ee-instrument",
      "--add-discriminators",
      "--gvn",
      "--mem2reg",
      "-loop-reduce",
      "--guard-widening",
      "--mergefunc",
      "--flattencfg",
      "--lcssa",
      "--mergeicmps",
      "--lower-matrix-intrinsics",
      "--loop-unswitch",
      "--pgo-memop-opt",
      "--scalarizer",
      "--speculative-execution",
      "--lowerinvoke"
    ],
    "performance_vs_Oz": "+12.3%"
  }
}
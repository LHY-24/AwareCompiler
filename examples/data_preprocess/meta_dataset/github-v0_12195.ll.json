{
  "program_id": "github-v0_12195.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 50,
    "onePredOneSuc": 30,
    "onePredTwoSuc": 20,
    "oneSuccessor": 40,
    "twoPred": 25,
    "twoPredOneSuc": 6,
    "twoEach": 19,
    "twoSuccessor": 42,
    "morePreds": 7,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 83,
    "BeginPhi": 0,
    "BranchCount": 82,
    "returnInt": 12,
    "CriticalCount": 41,
    "NumEdges": 124,
    "const32Bit": 109,
    "const64Bit": 17,
    "numConstZeroes": 65,
    "numConstOnes": 17,
    "UncondBranches": 40,
    "binaryConstArg": 14,
    "NumAShrInst": 0,
    "NumAddInst": 14,
    "NumAllocaInst": 7,
    "NumAndInst": 0,
    "BlockMid": 4,
    "BlockLow": 79,
    "NumBitCastInst": 1,
    "NumBrInst": 82,
    "NumCallInst": 19,
    "NumGetElementPtrInst": 33,
    "NumICmpInst": 42,
    "NumLShrInst": 0,
    "NumLoadInst": 119,
    "NumMulInst": 3,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 1,
    "NumSExtInst": 48,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 67,
    "NumSubInst": 0,
    "NumTruncInst": 6,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 83,
    "TotalInsts": 445,
    "TotalMemInst": 245,
    "TotalFuncs": 10,
    "ArgsPhi": 0,
    "testUnary": 181
  },
  "baseline_oz_instcount": 447,
  "knowledge_base_entry": [
    "--aggressive-instcombine",
    "--globaldce",
    "--mergefunc",
    "--lower-expect",
    "--reassociate",
    "--instcombine"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--lower-expect",
          "--post-inline-ee-instrument",
          "--correlated-propagation",
          "--dce",
          "--nary-reassociate",
          "--forceattrs",
          "--aggressive-instcombine",
          "--canonicalize-aliases",
          "--lowerinvoke",
          "--coro-cleanup"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--lower-expect",
      "--post-inline-ee-instrument",
      "--correlated-propagation",
      "--dce",
      "--nary-reassociate",
      "--forceattrs",
      "--aggressive-instcombine",
      "--canonicalize-aliases",
      "--lowerinvoke",
      "--coro-cleanup"
    ],
    "performance_vs_Oz": "+1.8%"
  }
}
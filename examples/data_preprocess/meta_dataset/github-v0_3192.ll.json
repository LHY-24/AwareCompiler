{
  "program_id": "github-v0_3192.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 56,
    "onePredOneSuc": 36,
    "onePredTwoSuc": 20,
    "oneSuccessor": 49,
    "twoPred": 29,
    "twoPredOneSuc": 12,
    "twoEach": 10,
    "twoSuccessor": 37,
    "morePreds": 2,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 96,
    "BeginPhi": 1,
    "BranchCount": 86,
    "returnInt": 23,
    "CriticalCount": 25,
    "NumEdges": 129,
    "const32Bit": 161,
    "const64Bit": 0,
    "numConstZeroes": 47,
    "numConstOnes": 46,
    "UncondBranches": 49,
    "binaryConstArg": 25,
    "NumAShrInst": 0,
    "NumAddInst": 9,
    "NumAllocaInst": 35,
    "NumAndInst": 10,
    "BlockMid": 4,
    "BlockLow": 93,
    "NumBitCastInst": 0,
    "NumBrInst": 86,
    "NumCallInst": 25,
    "NumGetElementPtrInst": 38,
    "NumICmpInst": 38,
    "NumLShrInst": 0,
    "NumLoadInst": 164,
    "NumMulInst": 1,
    "NumOrInst": 9,
    "NumPHIInst": 1,
    "NumRetInst": 10,
    "NumSExtInst": 11,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 73,
    "NumSubInst": 0,
    "NumTruncInst": 1,
    "NumXorInst": 1,
    "NumZExtInst": 2,
    "TotalBlocks": 97,
    "TotalInsts": 516,
    "TotalMemInst": 335,
    "TotalFuncs": 17,
    "ArgsPhi": 2,
    "testUnary": 213
  },
  "baseline_oz_instcount": 517,
  "knowledge_base_entry": [
    "--deadargelim",
    "--mergefunc",
    "--simplifycfg",
    "--adce",
    "--load-store-vectorizer",
    "--simplifycfg",
    "--sroa",
    "--globalopt",
    "--globaldce",
    "--aggressive-instcombine",
    "--lower-constant-intrinsics",
    "--instcombine"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--instcombine",
          "--hotcoldsplit",
          "--coro-elide",
          "--gvn",
          "--globalsplit",
          "--loweratomic",
          "--float2int",
          "--tailcallelim",
          "--libcalls-shrinkwrap",
          "--slsr",
          "--callsite-splitting"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--instcombine",
      "--hotcoldsplit",
      "--coro-elide",
      "--gvn",
      "--globalsplit",
      "--loweratomic",
      "--float2int",
      "--tailcallelim",
      "--libcalls-shrinkwrap",
      "--slsr",
      "--callsite-splitting"
    ],
    "performance_vs_Oz": "+0.2%"
  }
}
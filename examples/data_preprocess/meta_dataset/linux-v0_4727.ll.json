{
  "program_id": "linux-v0_4727.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 39,
    "onePredOneSuc": 29,
    "onePredTwoSuc": 9,
    "oneSuccessor": 35,
    "twoPred": 12,
    "twoPredOneSuc": 4,
    "twoEach": 5,
    "twoSuccessor": 17,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 68,
    "BeginPhi": 0,
    "BranchCount": 52,
    "returnInt": 6,
    "CriticalCount": 5,
    "NumEdges": 72,
    "const32Bit": 183,
    "const64Bit": 18,
    "numConstZeroes": 82,
    "numConstOnes": 62,
    "UncondBranches": 35,
    "binaryConstArg": 27,
    "NumAShrInst": 1,
    "NumAddInst": 10,
    "NumAllocaInst": 40,
    "NumAndInst": 4,
    "BlockMid": 10,
    "BlockLow": 58,
    "NumBitCastInst": 6,
    "NumBrInst": 52,
    "NumCallInst": 33,
    "NumGetElementPtrInst": 59,
    "NumICmpInst": 19,
    "NumLShrInst": 0,
    "NumLoadInst": 134,
    "NumMulInst": 0,
    "NumOrInst": 6,
    "NumPHIInst": 0,
    "NumRetInst": 15,
    "NumSExtInst": 15,
    "NumSelectInst": 0,
    "NumShlInst": 9,
    "NumStoreInst": 65,
    "NumSubInst": 1,
    "NumTruncInst": 1,
    "NumXorInst": 2,
    "NumZExtInst": 14,
    "TotalBlocks": 68,
    "TotalInsts": 488,
    "TotalMemInst": 331,
    "TotalFuncs": 29,
    "ArgsPhi": 0,
    "testUnary": 211
  },
  "baseline_oz_instcount": 488,
  "knowledge_base_entry": [
    "--instsimplify",
    "--nary-reassociate",
    "--ipsccp",
    "--aggressive-instcombine",
    "--globalopt",
    "--lower-constant-intrinsics",
    "--instcombine",
    "--reassociate",
    "--lower-constant-intrinsics",
    "--simplifycfg",
    "--loop-deletion",
    "--sccp",
    "--dce",
    "--sroa",
    "--inline"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--correlated-propagation",
          "--die",
          "--dce",
          "--consthoist",
          "--reassociate",
          "--loweratomic",
          "--bdce",
          "--forceattrs",
          "--aggressive-instcombine",
          "--slp-vectorizer",
          "--loop-distribute",
          "--add-discriminators",
          "--strip-nondebug",
          "--early-cse-memssa",
          "--strip",
          "--barrier",
          "--lower-widenable-condition",
          "--globalopt",
          "--alignment-from-assumptions",
          "--mergefunc",
          "--strip-dead-prototypes",
          "--sink",
          "--sroa",
          "--coro-elide",
          "--inject-tli-mappings",
          "--deadargelim",
          "--argpromotion"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--correlated-propagation",
      "--die",
      "--dce",
      "--consthoist",
      "--reassociate",
      "--loweratomic",
      "--bdce",
      "--forceattrs",
      "--aggressive-instcombine",
      "--slp-vectorizer",
      "--loop-distribute",
      "--add-discriminators",
      "--strip-nondebug",
      "--early-cse-memssa",
      "--strip",
      "--barrier",
      "--lower-widenable-condition",
      "--globalopt",
      "--alignment-from-assumptions",
      "--mergefunc",
      "--strip-dead-prototypes",
      "--sink",
      "--sroa",
      "--coro-elide",
      "--inject-tli-mappings",
      "--deadargelim",
      "--argpromotion"
    ],
    "performance_vs_Oz": "+0.4%"
  }
}
{
  "program_id": "linux-v0_7643.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 54,
    "onePredOneSuc": 38,
    "onePredTwoSuc": 12,
    "oneSuccessor": 53,
    "twoPred": 23,
    "twoPredOneSuc": 12,
    "twoEach": 6,
    "twoSuccessor": 25,
    "morePreds": 2,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 101,
    "BeginPhi": 2,
    "BranchCount": 78,
    "returnInt": 25,
    "CriticalCount": 13,
    "NumEdges": 106,
    "const32Bit": 418,
    "const64Bit": 57,
    "numConstZeroes": 205,
    "numConstOnes": 128,
    "UncondBranches": 53,
    "binaryConstArg": 44,
    "NumAShrInst": 3,
    "NumAddInst": 4,
    "NumAllocaInst": 94,
    "NumAndInst": 27,
    "BlockMid": 14,
    "BlockLow": 89,
    "NumBitCastInst": 6,
    "NumBrInst": 78,
    "NumCallInst": 93,
    "NumGetElementPtrInst": 134,
    "NumICmpInst": 29,
    "NumLShrInst": 0,
    "NumLoadInst": 282,
    "NumMulInst": 2,
    "NumOrInst": 3,
    "NumPHIInst": 2,
    "NumRetInst": 24,
    "NumSExtInst": 3,
    "NumSelectInst": 2,
    "NumShlInst": 2,
    "NumStoreInst": 122,
    "NumSubInst": 5,
    "NumTruncInst": 5,
    "NumXorInst": 3,
    "NumZExtInst": 44,
    "TotalBlocks": 103,
    "TotalInsts": 969,
    "TotalMemInst": 725,
    "TotalFuncs": 43,
    "ArgsPhi": 4,
    "testUnary": 435
  },
  "baseline_oz_instcount": 969,
  "knowledge_base_entry": [
    "--aggressive-instcombine",
    "--simplifycfg",
    "--globalopt",
    "--correlated-propagation",
    "--ipsccp",
    "--instsimplify",
    "--dse",
    "--mldst-motion",
    "--gvn",
    "--loop-reroll",
    "--slsr",
    "--load-store-vectorizer",
    "--correlated-propagation",
    "--adce",
    "--mergefunc",
    "--globalopt",
    "--lower-constant-intrinsics",
    "--early-cse-memssa",
    "--slp-vectorizer"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--coro-early",
          "--constmerge",
          "--irce",
          "--globaldce",
          "--strip",
          "--globalsplit",
          "--redundant-dbg-inst-elim",
          "--indvars",
          "--lower-widenable-condition",
          "--div-rem-pairs",
          "--adce",
          "--loop-load-elim",
          "--ipsccp",
          "--forceattrs",
          "--libcalls-shrinkwrap",
          "--simplifycfg",
          "-loop-reduce",
          "--partial-inliner",
          "--mergefunc",
          "--die",
          "--loop-unswitch",
          "--bdce",
          "--lower-expect",
          "--aggressive-instcombine",
          "--ipconstprop",
          "--loweratomic",
          "--licm",
          "--float2int",
          "--lowerinvoke",
          "--inject-tli-mappings"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--coro-early",
      "--constmerge",
      "--irce",
      "--globaldce",
      "--strip",
      "--globalsplit",
      "--redundant-dbg-inst-elim",
      "--indvars",
      "--lower-widenable-condition",
      "--div-rem-pairs",
      "--adce",
      "--loop-load-elim",
      "--ipsccp",
      "--forceattrs",
      "--libcalls-shrinkwrap",
      "--simplifycfg",
      "-loop-reduce",
      "--partial-inliner",
      "--mergefunc",
      "--die",
      "--loop-unswitch",
      "--bdce",
      "--lower-expect",
      "--aggressive-instcombine",
      "--ipconstprop",
      "--loweratomic",
      "--licm",
      "--float2int",
      "--lowerinvoke",
      "--inject-tli-mappings"
    ],
    "performance_vs_Oz": "+0.6%"
  }
}
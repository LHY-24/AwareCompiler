{
  "program_id": "github-v0_50184.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 10,
    "onePredOneSuc": 5,
    "onePredTwoSuc": 5,
    "oneSuccessor": 5,
    "twoPred": 1,
    "twoPredOneSuc": 0,
    "twoEach": 1,
    "twoSuccessor": 10,
    "morePreds": 4,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 17,
    "BeginPhi": 1,
    "BranchCount": 15,
    "returnInt": 15,
    "CriticalCount": 10,
    "NumEdges": 25,
    "const32Bit": 26,
    "const64Bit": 35,
    "numConstZeroes": 27,
    "numConstOnes": 16,
    "UncondBranches": 5,
    "binaryConstArg": 12,
    "NumAShrInst": 0,
    "NumAddInst": 9,
    "NumAllocaInst": 0,
    "NumAndInst": 7,
    "BlockMid": 7,
    "BlockLow": 11,
    "NumBitCastInst": 0,
    "NumBrInst": 15,
    "NumCallInst": 51,
    "NumGetElementPtrInst": 37,
    "NumICmpInst": 11,
    "NumLShrInst": 0,
    "NumLoadInst": 31,
    "NumMulInst": 6,
    "NumOrInst": 0,
    "NumPHIInst": 2,
    "NumRetInst": 3,
    "NumSExtInst": 12,
    "NumSelectInst": 2,
    "NumShlInst": 1,
    "NumStoreInst": 21,
    "NumSubInst": 0,
    "NumTruncInst": 3,
    "NumXorInst": 0,
    "NumZExtInst": 2,
    "TotalBlocks": 18,
    "TotalInsts": 246,
    "TotalMemInst": 140,
    "TotalFuncs": 8,
    "ArgsPhi": 4,
    "testUnary": 48
  },
  "baseline_oz_instcount": 246,
  "knowledge_base_entry": [
    "--slsr",
    "--jump-threading",
    "--load-store-vectorizer",
    "--licm",
    "--bdce",
    "--mem2reg",
    "--early-cse",
    "--early-cse",
    "--gvn",
    "--simplifycfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--div-rem-pairs",
          "--flattencfg",
          "--guard-widening",
          "--loop-idiom",
          "--cross-dso-cfi",
          "--loop-vectorize",
          "--slsr",
          "--irce",
          "--strip-nondebug",
          "--canonicalize-aliases",
          "--aggressive-instcombine"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--div-rem-pairs",
      "--flattencfg",
      "--guard-widening",
      "--loop-idiom",
      "--cross-dso-cfi",
      "--loop-vectorize",
      "--slsr",
      "--irce",
      "--strip-nondebug",
      "--canonicalize-aliases",
      "--aggressive-instcombine"
    ],
    "performance_vs_Oz": "+0.4%"
  }
}
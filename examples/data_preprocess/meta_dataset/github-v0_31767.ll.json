{
  "program_id": "github-v0_31767.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 0,
    "onePredOneSuc": 0,
    "onePredTwoSuc": 0,
    "oneSuccessor": 0,
    "twoPred": 0,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 0,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 1,
    "BeginPhi": 0,
    "BranchCount": 0,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 0,
    "const32Bit": 5,
    "const64Bit": 34,
    "numConstZeroes": 5,
    "numConstOnes": 3,
    "UncondBranches": 0,
    "binaryConstArg": 17,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 0,
    "NumAndInst": 0,
    "BlockMid": 1,
    "BlockLow": 0,
    "NumBitCastInst": 32,
    "NumBrInst": 0,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 17,
    "NumICmpInst": 0,
    "NumLShrInst": 0,
    "NumLoadInst": 0,
    "NumMulInst": 1,
    "NumOrInst": 15,
    "NumPHIInst": 0,
    "NumRetInst": 1,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 16,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 1,
    "TotalInsts": 108,
    "TotalMemInst": 40,
    "TotalFuncs": 7,
    "ArgsPhi": 0,
    "testUnary": 32
  },
  "baseline_oz_instcount": 93,
  "knowledge_base_entry": [
    "--loop-reroll",
    "--early-cse-memssa",
    "--prune-eh",
    "--early-cse-memssa",
    "--load-store-vectorizer",
    "--memcpyopt",
    "--instsimplify",
    "--dce",
    "--elim-avail-extern",
    "--lower-constant-intrinsics",
    "--bdce",
    "--loop-simplifycfg",
    "--simplifycfg",
    "--loop-rotate",
    "--jump-threading",
    "--mergefunc",
    "--lower-expect"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--inferattrs",
          "--adce",
          "--strip-dead-prototypes",
          "--consthoist",
          "--loop-versioning",
          "--coro-split",
          "--loop-fusion",
          "--strip-nondebug",
          "--lowerswitch",
          "--licm",
          "--infer-address-spaces",
          "--libcalls-shrinkwrap",
          "--slp-vectorizer",
          "--loop-sink",
          "--constprop",
          "--alignment-from-assumptions",
          "--ipconstprop",
          "--scalarizer",
          "--mergefunc",
          "--called-value-propagation",
          "--inject-tli-mappings",
          "--dce",
          "--loop-deletion",
          "--lowerinvoke",
          "--instcombine",
          "--name-anon-globals",
          "--sroa",
          "--sink",
          "--correlated-propagation"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+16.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--inferattrs",
      "--adce",
      "--strip-dead-prototypes",
      "--consthoist",
      "--loop-versioning",
      "--coro-split",
      "--loop-fusion",
      "--strip-nondebug",
      "--lowerswitch",
      "--licm",
      "--infer-address-spaces",
      "--libcalls-shrinkwrap",
      "--slp-vectorizer",
      "--loop-sink",
      "--constprop",
      "--alignment-from-assumptions",
      "--ipconstprop",
      "--scalarizer",
      "--mergefunc",
      "--called-value-propagation",
      "--inject-tli-mappings",
      "--dce",
      "--loop-deletion",
      "--lowerinvoke",
      "--instcombine",
      "--name-anon-globals",
      "--sroa",
      "--sink",
      "--correlated-propagation"
    ],
    "performance_vs_Oz": "+16.1%"
  }
}
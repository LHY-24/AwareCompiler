{
  "program_id": "linux-v0_9776.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 52,
    "onePredOneSuc": 41,
    "onePredTwoSuc": 8,
    "oneSuccessor": 52,
    "twoPred": 17,
    "twoPredOneSuc": 8,
    "twoEach": 3,
    "twoSuccessor": 17,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 94,
    "BeginPhi": 0,
    "BranchCount": 69,
    "returnInt": 12,
    "CriticalCount": 14,
    "NumEdges": 91,
    "const32Bit": 281,
    "const64Bit": 32,
    "numConstZeroes": 143,
    "numConstOnes": 81,
    "UncondBranches": 52,
    "binaryConstArg": 35,
    "NumAShrInst": 2,
    "NumAddInst": 9,
    "NumAllocaInst": 59,
    "NumAndInst": 9,
    "BlockMid": 19,
    "BlockLow": 75,
    "NumBitCastInst": 35,
    "NumBrInst": 69,
    "NumCallInst": 48,
    "NumGetElementPtrInst": 96,
    "NumICmpInst": 21,
    "NumLShrInst": 0,
    "NumLoadInst": 198,
    "NumMulInst": 0,
    "NumOrInst": 4,
    "NumPHIInst": 0,
    "NumRetInst": 24,
    "NumSExtInst": 8,
    "NumSelectInst": 0,
    "NumShlInst": 3,
    "NumStoreInst": 89,
    "NumSubInst": 14,
    "NumTruncInst": 18,
    "NumXorInst": 10,
    "NumZExtInst": 37,
    "TotalBlocks": 94,
    "TotalInsts": 761,
    "TotalMemInst": 490,
    "TotalFuncs": 33,
    "ArgsPhi": 0,
    "testUnary": 361
  },
  "baseline_oz_instcount": 752,
  "knowledge_base_entry": [
    "--lower-expect",
    "--newgvn",
    "--slsr",
    "--instcombine",
    "--sccp",
    "--gvn",
    "--sccp",
    "--early-cse",
    "--mem2reg",
    "--lower-expect",
    "--globalopt",
    "--instcombine",
    "--aggressive-instcombine",
    "--loweratomic",
    "--aggressive-instcombine",
    "--lower-expect",
    "--instsimplify",
    "--instcombine",
    "--loop-rotate",
    "--lower-constant-intrinsics",
    "--mldst-motion",
    "--slp-vectorizer",
    "--gvn",
    "--gvn",
    "--slsr",
    "--loop-simplifycfg",
    "--correlated-propagation"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--ipsccp",
          "--strip-nondebug",
          "--loop-simplifycfg",
          "--constmerge",
          "--die",
          "--inferattrs",
          "--loop-predication",
          "--instcombine",
          "--sccp",
          "--mldst-motion",
          "--separate-const-offset-from-gep",
          "--name-anon-globals",
          "--aggressive-instcombine",
          "--loop-vectorize",
          "--simplifycfg",
          "--dse",
          "--argpromotion",
          "--sroa",
          "--partial-inliner",
          "--loop-reroll",
          "--globalsplit",
          "--guard-widening"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--ipsccp",
      "--strip-nondebug",
      "--loop-simplifycfg",
      "--constmerge",
      "--die",
      "--inferattrs",
      "--loop-predication",
      "--instcombine",
      "--sccp",
      "--mldst-motion",
      "--separate-const-offset-from-gep",
      "--name-anon-globals",
      "--aggressive-instcombine",
      "--loop-vectorize",
      "--simplifycfg",
      "--dse",
      "--argpromotion",
      "--sroa",
      "--partial-inliner",
      "--loop-reroll",
      "--globalsplit",
      "--guard-widening"
    ],
    "performance_vs_Oz": "+2.1%"
  }
}
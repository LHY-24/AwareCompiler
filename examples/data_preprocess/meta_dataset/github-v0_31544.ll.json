{
  "program_id": "github-v0_31544.ll",
  "autophase_features": {
    "BBNumArgsHi": 3,
    "BBNumArgsLo": 1,
    "onePred": 7,
    "onePredOneSuc": 5,
    "onePredTwoSuc": 2,
    "oneSuccessor": 6,
    "twoPred": 7,
    "twoPredOneSuc": 0,
    "twoEach": 5,
    "twoSuccessor": 9,
    "morePreds": 1,
    "BB03Phi": 4,
    "BBHiPhi": 0,
    "BBNoPhi": 13,
    "BeginPhi": 4,
    "BranchCount": 15,
    "returnInt": 7,
    "CriticalCount": 11,
    "NumEdges": 24,
    "const32Bit": 37,
    "const64Bit": 8,
    "numConstZeroes": 16,
    "numConstOnes": 4,
    "UncondBranches": 6,
    "binaryConstArg": 23,
    "NumAShrInst": 4,
    "NumAddInst": 16,
    "NumAllocaInst": 0,
    "NumAndInst": 1,
    "BlockMid": 1,
    "BlockLow": 16,
    "NumBitCastInst": 0,
    "NumBrInst": 15,
    "NumCallInst": 9,
    "NumGetElementPtrInst": 11,
    "NumICmpInst": 8,
    "NumLShrInst": 0,
    "NumLoadInst": 7,
    "NumMulInst": 0,
    "NumOrInst": 3,
    "NumPHIInst": 10,
    "NumRetInst": 2,
    "NumSExtInst": 7,
    "NumSelectInst": 0,
    "NumShlInst": 10,
    "NumStoreInst": 3,
    "NumSubInst": 1,
    "NumTruncInst": 4,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 17,
    "TotalInsts": 111,
    "TotalMemInst": 30,
    "TotalFuncs": 7,
    "ArgsPhi": 21,
    "testUnary": 18
  },
  "baseline_oz_instcount": 112,
  "knowledge_base_entry": [
    "-loop-reduce",
    "--early-cse-memssa",
    "--nary-reassociate",
    "--slp-vectorizer",
    "--lower-expect",
    "--licm",
    "--aggressive-instcombine",
    "--elim-avail-extern",
    "--lower-constant-intrinsics",
    "--slp-vectorizer",
    "--simplifycfg",
    "--die",
    "--sccp",
    "--early-cse",
    "--simplifycfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--inline",
          "--instcombine",
          "--post-inline-ee-instrument",
          "--irce",
          "--constmerge",
          "--loop-sink",
          "--separate-const-offset-from-gep",
          "--insert-gcov-profiling",
          "--dse",
          "--deadargelim",
          "--loop-interchange",
          "--lower-expect",
          "--flattencfg",
          "--dce",
          "--simplifycfg",
          "--div-rem-pairs",
          "--attributor",
          "--ipconstprop",
          "--loop-distribute",
          "--coro-early",
          "-loop-reduce",
          "--loop-vectorize",
          "--loweratomic",
          "--mergereturn",
          "--speculative-execution",
          "--adce",
          "--hotcoldsplit",
          "--gvn",
          "--sink"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+8.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--inline",
      "--instcombine",
      "--post-inline-ee-instrument",
      "--irce",
      "--constmerge",
      "--loop-sink",
      "--separate-const-offset-from-gep",
      "--insert-gcov-profiling",
      "--dse",
      "--deadargelim",
      "--loop-interchange",
      "--lower-expect",
      "--flattencfg",
      "--dce",
      "--simplifycfg",
      "--div-rem-pairs",
      "--attributor",
      "--ipconstprop",
      "--loop-distribute",
      "--coro-early",
      "-loop-reduce",
      "--loop-vectorize",
      "--loweratomic",
      "--mergereturn",
      "--speculative-execution",
      "--adce",
      "--hotcoldsplit",
      "--gvn",
      "--sink"
    ],
    "performance_vs_Oz": "+8.9%"
  }
}
{
  "program_id": "github-v0_19564.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 21,
    "onePredOneSuc": 13,
    "onePredTwoSuc": 5,
    "oneSuccessor": 22,
    "twoPred": 11,
    "twoPredOneSuc": 7,
    "twoEach": 1,
    "twoSuccessor": 10,
    "morePreds": 3,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 44,
    "BeginPhi": 0,
    "BranchCount": 31,
    "returnInt": 7,
    "CriticalCount": 12,
    "NumEdges": 55,
    "const32Bit": 42,
    "const64Bit": 8,
    "numConstZeroes": 7,
    "numConstOnes": 11,
    "UncondBranches": 22,
    "binaryConstArg": 11,
    "NumAShrInst": 0,
    "NumAddInst": 3,
    "NumAllocaInst": 7,
    "NumAndInst": 4,
    "BlockMid": 0,
    "BlockLow": 44,
    "NumBitCastInst": 0,
    "NumBrInst": 31,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 0,
    "NumICmpInst": 9,
    "NumLShrInst": 4,
    "NumLoadInst": 22,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 9,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 20,
    "NumSubInst": 0,
    "NumTruncInst": 5,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 44,
    "TotalInsts": 125,
    "TotalMemInst": 56,
    "TotalFuncs": 9,
    "ArgsPhi": 0,
    "testUnary": 34
  },
  "baseline_oz_instcount": 126,
  "knowledge_base_entry": [
    "--ipsccp",
    "--mergefunc",
    "--reassociate",
    "--early-cse",
    "--mem2reg",
    "--mldst-motion",
    "--instsimplify",
    "--gvn",
    "--jump-threading",
    "--loop-deletion"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--add-discriminators",
          "--loop-rotate",
          "--lower-widenable-condition",
          "--sccp",
          "--float2int",
          "--constmerge",
          "--globalsplit",
          "--inline",
          "--loop-data-prefetch",
          "--lcssa",
          "--pgo-memop-opt",
          "--simple-loop-unswitch",
          "--gvn-hoist",
          "--consthoist",
          "--alignment-from-assumptions",
          "--cross-dso-cfi",
          "--strip-nondebug",
          "--rpo-functionattrs",
          "--called-value-propagation",
          "--loop-distribute",
          "--loop-vectorize",
          "--reassociate",
          "--strip-dead-prototypes",
          "--instnamer",
          "--lower-guard-intrinsic",
          "--early-cse-memssa",
          "--scalarizer",
          "--loop-load-elim",
          "--memcpyopt",
          "--flattencfg"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--add-discriminators",
      "--loop-rotate",
      "--lower-widenable-condition",
      "--sccp",
      "--float2int",
      "--constmerge",
      "--globalsplit",
      "--inline",
      "--loop-data-prefetch",
      "--lcssa",
      "--pgo-memop-opt",
      "--simple-loop-unswitch",
      "--gvn-hoist",
      "--consthoist",
      "--alignment-from-assumptions",
      "--cross-dso-cfi",
      "--strip-nondebug",
      "--rpo-functionattrs",
      "--called-value-propagation",
      "--loop-distribute",
      "--loop-vectorize",
      "--reassociate",
      "--strip-dead-prototypes",
      "--instnamer",
      "--lower-guard-intrinsic",
      "--early-cse-memssa",
      "--scalarizer",
      "--loop-load-elim",
      "--memcpyopt",
      "--flattencfg"
    ],
    "performance_vs_Oz": "+0.8%"
  }
}
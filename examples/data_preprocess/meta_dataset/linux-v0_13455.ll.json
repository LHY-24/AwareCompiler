{
  "program_id": "linux-v0_13455.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 42,
    "onePredOneSuc": 33,
    "onePredTwoSuc": 8,
    "oneSuccessor": 43,
    "twoPred": 12,
    "twoPredOneSuc": 8,
    "twoEach": 0,
    "twoSuccessor": 11,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 73,
    "BeginPhi": 0,
    "BranchCount": 54,
    "returnInt": 5,
    "CriticalCount": 7,
    "NumEdges": 69,
    "const32Bit": 134,
    "const64Bit": 17,
    "numConstZeroes": 55,
    "numConstOnes": 69,
    "UncondBranches": 43,
    "binaryConstArg": 3,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 59,
    "NumAndInst": 0,
    "BlockMid": 7,
    "BlockLow": 66,
    "NumBitCastInst": 18,
    "NumBrInst": 54,
    "NumCallInst": 30,
    "NumGetElementPtrInst": 42,
    "NumICmpInst": 9,
    "NumLShrInst": 0,
    "NumLoadInst": 100,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 18,
    "NumSExtInst": 1,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 65,
    "NumSubInst": 0,
    "NumTruncInst": 3,
    "NumXorInst": 3,
    "NumZExtInst": 4,
    "TotalBlocks": 73,
    "TotalInsts": 407,
    "TotalMemInst": 296,
    "TotalFuncs": 19,
    "ArgsPhi": 0,
    "testUnary": 185
  },
  "baseline_oz_instcount": 398,
  "knowledge_base_entry": [
    "--loop-load-elim",
    "--gvn-hoist",
    "--ipsccp",
    "--sccp",
    "--elim-avail-extern",
    "--mldst-motion",
    "--lower-constant-intrinsics",
    "--newgvn",
    "--correlated-propagation",
    "--mergefunc",
    "--inline",
    "--slp-vectorizer",
    "--correlated-propagation",
    "--simplifycfg",
    "--instsimplify",
    "--sroa",
    "--adce",
    "--inline",
    "--ipsccp",
    "--sccp",
    "--instcombine",
    "--simplifycfg",
    "--nary-reassociate",
    "--inline",
    "--nary-reassociate",
    "--correlated-propagation",
    "--mergefunc"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--ipsccp",
          "--ipconstprop",
          "--simplifycfg",
          "--scalarizer",
          "--loop-load-elim",
          "--insert-gcov-profiling",
          "--constmerge",
          "--loop-versioning-licm",
          "--loop-unroll-and-jam",
          "--mem2reg",
          "--called-value-propagation",
          "--ee-instrument",
          "--sccp",
          "--argpromotion",
          "--loop-fusion",
          "--load-store-vectorizer",
          "--loop-idiom",
          "--mergefunc",
          "-loop-reduce",
          "--loop-versioning",
          "--libcalls-shrinkwrap",
          "--slsr",
          "--bdce",
          "--slp-vectorizer",
          "--dce",
          "--lcssa",
          "--sroa"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+5.0%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--ipsccp",
      "--ipconstprop",
      "--simplifycfg",
      "--scalarizer",
      "--loop-load-elim",
      "--insert-gcov-profiling",
      "--constmerge",
      "--loop-versioning-licm",
      "--loop-unroll-and-jam",
      "--mem2reg",
      "--called-value-propagation",
      "--ee-instrument",
      "--sccp",
      "--argpromotion",
      "--loop-fusion",
      "--load-store-vectorizer",
      "--loop-idiom",
      "--mergefunc",
      "-loop-reduce",
      "--loop-versioning",
      "--libcalls-shrinkwrap",
      "--slsr",
      "--bdce",
      "--slp-vectorizer",
      "--dce",
      "--lcssa",
      "--sroa"
    ],
    "performance_vs_Oz": "+5.0%"
  }
}
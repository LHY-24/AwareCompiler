{
  "program_id": "linux-v0_13721.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 6,
    "onePred": 65,
    "onePredOneSuc": 51,
    "onePredTwoSuc": 13,
    "oneSuccessor": 64,
    "twoPred": 24,
    "twoPredOneSuc": 10,
    "twoEach": 8,
    "twoSuccessor": 27,
    "morePreds": 4,
    "BB03Phi": 6,
    "BBHiPhi": 0,
    "BBNoPhi": 96,
    "BeginPhi": 6,
    "BranchCount": 91,
    "returnInt": 7,
    "CriticalCount": 12,
    "NumEdges": 126,
    "const32Bit": 244,
    "const64Bit": 43,
    "numConstZeroes": 122,
    "numConstOnes": 102,
    "UncondBranches": 64,
    "binaryConstArg": 23,
    "NumAShrInst": 0,
    "NumAddInst": 14,
    "NumAllocaInst": 80,
    "NumAndInst": 1,
    "BlockMid": 10,
    "BlockLow": 92,
    "NumBitCastInst": 19,
    "NumBrInst": 91,
    "NumCallInst": 28,
    "NumGetElementPtrInst": 80,
    "NumICmpInst": 27,
    "NumLShrInst": 1,
    "NumLoadInst": 202,
    "NumMulInst": 2,
    "NumOrInst": 0,
    "NumPHIInst": 6,
    "NumRetInst": 9,
    "NumSExtInst": 17,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 117,
    "NumSubInst": 5,
    "NumTruncInst": 9,
    "NumXorInst": 3,
    "NumZExtInst": 18,
    "TotalBlocks": 102,
    "TotalInsts": 734,
    "TotalMemInst": 507,
    "TotalFuncs": 18,
    "ArgsPhi": 12,
    "testUnary": 345
  },
  "baseline_oz_instcount": 734,
  "knowledge_base_entry": [
    "--prune-eh",
    "--simplifycfg",
    "--globalopt",
    "--reassociate",
    "--aggressive-instcombine",
    "--newgvn",
    "--early-cse",
    "--gvn-hoist",
    "--memcpyopt",
    "--lower-constant-intrinsics",
    "--gvn-hoist"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--aggressive-instcombine",
          "--partially-inline-libcalls",
          "--newgvn",
          "--coro-split",
          "--name-anon-globals",
          "--inject-tli-mappings",
          "--always-inline",
          "--argpromotion",
          "--lowerinvoke",
          "--barrier",
          "--infer-address-spaces",
          "--redundant-dbg-inst-elim",
          "--alignment-from-assumptions",
          "--strip",
          "--globalopt",
          "--sroa",
          "--mergereturn",
          "--loop-distribute",
          "--mem2reg",
          "--nary-reassociate",
          "--loop-unroll-and-jam",
          "--speculative-execution",
          "--ipconstprop",
          "--simplifycfg",
          "--deadargelim",
          "--adce",
          "--separate-const-offset-from-gep",
          "--mldst-motion"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--aggressive-instcombine",
      "--partially-inline-libcalls",
      "--newgvn",
      "--coro-split",
      "--name-anon-globals",
      "--inject-tli-mappings",
      "--always-inline",
      "--argpromotion",
      "--lowerinvoke",
      "--barrier",
      "--infer-address-spaces",
      "--redundant-dbg-inst-elim",
      "--alignment-from-assumptions",
      "--strip",
      "--globalopt",
      "--sroa",
      "--mergereturn",
      "--loop-distribute",
      "--mem2reg",
      "--nary-reassociate",
      "--loop-unroll-and-jam",
      "--speculative-execution",
      "--ipconstprop",
      "--simplifycfg",
      "--deadargelim",
      "--adce",
      "--separate-const-offset-from-gep",
      "--mldst-motion"
    ],
    "performance_vs_Oz": "+0.4%"
  }
}
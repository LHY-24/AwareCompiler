{
  "program_id": "github-v0_29628.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 17,
    "onePredOneSuc": 10,
    "onePredTwoSuc": 4,
    "oneSuccessor": 15,
    "twoPred": 7,
    "twoPredOneSuc": 4,
    "twoEach": 3,
    "twoSuccessor": 8,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 27,
    "BeginPhi": 0,
    "BranchCount": 23,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 31,
    "const32Bit": 37,
    "const64Bit": 55,
    "numConstZeroes": 56,
    "numConstOnes": 29,
    "UncondBranches": 15,
    "binaryConstArg": 9,
    "NumAShrInst": 1,
    "NumAddInst": 4,
    "NumAllocaInst": 15,
    "NumAndInst": 2,
    "BlockMid": 7,
    "BlockLow": 20,
    "NumBitCastInst": 12,
    "NumBrInst": 23,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 40,
    "NumICmpInst": 8,
    "NumLShrInst": 0,
    "NumLoadInst": 42,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 4,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 25,
    "NumSubInst": 0,
    "NumTruncInst": 6,
    "NumXorInst": 1,
    "NumZExtInst": 19,
    "TotalBlocks": 27,
    "TotalInsts": 215,
    "TotalMemInst": 129,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 98
  },
  "baseline_oz_instcount": 215,
  "knowledge_base_entry": [
    "--aggressive-instcombine",
    "--simplifycfg",
    "--elim-avail-extern",
    "--die",
    "--correlated-propagation",
    "--ipsccp",
    "--inline",
    "--mldst-motion",
    "--loop-simplifycfg",
    "--slp-vectorizer",
    "--lower-constant-intrinsics",
    "--aggressive-instcombine",
    "--dce",
    "--lower-constant-intrinsics",
    "--sccp",
    "--loop-deletion"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-guard-widening",
          "--sancov",
          "--div-rem-pairs",
          "--tailcallelim",
          "--flattencfg",
          "--loop-reroll",
          "--lowerswitch",
          "--loop-simplifycfg",
          "--rpo-functionattrs",
          "--cross-dso-cfi",
          "--break-crit-edges",
          "--loop-vectorize",
          "--simplifycfg",
          "--constmerge",
          "--ee-instrument",
          "--loop-distribute",
          "--reassociate",
          "--add-discriminators",
          "--sccp",
          "--lower-matrix-intrinsics",
          "--aggressive-instcombine"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-guard-widening",
      "--sancov",
      "--div-rem-pairs",
      "--tailcallelim",
      "--flattencfg",
      "--loop-reroll",
      "--lowerswitch",
      "--loop-simplifycfg",
      "--rpo-functionattrs",
      "--cross-dso-cfi",
      "--break-crit-edges",
      "--loop-vectorize",
      "--simplifycfg",
      "--constmerge",
      "--ee-instrument",
      "--loop-distribute",
      "--reassociate",
      "--add-discriminators",
      "--sccp",
      "--lower-matrix-intrinsics",
      "--aggressive-instcombine"
    ],
    "performance_vs_Oz": "+3.7%"
  }
}
{
  "program_id": "github-v0_30172.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 13,
    "onePredOneSuc": 10,
    "onePredTwoSuc": 3,
    "oneSuccessor": 11,
    "twoPred": 4,
    "twoPredOneSuc": 1,
    "twoEach": 2,
    "twoSuccessor": 7,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 24,
    "BeginPhi": 0,
    "BranchCount": 18,
    "returnInt": 4,
    "CriticalCount": 1,
    "NumEdges": 25,
    "const32Bit": 112,
    "const64Bit": 4,
    "numConstZeroes": 55,
    "numConstOnes": 32,
    "UncondBranches": 11,
    "binaryConstArg": 3,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 14,
    "NumAndInst": 3,
    "BlockMid": 1,
    "BlockLow": 23,
    "NumBitCastInst": 5,
    "NumBrInst": 18,
    "NumCallInst": 12,
    "NumGetElementPtrInst": 37,
    "NumICmpInst": 7,
    "NumLShrInst": 0,
    "NumLoadInst": 15,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 6,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 30,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 1,
    "TotalBlocks": 24,
    "TotalInsts": 149,
    "TotalMemInst": 108,
    "TotalFuncs": 14,
    "ArgsPhi": 0,
    "testUnary": 35
  },
  "baseline_oz_instcount": 149,
  "knowledge_base_entry": [
    "--scalarizer",
    "--instcombine",
    "--globalopt",
    "--mem2reg",
    "--memcpyopt",
    "--simplifycfg",
    "--load-store-vectorizer",
    "-loop-reduce",
    "--gvn",
    "--mergefunc",
    "--die"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--lower-matrix-intrinsics",
          "--canonicalize-aliases",
          "--lower-expect",
          "--coro-elide",
          "--gvn",
          "--memcpyopt",
          "--slp-vectorizer",
          "--speculative-execution",
          "--inferattrs",
          "--loop-deletion",
          "--add-discriminators",
          "--correlated-propagation",
          "--sink",
          "--rewrite-statepoints-for-gc",
          "--lower-constant-intrinsics",
          "--loop-rotate",
          "--coro-split",
          "--irce",
          "--coro-early",
          "--loop-load-elim",
          "--lcssa",
          "--simple-loop-unswitch",
          "--early-cse-memssa",
          "--attributor",
          "--loop-simplify",
          "--mergefunc",
          "--scalarizer",
          "--load-store-vectorizer",
          "--always-inline",
          "--instnamer"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--lower-matrix-intrinsics",
      "--canonicalize-aliases",
      "--lower-expect",
      "--coro-elide",
      "--gvn",
      "--memcpyopt",
      "--slp-vectorizer",
      "--speculative-execution",
      "--inferattrs",
      "--loop-deletion",
      "--add-discriminators",
      "--correlated-propagation",
      "--sink",
      "--rewrite-statepoints-for-gc",
      "--lower-constant-intrinsics",
      "--loop-rotate",
      "--coro-split",
      "--irce",
      "--coro-early",
      "--loop-load-elim",
      "--lcssa",
      "--simple-loop-unswitch",
      "--early-cse-memssa",
      "--attributor",
      "--loop-simplify",
      "--mergefunc",
      "--scalarizer",
      "--load-store-vectorizer",
      "--always-inline",
      "--instnamer"
    ],
    "performance_vs_Oz": "+1.3%"
  }
}
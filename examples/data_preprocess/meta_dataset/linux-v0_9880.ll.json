{
  "program_id": "linux-v0_9880.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 40,
    "onePredOneSuc": 32,
    "onePredTwoSuc": 6,
    "oneSuccessor": 40,
    "twoPred": 11,
    "twoPredOneSuc": 7,
    "twoEach": 2,
    "twoSuccessor": 11,
    "morePreds": 6,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 65,
    "BeginPhi": 0,
    "BranchCount": 51,
    "returnInt": 12,
    "CriticalCount": 10,
    "NumEdges": 89,
    "const32Bit": 278,
    "const64Bit": 10,
    "numConstZeroes": 135,
    "numConstOnes": 58,
    "UncondBranches": 40,
    "binaryConstArg": 16,
    "NumAShrInst": 1,
    "NumAddInst": 8,
    "NumAllocaInst": 50,
    "NumAndInst": 3,
    "BlockMid": 15,
    "BlockLow": 50,
    "NumBitCastInst": 17,
    "NumBrInst": 51,
    "NumCallInst": 55,
    "NumGetElementPtrInst": 90,
    "NumICmpInst": 10,
    "NumLShrInst": 0,
    "NumLoadInst": 227,
    "NumMulInst": 0,
    "NumOrInst": 3,
    "NumPHIInst": 0,
    "NumRetInst": 8,
    "NumSExtInst": 1,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 103,
    "NumSubInst": 0,
    "NumTruncInst": 12,
    "NumXorInst": 0,
    "NumZExtInst": 23,
    "TotalBlocks": 65,
    "TotalInsts": 670,
    "TotalMemInst": 525,
    "TotalFuncs": 25,
    "ArgsPhi": 0,
    "testUnary": 330
  },
  "baseline_oz_instcount": 670,
  "knowledge_base_entry": [
    "--deadargelim",
    "--mergefunc",
    "--die",
    "--load-store-vectorizer",
    "--gvn-hoist",
    "--gvn",
    "--slp-vectorizer",
    "--slsr",
    "--loop-simplifycfg",
    "--lower-expect",
    "--aggressive-instcombine",
    "--load-store-vectorizer",
    "--jump-threading",
    "--bdce",
    "--aggressive-instcombine",
    "--dce",
    "--early-cse",
    "--simplifycfg",
    "--lower-constant-intrinsics",
    "--load-store-vectorizer",
    "--instsimplify",
    "--adce",
    "--licm",
    "--slp-vectorizer",
    "--elim-avail-extern",
    "--gvn-hoist",
    "--licm",
    "--flattencfg",
    "--gvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--argpromotion",
          "--add-discriminators",
          "--strip-dead-prototypes",
          "--forceattrs",
          "--loop-rotate",
          "--inferattrs",
          "--lcssa",
          "--infer-address-spaces",
          "--loop-load-elim",
          "--insert-gcov-profiling",
          "--loop-simplifycfg",
          "--dse",
          "--slp-vectorizer",
          "--ipconstprop",
          "--called-value-propagation",
          "--sancov",
          "--lower-guard-intrinsic",
          "--lower-constant-intrinsics",
          "--loop-versioning",
          "--aggressive-instcombine",
          "--loop-unroll-and-jam",
          "--loop-predication"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--argpromotion",
      "--add-discriminators",
      "--strip-dead-prototypes",
      "--forceattrs",
      "--loop-rotate",
      "--inferattrs",
      "--lcssa",
      "--infer-address-spaces",
      "--loop-load-elim",
      "--insert-gcov-profiling",
      "--loop-simplifycfg",
      "--dse",
      "--slp-vectorizer",
      "--ipconstprop",
      "--called-value-propagation",
      "--sancov",
      "--lower-guard-intrinsic",
      "--lower-constant-intrinsics",
      "--loop-versioning",
      "--aggressive-instcombine",
      "--loop-unroll-and-jam",
      "--loop-predication"
    ],
    "performance_vs_Oz": "+1.8%"
  }
}
{
  "program_id": "github-v0_30491.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 64,
    "onePredOneSuc": 37,
    "onePredTwoSuc": 25,
    "oneSuccessor": 52,
    "twoPred": 18,
    "twoPredOneSuc": 11,
    "twoEach": 7,
    "twoSuccessor": 33,
    "morePreds": 5,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 89,
    "BeginPhi": 0,
    "BranchCount": 85,
    "returnInt": 0,
    "CriticalCount": 15,
    "NumEdges": 128,
    "const32Bit": 94,
    "const64Bit": 93,
    "numConstZeroes": 71,
    "numConstOnes": 58,
    "UncondBranches": 52,
    "binaryConstArg": 51,
    "NumAShrInst": 8,
    "NumAddInst": 23,
    "NumAllocaInst": 18,
    "NumAndInst": 10,
    "BlockMid": 8,
    "BlockLow": 81,
    "NumBitCastInst": 0,
    "NumBrInst": 85,
    "NumCallInst": 4,
    "NumGetElementPtrInst": 68,
    "NumICmpInst": 33,
    "NumLShrInst": 0,
    "NumLoadInst": 150,
    "NumMulInst": 0,
    "NumOrInst": 3,
    "NumPHIInst": 0,
    "NumRetInst": 2,
    "NumSExtInst": 19,
    "NumSelectInst": 0,
    "NumShlInst": 7,
    "NumStoreInst": 93,
    "NumSubInst": 7,
    "NumTruncInst": 14,
    "NumXorInst": 0,
    "NumZExtInst": 30,
    "TotalBlocks": 89,
    "TotalInsts": 582,
    "TotalMemInst": 333,
    "TotalFuncs": 4,
    "ArgsPhi": 0,
    "testUnary": 237
  },
  "baseline_oz_instcount": 585,
  "knowledge_base_entry": [
    "--strip-nondebug",
    "--mergefunc",
    "--ipsccp",
    "--gvn-hoist",
    "--aggressive-instcombine",
    "--load-store-vectorizer",
    "--adce",
    "--early-cse-memssa",
    "--newgvn",
    "--ipsccp",
    "--die",
    "--early-cse",
    "--flattencfg",
    "--elim-avail-extern",
    "--prune-eh",
    "--newgvn",
    "--memcpyopt"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--sroa",
          "--mldst-motion",
          "--forceattrs",
          "--functionattrs",
          "--lcssa",
          "--loop-load-elim",
          "--loop-unroll-and-jam",
          "--globaldce",
          "--lower-widenable-condition",
          "--simplifycfg",
          "--strip-dead-prototypes",
          "--lower-constant-intrinsics",
          "--loop-guard-widening",
          "--mergefunc",
          "--post-inline-ee-instrument",
          "--mergereturn",
          "--tailcallelim",
          "--gvn-hoist",
          "--reassociate",
          "--dce",
          "--inferattrs",
          "--loop-interchange",
          "--loop-deletion",
          "--lower-expect",
          "--instnamer",
          "--aggressive-instcombine",
          "--strip-nondebug",
          "--sancov",
          "--adce"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--sroa",
      "--mldst-motion",
      "--forceattrs",
      "--functionattrs",
      "--lcssa",
      "--loop-load-elim",
      "--loop-unroll-and-jam",
      "--globaldce",
      "--lower-widenable-condition",
      "--simplifycfg",
      "--strip-dead-prototypes",
      "--lower-constant-intrinsics",
      "--loop-guard-widening",
      "--mergefunc",
      "--post-inline-ee-instrument",
      "--mergereturn",
      "--tailcallelim",
      "--gvn-hoist",
      "--reassociate",
      "--dce",
      "--inferattrs",
      "--loop-interchange",
      "--loop-deletion",
      "--lower-expect",
      "--instnamer",
      "--aggressive-instcombine",
      "--strip-nondebug",
      "--sancov",
      "--adce"
    ],
    "performance_vs_Oz": "+0.3%"
  }
}
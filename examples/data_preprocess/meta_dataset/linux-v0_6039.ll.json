{
  "program_id": "linux-v0_6039.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 14,
    "onePredOneSuc": 9,
    "onePredTwoSuc": 5,
    "oneSuccessor": 9,
    "twoPred": 1,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 7,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 31,
    "BeginPhi": 0,
    "BranchCount": 16,
    "returnInt": 12,
    "CriticalCount": 0,
    "NumEdges": 23,
    "const32Bit": 106,
    "const64Bit": 7,
    "numConstZeroes": 32,
    "numConstOnes": 49,
    "UncondBranches": 9,
    "binaryConstArg": 4,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 46,
    "NumAndInst": 2,
    "BlockMid": 6,
    "BlockLow": 25,
    "NumBitCastInst": 3,
    "NumBrInst": 16,
    "NumCallInst": 28,
    "NumGetElementPtrInst": 17,
    "NumICmpInst": 7,
    "NumLShrInst": 0,
    "NumLoadInst": 74,
    "NumMulInst": 0,
    "NumOrInst": 2,
    "NumPHIInst": 0,
    "NumRetInst": 15,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 67,
    "NumSubInst": 0,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 3,
    "TotalBlocks": 31,
    "TotalInsts": 282,
    "TotalMemInst": 232,
    "TotalFuncs": 30,
    "ArgsPhi": 0,
    "testUnary": 128
  },
  "baseline_oz_instcount": 282,
  "knowledge_base_entry": [
    "--inferattrs",
    "--early-cse-memssa",
    "--indvars",
    "--load-store-vectorizer",
    "--aggressive-instcombine",
    "--instcombine",
    "--die",
    "--ipsccp",
    "--early-cse",
    "--loop-rotate"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-sink",
          "--loop-reroll",
          "--post-inline-ee-instrument",
          "--argpromotion",
          "--aggressive-instcombine",
          "--cross-dso-cfi",
          "--break-crit-edges",
          "--mldst-motion",
          "--indvars",
          "--load-store-vectorizer",
          "--globalsplit",
          "--loop-unroll-and-jam",
          "--inferattrs",
          "--sroa",
          "--partial-inliner",
          "--ipsccp",
          "--coro-split",
          "--loop-fusion",
          "--loop-data-prefetch",
          "--die",
          "--bdce",
          "--sancov",
          "--tailcallelim",
          "--instcombine",
          "--loop-versioning-licm",
          "--loop-simplify",
          "--alignment-from-assumptions",
          "--loop-load-elim",
          "--coro-cleanup",
          "--lower-expect"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-sink",
      "--loop-reroll",
      "--post-inline-ee-instrument",
      "--argpromotion",
      "--aggressive-instcombine",
      "--cross-dso-cfi",
      "--break-crit-edges",
      "--mldst-motion",
      "--indvars",
      "--load-store-vectorizer",
      "--globalsplit",
      "--loop-unroll-and-jam",
      "--inferattrs",
      "--sroa",
      "--partial-inliner",
      "--ipsccp",
      "--coro-split",
      "--loop-fusion",
      "--loop-data-prefetch",
      "--die",
      "--bdce",
      "--sancov",
      "--tailcallelim",
      "--instcombine",
      "--loop-versioning-licm",
      "--loop-simplify",
      "--alignment-from-assumptions",
      "--loop-load-elim",
      "--coro-cleanup",
      "--lower-expect"
    ],
    "performance_vs_Oz": "+1.4%"
  }
}
{
  "program_id": "poj104-v1_64_1260.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 26,
    "onePredOneSuc": 22,
    "onePredTwoSuc": 1,
    "oneSuccessor": 26,
    "twoPred": 10,
    "twoPredOneSuc": 1,
    "twoEach": 9,
    "twoSuccessor": 10,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 42,
    "BeginPhi": 0,
    "BranchCount": 36,
    "returnInt": 6,
    "CriticalCount": 1,
    "NumEdges": 46,
    "const32Bit": 94,
    "const64Bit": 59,
    "numConstZeroes": 72,
    "numConstOnes": 48,
    "UncondBranches": 26,
    "binaryConstArg": 24,
    "NumAShrInst": 0,
    "NumAddInst": 17,
    "NumAllocaInst": 18,
    "NumAndInst": 0,
    "BlockMid": 6,
    "BlockLow": 36,
    "NumBitCastInst": 24,
    "NumBrInst": 36,
    "NumCallInst": 34,
    "NumGetElementPtrInst": 56,
    "NumICmpInst": 9,
    "NumLShrInst": 0,
    "NumLoadInst": 106,
    "NumMulInst": 4,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 6,
    "NumSExtInst": 35,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 35,
    "NumSubInst": 20,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 42,
    "TotalInsts": 403,
    "TotalMemInst": 249,
    "TotalFuncs": 14,
    "ArgsPhi": 0,
    "testUnary": 184
  },
  "baseline_oz_instcount": 195,
  "knowledge_base_entry": [
    "--loweratomic",
    "--aggressive-instcombine",
    "--simplifycfg",
    "--reassociate",
    "--aggressive-instcombine",
    "--gvn",
    "--ipsccp",
    "--loop-simplifycfg",
    "--instcombine",
    "--sroa",
    "--loop-reroll",
    "--slsr",
    "--newgvn",
    "--dse",
    "--bdce",
    "--ipsccp",
    "--loop-simplifycfg",
    "--instcombine",
    "--sroa",
    "--loop-reroll",
    "--slsr",
    "--newgvn",
    "--slp-vectorizer",
    "--gvn-hoist",
    "--jump-threading",
    "--die",
    "--die",
    "--mergefunc",
    "--simplifycfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--float2int",
          "--sroa",
          "--jump-threading",
          "--early-cse",
          "--coro-cleanup",
          "--dse",
          "--barrier",
          "--loop-interchange",
          "--adce",
          "--canonicalize-aliases",
          "--lower-matrix-intrinsics",
          "--inject-tli-mappings",
          "--ipconstprop",
          "--loweratomic",
          "--ee-instrument",
          "--mergereturn"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.0%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--float2int",
      "--sroa",
      "--jump-threading",
      "--early-cse",
      "--coro-cleanup",
      "--dse",
      "--barrier",
      "--loop-interchange",
      "--adce",
      "--canonicalize-aliases",
      "--lower-matrix-intrinsics",
      "--inject-tli-mappings",
      "--ipconstprop",
      "--loweratomic",
      "--ee-instrument",
      "--mergereturn"
    ],
    "performance_vs_Oz": "+1.0%"
  }
}
{
  "program_id": "github-v0_22582.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 0,
    "onePredOneSuc": 0,
    "onePredTwoSuc": 0,
    "oneSuccessor": 0,
    "twoPred": 0,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 0,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 3,
    "BeginPhi": 0,
    "BranchCount": 0,
    "returnInt": 0,
    "CriticalCount": 0,
    "NumEdges": 0,
    "const32Bit": 4,
    "const64Bit": 0,
    "numConstZeroes": 0,
    "numConstOnes": 4,
    "UncondBranches": 0,
    "binaryConstArg": 2,
    "NumAShrInst": 0,
    "NumAddInst": 3,
    "NumAllocaInst": 4,
    "NumAndInst": 0,
    "BlockMid": 0,
    "BlockLow": 3,
    "NumBitCastInst": 0,
    "NumBrInst": 0,
    "NumCallInst": 0,
    "NumGetElementPtrInst": 0,
    "NumICmpInst": 0,
    "NumLShrInst": 0,
    "NumLoadInst": 2,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 2,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 3,
    "TotalInsts": 16,
    "TotalMemInst": 8,
    "TotalFuncs": 3,
    "ArgsPhi": 0,
    "testUnary": 8
  },
  "baseline_oz_instcount": 16,
  "knowledge_base_entry": [
    "--bdce",
    "--aggressive-instcombine",
    "--mergefunc",
    "--dse",
    "--lower-constant-intrinsics"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--forceattrs",
          "--functionattrs",
          "--indvars",
          "--lower-expect",
          "--simple-loop-unswitch",
          "-loop-reduce",
          "--tailcallelim",
          "--aggressive-instcombine",
          "--globalsplit",
          "--barrier",
          "--newgvn",
          "--consthoist",
          "--rpo-functionattrs",
          "--mergefunc",
          "--add-discriminators",
          "--strip-nondebug",
          "--hotcoldsplit",
          "--mergereturn",
          "--loop-simplify",
          "--slsr",
          "--gvn",
          "--coro-split",
          "--loop-versioning",
          "--reassociate",
          "--strip-debug-declare"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+6.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--forceattrs",
      "--functionattrs",
      "--indvars",
      "--lower-expect",
      "--simple-loop-unswitch",
      "-loop-reduce",
      "--tailcallelim",
      "--aggressive-instcombine",
      "--globalsplit",
      "--barrier",
      "--newgvn",
      "--consthoist",
      "--rpo-functionattrs",
      "--mergefunc",
      "--add-discriminators",
      "--strip-nondebug",
      "--hotcoldsplit",
      "--mergereturn",
      "--loop-simplify",
      "--slsr",
      "--gvn",
      "--coro-split",
      "--loop-versioning",
      "--reassociate",
      "--strip-debug-declare"
    ],
    "performance_vs_Oz": "+6.2%"
  }
}
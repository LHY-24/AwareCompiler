{
  "program_id": "github-v0_36536.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 5,
    "onePredOneSuc": 3,
    "onePredTwoSuc": 2,
    "oneSuccessor": 5,
    "twoPred": 2,
    "twoPredOneSuc": 1,
    "twoEach": 0,
    "twoSuccessor": 5,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 12,
    "BeginPhi": 0,
    "BranchCount": 10,
    "returnInt": 0,
    "CriticalCount": 5,
    "NumEdges": 15,
    "const32Bit": 15,
    "const64Bit": 1,
    "numConstZeroes": 2,
    "numConstOnes": 5,
    "UncondBranches": 5,
    "binaryConstArg": 6,
    "NumAShrInst": 1,
    "NumAddInst": 2,
    "NumAllocaInst": 3,
    "NumAndInst": 0,
    "BlockMid": 0,
    "BlockLow": 12,
    "NumBitCastInst": 0,
    "NumBrInst": 10,
    "NumCallInst": 1,
    "NumGetElementPtrInst": 1,
    "NumICmpInst": 5,
    "NumLShrInst": 0,
    "NumLoadInst": 14,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 2,
    "NumSExtInst": 8,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 9,
    "NumSubInst": 2,
    "NumTruncInst": 3,
    "NumXorInst": 0,
    "NumZExtInst": 2,
    "TotalBlocks": 12,
    "TotalInsts": 65,
    "TotalMemInst": 28,
    "TotalFuncs": 3,
    "ArgsPhi": 0,
    "testUnary": 30
  },
  "baseline_oz_instcount": 63,
  "knowledge_base_entry": [
    "--jump-threading",
    "--newgvn",
    "--loop-reroll",
    "--loop-fusion",
    "--simplifycfg",
    "--ipsccp",
    "--globalopt",
    "--flattencfg",
    "--aggressive-instcombine"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-versioning-licm",
          "--pgo-memop-opt",
          "--callsite-splitting",
          "--guard-widening",
          "--globalopt",
          "--loop-data-prefetch",
          "--forceattrs",
          "--canonicalize-aliases",
          "--constprop",
          "--cross-dso-cfi",
          "--licm",
          "--scalarizer",
          "--partially-inline-libcalls",
          "--speculative-execution",
          "--loop-unroll-and-jam",
          "--correlated-propagation",
          "--lower-matrix-intrinsics",
          "--aggressive-instcombine",
          "--name-anon-globals",
          "--newgvn",
          "--attributor",
          "--instsimplify",
          "--lower-constant-intrinsics",
          "--gvn",
          "--libcalls-shrinkwrap",
          "--redundant-dbg-inst-elim",
          "--load-store-vectorizer",
          "--infer-address-spaces",
          "--coro-elide",
          "--ipsccp"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+6.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-versioning-licm",
      "--pgo-memop-opt",
      "--callsite-splitting",
      "--guard-widening",
      "--globalopt",
      "--loop-data-prefetch",
      "--forceattrs",
      "--canonicalize-aliases",
      "--constprop",
      "--cross-dso-cfi",
      "--licm",
      "--scalarizer",
      "--partially-inline-libcalls",
      "--speculative-execution",
      "--loop-unroll-and-jam",
      "--correlated-propagation",
      "--lower-matrix-intrinsics",
      "--aggressive-instcombine",
      "--name-anon-globals",
      "--newgvn",
      "--attributor",
      "--instsimplify",
      "--lower-constant-intrinsics",
      "--gvn",
      "--libcalls-shrinkwrap",
      "--redundant-dbg-inst-elim",
      "--load-store-vectorizer",
      "--infer-address-spaces",
      "--coro-elide",
      "--ipsccp"
    ],
    "performance_vs_Oz": "+6.3%"
  }
}
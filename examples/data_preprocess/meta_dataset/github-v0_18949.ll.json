{
  "program_id": "github-v0_18949.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 14,
    "onePredOneSuc": 9,
    "onePredTwoSuc": 2,
    "oneSuccessor": 12,
    "twoPred": 6,
    "twoPredOneSuc": 2,
    "twoEach": 4,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 23,
    "BeginPhi": 0,
    "BranchCount": 19,
    "returnInt": 4,
    "CriticalCount": 1,
    "NumEdges": 26,
    "const32Bit": 33,
    "const64Bit": 38,
    "numConstZeroes": 42,
    "numConstOnes": 19,
    "UncondBranches": 12,
    "binaryConstArg": 7,
    "NumAShrInst": 0,
    "NumAddInst": 6,
    "NumAllocaInst": 13,
    "NumAndInst": 0,
    "BlockMid": 4,
    "BlockLow": 19,
    "NumBitCastInst": 4,
    "NumBrInst": 19,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 26,
    "NumICmpInst": 7,
    "NumLShrInst": 0,
    "NumLoadInst": 34,
    "NumMulInst": 2,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 20,
    "NumSubInst": 1,
    "NumTruncInst": 3,
    "NumXorInst": 0,
    "NumZExtInst": 5,
    "TotalBlocks": 23,
    "TotalInsts": 154,
    "TotalMemInst": 100,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 62
  },
  "baseline_oz_instcount": 154,
  "knowledge_base_entry": [
    "--scalarizer",
    "--instcombine",
    "--sroa",
    "--instcombine",
    "--lower-constant-intrinsics",
    "--aggressive-instcombine",
    "--dse",
    "--correlated-propagation",
    "--jump-threading",
    "--slp-vectorizer",
    "--early-cse-memssa",
    "--ipsccp",
    "--gvn",
    "--dce",
    "--sroa",
    "--loop-instsimplify",
    "--aggressive-instcombine",
    "--die",
    "--licm",
    "--nary-reassociate",
    "--mem2reg",
    "--slp-vectorizer",
    "--instsimplify"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--correlated-propagation",
          "--simple-loop-unswitch",
          "--lower-constant-intrinsics",
          "--strip",
          "--strip-dead-prototypes",
          "--dce",
          "--instnamer",
          "--constmerge",
          "--aggressive-instcombine",
          "--loop-idiom"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--correlated-propagation",
      "--simple-loop-unswitch",
      "--lower-constant-intrinsics",
      "--strip",
      "--strip-dead-prototypes",
      "--dce",
      "--instnamer",
      "--constmerge",
      "--aggressive-instcombine",
      "--loop-idiom"
    ],
    "performance_vs_Oz": "+2.6%"
  }
}
{
  "program_id": "linux-v0_8456.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 91,
    "onePredOneSuc": 52,
    "onePredTwoSuc": 37,
    "oneSuccessor": 82,
    "twoPred": 30,
    "twoPredOneSuc": 20,
    "twoEach": 3,
    "twoSuccessor": 47,
    "morePreds": 8,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 144,
    "BeginPhi": 0,
    "BranchCount": 129,
    "returnInt": 22,
    "CriticalCount": 29,
    "NumEdges": 176,
    "const32Bit": 308,
    "const64Bit": 87,
    "numConstZeroes": 159,
    "numConstOnes": 143,
    "UncondBranches": 82,
    "binaryConstArg": 59,
    "NumAShrInst": 0,
    "NumAddInst": 3,
    "NumAllocaInst": 90,
    "NumAndInst": 22,
    "BlockMid": 12,
    "BlockLow": 132,
    "NumBitCastInst": 8,
    "NumBrInst": 129,
    "NumCallInst": 72,
    "NumGetElementPtrInst": 93,
    "NumICmpInst": 58,
    "NumLShrInst": 11,
    "NumLoadInst": 194,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 15,
    "NumSExtInst": 20,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 123,
    "NumSubInst": 0,
    "NumTruncInst": 5,
    "NumXorInst": 23,
    "NumZExtInst": 16,
    "TotalBlocks": 144,
    "TotalInsts": 882,
    "TotalMemInst": 572,
    "TotalFuncs": 28,
    "ArgsPhi": 0,
    "testUnary": 333
  },
  "baseline_oz_instcount": 883,
  "knowledge_base_entry": [
    "--lower-expect",
    "--prune-eh",
    "--elim-avail-extern",
    "--flattencfg",
    "--simplifycfg",
    "--lower-constant-intrinsics",
    "--ipsccp",
    "--globaldce",
    "--mergefunc",
    "--aggressive-instcombine",
    "--early-cse-memssa",
    "--instsimplify",
    "--slp-vectorizer",
    "--gvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--slp-vectorizer",
          "--loop-interchange",
          "--mergereturn",
          "--redundant-dbg-inst-elim",
          "--inline",
          "--instcombine",
          "--aggressive-instcombine",
          "--coro-elide",
          "--lowerinvoke",
          "--ee-instrument",
          "--mldst-motion",
          "--loweratomic",
          "--lower-guard-intrinsic",
          "--sccp",
          "--loop-unswitch",
          "--loop-versioning",
          "--reassociate",
          "--adce",
          "--libcalls-shrinkwrap",
          "--loop-unroll-and-jam",
          "--loop-vectorize",
          "-loop-reduce",
          "--globalopt",
          "--inferattrs",
          "--mergeicmps",
          "--loop-versioning-licm",
          "--attributor"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--slp-vectorizer",
      "--loop-interchange",
      "--mergereturn",
      "--redundant-dbg-inst-elim",
      "--inline",
      "--instcombine",
      "--aggressive-instcombine",
      "--coro-elide",
      "--lowerinvoke",
      "--ee-instrument",
      "--mldst-motion",
      "--loweratomic",
      "--lower-guard-intrinsic",
      "--sccp",
      "--loop-unswitch",
      "--loop-versioning",
      "--reassociate",
      "--adce",
      "--libcalls-shrinkwrap",
      "--loop-unroll-and-jam",
      "--loop-vectorize",
      "-loop-reduce",
      "--globalopt",
      "--inferattrs",
      "--mergeicmps",
      "--loop-versioning-licm",
      "--attributor"
    ],
    "performance_vs_Oz": "+0.2%"
  }
}
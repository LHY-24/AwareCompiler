{
  "program_id": "linux-v0_461.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 59,
    "onePredOneSuc": 42,
    "onePredTwoSuc": 15,
    "oneSuccessor": 61,
    "twoPred": 26,
    "twoPredOneSuc": 11,
    "twoEach": 6,
    "twoSuccessor": 28,
    "morePreds": 9,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 130,
    "BeginPhi": 0,
    "BranchCount": 89,
    "returnInt": 40,
    "CriticalCount": 36,
    "NumEdges": 152,
    "const32Bit": 394,
    "const64Bit": 31,
    "numConstZeroes": 173,
    "numConstOnes": 115,
    "UncondBranches": 61,
    "binaryConstArg": 20,
    "NumAShrInst": 0,
    "NumAddInst": 3,
    "NumAllocaInst": 85,
    "NumAndInst": 3,
    "BlockMid": 13,
    "BlockLow": 117,
    "NumBitCastInst": 20,
    "NumBrInst": 89,
    "NumCallInst": 88,
    "NumGetElementPtrInst": 101,
    "NumICmpInst": 24,
    "NumLShrInst": 1,
    "NumLoadInst": 235,
    "NumMulInst": 0,
    "NumOrInst": 7,
    "NumPHIInst": 0,
    "NumRetInst": 36,
    "NumSExtInst": 7,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 141,
    "NumSubInst": 3,
    "NumTruncInst": 7,
    "NumXorInst": 5,
    "NumZExtInst": 9,
    "TotalBlocks": 130,
    "TotalInsts": 875,
    "TotalMemInst": 650,
    "TotalFuncs": 60,
    "ArgsPhi": 0,
    "testUnary": 367
  },
  "baseline_oz_instcount": 874,
  "knowledge_base_entry": [
    "--loop-simplify",
    "--instcombine",
    "--lower-constant-intrinsics",
    "--simplifycfg",
    "--instsimplify",
    "--load-store-vectorizer",
    "--inline",
    "--dce",
    "--ipsccp",
    "--aggressive-instcombine",
    "--loop-instsimplify",
    "--adce",
    "--early-cse-memssa",
    "--simplifycfg",
    "--flattencfg",
    "--aggressive-instcombine",
    "--jump-threading",
    "--loop-deletion",
    "--early-cse",
    "--sroa",
    "--adce",
    "--load-store-vectorizer",
    "--gvn",
    "--slp-vectorizer",
    "--instsimplify",
    "--ipsccp",
    "--aggressive-instcombine",
    "--newgvn",
    "--elim-avail-extern",
    "--reassociate",
    "--reassociate",
    "--lower-constant-intrinsics",
    "--instcombine",
    "--slp-vectorizer"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-distribute",
          "--ipsccp",
          "--bdce",
          "--loweratomic",
          "--simple-loop-unswitch",
          "--slp-vectorizer",
          "--early-cse-memssa",
          "--consthoist",
          "--forceattrs",
          "--aggressive-instcombine",
          "--licm",
          "--insert-gcov-profiling",
          "--loop-rotate",
          "--loop-sink",
          "--early-cse",
          "--lcssa",
          "--ee-instrument",
          "--inferattrs",
          "--always-inline",
          "--elim-avail-extern",
          "--libcalls-shrinkwrap",
          "--lower-expect",
          "--gvn-hoist",
          "--loop-load-elim",
          "--nary-reassociate",
          "--loop-versioning",
          "--coro-elide",
          "--globaldce"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-distribute",
      "--ipsccp",
      "--bdce",
      "--loweratomic",
      "--simple-loop-unswitch",
      "--slp-vectorizer",
      "--early-cse-memssa",
      "--consthoist",
      "--forceattrs",
      "--aggressive-instcombine",
      "--licm",
      "--insert-gcov-profiling",
      "--loop-rotate",
      "--loop-sink",
      "--early-cse",
      "--lcssa",
      "--ee-instrument",
      "--inferattrs",
      "--always-inline",
      "--elim-avail-extern",
      "--libcalls-shrinkwrap",
      "--lower-expect",
      "--gvn-hoist",
      "--loop-load-elim",
      "--nary-reassociate",
      "--loop-versioning",
      "--coro-elide",
      "--globaldce"
    ],
    "performance_vs_Oz": "+0.5%"
  }
}
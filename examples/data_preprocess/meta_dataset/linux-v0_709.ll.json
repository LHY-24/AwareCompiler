{
  "program_id": "linux-v0_709.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 70,
    "onePredOneSuc": 52,
    "onePredTwoSuc": 16,
    "oneSuccessor": 66,
    "twoPred": 32,
    "twoPredOneSuc": 11,
    "twoEach": 11,
    "twoSuccessor": 40,
    "morePreds": 5,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 138,
    "BeginPhi": 1,
    "BranchCount": 106,
    "returnInt": 48,
    "CriticalCount": 20,
    "NumEdges": 151,
    "const32Bit": 349,
    "const64Bit": 44,
    "numConstZeroes": 162,
    "numConstOnes": 94,
    "UncondBranches": 66,
    "binaryConstArg": 43,
    "NumAShrInst": 0,
    "NumAddInst": 7,
    "NumAllocaInst": 65,
    "NumAndInst": 13,
    "BlockMid": 8,
    "BlockLow": 131,
    "NumBitCastInst": 16,
    "NumBrInst": 106,
    "NumCallInst": 105,
    "NumGetElementPtrInst": 136,
    "NumICmpInst": 34,
    "NumLShrInst": 1,
    "NumLoadInst": 264,
    "NumMulInst": 0,
    "NumOrInst": 11,
    "NumPHIInst": 1,
    "NumRetInst": 32,
    "NumSExtInst": 9,
    "NumSelectInst": 0,
    "NumShlInst": 7,
    "NumStoreInst": 98,
    "NumSubInst": 3,
    "NumTruncInst": 7,
    "NumXorInst": 4,
    "NumZExtInst": 9,
    "TotalBlocks": 139,
    "TotalInsts": 933,
    "TotalMemInst": 668,
    "TotalFuncs": 60,
    "ArgsPhi": 2,
    "testUnary": 374
  },
  "baseline_oz_instcount": 916,
  "knowledge_base_entry": [
    "--ipsccp",
    "--dce",
    "--licm",
    "--die",
    "--mem2reg",
    "--newgvn",
    "--dse",
    "--mldst-motion",
    "--slp-vectorizer",
    "--mem2reg",
    "--loop-deletion",
    "--elim-avail-extern",
    "--bdce",
    "--mem2reg",
    "--slp-vectorizer",
    "--gvn",
    "--reassociate",
    "--slp-vectorizer",
    "--dse",
    "--ipsccp",
    "--early-cse",
    "--ipsccp",
    "--globaldce",
    "--aggressive-instcombine",
    "--globaldce",
    "--mergefunc",
    "--memcpyopt",
    "--sroa",
    "--early-cse",
    "--ipsccp",
    "--globaldce",
    "--aggressive-instcombine",
    "--gvn-hoist",
    "--prune-eh",
    "--aggressive-instcombine",
    "--load-store-vectorizer",
    "--indvars",
    "--newgvn",
    "--licm",
    "--mergefunc",
    "--gvn",
    "--gvn-hoist",
    "--adce",
    "--newgvn",
    "--loop-rotate",
    "--lower-constant-intrinsics",
    "--mergefunc",
    "--mem2reg",
    "--instcombine",
    "--simplifycfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-interchange",
          "--functionattrs",
          "--aggressive-instcombine",
          "--rewrite-statepoints-for-gc",
          "--simple-loop-unswitch",
          "--speculative-execution",
          "--loop-vectorize",
          "--newgvn",
          "--mergefunc",
          "--ipsccp",
          "--slp-vectorizer",
          "--loop-unroll-and-jam",
          "--inferattrs",
          "--instsimplify",
          "--strip-debug-declare",
          "--loop-unroll",
          "--strip",
          "--loop-load-elim",
          "--insert-gcov-profiling",
          "--flattencfg",
          "--loop-simplify",
          "--gvn",
          "--called-value-propagation",
          "--slsr",
          "--loweratomic"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-interchange",
      "--functionattrs",
      "--aggressive-instcombine",
      "--rewrite-statepoints-for-gc",
      "--simple-loop-unswitch",
      "--speculative-execution",
      "--loop-vectorize",
      "--newgvn",
      "--mergefunc",
      "--ipsccp",
      "--slp-vectorizer",
      "--loop-unroll-and-jam",
      "--inferattrs",
      "--instsimplify",
      "--strip-debug-declare",
      "--loop-unroll",
      "--strip",
      "--loop-load-elim",
      "--insert-gcov-profiling",
      "--flattencfg",
      "--loop-simplify",
      "--gvn",
      "--called-value-propagation",
      "--slsr",
      "--loweratomic"
    ],
    "performance_vs_Oz": "+0.7%"
  }
}
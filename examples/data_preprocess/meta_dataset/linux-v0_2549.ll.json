{
  "program_id": "linux-v0_2549.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 43,
    "onePredOneSuc": 27,
    "onePredTwoSuc": 16,
    "oneSuccessor": 38,
    "twoPred": 17,
    "twoPredOneSuc": 7,
    "twoEach": 4,
    "twoSuccessor": 25,
    "morePreds": 3,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 82,
    "BeginPhi": 1,
    "BranchCount": 63,
    "returnInt": 28,
    "CriticalCount": 13,
    "NumEdges": 88,
    "const32Bit": 212,
    "const64Bit": 34,
    "numConstZeroes": 84,
    "numConstOnes": 91,
    "UncondBranches": 38,
    "binaryConstArg": 24,
    "NumAShrInst": 0,
    "NumAddInst": 3,
    "NumAllocaInst": 69,
    "NumAndInst": 8,
    "BlockMid": 14,
    "BlockLow": 69,
    "NumBitCastInst": 7,
    "NumBrInst": 63,
    "NumCallInst": 54,
    "NumGetElementPtrInst": 69,
    "NumICmpInst": 25,
    "NumLShrInst": 0,
    "NumLoadInst": 192,
    "NumMulInst": 3,
    "NumOrInst": 6,
    "NumPHIInst": 1,
    "NumRetInst": 20,
    "NumSExtInst": 13,
    "NumSelectInst": 0,
    "NumShlInst": 10,
    "NumStoreInst": 85,
    "NumSubInst": 6,
    "NumTruncInst": 12,
    "NumXorInst": 3,
    "NumZExtInst": 30,
    "TotalBlocks": 83,
    "TotalInsts": 679,
    "TotalMemInst": 469,
    "TotalFuncs": 48,
    "ArgsPhi": 5,
    "testUnary": 323
  },
  "baseline_oz_instcount": 680,
  "knowledge_base_entry": [
    "--globalopt",
    "--aggressive-instcombine",
    "--dce",
    "--licm",
    "--inline",
    "--sroa"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--name-anon-globals",
          "--libcalls-shrinkwrap",
          "--globalopt",
          "--post-inline-ee-instrument",
          "--lower-guard-intrinsic",
          "--loop-rotate",
          "--lcssa",
          "--add-discriminators",
          "--always-inline",
          "--loop-guard-widening",
          "--loop-deletion",
          "--aggressive-instcombine",
          "--lowerinvoke",
          "--gvn-hoist"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--name-anon-globals",
      "--libcalls-shrinkwrap",
      "--globalopt",
      "--post-inline-ee-instrument",
      "--lower-guard-intrinsic",
      "--loop-rotate",
      "--lcssa",
      "--add-discriminators",
      "--always-inline",
      "--loop-guard-widening",
      "--loop-deletion",
      "--aggressive-instcombine",
      "--lowerinvoke",
      "--gvn-hoist"
    ],
    "performance_vs_Oz": "+0.6%"
  }
}
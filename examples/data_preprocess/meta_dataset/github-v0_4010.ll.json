{
  "program_id": "github-v0_4010.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 4,
    "onePred": 65,
    "onePredOneSuc": 46,
    "onePredTwoSuc": 17,
    "oneSuccessor": 60,
    "twoPred": 31,
    "twoPredOneSuc": 12,
    "twoEach": 13,
    "twoSuccessor": 39,
    "morePreds": 3,
    "BB03Phi": 4,
    "BBHiPhi": 0,
    "BBNoPhi": 106,
    "BeginPhi": 4,
    "BranchCount": 99,
    "returnInt": 6,
    "CriticalCount": 19,
    "NumEdges": 138,
    "const32Bit": 233,
    "const64Bit": 3,
    "numConstZeroes": 110,
    "numConstOnes": 50,
    "UncondBranches": 60,
    "binaryConstArg": 12,
    "NumAShrInst": 0,
    "NumAddInst": 7,
    "NumAllocaInst": 31,
    "NumAndInst": 4,
    "BlockMid": 8,
    "BlockLow": 102,
    "NumBitCastInst": 7,
    "NumBrInst": 99,
    "NumCallInst": 29,
    "NumGetElementPtrInst": 93,
    "NumICmpInst": 39,
    "NumLShrInst": 0,
    "NumLoadInst": 222,
    "NumMulInst": 1,
    "NumOrInst": 0,
    "NumPHIInst": 4,
    "NumRetInst": 9,
    "NumSExtInst": 34,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 102,
    "NumSubInst": 2,
    "NumTruncInst": 10,
    "NumXorInst": 0,
    "NumZExtInst": 4,
    "TotalBlocks": 110,
    "TotalInsts": 699,
    "TotalMemInst": 477,
    "TotalFuncs": 15,
    "ArgsPhi": 8,
    "testUnary": 308
  },
  "baseline_oz_instcount": 698,
  "knowledge_base_entry": [
    "--die",
    "--jump-threading",
    "--mergefunc",
    "--inline",
    "--gvn-hoist",
    "--ipsccp",
    "--lower-constant-intrinsics",
    "--newgvn",
    "--mldst-motion",
    "--gvn-hoist"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--canonicalize-aliases",
          "--correlated-propagation",
          "--attributor",
          "--deadargelim",
          "--nary-reassociate",
          "--reassociate",
          "--strip",
          "--inferattrs",
          "--instcombine",
          "--constprop",
          "--early-cse-memssa",
          "--memcpyopt",
          "--add-discriminators",
          "--gvn",
          "--ipsccp",
          "--rewrite-statepoints-for-gc"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--canonicalize-aliases",
      "--correlated-propagation",
      "--attributor",
      "--deadargelim",
      "--nary-reassociate",
      "--reassociate",
      "--strip",
      "--inferattrs",
      "--instcombine",
      "--constprop",
      "--early-cse-memssa",
      "--memcpyopt",
      "--add-discriminators",
      "--gvn",
      "--ipsccp",
      "--rewrite-statepoints-for-gc"
    ],
    "performance_vs_Oz": "+0.1%"
  }
}
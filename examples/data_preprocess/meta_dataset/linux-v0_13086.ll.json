{
  "program_id": "linux-v0_13086.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 21,
    "onePredOneSuc": 17,
    "onePredTwoSuc": 4,
    "oneSuccessor": 18,
    "twoPred": 4,
    "twoPredOneSuc": 0,
    "twoEach": 2,
    "twoSuccessor": 8,
    "morePreds": 3,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 52,
    "BeginPhi": 0,
    "BranchCount": 26,
    "returnInt": 18,
    "CriticalCount": 4,
    "NumEdges": 42,
    "const32Bit": 139,
    "const64Bit": 3,
    "numConstZeroes": 47,
    "numConstOnes": 75,
    "UncondBranches": 18,
    "binaryConstArg": 6,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 66,
    "NumAndInst": 0,
    "BlockMid": 5,
    "BlockLow": 47,
    "NumBitCastInst": 21,
    "NumBrInst": 26,
    "NumCallInst": 51,
    "NumGetElementPtrInst": 25,
    "NumICmpInst": 9,
    "NumLShrInst": 0,
    "NumLoadInst": 118,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 24,
    "NumSExtInst": 4,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 79,
    "NumSubInst": 0,
    "NumTruncInst": 2,
    "NumXorInst": 6,
    "NumZExtInst": 3,
    "TotalBlocks": 52,
    "TotalInsts": 438,
    "TotalMemInst": 339,
    "TotalFuncs": 47,
    "ArgsPhi": 0,
    "testUnary": 215
  },
  "baseline_oz_instcount": 439,
  "knowledge_base_entry": [
    "--strip",
    "--mergefunc",
    "--flattencfg",
    "--ipsccp",
    "--ipsccp",
    "--sccp",
    "--globalopt",
    "--newgvn",
    "--simplifycfg",
    "--sroa",
    "--dse",
    "--lower-expect"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--gvn",
          "--tailcallelim",
          "--simple-loop-unswitch",
          "--mergefunc",
          "--sroa",
          "--adce",
          "--hotcoldsplit",
          "--loop-simplifycfg",
          "--loop-guard-widening",
          "--partial-inliner",
          "--early-cse",
          "--sancov",
          "--coro-early",
          "--argpromotion",
          "--insert-gcov-profiling",
          "--infer-address-spaces",
          "--aggressive-instcombine",
          "--globaldce",
          "--ipconstprop",
          "--ipsccp",
          "--guard-widening",
          "--loop-data-prefetch",
          "--lower-matrix-intrinsics",
          "--attributor",
          "--add-discriminators",
          "--loop-load-elim",
          "--slp-vectorizer"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--gvn",
      "--tailcallelim",
      "--simple-loop-unswitch",
      "--mergefunc",
      "--sroa",
      "--adce",
      "--hotcoldsplit",
      "--loop-simplifycfg",
      "--loop-guard-widening",
      "--partial-inliner",
      "--early-cse",
      "--sancov",
      "--coro-early",
      "--argpromotion",
      "--insert-gcov-profiling",
      "--infer-address-spaces",
      "--aggressive-instcombine",
      "--globaldce",
      "--ipconstprop",
      "--ipsccp",
      "--guard-widening",
      "--loop-data-prefetch",
      "--lower-matrix-intrinsics",
      "--attributor",
      "--add-discriminators",
      "--loop-load-elim",
      "--slp-vectorizer"
    ],
    "performance_vs_Oz": "+1.1%"
  }
}
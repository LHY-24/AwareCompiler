{
  "program_id": "github-v0_29697.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 15,
    "onePredOneSuc": 10,
    "onePredTwoSuc": 2,
    "oneSuccessor": 13,
    "twoPred": 6,
    "twoPredOneSuc": 2,
    "twoEach": 4,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 24,
    "BeginPhi": 0,
    "BranchCount": 20,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 27,
    "const32Bit": 39,
    "const64Bit": 38,
    "numConstZeroes": 41,
    "numConstOnes": 28,
    "UncondBranches": 13,
    "binaryConstArg": 13,
    "NumAShrInst": 0,
    "NumAddInst": 6,
    "NumAllocaInst": 14,
    "NumAndInst": 3,
    "BlockMid": 5,
    "BlockLow": 19,
    "NumBitCastInst": 8,
    "NumBrInst": 20,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 33,
    "NumICmpInst": 7,
    "NumLShrInst": 0,
    "NumLoadInst": 49,
    "NumMulInst": 1,
    "NumOrInst": 4,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 3,
    "NumStoreInst": 26,
    "NumSubInst": 0,
    "NumTruncInst": 6,
    "NumXorInst": 0,
    "NumZExtInst": 27,
    "TotalBlocks": 24,
    "TotalInsts": 221,
    "TotalMemInst": 129,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 107
  },
  "baseline_oz_instcount": 221,
  "knowledge_base_entry": [
    "--sink",
    "--gvn-hoist",
    "--prune-eh",
    "--aggressive-instcombine",
    "--bdce",
    "--loop-instsimplify",
    "--inline",
    "--adce",
    "--lower-constant-intrinsics",
    "--nary-reassociate",
    "--newgvn",
    "--instsimplify",
    "--load-store-vectorizer"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--die",
          "--instcombine",
          "--load-store-vectorizer",
          "--scalarizer",
          "--lower-guard-intrinsic",
          "--loop-rotate",
          "--lower-widenable-condition",
          "--simplifycfg",
          "--pgo-memop-opt",
          "--coro-split",
          "--coro-elide",
          "--prune-eh",
          "--barrier",
          "--loop-unroll",
          "--reassociate",
          "--called-value-propagation",
          "--deadargelim",
          "--loop-unswitch",
          "--argpromotion",
          "--name-anon-globals",
          "--loop-data-prefetch",
          "--strip",
          "--globalopt",
          "--aggressive-instcombine",
          "--early-cse",
          "--lcssa",
          "--loop-sink"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--die",
      "--instcombine",
      "--load-store-vectorizer",
      "--scalarizer",
      "--lower-guard-intrinsic",
      "--loop-rotate",
      "--lower-widenable-condition",
      "--simplifycfg",
      "--pgo-memop-opt",
      "--coro-split",
      "--coro-elide",
      "--prune-eh",
      "--barrier",
      "--loop-unroll",
      "--reassociate",
      "--called-value-propagation",
      "--deadargelim",
      "--loop-unswitch",
      "--argpromotion",
      "--name-anon-globals",
      "--loop-data-prefetch",
      "--strip",
      "--globalopt",
      "--aggressive-instcombine",
      "--early-cse",
      "--lcssa",
      "--loop-sink"
    ],
    "performance_vs_Oz": "+1.8%"
  }
}
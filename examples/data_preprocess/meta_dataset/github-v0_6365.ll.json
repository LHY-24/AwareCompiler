{
  "program_id": "github-v0_6365.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 14,
    "onePredOneSuc": 11,
    "onePredTwoSuc": 2,
    "oneSuccessor": 12,
    "twoPred": 2,
    "twoPredOneSuc": 0,
    "twoEach": 2,
    "twoSuccessor": 5,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 24,
    "BeginPhi": 0,
    "BranchCount": 17,
    "returnInt": 77,
    "CriticalCount": 0,
    "NumEdges": 22,
    "const32Bit": 90,
    "const64Bit": 139,
    "numConstZeroes": 85,
    "numConstOnes": 39,
    "UncondBranches": 12,
    "binaryConstArg": 15,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 18,
    "NumAndInst": 0,
    "BlockMid": 6,
    "BlockLow": 18,
    "NumBitCastInst": 0,
    "NumBrInst": 17,
    "NumCallInst": 90,
    "NumGetElementPtrInst": 143,
    "NumICmpInst": 5,
    "NumLShrInst": 12,
    "NumLoadInst": 216,
    "NumMulInst": 1,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 7,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 57,
    "NumSubInst": 0,
    "NumTruncInst": 36,
    "NumXorInst": 56,
    "NumZExtInst": 80,
    "TotalBlocks": 24,
    "TotalInsts": 740,
    "TotalMemInst": 524,
    "TotalFuncs": 11,
    "ArgsPhi": 0,
    "testUnary": 350
  },
  "baseline_oz_instcount": 740,
  "knowledge_base_entry": [
    "--inline",
    "--loop-rotate",
    "--gvn",
    "--gvn",
    "--sroa",
    "--lower-constant-intrinsics",
    "--adce",
    "--gvn-hoist",
    "--correlated-propagation",
    "--mergefunc",
    "--globaldce",
    "--aggressive-instcombine",
    "--loweratomic",
    "--instcombine",
    "--lower-constant-intrinsics",
    "--prune-eh",
    "--jump-threading",
    "--loop-deletion",
    "--early-cse",
    "--ipsccp"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-distribute",
          "--loop-interchange",
          "--bdce",
          "--elim-avail-extern",
          "--loop-simplify",
          "--redundant-dbg-inst-elim",
          "--alignment-from-assumptions",
          "--argpromotion",
          "--slp-vectorizer",
          "--speculative-execution",
          "--loop-versioning-licm",
          "--sccp",
          "--hotcoldsplit",
          "--early-cse",
          "--loop-sink",
          "--newgvn",
          "--lower-constant-intrinsics",
          "--simple-loop-unswitch",
          "--coro-elide",
          "--mergefunc",
          "--always-inline",
          "--mergeicmps",
          "--tailcallelim",
          "--aggressive-instcombine",
          "--forceattrs",
          "--globalopt",
          "--instnamer",
          "--adce"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+13.0%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-distribute",
      "--loop-interchange",
      "--bdce",
      "--elim-avail-extern",
      "--loop-simplify",
      "--redundant-dbg-inst-elim",
      "--alignment-from-assumptions",
      "--argpromotion",
      "--slp-vectorizer",
      "--speculative-execution",
      "--loop-versioning-licm",
      "--sccp",
      "--hotcoldsplit",
      "--early-cse",
      "--loop-sink",
      "--newgvn",
      "--lower-constant-intrinsics",
      "--simple-loop-unswitch",
      "--coro-elide",
      "--mergefunc",
      "--always-inline",
      "--mergeicmps",
      "--tailcallelim",
      "--aggressive-instcombine",
      "--forceattrs",
      "--globalopt",
      "--instnamer",
      "--adce"
    ],
    "performance_vs_Oz": "+13.0%"
  }
}
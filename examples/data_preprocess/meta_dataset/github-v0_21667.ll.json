{
  "program_id": "github-v0_21667.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 0,
    "onePredOneSuc": 0,
    "onePredTwoSuc": 0,
    "oneSuccessor": 0,
    "twoPred": 0,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 0,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 3,
    "BeginPhi": 0,
    "BranchCount": 0,
    "returnInt": 0,
    "CriticalCount": 0,
    "NumEdges": 0,
    "const32Bit": 17,
    "const64Bit": 4,
    "numConstZeroes": 15,
    "numConstOnes": 8,
    "UncondBranches": 0,
    "binaryConstArg": 0,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 0,
    "NumAndInst": 0,
    "BlockMid": 1,
    "BlockLow": 2,
    "NumBitCastInst": 3,
    "NumBrInst": 0,
    "NumCallInst": 10,
    "NumGetElementPtrInst": 8,
    "NumICmpInst": 0,
    "NumLShrInst": 0,
    "NumLoadInst": 0,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 3,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 3,
    "TotalInsts": 43,
    "TotalMemInst": 21,
    "TotalFuncs": 9,
    "ArgsPhi": 0,
    "testUnary": 15
  },
  "baseline_oz_instcount": 30,
  "knowledge_base_entry": [
    "--lowerswitch",
    "--instsimplify",
    "--ipsccp",
    "--inline",
    "--early-cse",
    "--mldst-motion",
    "--instcombine",
    "--sccp",
    "--newgvn",
    "--gvn-hoist",
    "--dce",
    "--gvn-hoist",
    "-loop-reduce",
    "--gvn",
    "--early-cse",
    "--gvn",
    "--loop-instsimplify",
    "--aggressive-instcombine",
    "--lower-constant-intrinsics",
    "--adce",
    "--loop-instsimplify",
    "--simplifycfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--called-value-propagation",
          "--infer-address-spaces",
          "--globalsplit",
          "--memcpyopt",
          "--coro-elide",
          "--guard-widening",
          "--inline",
          "--speculative-execution",
          "--loop-fusion",
          "--gvn",
          "--partially-inline-libcalls",
          "--pgo-memop-opt",
          "--instnamer",
          "--instcombine",
          "--dce",
          "--lowerswitch",
          "--loop-reroll"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+13.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--called-value-propagation",
      "--infer-address-spaces",
      "--globalsplit",
      "--memcpyopt",
      "--coro-elide",
      "--guard-widening",
      "--inline",
      "--speculative-execution",
      "--loop-fusion",
      "--gvn",
      "--partially-inline-libcalls",
      "--pgo-memop-opt",
      "--instnamer",
      "--instcombine",
      "--dce",
      "--lowerswitch",
      "--loop-reroll"
    ],
    "performance_vs_Oz": "+13.3%"
  }
}
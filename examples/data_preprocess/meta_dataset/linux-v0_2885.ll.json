{
  "program_id": "linux-v0_2885.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 3,
    "onePred": 105,
    "onePredOneSuc": 89,
    "onePredTwoSuc": 9,
    "oneSuccessor": 102,
    "twoPred": 12,
    "twoPredOneSuc": 4,
    "twoEach": 3,
    "twoSuccessor": 17,
    "morePreds": 9,
    "BB03Phi": 3,
    "BBHiPhi": 0,
    "BBNoPhi": 145,
    "BeginPhi": 3,
    "BranchCount": 119,
    "returnInt": 16,
    "CriticalCount": 3,
    "NumEdges": 171,
    "const32Bit": 259,
    "const64Bit": 18,
    "numConstZeroes": 80,
    "numConstOnes": 163,
    "UncondBranches": 102,
    "binaryConstArg": 17,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 130,
    "NumAndInst": 3,
    "BlockMid": 8,
    "BlockLow": 140,
    "NumBitCastInst": 79,
    "NumBrInst": 119,
    "NumCallInst": 57,
    "NumGetElementPtrInst": 46,
    "NumICmpInst": 24,
    "NumLShrInst": 0,
    "NumLoadInst": 262,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 3,
    "NumRetInst": 22,
    "NumSExtInst": 13,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 163,
    "NumSubInst": 0,
    "NumTruncInst": 1,
    "NumXorInst": 14,
    "NumZExtInst": 10,
    "TotalBlocks": 148,
    "TotalInsts": 961,
    "TotalMemInst": 658,
    "TotalFuncs": 32,
    "ArgsPhi": 6,
    "testUnary": 501
  },
  "baseline_oz_instcount": 962,
  "knowledge_base_entry": [
    "--sroa",
    "--newgvn",
    "--inline",
    "--bdce",
    "--correlated-propagation",
    "--gvn",
    "--mergefunc",
    "--dce",
    "--inline",
    "--flattencfg",
    "--globalopt",
    "--globaldce",
    "--ipsccp",
    "--early-cse-memssa",
    "--mem2reg",
    "--dse",
    "--early-cse",
    "--early-cse",
    "--flattencfg",
    "--newgvn",
    "--inline",
    "--bdce",
    "--gvn",
    "--mergefunc",
    "--dce",
    "--inline",
    "--flattencfg",
    "--globalopt",
    "--globaldce",
    "--ipsccp",
    "--early-cse-memssa",
    "--mem2reg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--coro-early",
          "--post-inline-ee-instrument",
          "--redundant-dbg-inst-elim",
          "--ee-instrument",
          "--name-anon-globals",
          "--prune-eh",
          "--loop-vectorize",
          "--memcpyopt",
          "--sroa",
          "--canonicalize-aliases"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--coro-early",
      "--post-inline-ee-instrument",
      "--redundant-dbg-inst-elim",
      "--ee-instrument",
      "--name-anon-globals",
      "--prune-eh",
      "--loop-vectorize",
      "--memcpyopt",
      "--sroa",
      "--canonicalize-aliases"
    ],
    "performance_vs_Oz": "+0.1%"
  }
}
{
  "program_id": "github-v0_21549.ll",
  "autophase_features": {
    "BBNumArgsHi": 1,
    "BBNumArgsLo": 1,
    "onePred": 20,
    "onePredOneSuc": 16,
    "onePredTwoSuc": 4,
    "oneSuccessor": 19,
    "twoPred": 10,
    "twoPredOneSuc": 3,
    "twoEach": 0,
    "twoSuccessor": 12,
    "morePreds": 1,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 45,
    "BeginPhi": 2,
    "BranchCount": 31,
    "returnInt": 8,
    "CriticalCount": 4,
    "NumEdges": 43,
    "const32Bit": 72,
    "const64Bit": 48,
    "numConstZeroes": 19,
    "numConstOnes": 39,
    "UncondBranches": 19,
    "binaryConstArg": 4,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 20,
    "NumAndInst": 3,
    "BlockMid": 9,
    "BlockLow": 38,
    "NumBitCastInst": 127,
    "NumBrInst": 31,
    "NumCallInst": 45,
    "NumGetElementPtrInst": 60,
    "NumICmpInst": 12,
    "NumLShrInst": 0,
    "NumLoadInst": 55,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 3,
    "NumRetInst": 16,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 24,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 1,
    "NumZExtInst": 1,
    "TotalBlocks": 47,
    "TotalInsts": 409,
    "TotalMemInst": 204,
    "TotalFuncs": 26,
    "ArgsPhi": 8,
    "testUnary": 209
  },
  "baseline_oz_instcount": 297,
  "knowledge_base_entry": [
    "--aggressive-instcombine",
    "--gvn",
    "--slsr",
    "--indvars",
    "--simplifycfg",
    "--flattencfg",
    "--gvn",
    "--jump-threading",
    "--gvn",
    "--mldst-motion",
    "--lower-constant-intrinsics",
    "--mem2reg",
    "--sccp",
    "--mem2reg",
    "--inline",
    "--dce",
    "--newgvn",
    "--early-cse",
    "-loop-reduce",
    "--gvn-hoist",
    "--gvn-hoist",
    "--die",
    "--dse",
    "--reassociate",
    "--early-cse-memssa",
    "--loop-rotate",
    "--gvn-hoist"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--barrier",
          "--mergeicmps",
          "--correlated-propagation",
          "--sccp",
          "--loop-sink",
          "--coro-cleanup",
          "--strip",
          "--gvn-hoist",
          "--sancov",
          "--loop-distribute",
          "--sroa",
          "--coro-elide",
          "--lower-expect",
          "--simple-loop-unswitch",
          "--guard-widening",
          "--instsimplify",
          "--lcssa",
          "--called-value-propagation",
          "--cross-dso-cfi",
          "--inject-tli-mappings",
          "--loop-unswitch",
          "--globalsplit",
          "--ipconstprop",
          "--gvn",
          "--early-cse-memssa"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.0%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--barrier",
      "--mergeicmps",
      "--correlated-propagation",
      "--sccp",
      "--loop-sink",
      "--coro-cleanup",
      "--strip",
      "--gvn-hoist",
      "--sancov",
      "--loop-distribute",
      "--sroa",
      "--coro-elide",
      "--lower-expect",
      "--simple-loop-unswitch",
      "--guard-widening",
      "--instsimplify",
      "--lcssa",
      "--called-value-propagation",
      "--cross-dso-cfi",
      "--inject-tli-mappings",
      "--loop-unswitch",
      "--globalsplit",
      "--ipconstprop",
      "--gvn",
      "--early-cse-memssa"
    ],
    "performance_vs_Oz": "+1.0%"
  }
}
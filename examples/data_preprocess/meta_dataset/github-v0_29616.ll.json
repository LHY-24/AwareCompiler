{
  "program_id": "github-v0_29616.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 11,
    "onePredOneSuc": 7,
    "onePredTwoSuc": 1,
    "oneSuccessor": 9,
    "twoPred": 4,
    "twoPredOneSuc": 1,
    "twoEach": 3,
    "twoSuccessor": 5,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 18,
    "BeginPhi": 0,
    "BranchCount": 14,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 19,
    "const32Bit": 31,
    "const64Bit": 24,
    "numConstZeroes": 26,
    "numConstOnes": 21,
    "UncondBranches": 9,
    "binaryConstArg": 11,
    "NumAShrInst": 2,
    "NumAddInst": 4,
    "NumAllocaInst": 12,
    "NumAndInst": 3,
    "BlockMid": 4,
    "BlockLow": 14,
    "NumBitCastInst": 0,
    "NumBrInst": 14,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 16,
    "NumICmpInst": 5,
    "NumLShrInst": 0,
    "NumLoadInst": 28,
    "NumMulInst": 0,
    "NumOrInst": 3,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 4,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 17,
    "NumSubInst": 0,
    "NumTruncInst": 6,
    "NumXorInst": 0,
    "NumZExtInst": 12,
    "TotalBlocks": 18,
    "TotalInsts": 138,
    "TotalMemInst": 80,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 62
  },
  "baseline_oz_instcount": 138,
  "knowledge_base_entry": [
    "--loop-unswitch",
    "--gvn-hoist",
    "--prune-eh",
    "--jump-threading",
    "--reassociate",
    "--sroa",
    "--elim-avail-extern",
    "--early-cse",
    "--globalopt",
    "--aggressive-instcombine",
    "--newgvn",
    "--slsr",
    "--instcombine",
    "--die",
    "--early-cse-memssa",
    "--lower-expect",
    "--simplifycfg",
    "--mem2reg",
    "--ipsccp",
    "--sroa",
    "--early-cse-memssa",
    "--loop-rotate",
    "--early-cse-memssa",
    "--correlated-propagation",
    "--globalopt",
    "--mergefunc",
    "--loop-instsimplify",
    "--adce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--float2int",
          "--forceattrs",
          "--aggressive-instcombine",
          "--callsite-splitting",
          "--pgo-memop-opt",
          "--loop-interchange",
          "--barrier",
          "--loop-unroll",
          "--name-anon-globals",
          "--loop-sink",
          "--loop-rotate",
          "--coro-early",
          "--coro-split",
          "--loop-predication",
          "--dce",
          "--reassociate"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+5.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--float2int",
      "--forceattrs",
      "--aggressive-instcombine",
      "--callsite-splitting",
      "--pgo-memop-opt",
      "--loop-interchange",
      "--barrier",
      "--loop-unroll",
      "--name-anon-globals",
      "--loop-sink",
      "--loop-rotate",
      "--coro-early",
      "--coro-split",
      "--loop-predication",
      "--dce",
      "--reassociate"
    ],
    "performance_vs_Oz": "+5.1%"
  }
}
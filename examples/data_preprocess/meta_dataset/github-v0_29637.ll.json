{
  "program_id": "github-v0_29637.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 15,
    "onePredOneSuc": 9,
    "onePredTwoSuc": 3,
    "oneSuccessor": 13,
    "twoPred": 6,
    "twoPredOneSuc": 3,
    "twoEach": 3,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 24,
    "BeginPhi": 0,
    "BranchCount": 20,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 27,
    "const32Bit": 40,
    "const64Bit": 60,
    "numConstZeroes": 55,
    "numConstOnes": 29,
    "UncondBranches": 13,
    "binaryConstArg": 12,
    "NumAShrInst": 0,
    "NumAddInst": 4,
    "NumAllocaInst": 15,
    "NumAndInst": 2,
    "BlockMid": 6,
    "BlockLow": 18,
    "NumBitCastInst": 12,
    "NumBrInst": 20,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 46,
    "NumICmpInst": 7,
    "NumLShrInst": 1,
    "NumLoadInst": 55,
    "NumMulInst": 2,
    "NumOrInst": 3,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 3,
    "NumStoreInst": 27,
    "NumSubInst": 3,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 12,
    "TotalBlocks": 24,
    "TotalInsts": 228,
    "TotalMemInst": 150,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 99
  },
  "baseline_oz_instcount": 228,
  "knowledge_base_entry": [
    "--memcpyopt",
    "--instsimplify",
    "--loop-instsimplify",
    "--early-cse-memssa",
    "--loop-fusion",
    "--indvars",
    "--simplifycfg",
    "--loop-simplifycfg",
    "--lower-expect",
    "--prune-eh",
    "--aggressive-instcombine",
    "--early-cse",
    "--sccp",
    "--early-cse-memssa",
    "--sroa",
    "--aggressive-instcombine",
    "--dse",
    "--newgvn",
    "--adce",
    "--loop-simplifycfg",
    "--aggressive-instcombine",
    "--flattencfg",
    "--adce",
    "--dse"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--constprop",
          "--strip-nondebug",
          "--sccp",
          "--early-cse",
          "--redundant-dbg-inst-elim",
          "--loop-fusion",
          "--forceattrs",
          "--gvn-hoist",
          "--post-inline-ee-instrument",
          "--licm",
          "--mldst-motion",
          "--loweratomic",
          "--barrier",
          "--loop-idiom",
          "--loop-reroll",
          "--lower-widenable-condition",
          "--aggressive-instcombine",
          "--sink",
          "--coro-elide",
          "--correlated-propagation",
          "--loop-distribute",
          "--infer-address-spaces",
          "--partially-inline-libcalls",
          "--tailcallelim",
          "--globalopt",
          "--insert-gcov-profiling",
          "--sroa",
          "--speculative-execution",
          "--ipconstprop"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--constprop",
      "--strip-nondebug",
      "--sccp",
      "--early-cse",
      "--redundant-dbg-inst-elim",
      "--loop-fusion",
      "--forceattrs",
      "--gvn-hoist",
      "--post-inline-ee-instrument",
      "--licm",
      "--mldst-motion",
      "--loweratomic",
      "--barrier",
      "--loop-idiom",
      "--loop-reroll",
      "--lower-widenable-condition",
      "--aggressive-instcombine",
      "--sink",
      "--coro-elide",
      "--correlated-propagation",
      "--loop-distribute",
      "--infer-address-spaces",
      "--partially-inline-libcalls",
      "--tailcallelim",
      "--globalopt",
      "--insert-gcov-profiling",
      "--sroa",
      "--speculative-execution",
      "--ipconstprop"
    ],
    "performance_vs_Oz": "+0.9%"
  }
}
{
  "program_id": "linux-v0_9253.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 6,
    "onePredOneSuc": 5,
    "onePredTwoSuc": 1,
    "oneSuccessor": 6,
    "twoPred": 4,
    "twoPredOneSuc": 0,
    "twoEach": 2,
    "twoSuccessor": 4,
    "morePreds": 0,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 13,
    "BeginPhi": 1,
    "BranchCount": 10,
    "returnInt": 2,
    "CriticalCount": 2,
    "NumEdges": 14,
    "const32Bit": 41,
    "const64Bit": 0,
    "numConstZeroes": 13,
    "numConstOnes": 20,
    "UncondBranches": 6,
    "binaryConstArg": 3,
    "NumAShrInst": 0,
    "NumAddInst": 4,
    "NumAllocaInst": 15,
    "NumAndInst": 0,
    "BlockMid": 2,
    "BlockLow": 12,
    "NumBitCastInst": 1,
    "NumBrInst": 10,
    "NumCallInst": 8,
    "NumGetElementPtrInst": 9,
    "NumICmpInst": 4,
    "NumLShrInst": 0,
    "NumLoadInst": 37,
    "NumMulInst": 1,
    "NumOrInst": 0,
    "NumPHIInst": 1,
    "NumRetInst": 4,
    "NumSExtInst": 5,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 18,
    "NumSubInst": 3,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 14,
    "TotalInsts": 122,
    "TotalMemInst": 87,
    "TotalFuncs": 8,
    "ArgsPhi": 2,
    "testUnary": 60
  },
  "baseline_oz_instcount": 123,
  "knowledge_base_entry": [
    "--loop-vectorize",
    "--newgvn",
    "--aggressive-instcombine",
    "--flattencfg",
    "--instcombine",
    "--flattencfg",
    "--load-store-vectorizer",
    "--lower-expect",
    "--reassociate",
    "--gvn",
    "--flattencfg",
    "--instcombine",
    "--simplifycfg",
    "--instcombine",
    "--sccp",
    "--elim-avail-extern",
    "--prune-eh",
    "--elim-avail-extern"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--inline",
          "--prune-eh",
          "--sccp",
          "--lower-constant-intrinsics",
          "--rpo-functionattrs",
          "--scalarizer",
          "--coro-split",
          "--guard-widening",
          "--deadargelim",
          "--lowerinvoke",
          "--bdce"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--inline",
      "--prune-eh",
      "--sccp",
      "--lower-constant-intrinsics",
      "--rpo-functionattrs",
      "--scalarizer",
      "--coro-split",
      "--guard-widening",
      "--deadargelim",
      "--lowerinvoke",
      "--bdce"
    ],
    "performance_vs_Oz": "+0.8%"
  }
}
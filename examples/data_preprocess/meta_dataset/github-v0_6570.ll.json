{
  "program_id": "github-v0_6570.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 21,
    "onePredOneSuc": 14,
    "onePredTwoSuc": 7,
    "oneSuccessor": 15,
    "twoPred": 1,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 12,
    "morePreds": 5,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 32,
    "BeginPhi": 0,
    "BranchCount": 27,
    "returnInt": 4,
    "CriticalCount": 3,
    "NumEdges": 39,
    "const32Bit": 80,
    "const64Bit": 6,
    "numConstZeroes": 35,
    "numConstOnes": 31,
    "UncondBranches": 15,
    "binaryConstArg": 21,
    "NumAShrInst": 3,
    "NumAddInst": 8,
    "NumAllocaInst": 23,
    "NumAndInst": 7,
    "BlockMid": 6,
    "BlockLow": 26,
    "NumBitCastInst": 1,
    "NumBrInst": 27,
    "NumCallInst": 6,
    "NumGetElementPtrInst": 26,
    "NumICmpInst": 12,
    "NumLShrInst": 0,
    "NumLoadInst": 81,
    "NumMulInst": 0,
    "NumOrInst": 3,
    "NumPHIInst": 0,
    "NumRetInst": 5,
    "NumSExtInst": 10,
    "NumSelectInst": 0,
    "NumShlInst": 3,
    "NumStoreInst": 44,
    "NumSubInst": 2,
    "NumTruncInst": 10,
    "NumXorInst": 0,
    "NumZExtInst": 14,
    "TotalBlocks": 32,
    "TotalInsts": 285,
    "TotalMemInst": 180,
    "TotalFuncs": 7,
    "ArgsPhi": 0,
    "testUnary": 139
  },
  "baseline_oz_instcount": 285,
  "knowledge_base_entry": [
    "--licm",
    "--gvn-hoist",
    "--ipsccp",
    "--lower-constant-intrinsics",
    "--aggressive-instcombine",
    "--gvn-hoist",
    "--bdce",
    "--licm",
    "--die",
    "--early-cse",
    "--mergefunc",
    "--jump-threading",
    "--mem2reg",
    "--instcombine",
    "--simplifycfg",
    "--aggressive-instcombine",
    "--globaldce",
    "--ipsccp",
    "--gvn",
    "--aggressive-instcombine",
    "--dse",
    "--loop-simplifycfg",
    "--lower-expect",
    "--sccp",
    "--lower-expect"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--reassociate",
          "--aggressive-instcombine",
          "--loop-reroll",
          "--loop-idiom",
          "--called-value-propagation",
          "--rpo-functionattrs",
          "--tailcallelim",
          "--nary-reassociate",
          "--attributor",
          "--slsr",
          "--scalarizer",
          "--strip-dead-prototypes",
          "--loop-simplifycfg",
          "--indvars",
          "--mem2reg",
          "--correlated-propagation",
          "--coro-early"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--reassociate",
      "--aggressive-instcombine",
      "--loop-reroll",
      "--loop-idiom",
      "--called-value-propagation",
      "--rpo-functionattrs",
      "--tailcallelim",
      "--nary-reassociate",
      "--attributor",
      "--slsr",
      "--scalarizer",
      "--strip-dead-prototypes",
      "--loop-simplifycfg",
      "--indvars",
      "--mem2reg",
      "--correlated-propagation",
      "--coro-early"
    ],
    "performance_vs_Oz": "+1.8%"
  }
}
{
  "program_id": "github-v0_1939.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 63,
    "onePredOneSuc": 49,
    "onePredTwoSuc": 14,
    "oneSuccessor": 60,
    "twoPred": 37,
    "twoPredOneSuc": 11,
    "twoEach": 25,
    "twoSuccessor": 42,
    "morePreds": 2,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 108,
    "BeginPhi": 2,
    "BranchCount": 102,
    "returnInt": 31,
    "CriticalCount": 25,
    "NumEdges": 144,
    "const32Bit": 193,
    "const64Bit": 53,
    "numConstZeroes": 90,
    "numConstOnes": 66,
    "UncondBranches": 60,
    "binaryConstArg": 22,
    "NumAShrInst": 0,
    "NumAddInst": 16,
    "NumAllocaInst": 39,
    "NumAndInst": 0,
    "BlockMid": 8,
    "BlockLow": 102,
    "NumBitCastInst": 4,
    "NumBrInst": 102,
    "NumCallInst": 66,
    "NumGetElementPtrInst": 28,
    "NumICmpInst": 43,
    "NumLShrInst": 0,
    "NumLoadInst": 130,
    "NumMulInst": 1,
    "NumOrInst": 0,
    "NumPHIInst": 2,
    "NumRetInst": 8,
    "NumSExtInst": 19,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 86,
    "NumSubInst": 8,
    "NumTruncInst": 5,
    "NumXorInst": 5,
    "NumZExtInst": 11,
    "TotalBlocks": 110,
    "TotalInsts": 586,
    "TotalMemInst": 349,
    "TotalFuncs": 24,
    "ArgsPhi": 4,
    "testUnary": 210
  },
  "baseline_oz_instcount": 590,
  "knowledge_base_entry": [
    "--aggressive-instcombine",
    "--loweratomic",
    "--early-cse",
    "--aggressive-instcombine",
    "--adce",
    "--loop-instsimplify",
    "--elim-avail-extern",
    "--bdce",
    "--aggressive-instcombine",
    "--prune-eh",
    "--newgvn",
    "--memcpyopt",
    "--mem2reg",
    "--gvn",
    "--sroa",
    "-loop-reduce",
    "--jump-threading",
    "--slsr"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--lower-widenable-condition",
          "--loop-distribute",
          "--coro-split",
          "--gvn-hoist",
          "--loop-simplifycfg",
          "--sancov",
          "--attributor",
          "--sccp",
          "--lowerinvoke",
          "--jump-threading",
          "--lcssa",
          "--speculative-execution",
          "--irce",
          "--inline",
          "--instnamer",
          "--aggressive-instcombine",
          "--insert-gcov-profiling",
          "--newgvn",
          "--simplifycfg",
          "--functionattrs",
          "--called-value-propagation",
          "--lower-matrix-intrinsics",
          "--early-cse-memssa",
          "--load-store-vectorizer",
          "--loop-simplify",
          "--coro-early",
          "--mldst-motion",
          "--globaldce"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--lower-widenable-condition",
      "--loop-distribute",
      "--coro-split",
      "--gvn-hoist",
      "--loop-simplifycfg",
      "--sancov",
      "--attributor",
      "--sccp",
      "--lowerinvoke",
      "--jump-threading",
      "--lcssa",
      "--speculative-execution",
      "--irce",
      "--inline",
      "--instnamer",
      "--aggressive-instcombine",
      "--insert-gcov-profiling",
      "--newgvn",
      "--simplifycfg",
      "--functionattrs",
      "--called-value-propagation",
      "--lower-matrix-intrinsics",
      "--early-cse-memssa",
      "--load-store-vectorizer",
      "--loop-simplify",
      "--coro-early",
      "--mldst-motion",
      "--globaldce"
    ],
    "performance_vs_Oz": "+2.2%"
  }
}
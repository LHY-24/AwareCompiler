{
  "program_id": "linux-v0_2196.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 6,
    "onePred": 54,
    "onePredOneSuc": 48,
    "onePredTwoSuc": 6,
    "oneSuccessor": 54,
    "twoPred": 18,
    "twoPredOneSuc": 6,
    "twoEach": 6,
    "twoSuccessor": 18,
    "morePreds": 0,
    "BB03Phi": 6,
    "BBHiPhi": 0,
    "BBNoPhi": 74,
    "BeginPhi": 6,
    "BranchCount": 72,
    "returnInt": 0,
    "CriticalCount": 18,
    "NumEdges": 90,
    "const32Bit": 92,
    "const64Bit": 21,
    "numConstZeroes": 42,
    "numConstOnes": 108,
    "UncondBranches": 54,
    "binaryConstArg": 54,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 36,
    "NumAndInst": 0,
    "BlockMid": 0,
    "BlockLow": 80,
    "NumBitCastInst": 2,
    "NumBrInst": 72,
    "NumCallInst": 21,
    "NumGetElementPtrInst": 0,
    "NumICmpInst": 36,
    "NumLShrInst": 0,
    "NumLoadInst": 43,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 6,
    "NumRetInst": 8,
    "NumSExtInst": 24,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 42,
    "NumSubInst": 0,
    "NumTruncInst": 6,
    "NumXorInst": 54,
    "NumZExtInst": 24,
    "TotalBlocks": 80,
    "TotalInsts": 375,
    "TotalMemInst": 142,
    "TotalFuncs": 9,
    "ArgsPhi": 12,
    "testUnary": 136
  },
  "baseline_oz_instcount": 381,
  "knowledge_base_entry": [
    "--ipsccp",
    "--instsimplify",
    "--mem2reg",
    "--inline",
    "--mldst-motion",
    "--inline",
    "--ipsccp",
    "--instsimplify",
    "--bdce",
    "--early-cse",
    "--bdce",
    "--newgvn",
    "--die",
    "--sroa",
    "--globalopt",
    "--dse",
    "--gvn",
    "--loop-deletion",
    "--sroa",
    "--dse",
    "--die",
    "--aggressive-instcombine",
    "--gvn-hoist",
    "--gvn-hoist",
    "--reassociate",
    "--loop-instsimplify"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--flattencfg",
          "--simplifycfg",
          "--slp-vectorizer",
          "--ee-instrument",
          "--early-cse",
          "--mergeicmps",
          "-loop-reduce",
          "--loop-deletion",
          "--separate-const-offset-from-gep",
          "--loop-fusion",
          "--dse",
          "--alignment-from-assumptions",
          "--libcalls-shrinkwrap",
          "--globalopt",
          "--instcombine",
          "--nary-reassociate",
          "--memcpyopt",
          "--aggressive-instcombine",
          "--globalsplit",
          "--rpo-functionattrs",
          "--lcssa",
          "--add-discriminators",
          "--loop-unswitch",
          "--pgo-memop-opt",
          "--redundant-dbg-inst-elim",
          "--div-rem-pairs",
          "--lower-expect",
          "--constmerge",
          "--irce",
          "--called-value-propagation"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--flattencfg",
      "--simplifycfg",
      "--slp-vectorizer",
      "--ee-instrument",
      "--early-cse",
      "--mergeicmps",
      "-loop-reduce",
      "--loop-deletion",
      "--separate-const-offset-from-gep",
      "--loop-fusion",
      "--dse",
      "--alignment-from-assumptions",
      "--libcalls-shrinkwrap",
      "--globalopt",
      "--instcombine",
      "--nary-reassociate",
      "--memcpyopt",
      "--aggressive-instcombine",
      "--globalsplit",
      "--rpo-functionattrs",
      "--lcssa",
      "--add-discriminators",
      "--loop-unswitch",
      "--pgo-memop-opt",
      "--redundant-dbg-inst-elim",
      "--div-rem-pairs",
      "--lower-expect",
      "--constmerge",
      "--irce",
      "--called-value-propagation"
    ],
    "performance_vs_Oz": "+3.1%"
  }
}
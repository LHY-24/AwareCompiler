{
  "program_id": "github-v0_1463.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 19,
    "onePredOneSuc": 17,
    "onePredTwoSuc": 1,
    "oneSuccessor": 20,
    "twoPred": 7,
    "twoPredOneSuc": 1,
    "twoEach": 4,
    "twoSuccessor": 6,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 30,
    "BeginPhi": 0,
    "BranchCount": 25,
    "returnInt": 19,
    "CriticalCount": 1,
    "NumEdges": 36,
    "const32Bit": 39,
    "const64Bit": 0,
    "numConstZeroes": 14,
    "numConstOnes": 25,
    "UncondBranches": 20,
    "binaryConstArg": 5,
    "NumAShrInst": 0,
    "NumAddInst": 5,
    "NumAllocaInst": 19,
    "NumAndInst": 0,
    "BlockMid": 3,
    "BlockLow": 27,
    "NumBitCastInst": 3,
    "NumBrInst": 25,
    "NumCallInst": 23,
    "NumGetElementPtrInst": 7,
    "NumICmpInst": 5,
    "NumLShrInst": 0,
    "NumLoadInst": 61,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 1,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 28,
    "NumSubInst": 1,
    "NumTruncInst": 4,
    "NumXorInst": 0,
    "NumZExtInst": 14,
    "TotalBlocks": 30,
    "TotalInsts": 201,
    "TotalMemInst": 138,
    "TotalFuncs": 9,
    "ArgsPhi": 0,
    "testUnary": 102
  },
  "baseline_oz_instcount": 202,
  "knowledge_base_entry": [
    "--loop-sink",
    "--instcombine",
    "--prune-eh",
    "--early-cse-memssa",
    "--nary-reassociate",
    "--sroa",
    "--dse",
    "--loop-rotate",
    "--inline",
    "--aggressive-instcombine",
    "--instsimplify",
    "--sccp",
    "--bdce",
    "--early-cse",
    "--load-store-vectorizer",
    "--adce",
    "--licm",
    "--flattencfg",
    "--early-cse-memssa",
    "-loop-reduce",
    "--jump-threading",
    "--gvn",
    "--memcpyopt",
    "--gvn-hoist"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--licm",
          "--ipsccp",
          "--scalarizer",
          "--aggressive-instcombine",
          "--ipconstprop",
          "--coro-elide",
          "--post-inline-ee-instrument",
          "--loop-sink",
          "--name-anon-globals",
          "--constmerge",
          "--forceattrs",
          "--inline",
          "--coro-split",
          "--jump-threading",
          "--partially-inline-libcalls"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+4.0%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--licm",
      "--ipsccp",
      "--scalarizer",
      "--aggressive-instcombine",
      "--ipconstprop",
      "--coro-elide",
      "--post-inline-ee-instrument",
      "--loop-sink",
      "--name-anon-globals",
      "--constmerge",
      "--forceattrs",
      "--inline",
      "--coro-split",
      "--jump-threading",
      "--partially-inline-libcalls"
    ],
    "performance_vs_Oz": "+4.0%"
  }
}
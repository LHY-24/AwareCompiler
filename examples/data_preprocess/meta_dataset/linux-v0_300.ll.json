{
  "program_id": "linux-v0_300.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 3,
    "onePred": 108,
    "onePredOneSuc": 74,
    "onePredTwoSuc": 31,
    "oneSuccessor": 99,
    "twoPred": 34,
    "twoPredOneSuc": 16,
    "twoEach": 10,
    "twoSuccessor": 49,
    "morePreds": 7,
    "BB03Phi": 3,
    "BBHiPhi": 0,
    "BBNoPhi": 173,
    "BeginPhi": 3,
    "BranchCount": 148,
    "returnInt": 25,
    "CriticalCount": 32,
    "NumEdges": 200,
    "const32Bit": 318,
    "const64Bit": 24,
    "numConstZeroes": 143,
    "numConstOnes": 164,
    "UncondBranches": 99,
    "binaryConstArg": 58,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 93,
    "NumAndInst": 28,
    "BlockMid": 9,
    "BlockLow": 167,
    "NumBitCastInst": 24,
    "NumBrInst": 148,
    "NumCallInst": 77,
    "NumGetElementPtrInst": 74,
    "NumICmpInst": 51,
    "NumLShrInst": 6,
    "NumLoadInst": 232,
    "NumMulInst": 0,
    "NumOrInst": 4,
    "NumPHIInst": 3,
    "NumRetInst": 27,
    "NumSExtInst": 11,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 121,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 25,
    "NumZExtInst": 11,
    "TotalBlocks": 176,
    "TotalInsts": 940,
    "TotalMemInst": 597,
    "TotalFuncs": 47,
    "ArgsPhi": 6,
    "testUnary": 373
  },
  "baseline_oz_instcount": 937,
  "knowledge_base_entry": [
    "--load-store-vectorizer",
    "--mergefunc",
    "--globalopt",
    "--correlated-propagation",
    "--ipsccp",
    "--mergefunc",
    "--globalopt",
    "--gvn-hoist",
    "--slsr",
    "--simplifycfg",
    "--loop-instsimplify",
    "--aggressive-instcombine",
    "--loop-simplifycfg",
    "--instcombine",
    "--newgvn",
    "--inline"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-rotate",
          "--gvn",
          "--loop-data-prefetch",
          "--lower-guard-intrinsic",
          "--loop-deletion",
          "--slp-vectorizer",
          "--lowerinvoke",
          "--rewrite-statepoints-for-gc",
          "--slsr",
          "--coro-cleanup",
          "--load-store-vectorizer",
          "--prune-eh",
          "--inject-tli-mappings",
          "--globalopt",
          "--coro-early",
          "--lower-matrix-intrinsics",
          "--div-rem-pairs",
          "--canonicalize-aliases",
          "--mergefunc",
          "--sink",
          "--loop-reroll",
          "--lower-constant-intrinsics",
          "--mergereturn",
          "--loop-vectorize",
          "--functionattrs",
          "--constprop"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-rotate",
      "--gvn",
      "--loop-data-prefetch",
      "--lower-guard-intrinsic",
      "--loop-deletion",
      "--slp-vectorizer",
      "--lowerinvoke",
      "--rewrite-statepoints-for-gc",
      "--slsr",
      "--coro-cleanup",
      "--load-store-vectorizer",
      "--prune-eh",
      "--inject-tli-mappings",
      "--globalopt",
      "--coro-early",
      "--lower-matrix-intrinsics",
      "--div-rem-pairs",
      "--canonicalize-aliases",
      "--mergefunc",
      "--sink",
      "--loop-reroll",
      "--lower-constant-intrinsics",
      "--mergereturn",
      "--loop-vectorize",
      "--functionattrs",
      "--constprop"
    ],
    "performance_vs_Oz": "+1.6%"
  }
}
{
  "program_id": "linux-v0_6265.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 67,
    "onePredOneSuc": 41,
    "onePredTwoSuc": 24,
    "oneSuccessor": 54,
    "twoPred": 21,
    "twoPredOneSuc": 10,
    "twoEach": 8,
    "twoSuccessor": 38,
    "morePreds": 4,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 109,
    "BeginPhi": 0,
    "BranchCount": 92,
    "returnInt": 17,
    "CriticalCount": 15,
    "NumEdges": 130,
    "const32Bit": 328,
    "const64Bit": 48,
    "numConstZeroes": 158,
    "numConstOnes": 134,
    "UncondBranches": 54,
    "binaryConstArg": 42,
    "NumAShrInst": 7,
    "NumAddInst": 14,
    "NumAllocaInst": 93,
    "NumAndInst": 17,
    "BlockMid": 18,
    "BlockLow": 91,
    "NumBitCastInst": 19,
    "NumBrInst": 92,
    "NumCallInst": 57,
    "NumGetElementPtrInst": 98,
    "NumICmpInst": 42,
    "NumLShrInst": 4,
    "NumLoadInst": 241,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 17,
    "NumSExtInst": 16,
    "NumSelectInst": 0,
    "NumShlInst": 4,
    "NumStoreInst": 115,
    "NumSubInst": 11,
    "NumTruncInst": 8,
    "NumXorInst": 0,
    "NumZExtInst": 31,
    "TotalBlocks": 109,
    "TotalInsts": 891,
    "TotalMemInst": 604,
    "TotalFuncs": 37,
    "ArgsPhi": 0,
    "testUnary": 413
  },
  "baseline_oz_instcount": 892,
  "knowledge_base_entry": [
    "--partially-inline-libcalls",
    "--gvn",
    "--aggressive-instcombine",
    "--inline",
    "--early-cse",
    "--flattencfg",
    "--aggressive-instcombine",
    "--early-cse",
    "--die",
    "--aggressive-instcombine",
    "--dce",
    "--aggressive-instcombine"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--lower-widenable-condition",
          "--forceattrs",
          "--coro-early",
          "--inferattrs",
          "--ee-instrument",
          "--partial-inliner",
          "--ipsccp",
          "--loop-versioning",
          "--loop-fusion",
          "--functionattrs",
          "--gvn-hoist",
          "--loop-reroll",
          "--jump-threading",
          "--newgvn",
          "--loop-distribute",
          "--memcpyopt",
          "--die",
          "--instcombine",
          "--infer-address-spaces",
          "--aggressive-instcombine",
          "--strip",
          "--sink",
          "--strip-dead-prototypes",
          "--attributor",
          "--callsite-splitting",
          "--loop-unswitch",
          "--mergefunc",
          "--inject-tli-mappings",
          "--libcalls-shrinkwrap"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--lower-widenable-condition",
      "--forceattrs",
      "--coro-early",
      "--inferattrs",
      "--ee-instrument",
      "--partial-inliner",
      "--ipsccp",
      "--loop-versioning",
      "--loop-fusion",
      "--functionattrs",
      "--gvn-hoist",
      "--loop-reroll",
      "--jump-threading",
      "--newgvn",
      "--loop-distribute",
      "--memcpyopt",
      "--die",
      "--instcombine",
      "--infer-address-spaces",
      "--aggressive-instcombine",
      "--strip",
      "--sink",
      "--strip-dead-prototypes",
      "--attributor",
      "--callsite-splitting",
      "--loop-unswitch",
      "--mergefunc",
      "--inject-tli-mappings",
      "--libcalls-shrinkwrap"
    ],
    "performance_vs_Oz": "+0.7%"
  }
}
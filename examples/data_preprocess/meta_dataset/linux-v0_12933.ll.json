{
  "program_id": "linux-v0_12933.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 17,
    "onePredOneSuc": 16,
    "onePredTwoSuc": 0,
    "oneSuccessor": 17,
    "twoPred": 1,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 1,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 24,
    "BeginPhi": 0,
    "BranchCount": 18,
    "returnInt": 3,
    "CriticalCount": 1,
    "NumEdges": 19,
    "const32Bit": 22,
    "const64Bit": 6,
    "numConstZeroes": 5,
    "numConstOnes": 12,
    "UncondBranches": 17,
    "binaryConstArg": 2,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 12,
    "NumAndInst": 2,
    "BlockMid": 1,
    "BlockLow": 23,
    "NumBitCastInst": 3,
    "NumBrInst": 18,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 7,
    "NumICmpInst": 1,
    "NumLShrInst": 0,
    "NumLoadInst": 21,
    "NumMulInst": 0,
    "NumOrInst": 2,
    "NumPHIInst": 0,
    "NumRetInst": 6,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 17,
    "NumSubInst": 0,
    "NumTruncInst": 4,
    "NumXorInst": 0,
    "NumZExtInst": 4,
    "TotalBlocks": 24,
    "TotalInsts": 104,
    "TotalMemInst": 64,
    "TotalFuncs": 10,
    "ArgsPhi": 0,
    "testUnary": 44
  },
  "baseline_oz_instcount": 104,
  "knowledge_base_entry": [
    "--loop-deletion",
    "--instcombine",
    "--aggressive-instcombine",
    "--jump-threading",
    "--licm",
    "--lower-expect",
    "--dce",
    "--mem2reg",
    "--slp-vectorizer",
    "--sroa",
    "--indvars"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--coro-early",
          "--inferattrs",
          "--globalopt",
          "--inline",
          "--nary-reassociate",
          "--loop-distribute",
          "--aggressive-instcombine",
          "--argpromotion",
          "--licm",
          "--functionattrs",
          "--bdce",
          "--rewrite-statepoints-for-gc",
          "--strip",
          "--loop-versioning-licm",
          "--ee-instrument",
          "--constmerge",
          "--loop-data-prefetch",
          "--slp-vectorizer",
          "--load-store-vectorizer",
          "--instnamer",
          "--flattencfg",
          "--loop-unroll-and-jam",
          "--alignment-from-assumptions",
          "--strip-debug-declare",
          "--loop-simplify",
          "--coro-cleanup",
          "--deadargelim"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--coro-early",
      "--inferattrs",
      "--globalopt",
      "--inline",
      "--nary-reassociate",
      "--loop-distribute",
      "--aggressive-instcombine",
      "--argpromotion",
      "--licm",
      "--functionattrs",
      "--bdce",
      "--rewrite-statepoints-for-gc",
      "--strip",
      "--loop-versioning-licm",
      "--ee-instrument",
      "--constmerge",
      "--loop-data-prefetch",
      "--slp-vectorizer",
      "--load-store-vectorizer",
      "--instnamer",
      "--flattencfg",
      "--loop-unroll-and-jam",
      "--alignment-from-assumptions",
      "--strip-debug-declare",
      "--loop-simplify",
      "--coro-cleanup",
      "--deadargelim"
    ],
    "performance_vs_Oz": "+3.8%"
  }
}
{
  "program_id": "github-v0_48887.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 15,
    "onePredOneSuc": 10,
    "onePredTwoSuc": 2,
    "oneSuccessor": 13,
    "twoPred": 6,
    "twoPredOneSuc": 2,
    "twoEach": 4,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 24,
    "BeginPhi": 0,
    "BranchCount": 20,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 27,
    "const32Bit": 41,
    "const64Bit": 98,
    "numConstZeroes": 88,
    "numConstOnes": 35,
    "UncondBranches": 13,
    "binaryConstArg": 12,
    "NumAShrInst": 0,
    "NumAddInst": 4,
    "NumAllocaInst": 16,
    "NumAndInst": 3,
    "BlockMid": 7,
    "BlockLow": 17,
    "NumBitCastInst": 24,
    "NumBrInst": 20,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 66,
    "NumICmpInst": 7,
    "NumLShrInst": 3,
    "NumLoadInst": 49,
    "NumMulInst": 0,
    "NumOrInst": 2,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 35,
    "NumSubInst": 0,
    "NumTruncInst": 4,
    "NumXorInst": 1,
    "NumZExtInst": 6,
    "TotalBlocks": 24,
    "TotalInsts": 255,
    "TotalMemInst": 173,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 102
  },
  "baseline_oz_instcount": 255,
  "knowledge_base_entry": [
    "--dce",
    "--mergefunc",
    "--lower-constant-intrinsics",
    "--adce",
    "--loop-simplifycfg",
    "--reassociate",
    "--aggressive-instcombine",
    "--globalopt",
    "--elim-avail-extern",
    "--die",
    "--dse"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--separate-const-offset-from-gep",
          "--coro-split",
          "--aggressive-instcombine",
          "--barrier",
          "--mem2reg",
          "--nary-reassociate",
          "--jump-threading",
          "--irce",
          "--lower-constant-intrinsics",
          "--ipsccp",
          "--mergeicmps",
          "--lower-guard-intrinsic",
          "--pgo-memop-opt",
          "--guard-widening",
          "--sroa",
          "--callsite-splitting",
          "--loop-versioning-licm",
          "--rpo-functionattrs",
          "--insert-gcov-profiling",
          "--called-value-propagation",
          "--lowerinvoke",
          "--newgvn",
          "--mergereturn",
          "--always-inline",
          "--lcssa",
          "--alignment-from-assumptions"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--separate-const-offset-from-gep",
      "--coro-split",
      "--aggressive-instcombine",
      "--barrier",
      "--mem2reg",
      "--nary-reassociate",
      "--jump-threading",
      "--irce",
      "--lower-constant-intrinsics",
      "--ipsccp",
      "--mergeicmps",
      "--lower-guard-intrinsic",
      "--pgo-memop-opt",
      "--guard-widening",
      "--sroa",
      "--callsite-splitting",
      "--loop-versioning-licm",
      "--rpo-functionattrs",
      "--insert-gcov-profiling",
      "--called-value-propagation",
      "--lowerinvoke",
      "--newgvn",
      "--mergereturn",
      "--always-inline",
      "--lcssa",
      "--alignment-from-assumptions"
    ],
    "performance_vs_Oz": "+2.4%"
  }
}
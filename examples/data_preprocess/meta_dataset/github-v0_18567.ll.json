{
  "program_id": "github-v0_18567.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 13,
    "onePredOneSuc": 8,
    "onePredTwoSuc": 2,
    "oneSuccessor": 11,
    "twoPred": 5,
    "twoPredOneSuc": 2,
    "twoEach": 3,
    "twoSuccessor": 6,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 21,
    "BeginPhi": 0,
    "BranchCount": 17,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 23,
    "const32Bit": 30,
    "const64Bit": 31,
    "numConstZeroes": 32,
    "numConstOnes": 23,
    "UncondBranches": 11,
    "binaryConstArg": 8,
    "NumAShrInst": 0,
    "NumAddInst": 8,
    "NumAllocaInst": 13,
    "NumAndInst": 0,
    "BlockMid": 4,
    "BlockLow": 17,
    "NumBitCastInst": 4,
    "NumBrInst": 17,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 22,
    "NumICmpInst": 6,
    "NumLShrInst": 0,
    "NumLoadInst": 31,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 19,
    "NumSubInst": 1,
    "NumTruncInst": 4,
    "NumXorInst": 0,
    "NumZExtInst": 12,
    "TotalBlocks": 21,
    "TotalInsts": 151,
    "TotalMemInst": 92,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 67
  },
  "baseline_oz_instcount": 151,
  "knowledge_base_entry": [
    "--gvn",
    "--aggressive-instcombine",
    "--licm",
    "--sroa",
    "--instsimplify",
    "--newgvn",
    "--ipsccp",
    "--loop-simplifycfg",
    "--prune-eh"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--lowerinvoke",
          "--canonicalize-aliases",
          "--hotcoldsplit",
          "--licm",
          "--aggressive-instcombine",
          "--partial-inliner",
          "--memcpyopt",
          "--lower-widenable-condition",
          "--functionattrs",
          "--slp-vectorizer",
          "--loweratomic",
          "--loop-guard-widening",
          "--lower-guard-intrinsic",
          "--coro-early",
          "--loop-sink",
          "--early-cse",
          "--inline",
          "--separate-const-offset-from-gep",
          "--pgo-memop-opt",
          "--barrier",
          "--libcalls-shrinkwrap",
          "--loop-distribute",
          "--strip-nondebug",
          "--correlated-propagation",
          "--strip-dead-prototypes",
          "--speculative-execution"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+4.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--lowerinvoke",
      "--canonicalize-aliases",
      "--hotcoldsplit",
      "--licm",
      "--aggressive-instcombine",
      "--partial-inliner",
      "--memcpyopt",
      "--lower-widenable-condition",
      "--functionattrs",
      "--slp-vectorizer",
      "--loweratomic",
      "--loop-guard-widening",
      "--lower-guard-intrinsic",
      "--coro-early",
      "--loop-sink",
      "--early-cse",
      "--inline",
      "--separate-const-offset-from-gep",
      "--pgo-memop-opt",
      "--barrier",
      "--libcalls-shrinkwrap",
      "--loop-distribute",
      "--strip-nondebug",
      "--correlated-propagation",
      "--strip-dead-prototypes",
      "--speculative-execution"
    ],
    "performance_vs_Oz": "+4.6%"
  }
}
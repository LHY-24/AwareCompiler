{
  "program_id": "linux-v0_12883.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 40,
    "onePredOneSuc": 20,
    "onePredTwoSuc": 20,
    "oneSuccessor": 26,
    "twoPred": 9,
    "twoPredOneSuc": 5,
    "twoEach": 4,
    "twoSuccessor": 30,
    "morePreds": 7,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 65,
    "BeginPhi": 2,
    "BranchCount": 56,
    "returnInt": 17,
    "CriticalCount": 20,
    "NumEdges": 86,
    "const32Bit": 196,
    "const64Bit": 35,
    "numConstZeroes": 96,
    "numConstOnes": 94,
    "UncondBranches": 26,
    "binaryConstArg": 32,
    "NumAShrInst": 6,
    "NumAddInst": 0,
    "NumAllocaInst": 55,
    "NumAndInst": 20,
    "BlockMid": 14,
    "BlockLow": 53,
    "NumBitCastInst": 14,
    "NumBrInst": 56,
    "NumCallInst": 37,
    "NumGetElementPtrInst": 63,
    "NumICmpInst": 23,
    "NumLShrInst": 4,
    "NumLoadInst": 174,
    "NumMulInst": 0,
    "NumOrInst": 2,
    "NumPHIInst": 2,
    "NumRetInst": 11,
    "NumSExtInst": 1,
    "NumSelectInst": 0,
    "NumShlInst": 8,
    "NumStoreInst": 75,
    "NumSubInst": 0,
    "NumTruncInst": 8,
    "NumXorInst": 0,
    "NumZExtInst": 14,
    "TotalBlocks": 67,
    "TotalInsts": 573,
    "TotalMemInst": 404,
    "TotalFuncs": 24,
    "ArgsPhi": 10,
    "testUnary": 266
  },
  "baseline_oz_instcount": 529,
  "knowledge_base_entry": [
    "--loop-sink",
    "--newgvn",
    "--correlated-propagation",
    "--globalopt",
    "--loop-deletion",
    "--instcombine",
    "--globalopt",
    "--dse",
    "--adce",
    "--mem2reg",
    "--inline",
    "--aggressive-instcombine",
    "--ipsccp"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--tailcallelim",
          "--load-store-vectorizer",
          "--loop-distribute",
          "--memcpyopt",
          "--div-rem-pairs",
          "--sancov",
          "--early-cse",
          "--lcssa",
          "--loop-vectorize",
          "--sroa",
          "-loop-reduce",
          "--mem2reg",
          "--strip-dead-prototypes",
          "--aggressive-instcombine",
          "--ipconstprop",
          "--lower-constant-intrinsics",
          "--always-inline",
          "--argpromotion",
          "--guard-widening",
          "--float2int",
          "--loop-interchange",
          "--ipsccp",
          "--loop-predication",
          "--add-discriminators",
          "--hotcoldsplit",
          "--insert-gcov-profiling",
          "--coro-elide",
          "--loop-guard-widening",
          "--flattencfg"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--tailcallelim",
      "--load-store-vectorizer",
      "--loop-distribute",
      "--memcpyopt",
      "--div-rem-pairs",
      "--sancov",
      "--early-cse",
      "--lcssa",
      "--loop-vectorize",
      "--sroa",
      "-loop-reduce",
      "--mem2reg",
      "--strip-dead-prototypes",
      "--aggressive-instcombine",
      "--ipconstprop",
      "--lower-constant-intrinsics",
      "--always-inline",
      "--argpromotion",
      "--guard-widening",
      "--float2int",
      "--loop-interchange",
      "--ipsccp",
      "--loop-predication",
      "--add-discriminators",
      "--hotcoldsplit",
      "--insert-gcov-profiling",
      "--coro-elide",
      "--loop-guard-widening",
      "--flattencfg"
    ],
    "performance_vs_Oz": "+0.4%"
  }
}
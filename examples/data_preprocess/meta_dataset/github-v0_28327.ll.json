{
  "program_id": "github-v0_28327.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 7,
    "onePredOneSuc": 5,
    "onePredTwoSuc": 2,
    "oneSuccessor": 6,
    "twoPred": 2,
    "twoPredOneSuc": 1,
    "twoEach": 1,
    "twoSuccessor": 4,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 11,
    "BeginPhi": 0,
    "BranchCount": 10,
    "returnInt": 0,
    "CriticalCount": 2,
    "NumEdges": 14,
    "const32Bit": 12,
    "const64Bit": 0,
    "numConstZeroes": 5,
    "numConstOnes": 6,
    "UncondBranches": 6,
    "binaryConstArg": 1,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 4,
    "NumAndInst": 0,
    "BlockMid": 0,
    "BlockLow": 11,
    "NumBitCastInst": 0,
    "NumBrInst": 10,
    "NumCallInst": 0,
    "NumGetElementPtrInst": 3,
    "NumICmpInst": 4,
    "NumLShrInst": 0,
    "NumLoadInst": 13,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 1,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 10,
    "NumSubInst": 1,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 2,
    "TotalBlocks": 11,
    "TotalInsts": 51,
    "TotalMemInst": 30,
    "TotalFuncs": 1,
    "ArgsPhi": 0,
    "testUnary": 21
  },
  "baseline_oz_instcount": 52,
  "knowledge_base_entry": [
    "--mergereturn",
    "--jump-threading",
    "--flattencfg",
    "--mem2reg",
    "--elim-avail-extern",
    "--dse",
    "--instsimplify"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--ipconstprop",
          "--sccp",
          "--mldst-motion",
          "--slsr",
          "--simplifycfg",
          "--always-inline",
          "--dce",
          "--lower-widenable-condition",
          "--dse",
          "--sink",
          "--lower-matrix-intrinsics",
          "--called-value-propagation",
          "--div-rem-pairs",
          "--load-store-vectorizer"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--ipconstprop",
      "--sccp",
      "--mldst-motion",
      "--slsr",
      "--simplifycfg",
      "--always-inline",
      "--dce",
      "--lower-widenable-condition",
      "--dse",
      "--sink",
      "--lower-matrix-intrinsics",
      "--called-value-propagation",
      "--div-rem-pairs",
      "--load-store-vectorizer"
    ],
    "performance_vs_Oz": "+1.9%"
  }
}
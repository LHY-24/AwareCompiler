{
  "program_id": "github-v0_1460.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 21,
    "onePredOneSuc": 18,
    "onePredTwoSuc": 0,
    "oneSuccessor": 24,
    "twoPred": 12,
    "twoPredOneSuc": 6,
    "twoEach": 2,
    "twoSuccessor": 6,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 38,
    "BeginPhi": 0,
    "BranchCount": 29,
    "returnInt": 12,
    "CriticalCount": 3,
    "NumEdges": 45,
    "const32Bit": 67,
    "const64Bit": 0,
    "numConstZeroes": 19,
    "numConstOnes": 36,
    "UncondBranches": 24,
    "binaryConstArg": 17,
    "NumAShrInst": 4,
    "NumAddInst": 3,
    "NumAllocaInst": 26,
    "NumAndInst": 7,
    "BlockMid": 7,
    "BlockLow": 31,
    "NumBitCastInst": 3,
    "NumBrInst": 29,
    "NumCallInst": 21,
    "NumGetElementPtrInst": 8,
    "NumICmpInst": 5,
    "NumLShrInst": 0,
    "NumLoadInst": 68,
    "NumMulInst": 2,
    "NumOrInst": 3,
    "NumPHIInst": 0,
    "NumRetInst": 5,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 3,
    "NumStoreInst": 39,
    "NumSubInst": 0,
    "NumTruncInst": 8,
    "NumXorInst": 0,
    "NumZExtInst": 24,
    "TotalBlocks": 38,
    "TotalInsts": 262,
    "TotalMemInst": 162,
    "TotalFuncs": 12,
    "ArgsPhi": 0,
    "testUnary": 129
  },
  "baseline_oz_instcount": 263,
  "knowledge_base_entry": [
    "--mergefunc",
    "--sroa",
    "--gvn-hoist",
    "--loop-instsimplify",
    "--dce",
    "--aggressive-instcombine",
    "--dse",
    "--loop-rotate",
    "--newgvn",
    "--loop-reroll",
    "--memcpyopt",
    "--early-cse",
    "--loop-simplifycfg",
    "--slsr",
    "--gvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--forceattrs",
          "--loop-data-prefetch",
          "--lower-widenable-condition",
          "--lowerinvoke",
          "--insert-gcov-profiling",
          "--loop-unroll-and-jam",
          "--loop-guard-widening",
          "--loop-unswitch",
          "--partially-inline-libcalls",
          "--instcombine",
          "--scalarizer",
          "--loop-vectorize",
          "--inject-tli-mappings",
          "--strip",
          "--gvn-hoist",
          "--aggressive-instcombine",
          "--coro-split",
          "--simple-loop-unswitch",
          "--coro-early",
          "--loop-predication",
          "--loop-unroll",
          "--loop-simplify",
          "--prune-eh",
          "--sink"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.0%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--forceattrs",
      "--loop-data-prefetch",
      "--lower-widenable-condition",
      "--lowerinvoke",
      "--insert-gcov-profiling",
      "--loop-unroll-and-jam",
      "--loop-guard-widening",
      "--loop-unswitch",
      "--partially-inline-libcalls",
      "--instcombine",
      "--scalarizer",
      "--loop-vectorize",
      "--inject-tli-mappings",
      "--strip",
      "--gvn-hoist",
      "--aggressive-instcombine",
      "--coro-split",
      "--simple-loop-unswitch",
      "--coro-early",
      "--loop-predication",
      "--loop-unroll",
      "--loop-simplify",
      "--prune-eh",
      "--sink"
    ],
    "performance_vs_Oz": "+3.0%"
  }
}
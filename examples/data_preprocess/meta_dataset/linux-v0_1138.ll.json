{
  "program_id": "linux-v0_1138.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 32,
    "onePredOneSuc": 20,
    "onePredTwoSuc": 12,
    "oneSuccessor": 29,
    "twoPred": 13,
    "twoPredOneSuc": 7,
    "twoEach": 2,
    "twoSuccessor": 18,
    "morePreds": 2,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 55,
    "BeginPhi": 1,
    "BranchCount": 47,
    "returnInt": 10,
    "CriticalCount": 14,
    "NumEdges": 65,
    "const32Bit": 99,
    "const64Bit": 16,
    "numConstZeroes": 43,
    "numConstOnes": 58,
    "UncondBranches": 29,
    "binaryConstArg": 17,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 35,
    "NumAndInst": 6,
    "BlockMid": 5,
    "BlockLow": 51,
    "NumBitCastInst": 4,
    "NumBrInst": 47,
    "NumCallInst": 18,
    "NumGetElementPtrInst": 22,
    "NumICmpInst": 19,
    "NumLShrInst": 0,
    "NumLoadInst": 79,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 1,
    "NumRetInst": 9,
    "NumSExtInst": 2,
    "NumSelectInst": 1,
    "NumShlInst": 2,
    "NumStoreInst": 43,
    "NumSubInst": 0,
    "NumTruncInst": 13,
    "NumXorInst": 10,
    "NumZExtInst": 27,
    "TotalBlocks": 56,
    "TotalInsts": 340,
    "TotalMemInst": 197,
    "TotalFuncs": 16,
    "ArgsPhi": 2,
    "testUnary": 160
  },
  "baseline_oz_instcount": 340,
  "knowledge_base_entry": [
    "--adce",
    "--aggressive-instcombine",
    "--lower-expect",
    "--lower-constant-intrinsics",
    "--memcpyopt",
    "--inline",
    "--load-store-vectorizer",
    "--loop-reroll",
    "--gvn-hoist",
    "--dse",
    "--mergefunc",
    "--early-cse"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--adce",
          "--slsr",
          "--tailcallelim",
          "--guard-widening",
          "--loop-simplifycfg",
          "--loop-sink",
          "--add-discriminators",
          "--flattencfg",
          "--early-cse",
          "--separate-const-offset-from-gep",
          "--loop-vectorize",
          "--post-inline-ee-instrument",
          "--slp-vectorizer",
          "--bdce",
          "--strip-debug-declare",
          "--simple-loop-unswitch",
          "--aggressive-instcombine",
          "--loop-data-prefetch",
          "--div-rem-pairs",
          "--rewrite-statepoints-for-gc",
          "--reassociate",
          "--dce",
          "--lower-guard-intrinsic",
          "--correlated-propagation",
          "--indvars",
          "--loop-versioning-licm"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--adce",
      "--slsr",
      "--tailcallelim",
      "--guard-widening",
      "--loop-simplifycfg",
      "--loop-sink",
      "--add-discriminators",
      "--flattencfg",
      "--early-cse",
      "--separate-const-offset-from-gep",
      "--loop-vectorize",
      "--post-inline-ee-instrument",
      "--slp-vectorizer",
      "--bdce",
      "--strip-debug-declare",
      "--simple-loop-unswitch",
      "--aggressive-instcombine",
      "--loop-data-prefetch",
      "--div-rem-pairs",
      "--rewrite-statepoints-for-gc",
      "--reassociate",
      "--dce",
      "--lower-guard-intrinsic",
      "--correlated-propagation",
      "--indvars",
      "--loop-versioning-licm"
    ],
    "performance_vs_Oz": "+0.6%"
  }
}
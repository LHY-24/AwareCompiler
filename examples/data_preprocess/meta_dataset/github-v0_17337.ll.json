{
  "program_id": "github-v0_17337.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 7,
    "onePredOneSuc": 5,
    "onePredTwoSuc": 2,
    "oneSuccessor": 6,
    "twoPred": 3,
    "twoPredOneSuc": 1,
    "twoEach": 1,
    "twoSuccessor": 5,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 18,
    "BeginPhi": 0,
    "BranchCount": 11,
    "returnInt": 1,
    "CriticalCount": 4,
    "NumEdges": 16,
    "const32Bit": 37,
    "const64Bit": 4,
    "numConstZeroes": 24,
    "numConstOnes": 16,
    "UncondBranches": 6,
    "binaryConstArg": 1,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 13,
    "NumAndInst": 0,
    "BlockMid": 1,
    "BlockLow": 17,
    "NumBitCastInst": 1,
    "NumBrInst": 11,
    "NumCallInst": 9,
    "NumGetElementPtrInst": 15,
    "NumICmpInst": 3,
    "NumLShrInst": 0,
    "NumLoadInst": 40,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 7,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 18,
    "NumSubInst": 0,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 7,
    "TotalBlocks": 18,
    "TotalInsts": 127,
    "TotalMemInst": 95,
    "TotalFuncs": 10,
    "ArgsPhi": 0,
    "testUnary": 63
  },
  "baseline_oz_instcount": 129,
  "knowledge_base_entry": [
    "--adce",
    "--die",
    "--ipsccp",
    "--correlated-propagation",
    "--globalopt",
    "--aggressive-instcombine",
    "--reassociate",
    "-loop-reduce",
    "--gvn",
    "--loop-reroll",
    "--loop-fusion",
    "--jump-threading",
    "--memcpyopt",
    "--mem2reg",
    "--instcombine",
    "--loop-instsimplify",
    "--load-store-vectorizer",
    "--adce",
    "--aggressive-instcombine",
    "--lower-constant-intrinsics",
    "--dce",
    "--loop-instsimplify",
    "--ipsccp",
    "--inline",
    "--gvn-hoist"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--dce",
          "--globalopt",
          "--strip-nondebug",
          "--memcpyopt",
          "--loop-data-prefetch",
          "--rpo-functionattrs",
          "--libcalls-shrinkwrap",
          "--lower-expect",
          "--aggressive-instcombine",
          "--loweratomic",
          "--loop-distribute",
          "--loop-instsimplify",
          "--scalarizer",
          "--always-inline",
          "--lower-matrix-intrinsics",
          "--canonicalize-aliases",
          "--loop-rotate",
          "--ee-instrument",
          "--indvars",
          "--early-cse",
          "--callsite-splitting",
          "--lowerinvoke",
          "--loop-unroll-and-jam"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--dce",
      "--globalopt",
      "--strip-nondebug",
      "--memcpyopt",
      "--loop-data-prefetch",
      "--rpo-functionattrs",
      "--libcalls-shrinkwrap",
      "--lower-expect",
      "--aggressive-instcombine",
      "--loweratomic",
      "--loop-distribute",
      "--loop-instsimplify",
      "--scalarizer",
      "--always-inline",
      "--lower-matrix-intrinsics",
      "--canonicalize-aliases",
      "--loop-rotate",
      "--ee-instrument",
      "--indvars",
      "--early-cse",
      "--callsite-splitting",
      "--lowerinvoke",
      "--loop-unroll-and-jam"
    ],
    "performance_vs_Oz": "+3.1%"
  }
}
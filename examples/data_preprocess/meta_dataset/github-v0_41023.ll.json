{
  "program_id": "github-v0_41023.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 15,
    "onePredOneSuc": 10,
    "onePredTwoSuc": 2,
    "oneSuccessor": 13,
    "twoPred": 6,
    "twoPredOneSuc": 2,
    "twoEach": 4,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 24,
    "BeginPhi": 0,
    "BranchCount": 20,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 27,
    "const32Bit": 33,
    "const64Bit": 33,
    "numConstZeroes": 41,
    "numConstOnes": 19,
    "UncondBranches": 13,
    "binaryConstArg": 7,
    "NumAShrInst": 0,
    "NumAddInst": 11,
    "NumAllocaInst": 13,
    "NumAndInst": 0,
    "BlockMid": 5,
    "BlockLow": 19,
    "NumBitCastInst": 0,
    "NumBrInst": 20,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 22,
    "NumICmpInst": 7,
    "NumLShrInst": 0,
    "NumLoadInst": 37,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 21,
    "NumSubInst": 1,
    "NumTruncInst": 9,
    "NumXorInst": 0,
    "NumZExtInst": 23,
    "TotalBlocks": 24,
    "TotalInsts": 178,
    "TotalMemInst": 100,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 85
  },
  "baseline_oz_instcount": 178,
  "knowledge_base_entry": [
    "--slp-vectorizer",
    "--inline",
    "--bdce",
    "--gvn",
    "--aggressive-instcombine",
    "--globalopt",
    "--mergefunc",
    "--load-store-vectorizer",
    "--lower-expect",
    "--sccp",
    "--loop-instsimplify"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--aggressive-instcombine",
          "--coro-elide",
          "--break-crit-edges",
          "--dce",
          "--hotcoldsplit",
          "--lower-widenable-condition",
          "--loop-data-prefetch",
          "--loop-guard-widening",
          "--loop-vectorize",
          "--mergefunc",
          "--loop-versioning-licm",
          "--slsr",
          "--canonicalize-aliases",
          "--functionattrs",
          "--lowerswitch",
          "--loop-unroll-and-jam"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+11.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--aggressive-instcombine",
      "--coro-elide",
      "--break-crit-edges",
      "--dce",
      "--hotcoldsplit",
      "--lower-widenable-condition",
      "--loop-data-prefetch",
      "--loop-guard-widening",
      "--loop-vectorize",
      "--mergefunc",
      "--loop-versioning-licm",
      "--slsr",
      "--canonicalize-aliases",
      "--functionattrs",
      "--lowerswitch",
      "--loop-unroll-and-jam"
    ],
    "performance_vs_Oz": "+11.2%"
  }
}
{
  "program_id": "linux-v0_8141.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 65,
    "onePredOneSuc": 40,
    "onePredTwoSuc": 25,
    "oneSuccessor": 53,
    "twoPred": 18,
    "twoPredOneSuc": 10,
    "twoEach": 3,
    "twoSuccessor": 34,
    "morePreds": 4,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 99,
    "BeginPhi": 0,
    "BranchCount": 87,
    "returnInt": 14,
    "CriticalCount": 16,
    "NumEdges": 121,
    "const32Bit": 230,
    "const64Bit": 27,
    "numConstZeroes": 113,
    "numConstOnes": 79,
    "UncondBranches": 53,
    "binaryConstArg": 34,
    "NumAShrInst": 1,
    "NumAddInst": 2,
    "NumAllocaInst": 47,
    "NumAndInst": 14,
    "BlockMid": 5,
    "BlockLow": 94,
    "NumBitCastInst": 5,
    "NumBrInst": 87,
    "NumCallInst": 32,
    "NumGetElementPtrInst": 65,
    "NumICmpInst": 39,
    "NumLShrInst": 5,
    "NumLoadInst": 148,
    "NumMulInst": 0,
    "NumOrInst": 2,
    "NumPHIInst": 0,
    "NumRetInst": 12,
    "NumSExtInst": 7,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 90,
    "NumSubInst": 0,
    "NumTruncInst": 6,
    "NumXorInst": 10,
    "NumZExtInst": 20,
    "TotalBlocks": 99,
    "TotalInsts": 593,
    "TotalMemInst": 382,
    "TotalFuncs": 23,
    "ArgsPhi": 0,
    "testUnary": 233
  },
  "baseline_oz_instcount": 593,
  "knowledge_base_entry": [
    "--aggressive-instcombine",
    "--inline",
    "--instcombine",
    "--gvn-hoist",
    "-loop-reduce",
    "--reassociate",
    "--elim-avail-extern",
    "--simplifycfg",
    "--slsr",
    "--slp-vectorizer",
    "--bdce",
    "--newgvn",
    "--lower-constant-intrinsics",
    "--die"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--aggressive-instcombine",
          "--forceattrs",
          "--loop-guard-widening",
          "--loop-distribute",
          "--rewrite-statepoints-for-gc",
          "--loop-predication",
          "--coro-elide",
          "--deadargelim",
          "--globalopt",
          "--partially-inline-libcalls",
          "--loop-versioning-licm",
          "--loop-vectorize",
          "--loop-versioning",
          "--attributor",
          "--float2int",
          "--die",
          "--barrier",
          "--speculative-execution"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--aggressive-instcombine",
      "--forceattrs",
      "--loop-guard-widening",
      "--loop-distribute",
      "--rewrite-statepoints-for-gc",
      "--loop-predication",
      "--coro-elide",
      "--deadargelim",
      "--globalopt",
      "--partially-inline-libcalls",
      "--loop-versioning-licm",
      "--loop-vectorize",
      "--loop-versioning",
      "--attributor",
      "--float2int",
      "--die",
      "--barrier",
      "--speculative-execution"
    ],
    "performance_vs_Oz": "+0.2%"
  }
}
{
  "program_id": "linux-v0_829.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 22,
    "onePredOneSuc": 20,
    "onePredTwoSuc": 2,
    "oneSuccessor": 22,
    "twoPred": 8,
    "twoPredOneSuc": 2,
    "twoEach": 2,
    "twoSuccessor": 8,
    "morePreds": 0,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 36,
    "BeginPhi": 2,
    "BranchCount": 30,
    "returnInt": 8,
    "CriticalCount": 6,
    "NumEdges": 38,
    "const32Bit": 77,
    "const64Bit": 8,
    "numConstZeroes": 33,
    "numConstOnes": 59,
    "UncondBranches": 22,
    "binaryConstArg": 27,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 26,
    "NumAndInst": 0,
    "BlockMid": 6,
    "BlockLow": 32,
    "NumBitCastInst": 2,
    "NumBrInst": 30,
    "NumCallInst": 17,
    "NumGetElementPtrInst": 12,
    "NumICmpInst": 17,
    "NumLShrInst": 0,
    "NumLoadInst": 46,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 2,
    "NumRetInst": 8,
    "NumSExtInst": 9,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 35,
    "NumSubInst": 0,
    "NumTruncInst": 3,
    "NumXorInst": 26,
    "NumZExtInst": 11,
    "TotalBlocks": 38,
    "TotalInsts": 250,
    "TotalMemInst": 136,
    "TotalFuncs": 17,
    "ArgsPhi": 4,
    "testUnary": 101
  },
  "baseline_oz_instcount": 252,
  "knowledge_base_entry": [
    "--hotcoldsplit",
    "--mergefunc",
    "--jump-threading",
    "--slsr",
    "--early-cse-memssa",
    "-loop-reduce",
    "--load-store-vectorizer",
    "--simplifycfg",
    "--licm",
    "--globalopt",
    "--aggressive-instcombine",
    "--jump-threading",
    "--lower-expect",
    "--correlated-propagation",
    "--dse",
    "--mergefunc",
    "--loop-reroll",
    "--instcombine",
    "--sccp",
    "--reassociate",
    "--adce",
    "--lower-expect",
    "--prune-eh",
    "--gvn",
    "--sroa",
    "--loop-instsimplify",
    "--aggressive-instcombine",
    "--jump-threading",
    "--lower-expect",
    "--prune-eh",
    "--gvn",
    "--sroa",
    "--loop-instsimplify",
    "--globalopt",
    "--gvn",
    "--prune-eh",
    "--licm",
    "--inline"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--name-anon-globals",
          "--post-inline-ee-instrument",
          "--nary-reassociate",
          "--loop-instsimplify",
          "--loop-unroll-and-jam",
          "--coro-early",
          "--reassociate",
          "--early-cse",
          "--loop-data-prefetch",
          "--lowerinvoke",
          "--globaldce",
          "--simple-loop-unswitch",
          "--mergeicmps",
          "--dce",
          "--ipconstprop",
          "--mergefunc",
          "--inferattrs",
          "--loop-rotate",
          "--loop-simplifycfg",
          "--add-discriminators",
          "--loop-load-elim",
          "--partial-inliner",
          "--die",
          "--simplifycfg",
          "--licm",
          "--pgo-memop-opt",
          "--aggressive-instcombine",
          "--memcpyopt"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--name-anon-globals",
      "--post-inline-ee-instrument",
      "--nary-reassociate",
      "--loop-instsimplify",
      "--loop-unroll-and-jam",
      "--coro-early",
      "--reassociate",
      "--early-cse",
      "--loop-data-prefetch",
      "--lowerinvoke",
      "--globaldce",
      "--simple-loop-unswitch",
      "--mergeicmps",
      "--dce",
      "--ipconstprop",
      "--mergefunc",
      "--inferattrs",
      "--loop-rotate",
      "--loop-simplifycfg",
      "--add-discriminators",
      "--loop-load-elim",
      "--partial-inliner",
      "--die",
      "--simplifycfg",
      "--licm",
      "--pgo-memop-opt",
      "--aggressive-instcombine",
      "--memcpyopt"
    ],
    "performance_vs_Oz": "+0.8%"
  }
}
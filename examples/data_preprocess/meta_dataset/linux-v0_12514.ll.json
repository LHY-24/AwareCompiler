{
  "program_id": "linux-v0_12514.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 35,
    "onePredOneSuc": 25,
    "onePredTwoSuc": 10,
    "oneSuccessor": 31,
    "twoPred": 12,
    "twoPredOneSuc": 6,
    "twoEach": 4,
    "twoSuccessor": 18,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 60,
    "BeginPhi": 0,
    "BranchCount": 49,
    "returnInt": 3,
    "CriticalCount": 5,
    "NumEdges": 67,
    "const32Bit": 174,
    "const64Bit": 17,
    "numConstZeroes": 81,
    "numConstOnes": 67,
    "UncondBranches": 31,
    "binaryConstArg": 22,
    "NumAShrInst": 0,
    "NumAddInst": 9,
    "NumAllocaInst": 49,
    "NumAndInst": 9,
    "BlockMid": 12,
    "BlockLow": 48,
    "NumBitCastInst": 14,
    "NumBrInst": 49,
    "NumCallInst": 21,
    "NumGetElementPtrInst": 58,
    "NumICmpInst": 19,
    "NumLShrInst": 0,
    "NumLoadInst": 133,
    "NumMulInst": 2,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 11,
    "NumSExtInst": 21,
    "NumSelectInst": 1,
    "NumShlInst": 0,
    "NumStoreInst": 71,
    "NumSubInst": 1,
    "NumTruncInst": 5,
    "NumXorInst": 1,
    "NumZExtInst": 5,
    "TotalBlocks": 60,
    "TotalInsts": 486,
    "TotalMemInst": 332,
    "TotalFuncs": 20,
    "ArgsPhi": 0,
    "testUnary": 230
  },
  "baseline_oz_instcount": 488,
  "knowledge_base_entry": [
    "--bdce",
    "--inline",
    "--load-store-vectorizer",
    "--aggressive-instcombine",
    "--lower-constant-intrinsics",
    "--sccp",
    "--elim-avail-extern",
    "--lower-expect",
    "--load-store-vectorizer",
    "--instsimplify"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--sancov",
          "--instcombine",
          "--speculative-execution",
          "--lower-guard-intrinsic",
          "--name-anon-globals",
          "--loop-simplify",
          "--globalsplit",
          "--aggressive-instcombine",
          "--lcssa",
          "-loop-reduce"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--sancov",
      "--instcombine",
      "--speculative-execution",
      "--lower-guard-intrinsic",
      "--name-anon-globals",
      "--loop-simplify",
      "--globalsplit",
      "--aggressive-instcombine",
      "--lcssa",
      "-loop-reduce"
    ],
    "performance_vs_Oz": "+0.8%"
  }
}
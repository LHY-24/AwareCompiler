{
  "program_id": "github-v0_18620.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 15,
    "onePredOneSuc": 10,
    "onePredTwoSuc": 3,
    "oneSuccessor": 13,
    "twoPred": 6,
    "twoPredOneSuc": 3,
    "twoEach": 2,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 24,
    "BeginPhi": 0,
    "BranchCount": 20,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 27,
    "const32Bit": 47,
    "const64Bit": 100,
    "numConstZeroes": 92,
    "numConstOnes": 33,
    "UncondBranches": 13,
    "binaryConstArg": 16,
    "NumAShrInst": 0,
    "NumAddInst": 3,
    "NumAllocaInst": 16,
    "NumAndInst": 5,
    "BlockMid": 6,
    "BlockLow": 18,
    "NumBitCastInst": 24,
    "NumBrInst": 20,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 66,
    "NumICmpInst": 7,
    "NumLShrInst": 3,
    "NumLoadInst": 44,
    "NumMulInst": 0,
    "NumOrInst": 3,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 3,
    "NumStoreInst": 33,
    "NumSubInst": 2,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 1,
    "TotalBlocks": 24,
    "TotalInsts": 246,
    "TotalMemInst": 166,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 90
  },
  "baseline_oz_instcount": 246,
  "knowledge_base_entry": [
    "--hotcoldsplit",
    "--mergefunc",
    "--mem2reg",
    "--flattencfg",
    "--licm",
    "--slp-vectorizer",
    "--jump-threading",
    "--instcombine",
    "--memcpyopt",
    "--licm",
    "--aggressive-instcombine",
    "--newgvn",
    "--slp-vectorizer",
    "--elim-avail-extern",
    "--mergefunc",
    "--load-store-vectorizer",
    "--early-cse-memssa",
    "--prune-eh"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--strip-debug-declare",
          "--guard-widening",
          "--strip",
          "--partial-inliner",
          "--rpo-functionattrs",
          "--simple-loop-unswitch",
          "--coro-elide",
          "--loop-data-prefetch",
          "--redundant-dbg-inst-elim",
          "--ipconstprop",
          "--aggressive-instcombine",
          "--mergefunc",
          "--called-value-propagation",
          "--separate-const-offset-from-gep",
          "--pgo-memop-opt",
          "--inline",
          "--loop-predication",
          "--sancov",
          "--lower-constant-intrinsics",
          "--argpromotion",
          "--load-store-vectorizer",
          "--instsimplify",
          "--mem2reg",
          "--post-inline-ee-instrument",
          "--ee-instrument",
          "--libcalls-shrinkwrap",
          "--ipsccp",
          "--consthoist"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--strip-debug-declare",
      "--guard-widening",
      "--strip",
      "--partial-inliner",
      "--rpo-functionattrs",
      "--simple-loop-unswitch",
      "--coro-elide",
      "--loop-data-prefetch",
      "--redundant-dbg-inst-elim",
      "--ipconstprop",
      "--aggressive-instcombine",
      "--mergefunc",
      "--called-value-propagation",
      "--separate-const-offset-from-gep",
      "--pgo-memop-opt",
      "--inline",
      "--loop-predication",
      "--sancov",
      "--lower-constant-intrinsics",
      "--argpromotion",
      "--load-store-vectorizer",
      "--instsimplify",
      "--mem2reg",
      "--post-inline-ee-instrument",
      "--ee-instrument",
      "--libcalls-shrinkwrap",
      "--ipsccp",
      "--consthoist"
    ],
    "performance_vs_Oz": "+0.8%"
  }
}
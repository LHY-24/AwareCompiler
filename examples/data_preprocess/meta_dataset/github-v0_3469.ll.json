{
  "program_id": "github-v0_3469.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 30,
    "onePredOneSuc": 19,
    "onePredTwoSuc": 9,
    "oneSuccessor": 29,
    "twoPred": 14,
    "twoPredOneSuc": 8,
    "twoEach": 5,
    "twoSuccessor": 16,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 49,
    "BeginPhi": 0,
    "BranchCount": 45,
    "returnInt": 25,
    "CriticalCount": 7,
    "NumEdges": 61,
    "const32Bit": 98,
    "const64Bit": 28,
    "numConstZeroes": 54,
    "numConstOnes": 53,
    "UncondBranches": 29,
    "binaryConstArg": 18,
    "NumAShrInst": 0,
    "NumAddInst": 16,
    "NumAllocaInst": 42,
    "NumAndInst": 2,
    "BlockMid": 8,
    "BlockLow": 41,
    "NumBitCastInst": 0,
    "NumBrInst": 45,
    "NumCallInst": 36,
    "NumGetElementPtrInst": 25,
    "NumICmpInst": 16,
    "NumLShrInst": 2,
    "NumLoadInst": 94,
    "NumMulInst": 4,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 4,
    "NumSExtInst": 4,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 62,
    "NumSubInst": 5,
    "NumTruncInst": 14,
    "NumXorInst": 0,
    "NumZExtInst": 28,
    "TotalBlocks": 49,
    "TotalInsts": 401,
    "TotalMemInst": 259,
    "TotalFuncs": 18,
    "ArgsPhi": 0,
    "testUnary": 182
  },
  "baseline_oz_instcount": 402,
  "knowledge_base_entry": [
    "--instcombine",
    "--aggressive-instcombine",
    "--globaldce",
    "--aggressive-instcombine",
    "--early-cse",
    "--inline",
    "--flattencfg",
    "--newgvn",
    "--mem2reg",
    "--instcombine",
    "--correlated-propagation",
    "--die",
    "--sroa"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--inline",
          "--loop-unroll",
          "--bdce",
          "--aggressive-instcombine",
          "--instnamer",
          "--coro-split",
          "--globalsplit",
          "--prune-eh",
          "--always-inline",
          "--tailcallelim",
          "--partial-inliner",
          "--mergereturn",
          "--div-rem-pairs",
          "--lower-constant-intrinsics",
          "--loop-unswitch",
          "--constprop",
          "--coro-cleanup",
          "--canonicalize-aliases",
          "--alignment-from-assumptions"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--inline",
      "--loop-unroll",
      "--bdce",
      "--aggressive-instcombine",
      "--instnamer",
      "--coro-split",
      "--globalsplit",
      "--prune-eh",
      "--always-inline",
      "--tailcallelim",
      "--partial-inliner",
      "--mergereturn",
      "--div-rem-pairs",
      "--lower-constant-intrinsics",
      "--loop-unswitch",
      "--constprop",
      "--coro-cleanup",
      "--canonicalize-aliases",
      "--alignment-from-assumptions"
    ],
    "performance_vs_Oz": "+0.7%"
  }
}
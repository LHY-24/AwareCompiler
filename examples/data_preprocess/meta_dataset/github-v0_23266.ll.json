{
  "program_id": "github-v0_23266.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 28,
    "onePredOneSuc": 21,
    "onePredTwoSuc": 5,
    "oneSuccessor": 27,
    "twoPred": 13,
    "twoPredOneSuc": 5,
    "twoEach": 6,
    "twoSuccessor": 15,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 47,
    "BeginPhi": 0,
    "BranchCount": 42,
    "returnInt": 6,
    "CriticalCount": 6,
    "NumEdges": 57,
    "const32Bit": 40,
    "const64Bit": 0,
    "numConstZeroes": 8,
    "numConstOnes": 40,
    "UncondBranches": 27,
    "binaryConstArg": 7,
    "NumAShrInst": 0,
    "NumAddInst": 9,
    "NumAllocaInst": 28,
    "NumAndInst": 0,
    "BlockMid": 4,
    "BlockLow": 43,
    "NumBitCastInst": 0,
    "NumBrInst": 42,
    "NumCallInst": 8,
    "NumGetElementPtrInst": 4,
    "NumICmpInst": 15,
    "NumLShrInst": 0,
    "NumLoadInst": 80,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 5,
    "NumSExtInst": 6,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 50,
    "NumSubInst": 2,
    "NumTruncInst": 6,
    "NumXorInst": 0,
    "NumZExtInst": 22,
    "TotalBlocks": 47,
    "TotalInsts": 278,
    "TotalMemInst": 170,
    "TotalFuncs": 7,
    "ArgsPhi": 0,
    "testUnary": 142
  },
  "baseline_oz_instcount": 278,
  "knowledge_base_entry": [
    "--lower-constant-intrinsics",
    "--die",
    "--aggressive-instcombine",
    "--licm",
    "--elim-avail-extern",
    "--gvn-hoist",
    "--flattencfg",
    "--load-store-vectorizer",
    "--loop-reroll",
    "--jump-threading"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--div-rem-pairs",
          "--aggressive-instcombine",
          "--coro-early",
          "--partial-inliner",
          "--gvn",
          "--loop-simplifycfg",
          "--loop-instsimplify",
          "--correlated-propagation",
          "--early-cse-memssa",
          "--lower-guard-intrinsic"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+5.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--div-rem-pairs",
      "--aggressive-instcombine",
      "--coro-early",
      "--partial-inliner",
      "--gvn",
      "--loop-simplifycfg",
      "--loop-instsimplify",
      "--correlated-propagation",
      "--early-cse-memssa",
      "--lower-guard-intrinsic"
    ],
    "performance_vs_Oz": "+5.4%"
  }
}
{
  "program_id": "github-v0_7953.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 16,
    "onePredOneSuc": 10,
    "onePredTwoSuc": 4,
    "oneSuccessor": 14,
    "twoPred": 7,
    "twoPredOneSuc": 4,
    "twoEach": 2,
    "twoSuccessor": 8,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 26,
    "BeginPhi": 0,
    "BranchCount": 22,
    "returnInt": 4,
    "CriticalCount": 1,
    "NumEdges": 30,
    "const32Bit": 52,
    "const64Bit": 88,
    "numConstZeroes": 89,
    "numConstOnes": 32,
    "UncondBranches": 14,
    "binaryConstArg": 23,
    "NumAShrInst": 3,
    "NumAddInst": 4,
    "NumAllocaInst": 13,
    "NumAndInst": 10,
    "BlockMid": 7,
    "BlockLow": 19,
    "NumBitCastInst": 16,
    "NumBrInst": 22,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 56,
    "NumICmpInst": 8,
    "NumLShrInst": 0,
    "NumLoadInst": 44,
    "NumMulInst": 0,
    "NumOrInst": 5,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 5,
    "NumStoreInst": 30,
    "NumSubInst": 0,
    "NumTruncInst": 8,
    "NumXorInst": 1,
    "NumZExtInst": 18,
    "TotalBlocks": 26,
    "TotalInsts": 257,
    "TotalMemInst": 150,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 102
  },
  "baseline_oz_instcount": 257,
  "knowledge_base_entry": [
    "--aggressive-instcombine",
    "--lower-expect",
    "--early-cse",
    "--instcombine",
    "--mldst-motion",
    "--mem2reg",
    "--memcpyopt",
    "--sroa",
    "--correlated-propagation",
    "--early-cse",
    "--dse",
    "--correlated-propagation",
    "--simplifycfg",
    "--load-store-vectorizer",
    "--loop-simplifycfg",
    "--sroa",
    "--lower-expect",
    "--early-cse",
    "--instcombine",
    "--mldst-motion",
    "--mem2reg",
    "--memcpyopt",
    "--sroa",
    "--correlated-propagation",
    "--early-cse",
    "--dse",
    "--correlated-propagation",
    "--simplifycfg",
    "--jump-threading",
    "--licm",
    "--loop-simplifycfg",
    "--gvn",
    "--indvars",
    "--slsr",
    "--gvn-hoist",
    "--early-cse-memssa",
    "--correlated-propagation",
    "--sroa",
    "--correlated-propagation",
    "--early-cse",
    "--dse",
    "--correlated-propagation",
    "--simplifycfg",
    "--jump-threading",
    "--licm",
    "--loop-simplifycfg",
    "--gvn",
    "--indvars",
    "--slsr",
    "--gvn-hoist",
    "--early-cse-memssa"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--dse",
          "--lowerinvoke",
          "--nary-reassociate",
          "--load-store-vectorizer",
          "--coro-split",
          "--aggressive-instcombine",
          "--hotcoldsplit",
          "--simple-loop-unswitch",
          "--gvn-hoist",
          "--adce",
          "--tailcallelim",
          "--speculative-execution",
          "--name-anon-globals",
          "--canonicalize-aliases",
          "--div-rem-pairs",
          "--loop-instsimplify",
          "--loop-interchange",
          "--partial-inliner",
          "--dce",
          "--jump-threading",
          "--deadargelim",
          "--called-value-propagation",
          "--mldst-motion",
          "--constmerge",
          "-loop-reduce",
          "--globalopt",
          "--instsimplify"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--dse",
      "--lowerinvoke",
      "--nary-reassociate",
      "--load-store-vectorizer",
      "--coro-split",
      "--aggressive-instcombine",
      "--hotcoldsplit",
      "--simple-loop-unswitch",
      "--gvn-hoist",
      "--adce",
      "--tailcallelim",
      "--speculative-execution",
      "--name-anon-globals",
      "--canonicalize-aliases",
      "--div-rem-pairs",
      "--loop-instsimplify",
      "--loop-interchange",
      "--partial-inliner",
      "--dce",
      "--jump-threading",
      "--deadargelim",
      "--called-value-propagation",
      "--mldst-motion",
      "--constmerge",
      "-loop-reduce",
      "--globalopt",
      "--instsimplify"
    ],
    "performance_vs_Oz": "+1.6%"
  }
}
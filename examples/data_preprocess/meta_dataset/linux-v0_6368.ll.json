{
  "program_id": "linux-v0_6368.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 51,
    "onePredOneSuc": 38,
    "onePredTwoSuc": 11,
    "oneSuccessor": 44,
    "twoPred": 20,
    "twoPredOneSuc": 4,
    "twoEach": 10,
    "twoSuccessor": 30,
    "morePreds": 3,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 83,
    "BeginPhi": 2,
    "BranchCount": 74,
    "returnInt": 15,
    "CriticalCount": 12,
    "NumEdges": 104,
    "const32Bit": 326,
    "const64Bit": 15,
    "numConstZeroes": 143,
    "numConstOnes": 135,
    "UncondBranches": 44,
    "binaryConstArg": 77,
    "NumAShrInst": 5,
    "NumAddInst": 10,
    "NumAllocaInst": 75,
    "NumAndInst": 17,
    "BlockMid": 22,
    "BlockLow": 63,
    "NumBitCastInst": 6,
    "NumBrInst": 74,
    "NumCallInst": 21,
    "NumGetElementPtrInst": 120,
    "NumICmpInst": 42,
    "NumLShrInst": 3,
    "NumLoadInst": 250,
    "NumMulInst": 0,
    "NumOrInst": 4,
    "NumPHIInst": 2,
    "NumRetInst": 11,
    "NumSExtInst": 32,
    "NumSelectInst": 1,
    "NumShlInst": 4,
    "NumStoreInst": 124,
    "NumSubInst": 6,
    "NumTruncInst": 9,
    "NumXorInst": 27,
    "NumZExtInst": 40,
    "TotalBlocks": 85,
    "TotalInsts": 893,
    "TotalMemInst": 590,
    "TotalFuncs": 21,
    "ArgsPhi": 5,
    "testUnary": 412
  },
  "baseline_oz_instcount": 893,
  "knowledge_base_entry": [
    "--mldst-motion",
    "--newgvn",
    "--elim-avail-extern",
    "--mldst-motion",
    "--elim-avail-extern",
    "--licm",
    "--aggressive-instcombine",
    "--loop-instsimplify",
    "--inline",
    "--slp-vectorizer",
    "-loop-reduce",
    "--gvn-hoist",
    "--aggressive-instcombine",
    "--inline",
    "--slp-vectorizer",
    "--dce",
    "--reassociate",
    "--globalopt",
    "--early-cse-memssa",
    "--slp-vectorizer",
    "--inline"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--aggressive-instcombine",
          "--loop-load-elim",
          "--strip-nondebug",
          "--dce",
          "--strip",
          "--mergefunc",
          "--prune-eh",
          "--lowerinvoke",
          "--ipsccp",
          "--mem2reg",
          "--alignment-from-assumptions",
          "--functionattrs",
          "--lower-widenable-condition",
          "--sancov",
          "--called-value-propagation",
          "--constprop",
          "--always-inline",
          "--attributor",
          "--globalsplit"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--aggressive-instcombine",
      "--loop-load-elim",
      "--strip-nondebug",
      "--dce",
      "--strip",
      "--mergefunc",
      "--prune-eh",
      "--lowerinvoke",
      "--ipsccp",
      "--mem2reg",
      "--alignment-from-assumptions",
      "--functionattrs",
      "--lower-widenable-condition",
      "--sancov",
      "--called-value-propagation",
      "--constprop",
      "--always-inline",
      "--attributor",
      "--globalsplit"
    ],
    "performance_vs_Oz": "+1.3%"
  }
}
{
  "program_id": "linux-v0_3276.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 41,
    "onePredOneSuc": 30,
    "onePredTwoSuc": 10,
    "oneSuccessor": 36,
    "twoPred": 13,
    "twoPredOneSuc": 3,
    "twoEach": 7,
    "twoSuccessor": 20,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 78,
    "BeginPhi": 0,
    "BranchCount": 56,
    "returnInt": 19,
    "CriticalCount": 5,
    "NumEdges": 76,
    "const32Bit": 148,
    "const64Bit": 28,
    "numConstZeroes": 52,
    "numConstOnes": 85,
    "UncondBranches": 36,
    "binaryConstArg": 26,
    "NumAShrInst": 0,
    "NumAddInst": 8,
    "NumAllocaInst": 71,
    "NumAndInst": 8,
    "BlockMid": 8,
    "BlockLow": 70,
    "NumBitCastInst": 12,
    "NumBrInst": 56,
    "NumCallInst": 41,
    "NumGetElementPtrInst": 28,
    "NumICmpInst": 21,
    "NumLShrInst": 3,
    "NumLoadInst": 132,
    "NumMulInst": 3,
    "NumOrInst": 3,
    "NumPHIInst": 0,
    "NumRetInst": 22,
    "NumSExtInst": 3,
    "NumSelectInst": 1,
    "NumShlInst": 1,
    "NumStoreInst": 103,
    "NumSubInst": 0,
    "NumTruncInst": 6,
    "NumXorInst": 3,
    "NumZExtInst": 6,
    "TotalBlocks": 78,
    "TotalInsts": 537,
    "TotalMemInst": 375,
    "TotalFuncs": 37,
    "ArgsPhi": 0,
    "testUnary": 235
  },
  "baseline_oz_instcount": 536,
  "knowledge_base_entry": [
    "--flattencfg",
    "--early-cse-memssa",
    "--load-store-vectorizer",
    "--loop-fusion",
    "--gvn",
    "--licm",
    "--early-cse-memssa",
    "--bdce",
    "--aggressive-instcombine",
    "--lower-expect",
    "--loop-rotate",
    "--licm",
    "--adce",
    "--aggressive-instcombine",
    "--lower-expect",
    "--gvn-hoist",
    "--ipsccp",
    "--nary-reassociate",
    "--indvars",
    "--sroa",
    "--bdce",
    "--aggressive-instcombine",
    "--lower-expect",
    "--loop-rotate",
    "--licm",
    "--newgvn",
    "--sccp",
    "--loop-deletion"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--reassociate",
          "--loop-distribute",
          "--coro-elide",
          "--aggressive-instcombine",
          "--loop-versioning-licm",
          "--loop-unroll-and-jam",
          "--lower-widenable-condition",
          "--flattencfg",
          "--loop-unswitch",
          "--called-value-propagation",
          "--loop-idiom",
          "--inject-tli-mappings",
          "--instsimplify",
          "--slsr",
          "--adce",
          "--globaldce",
          "--div-rem-pairs",
          "--loweratomic",
          "--separate-const-offset-from-gep",
          "--coro-early",
          "--ipsccp",
          "--newgvn",
          "--mergefunc",
          "--always-inline",
          "--early-cse"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--reassociate",
      "--loop-distribute",
      "--coro-elide",
      "--aggressive-instcombine",
      "--loop-versioning-licm",
      "--loop-unroll-and-jam",
      "--lower-widenable-condition",
      "--flattencfg",
      "--loop-unswitch",
      "--called-value-propagation",
      "--loop-idiom",
      "--inject-tli-mappings",
      "--instsimplify",
      "--slsr",
      "--adce",
      "--globaldce",
      "--div-rem-pairs",
      "--loweratomic",
      "--separate-const-offset-from-gep",
      "--coro-early",
      "--ipsccp",
      "--newgvn",
      "--mergefunc",
      "--always-inline",
      "--early-cse"
    ],
    "performance_vs_Oz": "+0.4%"
  }
}
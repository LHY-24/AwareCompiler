{
  "program_id": "github-v0_36457.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 4,
    "onePred": 56,
    "onePredOneSuc": 41,
    "onePredTwoSuc": 14,
    "oneSuccessor": 55,
    "twoPred": 30,
    "twoPredOneSuc": 13,
    "twoEach": 11,
    "twoSuccessor": 32,
    "morePreds": 2,
    "BB03Phi": 4,
    "BBHiPhi": 0,
    "BBNoPhi": 95,
    "BeginPhi": 4,
    "BranchCount": 87,
    "returnInt": 34,
    "CriticalCount": 16,
    "NumEdges": 122,
    "const32Bit": 186,
    "const64Bit": 2,
    "numConstZeroes": 20,
    "numConstOnes": 111,
    "UncondBranches": 55,
    "binaryConstArg": 24,
    "NumAShrInst": 0,
    "NumAddInst": 14,
    "NumAllocaInst": 41,
    "NumAndInst": 0,
    "BlockMid": 9,
    "BlockLow": 90,
    "NumBitCastInst": 0,
    "NumBrInst": 87,
    "NumCallInst": 103,
    "NumGetElementPtrInst": 0,
    "NumICmpInst": 34,
    "NumLShrInst": 0,
    "NumLoadInst": 216,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 4,
    "NumRetInst": 11,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 59,
    "NumSubInst": 15,
    "NumTruncInst": 6,
    "NumXorInst": 0,
    "NumZExtInst": 2,
    "TotalBlocks": 99,
    "TotalInsts": 596,
    "TotalMemInst": 419,
    "TotalFuncs": 41,
    "ArgsPhi": 8,
    "testUnary": 267
  },
  "baseline_oz_instcount": 597,
  "knowledge_base_entry": [
    "--globalopt",
    "--loweratomic",
    "--early-cse",
    "--sroa",
    "--mldst-motion",
    "--simplifycfg",
    "--reassociate",
    "--mem2reg",
    "--instcombine",
    "--inline",
    "--slp-vectorizer",
    "--adce",
    "--simplifycfg",
    "--die",
    "--correlated-propagation",
    "--early-cse",
    "--globalopt",
    "--early-cse-memssa",
    "--dse",
    "--instcombine",
    "--jump-threading",
    "--dse",
    "--ipsccp",
    "--early-cse-memssa",
    "--gvn",
    "--lower-constant-intrinsics",
    "--bdce",
    "--inline",
    "--die"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--mergereturn",
          "--die",
          "--div-rem-pairs",
          "--loop-versioning",
          "--mldst-motion",
          "--loweratomic",
          "--float2int",
          "--coro-cleanup",
          "--deadargelim",
          "--lowerinvoke",
          "--name-anon-globals",
          "--scalarizer"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--mergereturn",
      "--die",
      "--div-rem-pairs",
      "--loop-versioning",
      "--mldst-motion",
      "--loweratomic",
      "--float2int",
      "--coro-cleanup",
      "--deadargelim",
      "--lowerinvoke",
      "--name-anon-globals",
      "--scalarizer"
    ],
    "performance_vs_Oz": "+0.2%"
  }
}
{
  "program_id": "linux-v0_8269.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 9,
    "onePredOneSuc": 6,
    "onePredTwoSuc": 2,
    "oneSuccessor": 8,
    "twoPred": 2,
    "twoPredOneSuc": 1,
    "twoEach": 0,
    "twoSuccessor": 4,
    "morePreds": 1,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 23,
    "BeginPhi": 1,
    "BranchCount": 12,
    "returnInt": 12,
    "CriticalCount": 3,
    "NumEdges": 16,
    "const32Bit": 92,
    "const64Bit": 10,
    "numConstZeroes": 28,
    "numConstOnes": 48,
    "UncondBranches": 8,
    "binaryConstArg": 18,
    "NumAShrInst": 0,
    "NumAddInst": 13,
    "NumAllocaInst": 37,
    "NumAndInst": 4,
    "BlockMid": 5,
    "BlockLow": 19,
    "NumBitCastInst": 2,
    "NumBrInst": 12,
    "NumCallInst": 32,
    "NumGetElementPtrInst": 19,
    "NumICmpInst": 6,
    "NumLShrInst": 0,
    "NumLoadInst": 70,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 1,
    "NumRetInst": 12,
    "NumSExtInst": 1,
    "NumSelectInst": 1,
    "NumShlInst": 0,
    "NumStoreInst": 37,
    "NumSubInst": 2,
    "NumTruncInst": 5,
    "NumXorInst": 1,
    "NumZExtInst": 11,
    "TotalBlocks": 24,
    "TotalInsts": 268,
    "TotalMemInst": 195,
    "TotalFuncs": 21,
    "ArgsPhi": 2,
    "testUnary": 128
  },
  "baseline_oz_instcount": 268,
  "knowledge_base_entry": [
    "--dce",
    "--licm",
    "--gvn",
    "--lower-constant-intrinsics",
    "--prune-eh",
    "--aggressive-instcombine",
    "--loop-instsimplify",
    "--simplifycfg",
    "--gvn-hoist",
    "--load-store-vectorizer",
    "--simplifycfg",
    "--instsimplify",
    "--loop-instsimplify",
    "--loop-simplifycfg",
    "--adce",
    "--aggressive-instcombine",
    "--loop-simplifycfg",
    "--dse",
    "--bdce",
    "--inline",
    "--mergefunc",
    "--slp-vectorizer"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--forceattrs",
          "--globalsplit",
          "--always-inline",
          "--aggressive-instcombine",
          "--loop-instsimplify",
          "--coro-split",
          "--gvn-hoist",
          "--called-value-propagation",
          "--partial-inliner",
          "--coro-early",
          "--loop-versioning-licm",
          "--loop-unroll",
          "--loop-vectorize",
          "--instnamer",
          "--strip-dead-prototypes",
          "--load-store-vectorizer",
          "--simple-loop-unswitch",
          "--inject-tli-mappings",
          "--consthoist"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--forceattrs",
      "--globalsplit",
      "--always-inline",
      "--aggressive-instcombine",
      "--loop-instsimplify",
      "--coro-split",
      "--gvn-hoist",
      "--called-value-propagation",
      "--partial-inliner",
      "--coro-early",
      "--loop-versioning-licm",
      "--loop-unroll",
      "--loop-vectorize",
      "--instnamer",
      "--strip-dead-prototypes",
      "--load-store-vectorizer",
      "--simple-loop-unswitch",
      "--inject-tli-mappings",
      "--consthoist"
    ],
    "performance_vs_Oz": "+1.5%"
  }
}
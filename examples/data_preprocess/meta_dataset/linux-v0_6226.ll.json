{
  "program_id": "linux-v0_6226.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 40,
    "onePredOneSuc": 29,
    "onePredTwoSuc": 11,
    "oneSuccessor": 35,
    "twoPred": 13,
    "twoPredOneSuc": 6,
    "twoEach": 3,
    "twoSuccessor": 21,
    "morePreds": 3,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 77,
    "BeginPhi": 0,
    "BranchCount": 56,
    "returnInt": 28,
    "CriticalCount": 2,
    "NumEdges": 77,
    "const32Bit": 250,
    "const64Bit": 64,
    "numConstZeroes": 88,
    "numConstOnes": 145,
    "UncondBranches": 35,
    "binaryConstArg": 42,
    "NumAShrInst": 0,
    "NumAddInst": 14,
    "NumAllocaInst": 107,
    "NumAndInst": 8,
    "BlockMid": 15,
    "BlockLow": 62,
    "NumBitCastInst": 15,
    "NumBrInst": 56,
    "NumCallInst": 84,
    "NumGetElementPtrInst": 73,
    "NumICmpInst": 23,
    "NumLShrInst": 0,
    "NumLoadInst": 230,
    "NumMulInst": 2,
    "NumOrInst": 7,
    "NumPHIInst": 0,
    "NumRetInst": 21,
    "NumSExtInst": 5,
    "NumSelectInst": 0,
    "NumShlInst": 3,
    "NumStoreInst": 143,
    "NumSubInst": 5,
    "NumTruncInst": 13,
    "NumXorInst": 2,
    "NumZExtInst": 20,
    "TotalBlocks": 77,
    "TotalInsts": 850,
    "TotalMemInst": 637,
    "TotalFuncs": 40,
    "ArgsPhi": 0,
    "testUnary": 399
  },
  "baseline_oz_instcount": 849,
  "knowledge_base_entry": [
    "--loop-idiom",
    "--jump-threading",
    "--ipsccp",
    "--instsimplify",
    "--aggressive-instcombine",
    "--loweratomic",
    "--early-cse-memssa",
    "--lower-expect",
    "--elim-avail-extern",
    "--bdce",
    "--simplifycfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--prune-eh",
          "--called-value-propagation",
          "--functionattrs",
          "--globalopt",
          "--loop-rotate",
          "--aggressive-instcombine",
          "--tailcallelim",
          "-loop-reduce",
          "--attributor",
          "--loop-predication",
          "--partial-inliner",
          "--hotcoldsplit",
          "--add-discriminators",
          "--flattencfg",
          "--irce",
          "--lower-guard-intrinsic",
          "--ipsccp",
          "--insert-gcov-profiling",
          "--lowerinvoke",
          "--redundant-dbg-inst-elim",
          "--lower-matrix-intrinsics",
          "--coro-split",
          "--loop-guard-widening",
          "--loop-versioning-licm",
          "--inject-tli-mappings",
          "--loop-deletion",
          "--simple-loop-unswitch"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--prune-eh",
      "--called-value-propagation",
      "--functionattrs",
      "--globalopt",
      "--loop-rotate",
      "--aggressive-instcombine",
      "--tailcallelim",
      "-loop-reduce",
      "--attributor",
      "--loop-predication",
      "--partial-inliner",
      "--hotcoldsplit",
      "--add-discriminators",
      "--flattencfg",
      "--irce",
      "--lower-guard-intrinsic",
      "--ipsccp",
      "--insert-gcov-profiling",
      "--lowerinvoke",
      "--redundant-dbg-inst-elim",
      "--lower-matrix-intrinsics",
      "--coro-split",
      "--loop-guard-widening",
      "--loop-versioning-licm",
      "--inject-tli-mappings",
      "--loop-deletion",
      "--simple-loop-unswitch"
    ],
    "performance_vs_Oz": "+1.3%"
  }
}
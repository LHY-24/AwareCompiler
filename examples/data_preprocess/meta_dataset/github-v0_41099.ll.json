{
  "program_id": "github-v0_41099.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 52,
    "onePredOneSuc": 32,
    "onePredTwoSuc": 20,
    "oneSuccessor": 39,
    "twoPred": 14,
    "twoPredOneSuc": 5,
    "twoEach": 6,
    "twoSuccessor": 34,
    "morePreds": 7,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 78,
    "BeginPhi": 0,
    "BranchCount": 73,
    "returnInt": 11,
    "CriticalCount": 17,
    "NumEdges": 107,
    "const32Bit": 634,
    "const64Bit": 36,
    "numConstZeroes": 416,
    "numConstOnes": 119,
    "UncondBranches": 39,
    "binaryConstArg": 32,
    "NumAShrInst": 0,
    "NumAddInst": 8,
    "NumAllocaInst": 47,
    "NumAndInst": 11,
    "BlockMid": 18,
    "BlockLow": 60,
    "NumBitCastInst": 15,
    "NumBrInst": 73,
    "NumCallInst": 38,
    "NumGetElementPtrInst": 276,
    "NumICmpInst": 37,
    "NumLShrInst": 0,
    "NumLoadInst": 285,
    "NumMulInst": 0,
    "NumOrInst": 5,
    "NumPHIInst": 0,
    "NumRetInst": 5,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 3,
    "NumStoreInst": 123,
    "NumSubInst": 10,
    "NumTruncInst": 19,
    "NumXorInst": 0,
    "NumZExtInst": 35,
    "TotalBlocks": 78,
    "TotalInsts": 994,
    "TotalMemInst": 769,
    "TotalFuncs": 19,
    "ArgsPhi": 0,
    "testUnary": 405
  },
  "baseline_oz_instcount": 995,
  "knowledge_base_entry": [
    "--partially-inline-libcalls",
    "--gvn",
    "--instsimplify",
    "--sroa",
    "--die",
    "--early-cse",
    "--jump-threading",
    "--reassociate",
    "--gvn",
    "--bdce",
    "--aggressive-instcombine",
    "--adce",
    "--gvn",
    "--sroa",
    "--correlated-propagation",
    "--dse",
    "--globalopt",
    "--ipsccp",
    "--reassociate",
    "--aggressive-instcombine",
    "--globalopt",
    "--early-cse-memssa",
    "--prune-eh",
    "--sroa",
    "--early-cse",
    "--newgvn",
    "--gvn",
    "--ipsccp",
    "--die",
    "--inline",
    "--aggressive-instcombine",
    "--dse",
    "--gvn-hoist",
    "--dce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--aggressive-instcombine",
          "--simplifycfg",
          "--hotcoldsplit",
          "--loop-unroll",
          "--loop-deletion",
          "--flattencfg",
          "--coro-cleanup",
          "--argpromotion",
          "--inject-tli-mappings",
          "--rewrite-statepoints-for-gc",
          "--licm",
          "-loop-reduce",
          "--barrier",
          "--insert-gcov-profiling"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--aggressive-instcombine",
      "--simplifycfg",
      "--hotcoldsplit",
      "--loop-unroll",
      "--loop-deletion",
      "--flattencfg",
      "--coro-cleanup",
      "--argpromotion",
      "--inject-tli-mappings",
      "--rewrite-statepoints-for-gc",
      "--licm",
      "-loop-reduce",
      "--barrier",
      "--insert-gcov-profiling"
    ],
    "performance_vs_Oz": "+2.4%"
  }
}
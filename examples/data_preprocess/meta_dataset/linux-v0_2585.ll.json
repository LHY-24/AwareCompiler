{
  "program_id": "linux-v0_2585.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 83,
    "onePredOneSuc": 63,
    "onePredTwoSuc": 19,
    "oneSuccessor": 81,
    "twoPred": 36,
    "twoPredOneSuc": 15,
    "twoEach": 11,
    "twoSuccessor": 37,
    "morePreds": 5,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 147,
    "BeginPhi": 0,
    "BranchCount": 118,
    "returnInt": 28,
    "CriticalCount": 15,
    "NumEdges": 177,
    "const32Bit": 448,
    "const64Bit": 18,
    "numConstZeroes": 217,
    "numConstOnes": 137,
    "UncondBranches": 81,
    "binaryConstArg": 15,
    "NumAShrInst": 0,
    "NumAddInst": 5,
    "NumAllocaInst": 98,
    "NumAndInst": 3,
    "BlockMid": 14,
    "BlockLow": 133,
    "NumBitCastInst": 29,
    "NumBrInst": 118,
    "NumCallInst": 63,
    "NumGetElementPtrInst": 127,
    "NumICmpInst": 38,
    "NumLShrInst": 0,
    "NumLoadInst": 279,
    "NumMulInst": 1,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 23,
    "NumSExtInst": 7,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 157,
    "NumSubInst": 3,
    "NumTruncInst": 1,
    "NumXorInst": 2,
    "NumZExtInst": 3,
    "TotalBlocks": 147,
    "TotalInsts": 970,
    "TotalMemInst": 724,
    "TotalFuncs": 48,
    "ArgsPhi": 0,
    "testUnary": 421
  },
  "baseline_oz_instcount": 970,
  "knowledge_base_entry": [
    "--sink",
    "--newgvn",
    "--loop-rotate",
    "--instcombine",
    "--load-store-vectorizer",
    "--simplifycfg",
    "--flattencfg",
    "--instcombine",
    "--correlated-propagation",
    "--simplifycfg",
    "--adce",
    "--mergefunc",
    "--loop-simplifycfg",
    "--newgvn",
    "--adce",
    "--bdce",
    "--instcombine",
    "--memcpyopt",
    "--early-cse",
    "--instsimplify",
    "--early-cse-memssa",
    "--aggressive-instcombine"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--lower-expect",
          "--mergefunc",
          "--constmerge",
          "--die",
          "--globalsplit",
          "--loop-rotate",
          "--mergereturn",
          "--early-cse",
          "--slp-vectorizer",
          "--coro-early",
          "--name-anon-globals",
          "--ee-instrument"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--lower-expect",
      "--mergefunc",
      "--constmerge",
      "--die",
      "--globalsplit",
      "--loop-rotate",
      "--mergereturn",
      "--early-cse",
      "--slp-vectorizer",
      "--coro-early",
      "--name-anon-globals",
      "--ee-instrument"
    ],
    "performance_vs_Oz": "+2.9%"
  }
}
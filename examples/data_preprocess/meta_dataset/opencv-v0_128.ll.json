{
  "program_id": "opencv-v0_128.ll",
  "autophase_features": {
    "BBNumArgsHi": 6,
    "BBNumArgsLo": 31,
    "onePred": 87,
    "onePredOneSuc": 47,
    "onePredTwoSuc": 38,
    "oneSuccessor": 56,
    "twoPred": 33,
    "twoPredOneSuc": 6,
    "twoEach": 21,
    "twoSuccessor": 73,
    "morePreds": 11,
    "BB03Phi": 37,
    "BBHiPhi": 0,
    "BBNoPhi": 106,
    "BeginPhi": 37,
    "BranchCount": 129,
    "returnInt": 20,
    "CriticalCount": 59,
    "NumEdges": 202,
    "const32Bit": 267,
    "const64Bit": 90,
    "numConstZeroes": 132,
    "numConstOnes": 70,
    "UncondBranches": 56,
    "binaryConstArg": 95,
    "NumAShrInst": 4,
    "NumAddInst": 29,
    "NumAllocaInst": 0,
    "NumAndInst": 39,
    "BlockMid": 4,
    "BlockLow": 139,
    "NumBitCastInst": 7,
    "NumBrInst": 129,
    "NumCallInst": 24,
    "NumGetElementPtrInst": 71,
    "NumICmpInst": 82,
    "NumLShrInst": 16,
    "NumLoadInst": 82,
    "NumMulInst": 0,
    "NumOrInst": 23,
    "NumPHIInst": 55,
    "NumRetInst": 12,
    "NumSExtInst": 5,
    "NumSelectInst": 6,
    "NumShlInst": 19,
    "NumStoreInst": 57,
    "NumSubInst": 2,
    "NumTruncInst": 9,
    "NumXorInst": 2,
    "NumZExtInst": 25,
    "TotalBlocks": 143,
    "TotalInsts": 700,
    "TotalMemInst": 234,
    "TotalFuncs": 18,
    "ArgsPhi": 138,
    "testUnary": 128
  },
  "baseline_oz_instcount": 689,
  "knowledge_base_entry": [
    "--loop-unroll",
    "--newgvn",
    "--prune-eh",
    "--sroa",
    "--memcpyopt",
    "--mem2reg",
    "--dse",
    "--elim-avail-extern",
    "--jump-threading",
    "--gvn",
    "--loop-rotate",
    "--lower-constant-intrinsics",
    "--instcombine",
    "--slp-vectorizer",
    "--die",
    "--mergefunc",
    "--gvn-hoist",
    "--globalopt",
    "--gvn-hoist",
    "--licm",
    "--slp-vectorizer",
    "--jump-threading",
    "--bdce",
    "--mergefunc",
    "--early-cse",
    "--gvn",
    "--aggressive-instcombine",
    "--globaldce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--dce",
          "--loop-versioning",
          "--add-discriminators",
          "--mergereturn",
          "--mem2reg",
          "-loop-reduce",
          "--elim-avail-extern",
          "--loop-data-prefetch",
          "--irce",
          "--gvn-hoist",
          "--tailcallelim",
          "--memcpyopt",
          "--attributor",
          "--adce",
          "--partially-inline-libcalls",
          "--loop-guard-widening",
          "--loop-unroll-and-jam",
          "--lower-widenable-condition",
          "--cross-dso-cfi",
          "--loop-load-elim",
          "--redundant-dbg-inst-elim",
          "--sink",
          "--jump-threading",
          "--early-cse",
          "--gvn",
          "--post-inline-ee-instrument"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--dce",
      "--loop-versioning",
      "--add-discriminators",
      "--mergereturn",
      "--mem2reg",
      "-loop-reduce",
      "--elim-avail-extern",
      "--loop-data-prefetch",
      "--irce",
      "--gvn-hoist",
      "--tailcallelim",
      "--memcpyopt",
      "--attributor",
      "--adce",
      "--partially-inline-libcalls",
      "--loop-guard-widening",
      "--loop-unroll-and-jam",
      "--lower-widenable-condition",
      "--cross-dso-cfi",
      "--loop-load-elim",
      "--redundant-dbg-inst-elim",
      "--sink",
      "--jump-threading",
      "--early-cse",
      "--gvn",
      "--post-inline-ee-instrument"
    ],
    "performance_vs_Oz": "+0.4%"
  }
}
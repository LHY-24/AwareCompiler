{
  "program_id": "github-v0_40809.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 14,
    "onePredOneSuc": 9,
    "onePredTwoSuc": 2,
    "oneSuccessor": 12,
    "twoPred": 6,
    "twoPredOneSuc": 2,
    "twoEach": 4,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 23,
    "BeginPhi": 0,
    "BranchCount": 19,
    "returnInt": 4,
    "CriticalCount": 1,
    "NumEdges": 26,
    "const32Bit": 38,
    "const64Bit": 51,
    "numConstZeroes": 51,
    "numConstOnes": 29,
    "UncondBranches": 12,
    "binaryConstArg": 11,
    "NumAShrInst": 0,
    "NumAddInst": 4,
    "NumAllocaInst": 14,
    "NumAndInst": 2,
    "BlockMid": 6,
    "BlockLow": 17,
    "NumBitCastInst": 12,
    "NumBrInst": 19,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 38,
    "NumICmpInst": 7,
    "NumLShrInst": 2,
    "NumLoadInst": 41,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 25,
    "NumSubInst": 0,
    "NumTruncInst": 3,
    "NumXorInst": 1,
    "NumZExtInst": 8,
    "TotalBlocks": 23,
    "TotalInsts": 193,
    "TotalMemInst": 125,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 81
  },
  "baseline_oz_instcount": 193,
  "knowledge_base_entry": [
    "--mem2reg",
    "--instsimplify",
    "--ipsccp",
    "--aggressive-instcombine",
    "--lower-constant-intrinsics",
    "--aggressive-instcombine",
    "--mem2reg",
    "--sccp",
    "--early-cse-memssa",
    "--loop-fusion",
    "--gvn",
    "--loop-rotate",
    "--early-cse",
    "--slp-vectorizer",
    "--loop-simplifycfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--slsr",
          "--dse",
          "--libcalls-shrinkwrap",
          "--loop-idiom",
          "-loop-reduce",
          "--adce",
          "--callsite-splitting",
          "--aggressive-instcombine",
          "--flattencfg",
          "--infer-address-spaces",
          "--jump-threading",
          "--mergeicmps",
          "--correlated-propagation"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.0%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--slsr",
      "--dse",
      "--libcalls-shrinkwrap",
      "--loop-idiom",
      "-loop-reduce",
      "--adce",
      "--callsite-splitting",
      "--aggressive-instcombine",
      "--flattencfg",
      "--infer-address-spaces",
      "--jump-threading",
      "--mergeicmps",
      "--correlated-propagation"
    ],
    "performance_vs_Oz": "+1.0%"
  }
}
{
  "program_id": "linux-v0_2227.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 40,
    "onePredOneSuc": 34,
    "onePredTwoSuc": 4,
    "oneSuccessor": 40,
    "twoPred": 14,
    "twoPredOneSuc": 2,
    "twoEach": 4,
    "twoSuccessor": 14,
    "morePreds": 2,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 77,
    "BeginPhi": 2,
    "BranchCount": 54,
    "returnInt": 13,
    "CriticalCount": 5,
    "NumEdges": 78,
    "const32Bit": 182,
    "const64Bit": 7,
    "numConstZeroes": 67,
    "numConstOnes": 92,
    "UncondBranches": 40,
    "binaryConstArg": 18,
    "NumAShrInst": 1,
    "NumAddInst": 5,
    "NumAllocaInst": 72,
    "NumAndInst": 4,
    "BlockMid": 9,
    "BlockLow": 70,
    "NumBitCastInst": 29,
    "NumBrInst": 54,
    "NumCallInst": 36,
    "NumGetElementPtrInst": 39,
    "NumICmpInst": 15,
    "NumLShrInst": 2,
    "NumLoadInst": 148,
    "NumMulInst": 0,
    "NumOrInst": 2,
    "NumPHIInst": 2,
    "NumRetInst": 23,
    "NumSExtInst": 7,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 96,
    "NumSubInst": 0,
    "NumTruncInst": 8,
    "NumXorInst": 4,
    "NumZExtInst": 11,
    "TotalBlocks": 79,
    "TotalInsts": 562,
    "TotalMemInst": 391,
    "TotalFuncs": 34,
    "ArgsPhi": 4,
    "testUnary": 275
  },
  "baseline_oz_instcount": 561,
  "knowledge_base_entry": [
    "--scalarizer",
    "--early-cse",
    "--loop-deletion",
    "--loop-simplifycfg",
    "--early-cse",
    "--ipsccp",
    "--early-cse",
    "--aggressive-instcombine",
    "--globalopt",
    "--lower-constant-intrinsics",
    "--loop-instsimplify",
    "--instcombine",
    "--gvn-hoist",
    "--load-store-vectorizer"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-versioning",
          "--aggressive-instcombine",
          "--lower-guard-intrinsic",
          "--loop-instsimplify",
          "--guard-widening",
          "--loop-versioning-licm",
          "--ipsccp",
          "--jump-threading",
          "--gvn-hoist",
          "--loop-simplifycfg",
          "--mergereturn",
          "--rewrite-statepoints-for-gc",
          "--loop-load-elim",
          "--die",
          "--loop-guard-widening",
          "--loop-sink",
          "--strip-debug-declare",
          "--name-anon-globals",
          "--globalopt",
          "--tailcallelim",
          "--ipconstprop",
          "--loop-simplify",
          "--called-value-propagation",
          "--adce"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-versioning",
      "--aggressive-instcombine",
      "--lower-guard-intrinsic",
      "--loop-instsimplify",
      "--guard-widening",
      "--loop-versioning-licm",
      "--ipsccp",
      "--jump-threading",
      "--gvn-hoist",
      "--loop-simplifycfg",
      "--mergereturn",
      "--rewrite-statepoints-for-gc",
      "--loop-load-elim",
      "--die",
      "--loop-guard-widening",
      "--loop-sink",
      "--strip-debug-declare",
      "--name-anon-globals",
      "--globalopt",
      "--tailcallelim",
      "--ipconstprop",
      "--loop-simplify",
      "--called-value-propagation",
      "--adce"
    ],
    "performance_vs_Oz": "+0.4%"
  }
}
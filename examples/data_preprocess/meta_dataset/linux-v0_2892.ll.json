{
  "program_id": "linux-v0_2892.ll",
  "autophase_features": {
    "BBNumArgsHi": 1,
    "BBNumArgsLo": 1,
    "onePred": 35,
    "onePredOneSuc": 17,
    "onePredTwoSuc": 18,
    "oneSuccessor": 27,
    "twoPred": 18,
    "twoPredOneSuc": 8,
    "twoEach": 7,
    "twoSuccessor": 30,
    "morePreds": 4,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 63,
    "BeginPhi": 2,
    "BranchCount": 57,
    "returnInt": 10,
    "CriticalCount": 27,
    "NumEdges": 87,
    "const32Bit": 255,
    "const64Bit": 40,
    "numConstZeroes": 172,
    "numConstOnes": 84,
    "UncondBranches": 27,
    "binaryConstArg": 33,
    "NumAShrInst": 2,
    "NumAddInst": 2,
    "NumAllocaInst": 51,
    "NumAndInst": 4,
    "BlockMid": 13,
    "BlockLow": 52,
    "NumBitCastInst": 21,
    "NumBrInst": 57,
    "NumCallInst": 35,
    "NumGetElementPtrInst": 108,
    "NumICmpInst": 23,
    "NumLShrInst": 0,
    "NumLoadInst": 172,
    "NumMulInst": 4,
    "NumOrInst": 0,
    "NumPHIInst": 2,
    "NumRetInst": 8,
    "NumSExtInst": 7,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 78,
    "NumSubInst": 8,
    "NumTruncInst": 9,
    "NumXorInst": 17,
    "NumZExtInst": 17,
    "TotalBlocks": 65,
    "TotalInsts": 629,
    "TotalMemInst": 444,
    "TotalFuncs": 24,
    "ArgsPhi": 9,
    "testUnary": 277
  },
  "baseline_oz_instcount": 611,
  "knowledge_base_entry": [
    "--ipsccp",
    "--ipsccp",
    "--elim-avail-extern",
    "--aggressive-instcombine",
    "--load-store-vectorizer",
    "--reassociate",
    "--sroa",
    "--loop-reroll",
    "--nary-reassociate",
    "--loop-simplifycfg",
    "--lower-expect",
    "--ipsccp",
    "--ipsccp",
    "--elim-avail-extern",
    "--aggressive-instcombine",
    "--load-store-vectorizer",
    "--dce",
    "--aggressive-instcombine",
    "--ipsccp",
    "--globaldce",
    "--mergefunc"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--irce",
          "--strip",
          "--prune-eh",
          "--called-value-propagation",
          "--loop-idiom",
          "--dse",
          "--early-cse",
          "--globalopt",
          "--always-inline",
          "--flattencfg",
          "--functionattrs",
          "--constmerge",
          "--coro-elide",
          "--rpo-functionattrs",
          "--aggressive-instcombine",
          "--mergereturn",
          "--loop-guard-widening",
          "--correlated-propagation",
          "--div-rem-pairs",
          "--coro-cleanup",
          "--coro-split",
          "--loop-instsimplify",
          "--loop-unroll",
          "--hotcoldsplit",
          "--gvn-hoist",
          "--loop-predication",
          "--sink",
          "--alignment-from-assumptions",
          "--lowerswitch"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--irce",
      "--strip",
      "--prune-eh",
      "--called-value-propagation",
      "--loop-idiom",
      "--dse",
      "--early-cse",
      "--globalopt",
      "--always-inline",
      "--flattencfg",
      "--functionattrs",
      "--constmerge",
      "--coro-elide",
      "--rpo-functionattrs",
      "--aggressive-instcombine",
      "--mergereturn",
      "--loop-guard-widening",
      "--correlated-propagation",
      "--div-rem-pairs",
      "--coro-cleanup",
      "--coro-split",
      "--loop-instsimplify",
      "--loop-unroll",
      "--hotcoldsplit",
      "--gvn-hoist",
      "--loop-predication",
      "--sink",
      "--alignment-from-assumptions",
      "--lowerswitch"
    ],
    "performance_vs_Oz": "+0.3%"
  }
}
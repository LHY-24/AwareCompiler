{
  "program_id": "linux-v0_10184.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 47,
    "onePredOneSuc": 35,
    "onePredTwoSuc": 11,
    "oneSuccessor": 43,
    "twoPred": 15,
    "twoPredOneSuc": 5,
    "twoEach": 4,
    "twoSuccessor": 23,
    "morePreds": 4,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 86,
    "BeginPhi": 1,
    "BranchCount": 65,
    "returnInt": 11,
    "CriticalCount": 11,
    "NumEdges": 89,
    "const32Bit": 322,
    "const64Bit": 20,
    "numConstZeroes": 151,
    "numConstOnes": 131,
    "UncondBranches": 43,
    "binaryConstArg": 11,
    "NumAShrInst": 0,
    "NumAddInst": 5,
    "NumAllocaInst": 84,
    "NumAndInst": 1,
    "BlockMid": 14,
    "BlockLow": 73,
    "NumBitCastInst": 15,
    "NumBrInst": 65,
    "NumCallInst": 43,
    "NumGetElementPtrInst": 122,
    "NumICmpInst": 24,
    "NumLShrInst": 0,
    "NumLoadInst": 215,
    "NumMulInst": 0,
    "NumOrInst": 3,
    "NumPHIInst": 1,
    "NumRetInst": 21,
    "NumSExtInst": 23,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 122,
    "NumSubInst": 0,
    "NumTruncInst": 6,
    "NumXorInst": 4,
    "NumZExtInst": 16,
    "TotalBlocks": 87,
    "TotalInsts": 781,
    "TotalMemInst": 586,
    "TotalFuncs": 36,
    "ArgsPhi": 2,
    "testUnary": 368
  },
  "baseline_oz_instcount": 782,
  "knowledge_base_entry": [
    "--strip-nondebug",
    "--mergefunc",
    "--aggressive-instcombine",
    "--jump-threading",
    "--lower-constant-intrinsics",
    "--lower-expect",
    "--die",
    "--newgvn",
    "--gvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--aggressive-instcombine",
          "--functionattrs",
          "-loop-reduce",
          "--load-store-vectorizer",
          "--argpromotion",
          "--constmerge",
          "--attributor",
          "--guard-widening",
          "--mldst-motion",
          "--instsimplify"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--aggressive-instcombine",
      "--functionattrs",
      "-loop-reduce",
      "--load-store-vectorizer",
      "--argpromotion",
      "--constmerge",
      "--attributor",
      "--guard-widening",
      "--mldst-motion",
      "--instsimplify"
    ],
    "performance_vs_Oz": "+1.2%"
  }
}
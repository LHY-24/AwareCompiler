{
  "program_id": "linux-v0_12605.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 11,
    "onePredOneSuc": 8,
    "onePredTwoSuc": 3,
    "oneSuccessor": 8,
    "twoPred": 1,
    "twoPredOneSuc": 0,
    "twoEach": 1,
    "twoSuccessor": 6,
    "morePreds": 2,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 18,
    "BeginPhi": 1,
    "BranchCount": 14,
    "returnInt": 2,
    "CriticalCount": 1,
    "NumEdges": 20,
    "const32Bit": 57,
    "const64Bit": 10,
    "numConstZeroes": 22,
    "numConstOnes": 35,
    "UncondBranches": 8,
    "binaryConstArg": 6,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 25,
    "NumAndInst": 0,
    "BlockMid": 5,
    "BlockLow": 14,
    "NumBitCastInst": 6,
    "NumBrInst": 14,
    "NumCallInst": 11,
    "NumGetElementPtrInst": 14,
    "NumICmpInst": 8,
    "NumLShrInst": 0,
    "NumLoadInst": 48,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 1,
    "NumRetInst": 5,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 37,
    "NumSubInst": 0,
    "NumTruncInst": 2,
    "NumXorInst": 5,
    "NumZExtInst": 7,
    "TotalBlocks": 19,
    "TotalInsts": 186,
    "TotalMemInst": 135,
    "TotalFuncs": 6,
    "ArgsPhi": 2,
    "testUnary": 90
  },
  "baseline_oz_instcount": 186,
  "knowledge_base_entry": [
    "--loop-unroll",
    "--early-cse-memssa",
    "--instsimplify",
    "--aggressive-instcombine",
    "--mem2reg",
    "--nary-reassociate",
    "-loop-reduce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--rewrite-statepoints-for-gc",
          "--partial-inliner",
          "--loop-reroll",
          "--cross-dso-cfi",
          "--libcalls-shrinkwrap",
          "--infer-address-spaces",
          "--slp-vectorizer",
          "--loop-unswitch",
          "--guard-widening",
          "--mergefunc",
          "--loop-simplify",
          "--lower-expect",
          "--loop-predication",
          "--early-cse",
          "--prune-eh",
          "--inject-tli-mappings",
          "--globaldce",
          "--loop-unroll-and-jam",
          "--consthoist",
          "--callsite-splitting",
          "--canonicalize-aliases",
          "--aggressive-instcombine",
          "--dse",
          "--forceattrs",
          "--constmerge",
          "--load-store-vectorizer",
          "--constprop"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--rewrite-statepoints-for-gc",
      "--partial-inliner",
      "--loop-reroll",
      "--cross-dso-cfi",
      "--libcalls-shrinkwrap",
      "--infer-address-spaces",
      "--slp-vectorizer",
      "--loop-unswitch",
      "--guard-widening",
      "--mergefunc",
      "--loop-simplify",
      "--lower-expect",
      "--loop-predication",
      "--early-cse",
      "--prune-eh",
      "--inject-tli-mappings",
      "--globaldce",
      "--loop-unroll-and-jam",
      "--consthoist",
      "--callsite-splitting",
      "--canonicalize-aliases",
      "--aggressive-instcombine",
      "--dse",
      "--forceattrs",
      "--constmerge",
      "--load-store-vectorizer",
      "--constprop"
    ],
    "performance_vs_Oz": "+0.5%"
  }
}
{
  "program_id": "github-v0_27350.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 66,
    "onePredOneSuc": 44,
    "onePredTwoSuc": 19,
    "oneSuccessor": 60,
    "twoPred": 34,
    "twoPredOneSuc": 13,
    "twoEach": 12,
    "twoSuccessor": 44,
    "morePreds": 4,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 122,
    "BeginPhi": 0,
    "BranchCount": 104,
    "returnInt": 1,
    "CriticalCount": 22,
    "NumEdges": 148,
    "const32Bit": 112,
    "const64Bit": 50,
    "numConstZeroes": 34,
    "numConstOnes": 71,
    "UncondBranches": 60,
    "binaryConstArg": 31,
    "NumAShrInst": 0,
    "NumAddInst": 7,
    "NumAllocaInst": 64,
    "NumAndInst": 0,
    "BlockMid": 9,
    "BlockLow": 113,
    "NumBitCastInst": 7,
    "NumBrInst": 104,
    "NumCallInst": 52,
    "NumGetElementPtrInst": 27,
    "NumICmpInst": 44,
    "NumLShrInst": 2,
    "NumLoadInst": 220,
    "NumMulInst": 6,
    "NumOrInst": 4,
    "NumPHIInst": 0,
    "NumRetInst": 18,
    "NumSExtInst": 9,
    "NumSelectInst": 0,
    "NumShlInst": 5,
    "NumStoreInst": 122,
    "NumSubInst": 11,
    "NumTruncInst": 4,
    "NumXorInst": 0,
    "NumZExtInst": 3,
    "TotalBlocks": 122,
    "TotalInsts": 717,
    "TotalMemInst": 485,
    "TotalFuncs": 32,
    "ArgsPhi": 0,
    "testUnary": 309
  },
  "baseline_oz_instcount": 717,
  "knowledge_base_entry": [
    "--loop-deletion",
    "--newgvn",
    "--early-cse",
    "--loop-simplifycfg",
    "--mem2reg",
    "--early-cse-memssa",
    "--adce",
    "--aggressive-instcombine",
    "--dse",
    "--lower-expect",
    "--loop-simplifycfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--strip-debug-declare",
          "--nary-reassociate",
          "--aggressive-instcombine",
          "--consthoist",
          "--sroa",
          "--always-inline",
          "--globaldce",
          "--strip-nondebug",
          "--coro-elide",
          "--loop-distribute",
          "--loop-unswitch",
          "--post-inline-ee-instrument",
          "--reassociate",
          "--lower-guard-intrinsic",
          "--partially-inline-libcalls",
          "--partial-inliner",
          "--loop-vectorize",
          "--licm",
          "--infer-address-spaces",
          "--tailcallelim",
          "--loop-idiom",
          "--lowerswitch",
          "--early-cse-memssa",
          "--dce",
          "--bdce",
          "--redundant-dbg-inst-elim"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--strip-debug-declare",
      "--nary-reassociate",
      "--aggressive-instcombine",
      "--consthoist",
      "--sroa",
      "--always-inline",
      "--globaldce",
      "--strip-nondebug",
      "--coro-elide",
      "--loop-distribute",
      "--loop-unswitch",
      "--post-inline-ee-instrument",
      "--reassociate",
      "--lower-guard-intrinsic",
      "--partially-inline-libcalls",
      "--partial-inliner",
      "--loop-vectorize",
      "--licm",
      "--infer-address-spaces",
      "--tailcallelim",
      "--loop-idiom",
      "--lowerswitch",
      "--early-cse-memssa",
      "--dce",
      "--bdce",
      "--redundant-dbg-inst-elim"
    ],
    "performance_vs_Oz": "+0.3%"
  }
}
{
  "program_id": "github-v0_18833.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 15,
    "onePredOneSuc": 10,
    "onePredTwoSuc": 2,
    "oneSuccessor": 13,
    "twoPred": 6,
    "twoPredOneSuc": 2,
    "twoEach": 4,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 24,
    "BeginPhi": 0,
    "BranchCount": 20,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 27,
    "const32Bit": 41,
    "const64Bit": 30,
    "numConstZeroes": 36,
    "numConstOnes": 23,
    "UncondBranches": 13,
    "binaryConstArg": 12,
    "NumAShrInst": 0,
    "NumAddInst": 8,
    "NumAllocaInst": 14,
    "NumAndInst": 1,
    "BlockMid": 4,
    "BlockLow": 20,
    "NumBitCastInst": 4,
    "NumBrInst": 20,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 23,
    "NumICmpInst": 7,
    "NumLShrInst": 1,
    "NumLoadInst": 37,
    "NumMulInst": 1,
    "NumOrInst": 2,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 21,
    "NumSubInst": 0,
    "NumTruncInst": 3,
    "NumXorInst": 1,
    "NumZExtInst": 7,
    "TotalBlocks": 24,
    "TotalInsts": 166,
    "TotalMemInst": 102,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 68
  },
  "baseline_oz_instcount": 166,
  "knowledge_base_entry": [
    "--bdce",
    "--lower-constant-intrinsics",
    "--aggressive-instcombine",
    "--dce",
    "--die",
    "--newgvn",
    "--elim-avail-extern",
    "--nary-reassociate",
    "--licm",
    "--lower-expect",
    "--loop-simplifycfg",
    "--newgvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--scalarizer",
          "--coro-early",
          "--barrier",
          "--partially-inline-libcalls",
          "--alignment-from-assumptions",
          "--sroa",
          "--loop-reroll",
          "--loop-unroll-and-jam",
          "--ee-instrument",
          "--simple-loop-unswitch",
          "--aggressive-instcombine",
          "--early-cse",
          "--loop-load-elim",
          "--partial-inliner",
          "--slp-vectorizer",
          "--loop-instsimplify",
          "--sink",
          "--loop-rotate"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--scalarizer",
      "--coro-early",
      "--barrier",
      "--partially-inline-libcalls",
      "--alignment-from-assumptions",
      "--sroa",
      "--loop-reroll",
      "--loop-unroll-and-jam",
      "--ee-instrument",
      "--simple-loop-unswitch",
      "--aggressive-instcombine",
      "--early-cse",
      "--loop-load-elim",
      "--partial-inliner",
      "--slp-vectorizer",
      "--loop-instsimplify",
      "--sink",
      "--loop-rotate"
    ],
    "performance_vs_Oz": "+2.4%"
  }
}
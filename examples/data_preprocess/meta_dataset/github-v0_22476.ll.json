{
  "program_id": "github-v0_22476.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 4,
    "onePredOneSuc": 2,
    "onePredTwoSuc": 2,
    "oneSuccessor": 4,
    "twoPred": 3,
    "twoPredOneSuc": 1,
    "twoEach": 1,
    "twoSuccessor": 3,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 8,
    "BeginPhi": 0,
    "BranchCount": 7,
    "returnInt": 0,
    "CriticalCount": 3,
    "NumEdges": 10,
    "const32Bit": 8,
    "const64Bit": 1,
    "numConstZeroes": 4,
    "numConstOnes": 4,
    "UncondBranches": 4,
    "binaryConstArg": 0,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 3,
    "NumAndInst": 0,
    "BlockMid": 0,
    "BlockLow": 8,
    "NumBitCastInst": 5,
    "NumBrInst": 7,
    "NumCallInst": 0,
    "NumGetElementPtrInst": 3,
    "NumICmpInst": 2,
    "NumLShrInst": 0,
    "NumLoadInst": 8,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 1,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 4,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 8,
    "TotalInsts": 34,
    "TotalMemInst": 18,
    "TotalFuncs": 1,
    "ArgsPhi": 0,
    "testUnary": 16
  },
  "baseline_oz_instcount": 35,
  "knowledge_base_entry": [
    "--strip-nondebug",
    "--mergefunc",
    "--ipsccp",
    "--nary-reassociate",
    "--lower-expect",
    "--adce",
    "--inline"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--pgo-memop-opt",
          "--cross-dso-cfi",
          "--sancov",
          "--add-discriminators",
          "--canonicalize-aliases",
          "--scalarizer",
          "--elim-avail-extern",
          "--alignment-from-assumptions",
          "--deadargelim",
          "--called-value-propagation"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--pgo-memop-opt",
      "--cross-dso-cfi",
      "--sancov",
      "--add-discriminators",
      "--canonicalize-aliases",
      "--scalarizer",
      "--elim-avail-extern",
      "--alignment-from-assumptions",
      "--deadargelim",
      "--called-value-propagation"
    ],
    "performance_vs_Oz": "+2.9%"
  }
}
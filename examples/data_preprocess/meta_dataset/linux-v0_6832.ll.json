{
  "program_id": "linux-v0_6832.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 55,
    "onePredOneSuc": 36,
    "onePredTwoSuc": 18,
    "oneSuccessor": 57,
    "twoPred": 26,
    "twoPredOneSuc": 18,
    "twoEach": 8,
    "twoSuccessor": 27,
    "morePreds": 7,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 96,
    "BeginPhi": 0,
    "BranchCount": 84,
    "returnInt": 12,
    "CriticalCount": 32,
    "NumEdges": 142,
    "const32Bit": 279,
    "const64Bit": 9,
    "numConstZeroes": 123,
    "numConstOnes": 65,
    "UncondBranches": 57,
    "binaryConstArg": 13,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 42,
    "NumAndInst": 9,
    "BlockMid": 12,
    "BlockLow": 84,
    "NumBitCastInst": 3,
    "NumBrInst": 84,
    "NumCallInst": 69,
    "NumGetElementPtrInst": 75,
    "NumICmpInst": 26,
    "NumLShrInst": 0,
    "NumLoadInst": 213,
    "NumMulInst": 0,
    "NumOrInst": 3,
    "NumPHIInst": 0,
    "NumRetInst": 8,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 78,
    "NumSubInst": 0,
    "NumTruncInst": 21,
    "NumXorInst": 0,
    "NumZExtInst": 18,
    "TotalBlocks": 96,
    "TotalInsts": 658,
    "TotalMemInst": 477,
    "TotalFuncs": 30,
    "ArgsPhi": 0,
    "testUnary": 300
  },
  "baseline_oz_instcount": 658,
  "knowledge_base_entry": [
    "--partially-inline-libcalls",
    "--gvn",
    "--gvn-hoist",
    "--aggressive-instcombine",
    "--load-store-vectorizer",
    "--slsr"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-unswitch",
          "--lower-matrix-intrinsics",
          "--callsite-splitting",
          "--licm",
          "--mergefunc",
          "--loop-distribute",
          "--globalsplit",
          "--loop-interchange",
          "--redundant-dbg-inst-elim",
          "--argpromotion",
          "--loop-instsimplify",
          "--attributor",
          "--gvn",
          "--simplifycfg",
          "--aggressive-instcombine",
          "--loop-predication",
          "--add-discriminators",
          "--inline",
          "--load-store-vectorizer",
          "--coro-elide",
          "--rewrite-statepoints-for-gc",
          "--mergereturn",
          "--mergeicmps",
          "--globalopt",
          "--adce",
          "--coro-split",
          "--inferattrs",
          "--dce",
          "--separate-const-offset-from-gep"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-unswitch",
      "--lower-matrix-intrinsics",
      "--callsite-splitting",
      "--licm",
      "--mergefunc",
      "--loop-distribute",
      "--globalsplit",
      "--loop-interchange",
      "--redundant-dbg-inst-elim",
      "--argpromotion",
      "--loop-instsimplify",
      "--attributor",
      "--gvn",
      "--simplifycfg",
      "--aggressive-instcombine",
      "--loop-predication",
      "--add-discriminators",
      "--inline",
      "--load-store-vectorizer",
      "--coro-elide",
      "--rewrite-statepoints-for-gc",
      "--mergereturn",
      "--mergeicmps",
      "--globalopt",
      "--adce",
      "--coro-split",
      "--inferattrs",
      "--dce",
      "--separate-const-offset-from-gep"
    ],
    "performance_vs_Oz": "+2.1%"
  }
}
{
  "program_id": "linux-v0_2015.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 47,
    "onePredOneSuc": 35,
    "onePredTwoSuc": 11,
    "oneSuccessor": 40,
    "twoPred": 12,
    "twoPredOneSuc": 2,
    "twoEach": 1,
    "twoSuccessor": 23,
    "morePreds": 4,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 85,
    "BeginPhi": 1,
    "BranchCount": 63,
    "returnInt": 20,
    "CriticalCount": 2,
    "NumEdges": 86,
    "const32Bit": 238,
    "const64Bit": 26,
    "numConstZeroes": 110,
    "numConstOnes": 110,
    "UncondBranches": 40,
    "binaryConstArg": 24,
    "NumAShrInst": 0,
    "NumAddInst": 5,
    "NumAllocaInst": 82,
    "NumAndInst": 3,
    "BlockMid": 12,
    "BlockLow": 74,
    "NumBitCastInst": 27,
    "NumBrInst": 63,
    "NumCallInst": 63,
    "NumGetElementPtrInst": 69,
    "NumICmpInst": 24,
    "NumLShrInst": 0,
    "NumLoadInst": 212,
    "NumMulInst": 0,
    "NumOrInst": 3,
    "NumPHIInst": 1,
    "NumRetInst": 23,
    "NumSExtInst": 10,
    "NumSelectInst": 1,
    "NumShlInst": 0,
    "NumStoreInst": 116,
    "NumSubInst": 3,
    "NumTruncInst": 9,
    "NumXorInst": 8,
    "NumZExtInst": 7,
    "TotalBlocks": 86,
    "TotalInsts": 740,
    "TotalMemInst": 542,
    "TotalFuncs": 49,
    "ArgsPhi": 2,
    "testUnary": 356
  },
  "baseline_oz_instcount": 740,
  "knowledge_base_entry": [
    "--hotcoldsplit",
    "--mergefunc",
    "--lower-constant-intrinsics",
    "--adce",
    "--reassociate",
    "--aggressive-instcombine",
    "--early-cse-memssa",
    "--prune-eh"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--lower-widenable-condition",
          "--functionattrs",
          "--globalsplit",
          "--mergefunc",
          "--coro-elide",
          "--early-cse",
          "--mergeicmps",
          "--attributor",
          "--instnamer",
          "--partially-inline-libcalls",
          "--flattencfg",
          "--mem2reg",
          "--aggressive-instcombine",
          "-loop-reduce",
          "--instcombine",
          "--pgo-memop-opt",
          "--canonicalize-aliases",
          "--float2int",
          "--ipconstprop",
          "--partial-inliner",
          "--loop-simplifycfg",
          "--loop-rotate",
          "--infer-address-spaces",
          "--loop-versioning",
          "--loop-reroll",
          "--loop-guard-widening",
          "--loop-predication",
          "--div-rem-pairs"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--lower-widenable-condition",
      "--functionattrs",
      "--globalsplit",
      "--mergefunc",
      "--coro-elide",
      "--early-cse",
      "--mergeicmps",
      "--attributor",
      "--instnamer",
      "--partially-inline-libcalls",
      "--flattencfg",
      "--mem2reg",
      "--aggressive-instcombine",
      "-loop-reduce",
      "--instcombine",
      "--pgo-memop-opt",
      "--canonicalize-aliases",
      "--float2int",
      "--ipconstprop",
      "--partial-inliner",
      "--loop-simplifycfg",
      "--loop-rotate",
      "--infer-address-spaces",
      "--loop-versioning",
      "--loop-reroll",
      "--loop-guard-widening",
      "--loop-predication",
      "--div-rem-pairs"
    ],
    "performance_vs_Oz": "+0.7%"
  }
}
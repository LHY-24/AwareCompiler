{
  "program_id": "github-v0_45340.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 46,
    "onePredOneSuc": 25,
    "onePredTwoSuc": 18,
    "oneSuccessor": 34,
    "twoPred": 16,
    "twoPredOneSuc": 7,
    "twoEach": 8,
    "twoSuccessor": 27,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 66,
    "BeginPhi": 0,
    "BranchCount": 61,
    "returnInt": 11,
    "CriticalCount": 15,
    "NumEdges": 88,
    "const32Bit": 84,
    "const64Bit": 9,
    "numConstZeroes": 21,
    "numConstOnes": 60,
    "UncondBranches": 34,
    "binaryConstArg": 23,
    "NumAShrInst": 0,
    "NumAddInst": 16,
    "NumAllocaInst": 33,
    "NumAndInst": 0,
    "BlockMid": 9,
    "BlockLow": 57,
    "NumBitCastInst": 6,
    "NumBrInst": 61,
    "NumCallInst": 21,
    "NumGetElementPtrInst": 32,
    "NumICmpInst": 27,
    "NumLShrInst": 0,
    "NumLoadInst": 149,
    "NumMulInst": 6,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 2,
    "NumSExtInst": 35,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 58,
    "NumSubInst": 5,
    "NumTruncInst": 1,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 66,
    "TotalInsts": 458,
    "TotalMemInst": 293,
    "TotalFuncs": 8,
    "ArgsPhi": 0,
    "testUnary": 224
  },
  "baseline_oz_instcount": 459,
  "knowledge_base_entry": [
    "--lower-expect",
    "--instcombine",
    "--sroa",
    "--mergefunc",
    "--mem2reg",
    "--lower-constant-intrinsics",
    "--jump-threading"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--inline",
          "--globaldce",
          "--mergefunc",
          "--dse",
          "--simplifycfg",
          "--bdce",
          "--partially-inline-libcalls",
          "--nary-reassociate",
          "--constprop",
          "--reassociate",
          "--ipsccp",
          "--insert-gcov-profiling",
          "--early-cse-memssa",
          "--gvn-hoist",
          "--inject-tli-mappings",
          "--ipconstprop",
          "--loop-vectorize",
          "--libcalls-shrinkwrap"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--inline",
      "--globaldce",
      "--mergefunc",
      "--dse",
      "--simplifycfg",
      "--bdce",
      "--partially-inline-libcalls",
      "--nary-reassociate",
      "--constprop",
      "--reassociate",
      "--ipsccp",
      "--insert-gcov-profiling",
      "--early-cse-memssa",
      "--gvn-hoist",
      "--inject-tli-mappings",
      "--ipconstprop",
      "--loop-vectorize",
      "--libcalls-shrinkwrap"
    ],
    "performance_vs_Oz": "+0.2%"
  }
}
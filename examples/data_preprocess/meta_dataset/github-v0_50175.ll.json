{
  "program_id": "github-v0_50175.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 3,
    "onePred": 9,
    "onePredOneSuc": 6,
    "onePredTwoSuc": 3,
    "oneSuccessor": 7,
    "twoPred": 5,
    "twoPredOneSuc": 1,
    "twoEach": 4,
    "twoSuccessor": 8,
    "morePreds": 1,
    "BB03Phi": 3,
    "BBHiPhi": 0,
    "BBNoPhi": 13,
    "BeginPhi": 3,
    "BranchCount": 15,
    "returnInt": 2,
    "CriticalCount": 7,
    "NumEdges": 23,
    "const32Bit": 13,
    "const64Bit": 5,
    "numConstZeroes": 9,
    "numConstOnes": 4,
    "UncondBranches": 7,
    "binaryConstArg": 6,
    "NumAShrInst": 1,
    "NumAddInst": 8,
    "NumAllocaInst": 0,
    "NumAndInst": 2,
    "BlockMid": 0,
    "BlockLow": 16,
    "NumBitCastInst": 0,
    "NumBrInst": 15,
    "NumCallInst": 3,
    "NumGetElementPtrInst": 4,
    "NumICmpInst": 7,
    "NumLShrInst": 0,
    "NumLoadInst": 6,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 4,
    "NumRetInst": 1,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 5,
    "NumSubInst": 0,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 16,
    "TotalInsts": 63,
    "TotalMemInst": 18,
    "TotalFuncs": 4,
    "ArgsPhi": 8,
    "testUnary": 11
  },
  "baseline_oz_instcount": 67,
  "knowledge_base_entry": [
    "--simplifycfg",
    "--instcombine",
    "--loop-deletion",
    "--sccp",
    "--simplifycfg",
    "--mldst-motion",
    "--instcombine",
    "--prune-eh",
    "--simplifycfg",
    "--loop-rotate",
    "--aggressive-instcombine",
    "--loop-simplifycfg",
    "--aggressive-instcombine",
    "--flattencfg",
    "--instcombine",
    "--early-cse",
    "--die",
    "--dse",
    "--early-cse",
    "--loop-reroll",
    "--simplifycfg",
    "--nary-reassociate",
    "--correlated-propagation",
    "--adce",
    "--instsimplify"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--simple-loop-unswitch",
          "--callsite-splitting",
          "--scalarizer",
          "--ipconstprop",
          "--ipsccp",
          "--partial-inliner",
          "--constmerge",
          "--licm",
          "--nary-reassociate",
          "--sccp"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+6.0%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--simple-loop-unswitch",
      "--callsite-splitting",
      "--scalarizer",
      "--ipconstprop",
      "--ipsccp",
      "--partial-inliner",
      "--constmerge",
      "--licm",
      "--nary-reassociate",
      "--sccp"
    ],
    "performance_vs_Oz": "+6.0%"
  }
}
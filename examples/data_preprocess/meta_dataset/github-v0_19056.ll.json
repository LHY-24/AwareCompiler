{
  "program_id": "github-v0_19056.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 11,
    "onePredOneSuc": 7,
    "onePredTwoSuc": 1,
    "oneSuccessor": 9,
    "twoPred": 4,
    "twoPredOneSuc": 1,
    "twoEach": 3,
    "twoSuccessor": 5,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 18,
    "BeginPhi": 0,
    "BranchCount": 14,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 19,
    "const32Bit": 31,
    "const64Bit": 17,
    "numConstZeroes": 23,
    "numConstOnes": 19,
    "UncondBranches": 9,
    "binaryConstArg": 6,
    "NumAShrInst": 0,
    "NumAddInst": 6,
    "NumAllocaInst": 12,
    "NumAndInst": 0,
    "BlockMid": 4,
    "BlockLow": 14,
    "NumBitCastInst": 0,
    "NumBrInst": 14,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 14,
    "NumICmpInst": 5,
    "NumLShrInst": 0,
    "NumLoadInst": 27,
    "NumMulInst": 2,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 17,
    "NumSubInst": 0,
    "NumTruncInst": 6,
    "NumXorInst": 0,
    "NumZExtInst": 13,
    "TotalBlocks": 18,
    "TotalInsts": 130,
    "TotalMemInst": 77,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 61
  },
  "baseline_oz_instcount": 130,
  "knowledge_base_entry": [
    "--loop-load-elim",
    "--gvn-hoist",
    "--instcombine",
    "--aggressive-instcombine",
    "--gvn",
    "--globalopt",
    "--loop-instsimplify",
    "--lower-constant-intrinsics",
    "--dse",
    "--correlated-propagation",
    "--die"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--aggressive-instcombine",
          "--infer-address-spaces",
          "--add-discriminators",
          "--early-cse-memssa",
          "--loop-reroll",
          "--loop-unroll-and-jam",
          "--die",
          "--reg2mem",
          "--mldst-motion",
          "--elim-avail-extern",
          "--loop-deletion",
          "--loop-interchange",
          "--lcssa",
          "--reassociate",
          "--strip-dead-prototypes",
          "--called-value-propagation",
          "--speculative-execution",
          "--sccp",
          "--coro-elide",
          "--globaldce",
          "--bdce",
          "--float2int",
          "--functionattrs",
          "--loop-unswitch",
          "--loop-simplify",
          "--callsite-splitting",
          "--sroa"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+9.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--aggressive-instcombine",
      "--infer-address-spaces",
      "--add-discriminators",
      "--early-cse-memssa",
      "--loop-reroll",
      "--loop-unroll-and-jam",
      "--die",
      "--reg2mem",
      "--mldst-motion",
      "--elim-avail-extern",
      "--loop-deletion",
      "--loop-interchange",
      "--lcssa",
      "--reassociate",
      "--strip-dead-prototypes",
      "--called-value-propagation",
      "--speculative-execution",
      "--sccp",
      "--coro-elide",
      "--globaldce",
      "--bdce",
      "--float2int",
      "--functionattrs",
      "--loop-unswitch",
      "--loop-simplify",
      "--callsite-splitting",
      "--sroa"
    ],
    "performance_vs_Oz": "+9.2%"
  }
}
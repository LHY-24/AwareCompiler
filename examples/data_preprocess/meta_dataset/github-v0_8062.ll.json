{
  "program_id": "github-v0_8062.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 15,
    "onePredOneSuc": 10,
    "onePredTwoSuc": 2,
    "oneSuccessor": 13,
    "twoPred": 6,
    "twoPredOneSuc": 2,
    "twoEach": 4,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 24,
    "BeginPhi": 0,
    "BranchCount": 20,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 27,
    "const32Bit": 36,
    "const64Bit": 36,
    "numConstZeroes": 38,
    "numConstOnes": 24,
    "UncondBranches": 13,
    "binaryConstArg": 16,
    "NumAShrInst": 3,
    "NumAddInst": 6,
    "NumAllocaInst": 12,
    "NumAndInst": 3,
    "BlockMid": 4,
    "BlockLow": 20,
    "NumBitCastInst": 0,
    "NumBrInst": 20,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 24,
    "NumICmpInst": 7,
    "NumLShrInst": 0,
    "NumLoadInst": 42,
    "NumMulInst": 1,
    "NumOrInst": 5,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 5,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 19,
    "NumSubInst": 1,
    "NumTruncInst": 9,
    "NumXorInst": 1,
    "NumZExtInst": 26,
    "TotalBlocks": 24,
    "TotalInsts": 197,
    "TotalMemInst": 104,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 94
  },
  "baseline_oz_instcount": 197,
  "knowledge_base_entry": [
    "--inferattrs",
    "--instcombine",
    "--die",
    "--licm",
    "--prune-eh",
    "--reassociate",
    "--load-store-vectorizer",
    "--loop-fusion",
    "--loop-reroll",
    "--mergefunc",
    "--mem2reg",
    "--lower-constant-intrinsics",
    "--aggressive-instcombine",
    "--mem2reg",
    "--slp-vectorizer",
    "--nary-reassociate"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--aggressive-instcombine",
          "--inject-tli-mappings",
          "--lower-guard-intrinsic",
          "--attributor",
          "--redundant-dbg-inst-elim",
          "--loop-instsimplify",
          "--memcpyopt",
          "--loop-interchange",
          "--slsr",
          "--globalopt",
          "--instsimplify",
          "--libcalls-shrinkwrap",
          "--functionattrs",
          "--float2int",
          "--guard-widening",
          "--loop-versioning",
          "--strip-dead-prototypes"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+7.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--aggressive-instcombine",
      "--inject-tli-mappings",
      "--lower-guard-intrinsic",
      "--attributor",
      "--redundant-dbg-inst-elim",
      "--loop-instsimplify",
      "--memcpyopt",
      "--loop-interchange",
      "--slsr",
      "--globalopt",
      "--instsimplify",
      "--libcalls-shrinkwrap",
      "--functionattrs",
      "--float2int",
      "--guard-widening",
      "--loop-versioning",
      "--strip-dead-prototypes"
    ],
    "performance_vs_Oz": "+7.1%"
  }
}
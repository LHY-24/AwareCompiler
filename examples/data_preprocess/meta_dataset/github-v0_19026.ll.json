{
  "program_id": "github-v0_19026.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 15,
    "onePredOneSuc": 10,
    "onePredTwoSuc": 2,
    "oneSuccessor": 13,
    "twoPred": 6,
    "twoPredOneSuc": 2,
    "twoEach": 4,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 24,
    "BeginPhi": 0,
    "BranchCount": 20,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 27,
    "const32Bit": 31,
    "const64Bit": 34,
    "numConstZeroes": 41,
    "numConstOnes": 18,
    "UncondBranches": 13,
    "binaryConstArg": 6,
    "NumAShrInst": 0,
    "NumAddInst": 9,
    "NumAllocaInst": 12,
    "NumAndInst": 0,
    "BlockMid": 3,
    "BlockLow": 21,
    "NumBitCastInst": 0,
    "NumBrInst": 20,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 22,
    "NumICmpInst": 7,
    "NumLShrInst": 0,
    "NumLoadInst": 34,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 19,
    "NumSubInst": 1,
    "NumTruncInst": 8,
    "NumXorInst": 0,
    "NumZExtInst": 20,
    "TotalBlocks": 24,
    "TotalInsts": 166,
    "TotalMemInst": 94,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 77
  },
  "baseline_oz_instcount": 166,
  "knowledge_base_entry": [
    "--dse",
    "--reassociate",
    "--aggressive-instcombine",
    "--lower-expect",
    "--gvn",
    "--globalopt",
    "--loop-instsimplify"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--functionattrs",
          "--simple-loop-unswitch",
          "--loop-unroll-and-jam",
          "--loop-predication",
          "--coro-elide",
          "--aggressive-instcombine",
          "--loweratomic",
          "--coro-cleanup",
          "--early-cse-memssa",
          "--dse",
          "--instnamer",
          "--loop-guard-widening",
          "--mergefunc",
          "--lowerinvoke",
          "--partially-inline-libcalls",
          "--loop-distribute",
          "--inline",
          "--coro-early",
          "--scalarizer",
          "--speculative-execution",
          "--barrier",
          "--attributor",
          "--instsimplify",
          "--simplifycfg",
          "--loop-data-prefetch",
          "--lcssa",
          "--strip-nondebug",
          "--loop-simplify",
          "--float2int"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+10.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--functionattrs",
      "--simple-loop-unswitch",
      "--loop-unroll-and-jam",
      "--loop-predication",
      "--coro-elide",
      "--aggressive-instcombine",
      "--loweratomic",
      "--coro-cleanup",
      "--early-cse-memssa",
      "--dse",
      "--instnamer",
      "--loop-guard-widening",
      "--mergefunc",
      "--lowerinvoke",
      "--partially-inline-libcalls",
      "--loop-distribute",
      "--inline",
      "--coro-early",
      "--scalarizer",
      "--speculative-execution",
      "--barrier",
      "--attributor",
      "--instsimplify",
      "--simplifycfg",
      "--loop-data-prefetch",
      "--lcssa",
      "--strip-nondebug",
      "--loop-simplify",
      "--float2int"
    ],
    "performance_vs_Oz": "+10.8%"
  }
}
{
  "program_id": "github-v0_18527.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 14,
    "onePredOneSuc": 9,
    "onePredTwoSuc": 3,
    "oneSuccessor": 12,
    "twoPred": 6,
    "twoPredOneSuc": 3,
    "twoEach": 2,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 23,
    "BeginPhi": 0,
    "BranchCount": 19,
    "returnInt": 4,
    "CriticalCount": 1,
    "NumEdges": 26,
    "const32Bit": 39,
    "const64Bit": 38,
    "numConstZeroes": 44,
    "numConstOnes": 24,
    "UncondBranches": 12,
    "binaryConstArg": 12,
    "NumAShrInst": 0,
    "NumAddInst": 7,
    "NumAllocaInst": 12,
    "NumAndInst": 3,
    "BlockMid": 4,
    "BlockLow": 19,
    "NumBitCastInst": 4,
    "NumBrInst": 19,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 25,
    "NumICmpInst": 7,
    "NumLShrInst": 3,
    "NumLoadInst": 28,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 18,
    "NumSubInst": 1,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 1,
    "TotalBlocks": 23,
    "TotalInsts": 144,
    "TotalMemInst": 90,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 50
  },
  "baseline_oz_instcount": 144,
  "knowledge_base_entry": [
    "--loweratomic",
    "--aggressive-instcombine",
    "--mergefunc",
    "-loop-reduce",
    "--slsr",
    "--newgvn",
    "--slsr",
    "--load-store-vectorizer",
    "--slp-vectorizer",
    "--instcombine",
    "--inline",
    "--adce",
    "--die",
    "--sccp"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--lcssa",
          "--inferattrs",
          "--loop-unswitch",
          "--elim-avail-extern",
          "--loop-sink",
          "--instcombine",
          "--strip-debug-declare",
          "--dce",
          "--lower-widenable-condition",
          "-loop-reduce",
          "--licm",
          "--strip-dead-prototypes",
          "--globalopt",
          "--guard-widening",
          "--instnamer",
          "--sccp",
          "--lower-constant-intrinsics",
          "--early-cse",
          "--inline",
          "--loop-instsimplify",
          "--forceattrs",
          "--strip-nondebug",
          "--strip",
          "--loop-reroll",
          "--jump-threading",
          "--indvars",
          "--mem2reg",
          "--aggressive-instcombine"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--lcssa",
      "--inferattrs",
      "--loop-unswitch",
      "--elim-avail-extern",
      "--loop-sink",
      "--instcombine",
      "--strip-debug-declare",
      "--dce",
      "--lower-widenable-condition",
      "-loop-reduce",
      "--licm",
      "--strip-dead-prototypes",
      "--globalopt",
      "--guard-widening",
      "--instnamer",
      "--sccp",
      "--lower-constant-intrinsics",
      "--early-cse",
      "--inline",
      "--loop-instsimplify",
      "--forceattrs",
      "--strip-nondebug",
      "--strip",
      "--loop-reroll",
      "--jump-threading",
      "--indvars",
      "--mem2reg",
      "--aggressive-instcombine"
    ],
    "performance_vs_Oz": "+1.4%"
  }
}
{
  "program_id": "tensorflow-v0_329.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 3,
    "onePredOneSuc": 1,
    "onePredTwoSuc": 2,
    "oneSuccessor": 1,
    "twoPred": 1,
    "twoPredOneSuc": 0,
    "twoEach": 1,
    "twoSuccessor": 4,
    "morePreds": 1,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 6,
    "BeginPhi": 2,
    "BranchCount": 5,
    "returnInt": 0,
    "CriticalCount": 5,
    "NumEdges": 9,
    "const32Bit": 8,
    "const64Bit": 10,
    "numConstZeroes": 7,
    "numConstOnes": 0,
    "UncondBranches": 1,
    "binaryConstArg": 6,
    "NumAShrInst": 0,
    "NumAddInst": 4,
    "NumAllocaInst": 0,
    "NumAndInst": 1,
    "BlockMid": 0,
    "BlockLow": 8,
    "NumBitCastInst": 0,
    "NumBrInst": 5,
    "NumCallInst": 0,
    "NumGetElementPtrInst": 4,
    "NumICmpInst": 6,
    "NumLShrInst": 0,
    "NumLoadInst": 3,
    "NumMulInst": 1,
    "NumOrInst": 2,
    "NumPHIInst": 2,
    "NumRetInst": 3,
    "NumSExtInst": 1,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 0,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 4,
    "TotalBlocks": 8,
    "TotalInsts": 39,
    "TotalMemInst": 7,
    "TotalFuncs": 7,
    "ArgsPhi": 6,
    "testUnary": 9
  },
  "baseline_oz_instcount": 40,
  "knowledge_base_entry": [
    "--aggressive-instcombine",
    "--instsimplify",
    "--loop-simplifycfg",
    "--newgvn",
    "--slsr",
    "--nary-reassociate",
    "--load-store-vectorizer",
    "--mem2reg",
    "--lower-expect",
    "--licm",
    "--loop-instsimplify"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--partially-inline-libcalls",
          "--mem2reg",
          "--barrier",
          "--loop-idiom",
          "--strip",
          "--globalsplit",
          "--loweratomic",
          "--strip-debug-declare",
          "--gvn",
          "--canonicalize-aliases"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--partially-inline-libcalls",
      "--mem2reg",
      "--barrier",
      "--loop-idiom",
      "--strip",
      "--globalsplit",
      "--loweratomic",
      "--strip-debug-declare",
      "--gvn",
      "--canonicalize-aliases"
    ],
    "performance_vs_Oz": "+2.5%"
  }
}
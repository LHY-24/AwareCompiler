{
  "program_id": "github-v0_30040.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 13,
    "onePredOneSuc": 9,
    "onePredTwoSuc": 1,
    "oneSuccessor": 11,
    "twoPred": 5,
    "twoPredOneSuc": 1,
    "twoEach": 4,
    "twoSuccessor": 6,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 21,
    "BeginPhi": 0,
    "BranchCount": 17,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 23,
    "const32Bit": 37,
    "const64Bit": 21,
    "numConstZeroes": 27,
    "numConstOnes": 24,
    "UncondBranches": 11,
    "binaryConstArg": 8,
    "NumAShrInst": 0,
    "NumAddInst": 7,
    "NumAllocaInst": 14,
    "NumAndInst": 0,
    "BlockMid": 4,
    "BlockLow": 17,
    "NumBitCastInst": 4,
    "NumBrInst": 17,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 18,
    "NumICmpInst": 6,
    "NumLShrInst": 0,
    "NumLoadInst": 29,
    "NumMulInst": 1,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 20,
    "NumSubInst": 0,
    "NumTruncInst": 3,
    "NumXorInst": 0,
    "NumZExtInst": 6,
    "TotalBlocks": 21,
    "TotalInsts": 139,
    "TotalMemInst": 88,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 59
  },
  "baseline_oz_instcount": 139,
  "knowledge_base_entry": [
    "--simple-loop-unswitch",
    "--jump-threading",
    "--aggressive-instcombine",
    "--simplifycfg",
    "--flattencfg",
    "--globalopt",
    "--dse",
    "--bdce",
    "--mem2reg",
    "--slp-vectorizer",
    "--newgvn",
    "--inline",
    "--licm",
    "--adce",
    "--instsimplify",
    "--early-cse",
    "--lower-constant-intrinsics",
    "--lower-expect"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--correlated-propagation",
          "--loop-rotate",
          "--cross-dso-cfi",
          "--slsr",
          "--rewrite-statepoints-for-gc",
          "--ipconstprop",
          "--canonicalize-aliases",
          "--sancov",
          "--loop-simplify",
          "--jump-threading",
          "--lower-constant-intrinsics",
          "--strip-debug-declare",
          "--instcombine",
          "--strip",
          "--mergefunc",
          "--attributor",
          "--loop-distribute",
          "--flattencfg",
          "--gvn-hoist",
          "--aggressive-instcombine",
          "--tailcallelim",
          "--slp-vectorizer",
          "--consthoist",
          "--loop-deletion",
          "--post-inline-ee-instrument",
          "--loop-unroll",
          "--float2int",
          "--barrier",
          "--globalopt"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--correlated-propagation",
      "--loop-rotate",
      "--cross-dso-cfi",
      "--slsr",
      "--rewrite-statepoints-for-gc",
      "--ipconstprop",
      "--canonicalize-aliases",
      "--sancov",
      "--loop-simplify",
      "--jump-threading",
      "--lower-constant-intrinsics",
      "--strip-debug-declare",
      "--instcombine",
      "--strip",
      "--mergefunc",
      "--attributor",
      "--loop-distribute",
      "--flattencfg",
      "--gvn-hoist",
      "--aggressive-instcombine",
      "--tailcallelim",
      "--slp-vectorizer",
      "--consthoist",
      "--loop-deletion",
      "--post-inline-ee-instrument",
      "--loop-unroll",
      "--float2int",
      "--barrier",
      "--globalopt"
    ],
    "performance_vs_Oz": "+2.9%"
  }
}
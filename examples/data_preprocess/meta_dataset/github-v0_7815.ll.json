{
  "program_id": "github-v0_7815.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 17,
    "onePredOneSuc": 10,
    "onePredTwoSuc": 4,
    "oneSuccessor": 15,
    "twoPred": 7,
    "twoPredOneSuc": 4,
    "twoEach": 3,
    "twoSuccessor": 8,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 27,
    "BeginPhi": 0,
    "BranchCount": 23,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 31,
    "const32Bit": 38,
    "const64Bit": 39,
    "numConstZeroes": 42,
    "numConstOnes": 22,
    "UncondBranches": 15,
    "binaryConstArg": 11,
    "NumAShrInst": 0,
    "NumAddInst": 6,
    "NumAllocaInst": 13,
    "NumAndInst": 2,
    "BlockMid": 4,
    "BlockLow": 23,
    "NumBitCastInst": 4,
    "NumBrInst": 23,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 29,
    "NumICmpInst": 8,
    "NumLShrInst": 0,
    "NumLoadInst": 44,
    "NumMulInst": 0,
    "NumOrInst": 2,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 21,
    "NumSubInst": 3,
    "NumTruncInst": 2,
    "NumXorInst": 1,
    "NumZExtInst": 8,
    "TotalBlocks": 27,
    "TotalInsts": 182,
    "TotalMemInst": 114,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 74
  },
  "baseline_oz_instcount": 182,
  "knowledge_base_entry": [
    "--loop-simplify",
    "--early-cse-memssa",
    "--lower-expect",
    "--gvn-hoist",
    "--aggressive-instcombine",
    "--globalopt",
    "--reassociate",
    "--instsimplify",
    "--dse",
    "--nary-reassociate",
    "--newgvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--coro-split",
          "--ipsccp",
          "--pgo-memop-opt",
          "--inject-tli-mappings",
          "--loop-versioning-licm",
          "--adce",
          "--loop-versioning",
          "--loop-simplifycfg",
          "--lower-expect",
          "--mem2reg",
          "--lcssa",
          "--slsr",
          "--reg2mem",
          "--flattencfg",
          "--elim-avail-extern",
          "--aggressive-instcombine",
          "--rewrite-statepoints-for-gc",
          "--loop-unroll-and-jam",
          "--coro-cleanup",
          "--prune-eh",
          "--lowerinvoke",
          "-loop-reduce",
          "--mergeicmps",
          "--loweratomic",
          "--licm",
          "--loop-vectorize",
          "--simple-loop-unswitch"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--coro-split",
      "--ipsccp",
      "--pgo-memop-opt",
      "--inject-tli-mappings",
      "--loop-versioning-licm",
      "--adce",
      "--loop-versioning",
      "--loop-simplifycfg",
      "--lower-expect",
      "--mem2reg",
      "--lcssa",
      "--slsr",
      "--reg2mem",
      "--flattencfg",
      "--elim-avail-extern",
      "--aggressive-instcombine",
      "--rewrite-statepoints-for-gc",
      "--loop-unroll-and-jam",
      "--coro-cleanup",
      "--prune-eh",
      "--lowerinvoke",
      "-loop-reduce",
      "--mergeicmps",
      "--loweratomic",
      "--licm",
      "--loop-vectorize",
      "--simple-loop-unswitch"
    ],
    "performance_vs_Oz": "+1.1%"
  }
}
{
  "program_id": "github-v0_32020.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 9,
    "onePredOneSuc": 4,
    "onePredTwoSuc": 5,
    "oneSuccessor": 5,
    "twoPred": 2,
    "twoPredOneSuc": 0,
    "twoEach": 2,
    "twoSuccessor": 10,
    "morePreds": 4,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 14,
    "BeginPhi": 2,
    "BranchCount": 15,
    "returnInt": 4,
    "CriticalCount": 11,
    "NumEdges": 25,
    "const32Bit": 35,
    "const64Bit": 22,
    "numConstZeroes": 21,
    "numConstOnes": 11,
    "UncondBranches": 5,
    "binaryConstArg": 31,
    "NumAShrInst": 6,
    "NumAddInst": 16,
    "NumAllocaInst": 0,
    "NumAndInst": 2,
    "BlockMid": 5,
    "BlockLow": 11,
    "NumBitCastInst": 8,
    "NumBrInst": 15,
    "NumCallInst": 13,
    "NumGetElementPtrInst": 13,
    "NumICmpInst": 23,
    "NumLShrInst": 0,
    "NumLoadInst": 10,
    "NumMulInst": 3,
    "NumOrInst": 6,
    "NumPHIInst": 2,
    "NumRetInst": 1,
    "NumSExtInst": 6,
    "NumSelectInst": 8,
    "NumShlInst": 7,
    "NumStoreInst": 5,
    "NumSubInst": 8,
    "NumTruncInst": 4,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 16,
    "TotalInsts": 159,
    "TotalMemInst": 41,
    "TotalFuncs": 5,
    "ArgsPhi": 5,
    "testUnary": 28
  },
  "baseline_oz_instcount": 157,
  "knowledge_base_entry": [
    "--gvn",
    "--gvn-hoist",
    "--slsr",
    "--simplifycfg",
    "--load-store-vectorizer",
    "--aggressive-instcombine",
    "--globalopt",
    "--newgvn",
    "--globalopt",
    "--loweratomic",
    "--globalopt",
    "--loop-instsimplify",
    "--early-cse-memssa",
    "--reassociate",
    "--early-cse-memssa",
    "--indvars",
    "--newgvn",
    "--loop-deletion",
    "--newgvn",
    "--nary-reassociate",
    "--load-store-vectorizer",
    "--lower-expect",
    "--dse",
    "--lower-constant-intrinsics",
    "--adce",
    "--elim-avail-extern",
    "--gvn-hoist",
    "--gvn",
    "--instsimplify",
    "--instcombine",
    "--newgvn",
    "--jump-threading",
    "--gvn-hoist",
    "--flattencfg",
    "--licm",
    "--adce",
    "--licm",
    "--elim-avail-extern",
    "--slp-vectorizer",
    "--gvn-hoist",
    "--licm",
    "--elim-avail-extern",
    "--sroa",
    "--instsimplify",
    "--bdce",
    "--correlated-propagation",
    "--reassociate",
    "--die",
    "--dse",
    "--bdce",
    "--reassociate",
    "--lower-expect",
    "--licm",
    "--instcombine",
    "--load-store-vectorizer",
    "--loop-instsimplify",
    "--gvn",
    "--gvn-hoist",
    "--licm",
    "--loop-simplifycfg",
    "--lower-expect",
    "--ipsccp",
    "--instcombine",
    "--lower-constant-intrinsics",
    "--bdce",
    "--reassociate",
    "--lower-expect",
    "--licm",
    "--instcombine",
    "--load-store-vectorizer",
    "--aggressive-instcombine",
    "--loop-rotate",
    "--licm",
    "--simplifycfg",
    "--nary-reassociate",
    "--indvars",
    "--load-store-vectorizer",
    "--newgvn",
    "--lower-expect",
    "--jump-threading",
    "--loop-simplifycfg",
    "--aggressive-instcombine",
    "--mergefunc",
    "--instcombine",
    "--mem2reg",
    "--reassociate",
    "--early-cse",
    "--loop-fusion",
    "--early-cse"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-instsimplify",
          "--prune-eh",
          "--scalarizer",
          "--ipsccp",
          "--bdce",
          "--loop-distribute",
          "--loop-interchange",
          "--sroa",
          "--dse",
          "--loop-rotate",
          "--adce",
          "--partial-inliner",
          "--reassociate",
          "--lowerinvoke",
          "--argpromotion",
          "--loop-load-elim",
          "--loop-simplify",
          "--lower-guard-intrinsic",
          "--indvars",
          "--loop-vectorize",
          "--sancov",
          "--break-crit-edges",
          "--strip-debug-declare",
          "--mergereturn",
          "--coro-elide",
          "--newgvn",
          "--lower-constant-intrinsics",
          "--simplifycfg"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-instsimplify",
      "--prune-eh",
      "--scalarizer",
      "--ipsccp",
      "--bdce",
      "--loop-distribute",
      "--loop-interchange",
      "--sroa",
      "--dse",
      "--loop-rotate",
      "--adce",
      "--partial-inliner",
      "--reassociate",
      "--lowerinvoke",
      "--argpromotion",
      "--loop-load-elim",
      "--loop-simplify",
      "--lower-guard-intrinsic",
      "--indvars",
      "--loop-vectorize",
      "--sancov",
      "--break-crit-edges",
      "--strip-debug-declare",
      "--mergereturn",
      "--coro-elide",
      "--newgvn",
      "--lower-constant-intrinsics",
      "--simplifycfg"
    ],
    "performance_vs_Oz": "+1.3%"
  }
}
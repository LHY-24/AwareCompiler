{
  "program_id": "linux-v0_8467.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 30,
    "onePredOneSuc": 22,
    "onePredTwoSuc": 8,
    "oneSuccessor": 25,
    "twoPred": 7,
    "twoPredOneSuc": 2,
    "twoEach": 5,
    "twoSuccessor": 14,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 45,
    "BeginPhi": 0,
    "BranchCount": 39,
    "returnInt": 9,
    "CriticalCount": 1,
    "NumEdges": 53,
    "const32Bit": 133,
    "const64Bit": 3,
    "numConstZeroes": 68,
    "numConstOnes": 52,
    "UncondBranches": 25,
    "binaryConstArg": 7,
    "NumAShrInst": 0,
    "NumAddInst": 5,
    "NumAllocaInst": 33,
    "NumAndInst": 2,
    "BlockMid": 5,
    "BlockLow": 40,
    "NumBitCastInst": 5,
    "NumBrInst": 39,
    "NumCallInst": 18,
    "NumGetElementPtrInst": 51,
    "NumICmpInst": 15,
    "NumLShrInst": 0,
    "NumLoadInst": 116,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 6,
    "NumSExtInst": 14,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 45,
    "NumSubInst": 0,
    "NumTruncInst": 3,
    "NumXorInst": 2,
    "NumZExtInst": 10,
    "TotalBlocks": 45,
    "TotalInsts": 369,
    "TotalMemInst": 263,
    "TotalFuncs": 17,
    "ArgsPhi": 0,
    "testUnary": 186
  },
  "baseline_oz_instcount": 369,
  "knowledge_base_entry": [
    "--aggressive-instcombine",
    "--instcombine",
    "--inline",
    "--gvn",
    "--sccp",
    "--simplifycfg",
    "--adce",
    "--reassociate",
    "--sccp",
    "--loop-instsimplify",
    "--sroa",
    "--simplifycfg",
    "--jump-threading",
    "--lower-expect"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-guard-widening",
          "--loop-rotate",
          "--consthoist",
          "--coro-cleanup",
          "--loop-load-elim",
          "--aggressive-instcombine",
          "--strip",
          "--slsr",
          "--separate-const-offset-from-gep",
          "--inject-tli-mappings",
          "--inline",
          "--loop-versioning",
          "--elim-avail-extern",
          "--lower-widenable-condition",
          "--sancov",
          "--called-value-propagation",
          "--loop-instsimplify",
          "--add-discriminators",
          "--loop-simplifycfg",
          "--coro-elide",
          "--indvars",
          "--instcombine",
          "--infer-address-spaces",
          "--loop-distribute",
          "--tailcallelim",
          "--globaldce"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-guard-widening",
      "--loop-rotate",
      "--consthoist",
      "--coro-cleanup",
      "--loop-load-elim",
      "--aggressive-instcombine",
      "--strip",
      "--slsr",
      "--separate-const-offset-from-gep",
      "--inject-tli-mappings",
      "--inline",
      "--loop-versioning",
      "--elim-avail-extern",
      "--lower-widenable-condition",
      "--sancov",
      "--called-value-propagation",
      "--loop-instsimplify",
      "--add-discriminators",
      "--loop-simplifycfg",
      "--coro-elide",
      "--indvars",
      "--instcombine",
      "--infer-address-spaces",
      "--loop-distribute",
      "--tailcallelim",
      "--globaldce"
    ],
    "performance_vs_Oz": "+0.8%"
  }
}
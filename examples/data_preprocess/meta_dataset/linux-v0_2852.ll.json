{
  "program_id": "linux-v0_2852.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 40,
    "onePredOneSuc": 29,
    "onePredTwoSuc": 10,
    "oneSuccessor": 37,
    "twoPred": 13,
    "twoPredOneSuc": 7,
    "twoEach": 3,
    "twoSuccessor": 17,
    "morePreds": 2,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 70,
    "BeginPhi": 2,
    "BranchCount": 54,
    "returnInt": 7,
    "CriticalCount": 11,
    "NumEdges": 76,
    "const32Bit": 213,
    "const64Bit": 6,
    "numConstZeroes": 83,
    "numConstOnes": 72,
    "UncondBranches": 37,
    "binaryConstArg": 28,
    "NumAShrInst": 0,
    "NumAddInst": 7,
    "NumAllocaInst": 50,
    "NumAndInst": 8,
    "BlockMid": 10,
    "BlockLow": 62,
    "NumBitCastInst": 14,
    "NumBrInst": 54,
    "NumCallInst": 33,
    "NumGetElementPtrInst": 55,
    "NumICmpInst": 22,
    "NumLShrInst": 3,
    "NumLoadInst": 165,
    "NumMulInst": 0,
    "NumOrInst": 4,
    "NumPHIInst": 2,
    "NumRetInst": 17,
    "NumSExtInst": 4,
    "NumSelectInst": 1,
    "NumShlInst": 2,
    "NumStoreInst": 70,
    "NumSubInst": 3,
    "NumTruncInst": 3,
    "NumXorInst": 6,
    "NumZExtInst": 12,
    "TotalBlocks": 72,
    "TotalInsts": 542,
    "TotalMemInst": 373,
    "TotalFuncs": 33,
    "ArgsPhi": 4,
    "testUnary": 252
  },
  "baseline_oz_instcount": 542,
  "knowledge_base_entry": [
    "--prune-eh",
    "--aggressive-instcombine",
    "--sroa",
    "--flattencfg",
    "--mem2reg",
    "--ipsccp",
    "--elim-avail-extern",
    "--licm",
    "--dce",
    "--lower-expect",
    "--correlated-propagation",
    "--loop-reroll",
    "-loop-reduce",
    "--newgvn",
    "--aggressive-instcombine",
    "--dse",
    "--mldst-motion",
    "--sroa",
    "--inline",
    "--bdce",
    "--early-cse",
    "--simplifycfg",
    "--loop-deletion",
    "--mem2reg",
    "--globalopt",
    "--sroa",
    "--load-store-vectorizer",
    "--reassociate"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--lowerinvoke",
          "--speculative-execution",
          "--loop-simplify",
          "--argpromotion",
          "--lower-matrix-intrinsics",
          "--aggressive-instcombine",
          "--guard-widening",
          "--loop-guard-widening",
          "--strip-debug-declare",
          "--gvn-hoist",
          "--inject-tli-mappings",
          "--globalopt",
          "--always-inline",
          "--constmerge",
          "--flattencfg"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--lowerinvoke",
      "--speculative-execution",
      "--loop-simplify",
      "--argpromotion",
      "--lower-matrix-intrinsics",
      "--aggressive-instcombine",
      "--guard-widening",
      "--loop-guard-widening",
      "--strip-debug-declare",
      "--gvn-hoist",
      "--inject-tli-mappings",
      "--globalopt",
      "--always-inline",
      "--constmerge",
      "--flattencfg"
    ],
    "performance_vs_Oz": "+0.4%"
  }
}
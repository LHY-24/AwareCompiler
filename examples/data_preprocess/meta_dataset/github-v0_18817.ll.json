{
  "program_id": "github-v0_18817.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 10,
    "onePredOneSuc": 7,
    "onePredTwoSuc": 1,
    "oneSuccessor": 8,
    "twoPred": 4,
    "twoPredOneSuc": 1,
    "twoEach": 2,
    "twoSuccessor": 5,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 17,
    "BeginPhi": 0,
    "BranchCount": 13,
    "returnInt": 4,
    "CriticalCount": 1,
    "NumEdges": 18,
    "const32Bit": 32,
    "const64Bit": 17,
    "numConstZeroes": 24,
    "numConstOnes": 18,
    "UncondBranches": 8,
    "binaryConstArg": 7,
    "NumAShrInst": 1,
    "NumAddInst": 5,
    "NumAllocaInst": 11,
    "NumAndInst": 1,
    "BlockMid": 3,
    "BlockLow": 14,
    "NumBitCastInst": 0,
    "NumBrInst": 13,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 13,
    "NumICmpInst": 5,
    "NumLShrInst": 0,
    "NumLoadInst": 21,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 14,
    "NumSubInst": 1,
    "NumTruncInst": 4,
    "NumXorInst": 0,
    "NumZExtInst": 7,
    "TotalBlocks": 17,
    "TotalInsts": 110,
    "TotalMemInst": 66,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 46
  },
  "baseline_oz_instcount": 110,
  "knowledge_base_entry": [
    "--deadargelim",
    "--mergefunc",
    "--aggressive-instcombine",
    "--die",
    "--lower-expect",
    "--dce",
    "--elim-avail-extern",
    "--memcpyopt",
    "--gvn",
    "--loop-instsimplify",
    "--reassociate",
    "--inline",
    "--load-store-vectorizer",
    "--instcombine"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--add-discriminators",
          "--div-rem-pairs",
          "--infer-address-spaces",
          "--slp-vectorizer",
          "--libcalls-shrinkwrap",
          "--pgo-memop-opt",
          "--coro-split",
          "--alignment-from-assumptions",
          "--constmerge",
          "--instcombine",
          "-loop-reduce",
          "--indvars",
          "--loop-simplify",
          "--mergereturn",
          "--callsite-splitting",
          "--aggressive-instcombine"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+6.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--add-discriminators",
      "--div-rem-pairs",
      "--infer-address-spaces",
      "--slp-vectorizer",
      "--libcalls-shrinkwrap",
      "--pgo-memop-opt",
      "--coro-split",
      "--alignment-from-assumptions",
      "--constmerge",
      "--instcombine",
      "-loop-reduce",
      "--indvars",
      "--loop-simplify",
      "--mergereturn",
      "--callsite-splitting",
      "--aggressive-instcombine"
    ],
    "performance_vs_Oz": "+6.4%"
  }
}
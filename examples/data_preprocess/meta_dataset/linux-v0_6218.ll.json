{
  "program_id": "linux-v0_6218.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 61,
    "onePredOneSuc": 39,
    "onePredTwoSuc": 20,
    "oneSuccessor": 46,
    "twoPred": 16,
    "twoPredOneSuc": 4,
    "twoEach": 10,
    "twoSuccessor": 34,
    "morePreds": 4,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 86,
    "BeginPhi": 2,
    "BranchCount": 80,
    "returnInt": 19,
    "CriticalCount": 14,
    "NumEdges": 118,
    "const32Bit": 154,
    "const64Bit": 12,
    "numConstZeroes": 56,
    "numConstOnes": 65,
    "UncondBranches": 46,
    "binaryConstArg": 16,
    "NumAShrInst": 0,
    "NumAddInst": 10,
    "NumAllocaInst": 58,
    "NumAndInst": 8,
    "BlockMid": 6,
    "BlockLow": 82,
    "NumBitCastInst": 11,
    "NumBrInst": 80,
    "NumCallInst": 32,
    "NumGetElementPtrInst": 31,
    "NumICmpInst": 34,
    "NumLShrInst": 3,
    "NumLoadInst": 153,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 2,
    "NumRetInst": 7,
    "NumSExtInst": 8,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 83,
    "NumSubInst": 2,
    "NumTruncInst": 8,
    "NumXorInst": 0,
    "NumZExtInst": 7,
    "TotalBlocks": 88,
    "TotalInsts": 539,
    "TotalMemInst": 357,
    "TotalFuncs": 15,
    "ArgsPhi": 4,
    "testUnary": 246
  },
  "baseline_oz_instcount": 540,
  "knowledge_base_entry": [
    "--lower-constant-intrinsics",
    "--mem2reg",
    "--inline",
    "--ipsccp",
    "--adce",
    "--sccp",
    "--gvn-hoist",
    "--bdce",
    "--correlated-propagation",
    "--simplifycfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--tailcallelim",
          "--nary-reassociate",
          "--always-inline",
          "--dce",
          "--jump-threading",
          "--sroa",
          "--constprop",
          "--coro-split",
          "--adce",
          "--early-cse"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--tailcallelim",
      "--nary-reassociate",
      "--always-inline",
      "--dce",
      "--jump-threading",
      "--sroa",
      "--constprop",
      "--coro-split",
      "--adce",
      "--early-cse"
    ],
    "performance_vs_Oz": "+0.2%"
  }
}
{
  "program_id": "github-v0_19328.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 65,
    "onePredOneSuc": 59,
    "onePredTwoSuc": 3,
    "oneSuccessor": 65,
    "twoPred": 13,
    "twoPredOneSuc": 3,
    "twoEach": 3,
    "twoSuccessor": 13,
    "morePreds": 7,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 103,
    "BeginPhi": 0,
    "BranchCount": 78,
    "returnInt": 53,
    "CriticalCount": 1,
    "NumEdges": 131,
    "const32Bit": 234,
    "const64Bit": 1,
    "numConstZeroes": 96,
    "numConstOnes": 59,
    "UncondBranches": 65,
    "binaryConstArg": 6,
    "NumAShrInst": 1,
    "NumAddInst": 11,
    "NumAllocaInst": 58,
    "NumAndInst": 1,
    "BlockMid": 5,
    "BlockLow": 98,
    "NumBitCastInst": 0,
    "NumBrInst": 78,
    "NumCallInst": 96,
    "NumGetElementPtrInst": 40,
    "NumICmpInst": 13,
    "NumLShrInst": 0,
    "NumLoadInst": 102,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 18,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 97,
    "NumSubInst": 4,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 9,
    "TotalBlocks": 103,
    "TotalInsts": 538,
    "TotalMemInst": 393,
    "TotalFuncs": 26,
    "ArgsPhi": 0,
    "testUnary": 172
  },
  "baseline_oz_instcount": 538,
  "knowledge_base_entry": [
    "--prune-eh",
    "--jump-threading",
    "--lower-constant-intrinsics",
    "--gvn",
    "--mergefunc",
    "--aggressive-instcombine",
    "--sroa",
    "--slp-vectorizer",
    "-loop-reduce",
    "--gvn-hoist",
    "--loop-reroll",
    "--early-cse-memssa",
    "--lower-expect",
    "--die",
    "--die",
    "--early-cse-memssa",
    "--instcombine",
    "--memcpyopt"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--indvars",
          "--dce",
          "--gvn-hoist",
          "--prune-eh",
          "--newgvn",
          "--name-anon-globals",
          "--partially-inline-libcalls",
          "--coro-elide",
          "--loop-versioning",
          "--pgo-memop-opt",
          "--argpromotion",
          "--mergefunc",
          "--loop-sink",
          "--alignment-from-assumptions",
          "--licm",
          "--redundant-dbg-inst-elim",
          "--early-cse",
          "--bdce",
          "--coro-split",
          "--strip-dead-prototypes",
          "--canonicalize-aliases",
          "--coro-cleanup",
          "--loop-unswitch",
          "--gvn",
          "--speculative-execution",
          "--loweratomic",
          "--strip",
          "--mldst-motion"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--indvars",
      "--dce",
      "--gvn-hoist",
      "--prune-eh",
      "--newgvn",
      "--name-anon-globals",
      "--partially-inline-libcalls",
      "--coro-elide",
      "--loop-versioning",
      "--pgo-memop-opt",
      "--argpromotion",
      "--mergefunc",
      "--loop-sink",
      "--alignment-from-assumptions",
      "--licm",
      "--redundant-dbg-inst-elim",
      "--early-cse",
      "--bdce",
      "--coro-split",
      "--strip-dead-prototypes",
      "--canonicalize-aliases",
      "--coro-cleanup",
      "--loop-unswitch",
      "--gvn",
      "--speculative-execution",
      "--loweratomic",
      "--strip",
      "--mldst-motion"
    ],
    "performance_vs_Oz": "+0.9%"
  }
}
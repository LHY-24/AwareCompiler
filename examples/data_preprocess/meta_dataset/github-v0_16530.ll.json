{
  "program_id": "github-v0_16530.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 7,
    "onePred": 73,
    "onePredOneSuc": 54,
    "onePredTwoSuc": 18,
    "oneSuccessor": 63,
    "twoPred": 25,
    "twoPredOneSuc": 8,
    "twoEach": 11,
    "twoSuccessor": 37,
    "morePreds": 3,
    "BB03Phi": 7,
    "BBHiPhi": 0,
    "BBNoPhi": 101,
    "BeginPhi": 7,
    "BranchCount": 100,
    "returnInt": 13,
    "CriticalCount": 9,
    "NumEdges": 137,
    "const32Bit": 226,
    "const64Bit": 34,
    "numConstZeroes": 112,
    "numConstOnes": 137,
    "UncondBranches": 63,
    "binaryConstArg": 81,
    "NumAShrInst": 0,
    "NumAddInst": 3,
    "NumAllocaInst": 59,
    "NumAndInst": 21,
    "BlockMid": 15,
    "BlockLow": 93,
    "NumBitCastInst": 15,
    "NumBrInst": 100,
    "NumCallInst": 37,
    "NumGetElementPtrInst": 63,
    "NumICmpInst": 56,
    "NumLShrInst": 7,
    "NumLoadInst": 196,
    "NumMulInst": 0,
    "NumOrInst": 8,
    "NumPHIInst": 7,
    "NumRetInst": 7,
    "NumSExtInst": 24,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 125,
    "NumSubInst": 5,
    "NumTruncInst": 2,
    "NumXorInst": 42,
    "NumZExtInst": 29,
    "TotalBlocks": 108,
    "TotalInsts": 808,
    "TotalMemInst": 480,
    "TotalFuncs": 22,
    "ArgsPhi": 14,
    "testUnary": 325
  },
  "baseline_oz_instcount": 808,
  "knowledge_base_entry": [
    "--loop-simplify",
    "--early-cse-memssa",
    "--indvars",
    "-loop-reduce",
    "--instcombine",
    "--prune-eh",
    "--aggressive-instcombine",
    "--loop-rotate",
    "--loop-simplifycfg",
    "--gvn",
    "--slp-vectorizer",
    "--mldst-motion",
    "--dse",
    "--early-cse-memssa",
    "--indvars",
    "--early-cse",
    "--ipsccp",
    "--mem2reg",
    "--loop-deletion",
    "--jump-threading",
    "--dce",
    "--mem2reg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--inject-tli-mappings",
          "--loop-distribute",
          "--loop-vectorize",
          "--speculative-execution",
          "--dce",
          "--strip-nondebug",
          "--loop-deletion",
          "--loop-simplify",
          "--lower-widenable-condition",
          "--newgvn",
          "--licm",
          "--loop-unswitch",
          "--mldst-motion",
          "--gvn",
          "--rpo-functionattrs",
          "--aggressive-instcombine",
          "--loop-unroll",
          "--loweratomic",
          "--loop-rotate",
          "--inline",
          "--instsimplify",
          "--slsr",
          "--mergefunc",
          "--guard-widening",
          "--sink",
          "--post-inline-ee-instrument",
          "--memcpyopt",
          "--loop-fusion",
          "--loop-guard-widening",
          "--constprop"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--inject-tli-mappings",
      "--loop-distribute",
      "--loop-vectorize",
      "--speculative-execution",
      "--dce",
      "--strip-nondebug",
      "--loop-deletion",
      "--loop-simplify",
      "--lower-widenable-condition",
      "--newgvn",
      "--licm",
      "--loop-unswitch",
      "--mldst-motion",
      "--gvn",
      "--rpo-functionattrs",
      "--aggressive-instcombine",
      "--loop-unroll",
      "--loweratomic",
      "--loop-rotate",
      "--inline",
      "--instsimplify",
      "--slsr",
      "--mergefunc",
      "--guard-widening",
      "--sink",
      "--post-inline-ee-instrument",
      "--memcpyopt",
      "--loop-fusion",
      "--loop-guard-widening",
      "--constprop"
    ],
    "performance_vs_Oz": "+0.1%"
  }
}
{
  "program_id": "github-v0_35251.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 0,
    "onePredOneSuc": 0,
    "onePredTwoSuc": 0,
    "oneSuccessor": 0,
    "twoPred": 0,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 0,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 3,
    "BeginPhi": 0,
    "BranchCount": 0,
    "returnInt": 1,
    "CriticalCount": 0,
    "NumEdges": 0,
    "const32Bit": 16,
    "const64Bit": 0,
    "numConstZeroes": 0,
    "numConstOnes": 8,
    "UncondBranches": 0,
    "binaryConstArg": 8,
    "NumAShrInst": 2,
    "NumAddInst": 1,
    "NumAllocaInst": 8,
    "NumAndInst": 2,
    "BlockMid": 3,
    "BlockLow": 0,
    "NumBitCastInst": 0,
    "NumBrInst": 0,
    "NumCallInst": 1,
    "NumGetElementPtrInst": 0,
    "NumICmpInst": 0,
    "NumLShrInst": 1,
    "NumLoadInst": 20,
    "NumMulInst": 3,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 15,
    "NumSubInst": 2,
    "NumTruncInst": 5,
    "NumXorInst": 2,
    "NumZExtInst": 6,
    "TotalBlocks": 3,
    "TotalInsts": 73,
    "TotalMemInst": 44,
    "TotalFuncs": 3,
    "ArgsPhi": 0,
    "testUnary": 41
  },
  "baseline_oz_instcount": 73,
  "knowledge_base_entry": [
    "--simple-loop-unswitch",
    "--early-cse-memssa",
    "--ipsccp",
    "--bdce",
    "--aggressive-instcombine",
    "--mergefunc",
    "-loop-reduce",
    "--slp-vectorizer",
    "--die",
    "--inline",
    "--reassociate",
    "--dce",
    "--dse",
    "--correlated-propagation"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-load-elim",
          "--redundant-dbg-inst-elim",
          "--aggressive-instcombine",
          "--globaldce",
          "--div-rem-pairs",
          "--flattencfg",
          "--libcalls-shrinkwrap",
          "--coro-split",
          "--bdce",
          "--lowerswitch",
          "--float2int",
          "--prune-eh",
          "--loop-unroll",
          "--lower-matrix-intrinsics",
          "-loop-reduce",
          "--globalopt",
          "--slsr",
          "--simplifycfg",
          "--barrier",
          "--loop-sink",
          "--simple-loop-unswitch",
          "--partial-inliner",
          "--lower-expect",
          "--ipsccp",
          "--load-store-vectorizer"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+9.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-load-elim",
      "--redundant-dbg-inst-elim",
      "--aggressive-instcombine",
      "--globaldce",
      "--div-rem-pairs",
      "--flattencfg",
      "--libcalls-shrinkwrap",
      "--coro-split",
      "--bdce",
      "--lowerswitch",
      "--float2int",
      "--prune-eh",
      "--loop-unroll",
      "--lower-matrix-intrinsics",
      "-loop-reduce",
      "--globalopt",
      "--slsr",
      "--simplifycfg",
      "--barrier",
      "--loop-sink",
      "--simple-loop-unswitch",
      "--partial-inliner",
      "--lower-expect",
      "--ipsccp",
      "--load-store-vectorizer"
    ],
    "performance_vs_Oz": "+9.6%"
  }
}
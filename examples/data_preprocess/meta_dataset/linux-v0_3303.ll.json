{
  "program_id": "linux-v0_3303.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 27,
    "onePredOneSuc": 20,
    "onePredTwoSuc": 6,
    "oneSuccessor": 24,
    "twoPred": 10,
    "twoPredOneSuc": 2,
    "twoEach": 0,
    "twoSuccessor": 15,
    "morePreds": 3,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 55,
    "BeginPhi": 0,
    "BranchCount": 38,
    "returnInt": 9,
    "CriticalCount": 7,
    "NumEdges": 58,
    "const32Bit": 196,
    "const64Bit": 18,
    "numConstZeroes": 89,
    "numConstOnes": 69,
    "UncondBranches": 24,
    "binaryConstArg": 8,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 64,
    "NumAndInst": 3,
    "BlockMid": 12,
    "BlockLow": 43,
    "NumBitCastInst": 20,
    "NumBrInst": 38,
    "NumCallInst": 47,
    "NumGetElementPtrInst": 51,
    "NumICmpInst": 14,
    "NumLShrInst": 0,
    "NumLoadInst": 126,
    "NumMulInst": 0,
    "NumOrInst": 4,
    "NumPHIInst": 0,
    "NumRetInst": 15,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 89,
    "NumSubInst": 0,
    "NumTruncInst": 6,
    "NumXorInst": 0,
    "NumZExtInst": 8,
    "TotalBlocks": 55,
    "TotalInsts": 495,
    "TotalMemInst": 377,
    "TotalFuncs": 50,
    "ArgsPhi": 0,
    "testUnary": 231
  },
  "baseline_oz_instcount": 497,
  "knowledge_base_entry": [
    "--lower-constant-intrinsics",
    "--slp-vectorizer",
    "--gvn-hoist",
    "--elim-avail-extern",
    "--mldst-motion",
    "--instcombine",
    "--aggressive-instcombine",
    "--dce",
    "--early-cse-memssa",
    "--aggressive-instcombine",
    "--dce",
    "--sroa",
    "--gvn-hoist",
    "--elim-avail-extern",
    "--mldst-motion",
    "--instcombine",
    "--aggressive-instcombine",
    "--die",
    "--newgvn",
    "--dse",
    "--dce",
    "--elim-avail-extern",
    "--bdce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--dce",
          "--ipsccp",
          "--aggressive-instcombine",
          "--inject-tli-mappings",
          "--loop-versioning-licm",
          "--rpo-functionattrs",
          "--float2int",
          "--lower-matrix-intrinsics",
          "--infer-address-spaces",
          "--always-inline",
          "--consthoist",
          "--slsr",
          "--correlated-propagation",
          "--lower-widenable-condition",
          "--strip",
          "--constprop",
          "--early-cse",
          "--alignment-from-assumptions"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--dce",
      "--ipsccp",
      "--aggressive-instcombine",
      "--inject-tli-mappings",
      "--loop-versioning-licm",
      "--rpo-functionattrs",
      "--float2int",
      "--lower-matrix-intrinsics",
      "--infer-address-spaces",
      "--always-inline",
      "--consthoist",
      "--slsr",
      "--correlated-propagation",
      "--lower-widenable-condition",
      "--strip",
      "--constprop",
      "--early-cse",
      "--alignment-from-assumptions"
    ],
    "performance_vs_Oz": "+1.4%"
  }
}
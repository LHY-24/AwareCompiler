{
  "program_id": "github-v0_41636.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 21,
    "onePredOneSuc": 18,
    "onePredTwoSuc": 2,
    "oneSuccessor": 20,
    "twoPred": 7,
    "twoPredOneSuc": 2,
    "twoEach": 5,
    "twoSuccessor": 9,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 32,
    "BeginPhi": 0,
    "BranchCount": 29,
    "returnInt": 7,
    "CriticalCount": 2,
    "NumEdges": 38,
    "const32Bit": 66,
    "const64Bit": 31,
    "numConstZeroes": 36,
    "numConstOnes": 38,
    "UncondBranches": 20,
    "binaryConstArg": 19,
    "NumAShrInst": 0,
    "NumAddInst": 13,
    "NumAllocaInst": 33,
    "NumAndInst": 2,
    "BlockMid": 5,
    "BlockLow": 27,
    "NumBitCastInst": 0,
    "NumBrInst": 29,
    "NumCallInst": 26,
    "NumGetElementPtrInst": 26,
    "NumICmpInst": 9,
    "NumLShrInst": 0,
    "NumLoadInst": 65,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 35,
    "NumSubInst": 4,
    "NumTruncInst": 3,
    "NumXorInst": 0,
    "NumZExtInst": 3,
    "TotalBlocks": 32,
    "TotalInsts": 252,
    "TotalMemInst": 185,
    "TotalFuncs": 16,
    "ArgsPhi": 0,
    "testUnary": 104
  },
  "baseline_oz_instcount": 252,
  "knowledge_base_entry": [
    "--ipsccp",
    "--loweratomic",
    "--aggressive-instcombine",
    "--loweratomic",
    "--instcombine",
    "--bdce",
    "--dse",
    "--simplifycfg",
    "--die",
    "--sccp",
    "--elim-avail-extern",
    "--gvn",
    "--globalopt",
    "--instcombine",
    "--adce",
    "--licm"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--mergereturn",
          "--dce",
          "--libcalls-shrinkwrap",
          "--attributor",
          "--loop-versioning-licm",
          "--jump-threading",
          "--slsr",
          "--cross-dso-cfi",
          "--mergefunc",
          "--aggressive-instcombine",
          "--loop-instsimplify",
          "--rpo-functionattrs",
          "--adce",
          "--instnamer",
          "--float2int",
          "--licm",
          "--lower-guard-intrinsic",
          "--lowerswitch",
          "--ipconstprop",
          "--alignment-from-assumptions",
          "--strip-nondebug",
          "--loop-sink",
          "--sink",
          "--partial-inliner",
          "--bdce"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--mergereturn",
      "--dce",
      "--libcalls-shrinkwrap",
      "--attributor",
      "--loop-versioning-licm",
      "--jump-threading",
      "--slsr",
      "--cross-dso-cfi",
      "--mergefunc",
      "--aggressive-instcombine",
      "--loop-instsimplify",
      "--rpo-functionattrs",
      "--adce",
      "--instnamer",
      "--float2int",
      "--licm",
      "--lower-guard-intrinsic",
      "--lowerswitch",
      "--ipconstprop",
      "--alignment-from-assumptions",
      "--strip-nondebug",
      "--loop-sink",
      "--sink",
      "--partial-inliner",
      "--bdce"
    ],
    "performance_vs_Oz": "+2.4%"
  }
}
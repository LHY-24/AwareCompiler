{
  "program_id": "linux-v0_6630.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 3,
    "onePred": 94,
    "onePredOneSuc": 59,
    "onePredTwoSuc": 32,
    "oneSuccessor": 81,
    "twoPred": 28,
    "twoPredOneSuc": 14,
    "twoEach": 8,
    "twoSuccessor": 51,
    "morePreds": 11,
    "BB03Phi": 3,
    "BBHiPhi": 0,
    "BBNoPhi": 160,
    "BeginPhi": 3,
    "BranchCount": 132,
    "returnInt": 19,
    "CriticalCount": 39,
    "NumEdges": 188,
    "const32Bit": 329,
    "const64Bit": 28,
    "numConstZeroes": 161,
    "numConstOnes": 144,
    "UncondBranches": 81,
    "binaryConstArg": 28,
    "NumAShrInst": 1,
    "NumAddInst": 5,
    "NumAllocaInst": 103,
    "NumAndInst": 4,
    "BlockMid": 15,
    "BlockLow": 148,
    "NumBitCastInst": 33,
    "NumBrInst": 132,
    "NumCallInst": 92,
    "NumGetElementPtrInst": 86,
    "NumICmpInst": 41,
    "NumLShrInst": 0,
    "NumLoadInst": 240,
    "NumMulInst": 2,
    "NumOrInst": 1,
    "NumPHIInst": 3,
    "NumRetInst": 30,
    "NumSExtInst": 11,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 142,
    "NumSubInst": 0,
    "NumTruncInst": 21,
    "NumXorInst": 17,
    "NumZExtInst": 18,
    "TotalBlocks": 163,
    "TotalInsts": 995,
    "TotalMemInst": 663,
    "TotalFuncs": 51,
    "ArgsPhi": 8,
    "testUnary": 437
  },
  "baseline_oz_instcount": 1008,
  "knowledge_base_entry": [
    "--loop-sink",
    "--newgvn",
    "--jump-threading",
    "--sccp",
    "--globalopt",
    "--correlated-propagation",
    "--lower-constant-intrinsics",
    "--loop-rotate",
    "--newgvn",
    "--load-store-vectorizer",
    "--slp-vectorizer",
    "--newgvn",
    "--lower-constant-intrinsics",
    "--loop-simplifycfg",
    "--aggressive-instcombine",
    "--prune-eh",
    "--gvn-hoist",
    "--instcombine",
    "--mldst-motion",
    "--mem2reg",
    "--instsimplify",
    "--aggressive-instcombine",
    "--sroa",
    "--slp-vectorizer",
    "--lower-expect",
    "--dse",
    "--bdce",
    "--gvn-hoist",
    "--die",
    "--newgvn",
    "--ipsccp",
    "--correlated-propagation",
    "--lower-constant-intrinsics",
    "--ipsccp",
    "--globalopt",
    "--gvn-hoist",
    "--die",
    "--load-store-vectorizer",
    "--instsimplify",
    "--aggressive-instcombine",
    "--sroa",
    "--indvars",
    "--simplifycfg",
    "--inline"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--sancov",
          "--loop-unroll",
          "--ee-instrument",
          "--div-rem-pairs",
          "--load-store-vectorizer",
          "--called-value-propagation",
          "--lower-guard-intrinsic",
          "--hotcoldsplit",
          "--callsite-splitting",
          "--alignment-from-assumptions",
          "--simple-loop-unswitch",
          "--memcpyopt",
          "--rpo-functionattrs",
          "--canonicalize-aliases",
          "--loop-vectorize",
          "--loop-load-elim",
          "--lower-matrix-intrinsics",
          "--licm",
          "--prune-eh",
          "--slp-vectorizer",
          "--loop-deletion",
          "--loop-rotate",
          "--constmerge"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--sancov",
      "--loop-unroll",
      "--ee-instrument",
      "--div-rem-pairs",
      "--load-store-vectorizer",
      "--called-value-propagation",
      "--lower-guard-intrinsic",
      "--hotcoldsplit",
      "--callsite-splitting",
      "--alignment-from-assumptions",
      "--simple-loop-unswitch",
      "--memcpyopt",
      "--rpo-functionattrs",
      "--canonicalize-aliases",
      "--loop-vectorize",
      "--loop-load-elim",
      "--lower-matrix-intrinsics",
      "--licm",
      "--prune-eh",
      "--slp-vectorizer",
      "--loop-deletion",
      "--loop-rotate",
      "--constmerge"
    ],
    "performance_vs_Oz": "+1.3%"
  }
}
{
  "program_id": "github-v0_18510.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 15,
    "onePredOneSuc": 9,
    "onePredTwoSuc": 4,
    "oneSuccessor": 13,
    "twoPred": 7,
    "twoPredOneSuc": 4,
    "twoEach": 2,
    "twoSuccessor": 8,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 25,
    "BeginPhi": 0,
    "BranchCount": 21,
    "returnInt": 4,
    "CriticalCount": 2,
    "NumEdges": 29,
    "const32Bit": 41,
    "const64Bit": 25,
    "numConstZeroes": 33,
    "numConstOnes": 22,
    "UncondBranches": 13,
    "binaryConstArg": 15,
    "NumAShrInst": 3,
    "NumAddInst": 4,
    "NumAllocaInst": 11,
    "NumAndInst": 5,
    "BlockMid": 3,
    "BlockLow": 22,
    "NumBitCastInst": 0,
    "NumBrInst": 21,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 16,
    "NumICmpInst": 8,
    "NumLShrInst": 0,
    "NumLoadInst": 24,
    "NumMulInst": 1,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 14,
    "NumSubInst": 0,
    "NumTruncInst": 4,
    "NumXorInst": 1,
    "NumZExtInst": 10,
    "TotalBlocks": 25,
    "TotalInsts": 138,
    "TotalMemInst": 72,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 52
  },
  "baseline_oz_instcount": 138,
  "knowledge_base_entry": [
    "--strip-nondebug",
    "--mergefunc",
    "--simplifycfg",
    "--die",
    "--early-cse",
    "--mldst-motion",
    "--sroa",
    "--mergefunc",
    "--correlated-propagation",
    "--nary-reassociate",
    "--dse",
    "--aggressive-instcombine",
    "--dce",
    "--sccp",
    "--bdce",
    "--ipsccp",
    "--reassociate",
    "-loop-reduce",
    "--gvn",
    "--globalopt"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--early-cse-memssa",
          "--dse",
          "--loop-load-elim",
          "--loop-guard-widening",
          "--loop-interchange",
          "--libcalls-shrinkwrap",
          "--insert-gcov-profiling",
          "--load-store-vectorizer",
          "--correlated-propagation",
          "--loop-distribute",
          "--functionattrs",
          "--reassociate",
          "--lower-guard-intrinsic",
          "--loop-simplifycfg",
          "--loop-deletion",
          "--gvn",
          "--consthoist",
          "--add-discriminators",
          "--argpromotion",
          "--redundant-dbg-inst-elim",
          "--aggressive-instcombine",
          "--coro-elide",
          "--die",
          "--sccp"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--early-cse-memssa",
      "--dse",
      "--loop-load-elim",
      "--loop-guard-widening",
      "--loop-interchange",
      "--libcalls-shrinkwrap",
      "--insert-gcov-profiling",
      "--load-store-vectorizer",
      "--correlated-propagation",
      "--loop-distribute",
      "--functionattrs",
      "--reassociate",
      "--lower-guard-intrinsic",
      "--loop-simplifycfg",
      "--loop-deletion",
      "--gvn",
      "--consthoist",
      "--add-discriminators",
      "--argpromotion",
      "--redundant-dbg-inst-elim",
      "--aggressive-instcombine",
      "--coro-elide",
      "--die",
      "--sccp"
    ],
    "performance_vs_Oz": "+2.9%"
  }
}
{
  "program_id": "github-v0_16011.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 3,
    "onePred": 60,
    "onePredOneSuc": 44,
    "onePredTwoSuc": 16,
    "oneSuccessor": 58,
    "twoPred": 26,
    "twoPredOneSuc": 11,
    "twoEach": 12,
    "twoSuccessor": 30,
    "morePreds": 2,
    "BB03Phi": 3,
    "BBHiPhi": 0,
    "BBNoPhi": 90,
    "BeginPhi": 3,
    "BranchCount": 88,
    "returnInt": 7,
    "CriticalCount": 9,
    "NumEdges": 118,
    "const32Bit": 159,
    "const64Bit": 13,
    "numConstZeroes": 44,
    "numConstOnes": 80,
    "UncondBranches": 58,
    "binaryConstArg": 64,
    "NumAShrInst": 16,
    "NumAddInst": 24,
    "NumAllocaInst": 47,
    "NumAndInst": 3,
    "BlockMid": 11,
    "BlockLow": 82,
    "NumBitCastInst": 0,
    "NumBrInst": 88,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 23,
    "NumICmpInst": 30,
    "NumLShrInst": 0,
    "NumLoadInst": 188,
    "NumMulInst": 12,
    "NumOrInst": 0,
    "NumPHIInst": 3,
    "NumRetInst": 5,
    "NumSExtInst": 85,
    "NumSelectInst": 0,
    "NumShlInst": 25,
    "NumStoreInst": 126,
    "NumSubInst": 13,
    "NumTruncInst": 25,
    "NumXorInst": 1,
    "NumZExtInst": 0,
    "TotalBlocks": 93,
    "TotalInsts": 721,
    "TotalMemInst": 391,
    "TotalFuncs": 5,
    "ArgsPhi": 6,
    "testUnary": 345
  },
  "baseline_oz_instcount": 721,
  "knowledge_base_entry": [
    "--load-store-vectorizer",
    "--jump-threading",
    "--lower-constant-intrinsics",
    "--instsimplify",
    "--adce",
    "--ipsccp",
    "--mergefunc",
    "--dse",
    "--aggressive-instcombine",
    "--dce",
    "--reassociate",
    "--gvn-hoist",
    "--gvn-hoist",
    "--ipsccp",
    "--nary-reassociate",
    "--newgvn",
    "--reassociate",
    "--ipsccp",
    "--newgvn",
    "--gvn-hoist",
    "--gvn-hoist",
    "--dse",
    "--adce",
    "--correlated-propagation",
    "--instcombine"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--called-value-propagation",
          "--load-store-vectorizer",
          "--instnamer",
          "--aggressive-instcombine",
          "--infer-address-spaces",
          "--callsite-splitting",
          "--instsimplify",
          "--lowerinvoke",
          "--elim-avail-extern",
          "--name-anon-globals"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--called-value-propagation",
      "--load-store-vectorizer",
      "--instnamer",
      "--aggressive-instcombine",
      "--infer-address-spaces",
      "--callsite-splitting",
      "--instsimplify",
      "--lowerinvoke",
      "--elim-avail-extern",
      "--name-anon-globals"
    ],
    "performance_vs_Oz": "+2.5%"
  }
}
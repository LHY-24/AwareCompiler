{
  "program_id": "github-v0_12624.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 6,
    "onePredOneSuc": 4,
    "onePredTwoSuc": 1,
    "oneSuccessor": 8,
    "twoPred": 2,
    "twoPredOneSuc": 2,
    "twoEach": 0,
    "twoSuccessor": 1,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 11,
    "BeginPhi": 0,
    "BranchCount": 9,
    "returnInt": 0,
    "CriticalCount": 0,
    "NumEdges": 10,
    "const32Bit": 28,
    "const64Bit": 10,
    "numConstZeroes": 6,
    "numConstOnes": 20,
    "UncondBranches": 8,
    "binaryConstArg": 1,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 17,
    "NumAndInst": 0,
    "BlockMid": 3,
    "BlockLow": 8,
    "NumBitCastInst": 6,
    "NumBrInst": 9,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 11,
    "NumICmpInst": 2,
    "NumLShrInst": 0,
    "NumLoadInst": 32,
    "NumMulInst": 1,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 2,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 19,
    "NumSubInst": 0,
    "NumTruncInst": 1,
    "NumXorInst": 0,
    "NumZExtInst": 2,
    "TotalBlocks": 11,
    "TotalInsts": 109,
    "TotalMemInst": 86,
    "TotalFuncs": 9,
    "ArgsPhi": 0,
    "testUnary": 58
  },
  "baseline_oz_instcount": 107,
  "knowledge_base_entry": [
    "--lowerswitch",
    "--loop-simplifycfg",
    "--instcombine",
    "--globalopt",
    "--inline",
    "--elim-avail-extern",
    "--aggressive-instcombine",
    "--prune-eh",
    "--mem2reg",
    "--early-cse-memssa",
    "--inline",
    "--simplifycfg",
    "--mem2reg",
    "--gvn-hoist",
    "--loop-rotate",
    "--early-cse-memssa",
    "--loop-deletion",
    "--instcombine",
    "--dce",
    "--inline",
    "--sccp"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--dse",
          "--loweratomic",
          "--globaldce",
          "--newgvn",
          "--aggressive-instcombine",
          "--hotcoldsplit",
          "--loop-vectorize",
          "--ee-instrument",
          "--reg2mem",
          "--globalopt",
          "--functionattrs",
          "--break-crit-edges",
          "--separate-const-offset-from-gep",
          "--coro-early",
          "--sroa",
          "--instnamer",
          "--adce",
          "--lower-widenable-condition",
          "--strip",
          "--loop-versioning-licm",
          "--callsite-splitting",
          "--ipsccp",
          "--nary-reassociate",
          "--loop-distribute",
          "--simplifycfg",
          "--loop-reroll",
          "--insert-gcov-profiling",
          "--prune-eh",
          "--called-value-propagation"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--dse",
      "--loweratomic",
      "--globaldce",
      "--newgvn",
      "--aggressive-instcombine",
      "--hotcoldsplit",
      "--loop-vectorize",
      "--ee-instrument",
      "--reg2mem",
      "--globalopt",
      "--functionattrs",
      "--break-crit-edges",
      "--separate-const-offset-from-gep",
      "--coro-early",
      "--sroa",
      "--instnamer",
      "--adce",
      "--lower-widenable-condition",
      "--strip",
      "--loop-versioning-licm",
      "--callsite-splitting",
      "--ipsccp",
      "--nary-reassociate",
      "--loop-distribute",
      "--simplifycfg",
      "--loop-reroll",
      "--insert-gcov-profiling",
      "--prune-eh",
      "--called-value-propagation"
    ],
    "performance_vs_Oz": "+0.9%"
  }
}
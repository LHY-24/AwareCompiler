{
  "program_id": "github-v0_47346.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 70,
    "onePredOneSuc": 46,
    "onePredTwoSuc": 18,
    "oneSuccessor": 63,
    "twoPred": 32,
    "twoPredOneSuc": 14,
    "twoEach": 13,
    "twoSuccessor": 37,
    "morePreds": 1,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 114,
    "BeginPhi": 1,
    "BranchCount": 100,
    "returnInt": 0,
    "CriticalCount": 20,
    "NumEdges": 137,
    "const32Bit": 311,
    "const64Bit": 42,
    "numConstZeroes": 179,
    "numConstOnes": 67,
    "UncondBranches": 63,
    "binaryConstArg": 23,
    "NumAShrInst": 0,
    "NumAddInst": 14,
    "NumAllocaInst": 38,
    "NumAndInst": 0,
    "BlockMid": 19,
    "BlockLow": 96,
    "NumBitCastInst": 19,
    "NumBrInst": 100,
    "NumCallInst": 41,
    "NumGetElementPtrInst": 161,
    "NumICmpInst": 38,
    "NumLShrInst": 0,
    "NumLoadInst": 308,
    "NumMulInst": 5,
    "NumOrInst": 0,
    "NumPHIInst": 1,
    "NumRetInst": 12,
    "NumSExtInst": 12,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 89,
    "NumSubInst": 4,
    "NumTruncInst": 1,
    "NumXorInst": 2,
    "NumZExtInst": 2,
    "TotalBlocks": 115,
    "TotalInsts": 851,
    "TotalMemInst": 637,
    "TotalFuncs": 19,
    "ArgsPhi": 2,
    "testUnary": 380
  },
  "baseline_oz_instcount": 853,
  "knowledge_base_entry": [
    "--separate-const-offset-from-gep",
    "--instcombine",
    "--adce",
    "--instsimplify",
    "--mem2reg",
    "--jump-threading",
    "--load-store-vectorizer",
    "--memcpyopt",
    "--simplifycfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--coro-early",
          "--partially-inline-libcalls",
          "--called-value-propagation",
          "--barrier",
          "--slsr",
          "--newgvn",
          "--instsimplify",
          "--loop-versioning",
          "--insert-gcov-profiling",
          "--die"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--coro-early",
      "--partially-inline-libcalls",
      "--called-value-propagation",
      "--barrier",
      "--slsr",
      "--newgvn",
      "--instsimplify",
      "--loop-versioning",
      "--insert-gcov-profiling",
      "--die"
    ],
    "performance_vs_Oz": "+0.2%"
  }
}
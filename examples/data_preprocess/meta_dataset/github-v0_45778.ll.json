{
  "program_id": "github-v0_45778.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 55,
    "onePredOneSuc": 37,
    "onePredTwoSuc": 17,
    "oneSuccessor": 50,
    "twoPred": 21,
    "twoPredOneSuc": 8,
    "twoEach": 9,
    "twoSuccessor": 30,
    "morePreds": 5,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 85,
    "BeginPhi": 2,
    "BranchCount": 80,
    "returnInt": 5,
    "CriticalCount": 11,
    "NumEdges": 115,
    "const32Bit": 160,
    "const64Bit": 35,
    "numConstZeroes": 58,
    "numConstOnes": 78,
    "UncondBranches": 50,
    "binaryConstArg": 23,
    "NumAShrInst": 0,
    "NumAddInst": 14,
    "NumAllocaInst": 32,
    "NumAndInst": 1,
    "BlockMid": 13,
    "BlockLow": 74,
    "NumBitCastInst": 0,
    "NumBrInst": 80,
    "NumCallInst": 8,
    "NumGetElementPtrInst": 62,
    "NumICmpInst": 31,
    "NumLShrInst": 0,
    "NumLoadInst": 180,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 2,
    "NumRetInst": 5,
    "NumSExtInst": 14,
    "NumSelectInst": 1,
    "NumShlInst": 0,
    "NumStoreInst": 129,
    "NumSubInst": 19,
    "NumTruncInst": 21,
    "NumXorInst": 0,
    "NumZExtInst": 9,
    "TotalBlocks": 87,
    "TotalInsts": 621,
    "TotalMemInst": 411,
    "TotalFuncs": 11,
    "ArgsPhi": 4,
    "testUnary": 267
  },
  "baseline_oz_instcount": 623,
  "knowledge_base_entry": [
    "--early-cse",
    "--prune-eh",
    "--aggressive-instcombine",
    "--globalopt",
    "--mergefunc"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--slsr",
          "--loop-unroll-and-jam",
          "--ipsccp",
          "--instcombine",
          "--dce",
          "--redundant-dbg-inst-elim",
          "--sroa",
          "--partial-inliner",
          "--sccp",
          "--lower-widenable-condition",
          "--mergereturn"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--slsr",
      "--loop-unroll-and-jam",
      "--ipsccp",
      "--instcombine",
      "--dce",
      "--redundant-dbg-inst-elim",
      "--sroa",
      "--partial-inliner",
      "--sccp",
      "--lower-widenable-condition",
      "--mergereturn"
    ],
    "performance_vs_Oz": "+0.5%"
  }
}
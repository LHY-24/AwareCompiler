{
  "program_id": "linux-v0_10471.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 36,
    "onePredOneSuc": 26,
    "onePredTwoSuc": 10,
    "oneSuccessor": 32,
    "twoPred": 14,
    "twoPredOneSuc": 2,
    "twoEach": 4,
    "twoSuccessor": 22,
    "morePreds": 4,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 73,
    "BeginPhi": 0,
    "BranchCount": 54,
    "returnInt": 27,
    "CriticalCount": 12,
    "NumEdges": 76,
    "const32Bit": 174,
    "const64Bit": 16,
    "numConstZeroes": 105,
    "numConstOnes": 58,
    "UncondBranches": 32,
    "binaryConstArg": 5,
    "NumAShrInst": 0,
    "NumAddInst": 6,
    "NumAllocaInst": 51,
    "NumAndInst": 0,
    "BlockMid": 7,
    "BlockLow": 66,
    "NumBitCastInst": 12,
    "NumBrInst": 54,
    "NumCallInst": 44,
    "NumGetElementPtrInst": 47,
    "NumICmpInst": 23,
    "NumLShrInst": 0,
    "NumLoadInst": 138,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 19,
    "NumSExtInst": 10,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 72,
    "NumSubInst": 1,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 3,
    "TotalBlocks": 73,
    "TotalInsts": 482,
    "TotalMemInst": 352,
    "TotalFuncs": 41,
    "ArgsPhi": 0,
    "testUnary": 216
  },
  "baseline_oz_instcount": 484,
  "knowledge_base_entry": [
    "--lower-constant-intrinsics",
    "--loop-rotate",
    "--aggressive-instcombine",
    "--prune-eh",
    "--sroa",
    "--ipsccp",
    "--gvn-hoist",
    "--instsimplify",
    "--load-store-vectorizer",
    "--gvn-hoist",
    "--newgvn",
    "--gvn",
    "--early-cse-memssa",
    "--inline",
    "--early-cse",
    "--dce",
    "--elim-avail-extern",
    "--loop-simplifycfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--deadargelim",
          "--loop-instsimplify",
          "--barrier",
          "--sink",
          "--loop-distribute",
          "--dce",
          "--loop-guard-widening",
          "--simple-loop-unswitch",
          "--strip-dead-prototypes",
          "--newgvn",
          "--simplifycfg",
          "--libcalls-shrinkwrap",
          "--mldst-motion"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--deadargelim",
      "--loop-instsimplify",
      "--barrier",
      "--sink",
      "--loop-distribute",
      "--dce",
      "--loop-guard-widening",
      "--simple-loop-unswitch",
      "--strip-dead-prototypes",
      "--newgvn",
      "--simplifycfg",
      "--libcalls-shrinkwrap",
      "--mldst-motion"
    ],
    "performance_vs_Oz": "+0.4%"
  }
}
{
  "program_id": "github-v0_49136.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 59,
    "onePredOneSuc": 34,
    "onePredTwoSuc": 25,
    "oneSuccessor": 40,
    "twoPred": 10,
    "twoPredOneSuc": 3,
    "twoEach": 7,
    "twoSuccessor": 35,
    "morePreds": 6,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 79,
    "BeginPhi": 0,
    "BranchCount": 75,
    "returnInt": 23,
    "CriticalCount": 13,
    "NumEdges": 110,
    "const32Bit": 233,
    "const64Bit": 20,
    "numConstZeroes": 99,
    "numConstOnes": 79,
    "UncondBranches": 40,
    "binaryConstArg": 10,
    "NumAShrInst": 0,
    "NumAddInst": 3,
    "NumAllocaInst": 59,
    "NumAndInst": 4,
    "BlockMid": 9,
    "BlockLow": 70,
    "NumBitCastInst": 7,
    "NumBrInst": 75,
    "NumCallInst": 59,
    "NumGetElementPtrInst": 48,
    "NumICmpInst": 35,
    "NumLShrInst": 3,
    "NumLoadInst": 137,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 4,
    "NumSExtInst": 9,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 82,
    "NumSubInst": 1,
    "NumTruncInst": 7,
    "NumXorInst": 1,
    "NumZExtInst": 3,
    "TotalBlocks": 79,
    "TotalInsts": 537,
    "TotalMemInst": 385,
    "TotalFuncs": 30,
    "ArgsPhi": 0,
    "testUnary": 222
  },
  "baseline_oz_instcount": 537,
  "knowledge_base_entry": [
    "--tailcallelim",
    "--jump-threading",
    "--slsr",
    "--loop-simplifycfg",
    "--aggressive-instcombine",
    "--lower-expect",
    "--early-cse",
    "--instcombine",
    "--loop-instsimplify",
    "--die",
    "--simplifycfg",
    "--mldst-motion",
    "--early-cse-memssa"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-load-elim",
          "--strip-debug-declare",
          "--strip-dead-prototypes",
          "--loop-deletion",
          "--mergereturn",
          "--simplifycfg",
          "--loop-simplifycfg",
          "--alignment-from-assumptions",
          "--dse",
          "--ee-instrument",
          "--slp-vectorizer",
          "--loop-sink",
          "--indvars",
          "--functionattrs",
          "--loop-fusion",
          "-loop-reduce",
          "--consthoist",
          "--bdce",
          "--aggressive-instcombine",
          "--loop-reroll",
          "--loop-distribute",
          "--libcalls-shrinkwrap",
          "--strip-nondebug",
          "--sroa",
          "--reassociate",
          "--mergeicmps",
          "--add-discriminators",
          "--tailcallelim",
          "--separate-const-offset-from-gep"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-load-elim",
      "--strip-debug-declare",
      "--strip-dead-prototypes",
      "--loop-deletion",
      "--mergereturn",
      "--simplifycfg",
      "--loop-simplifycfg",
      "--alignment-from-assumptions",
      "--dse",
      "--ee-instrument",
      "--slp-vectorizer",
      "--loop-sink",
      "--indvars",
      "--functionattrs",
      "--loop-fusion",
      "-loop-reduce",
      "--consthoist",
      "--bdce",
      "--aggressive-instcombine",
      "--loop-reroll",
      "--loop-distribute",
      "--libcalls-shrinkwrap",
      "--strip-nondebug",
      "--sroa",
      "--reassociate",
      "--mergeicmps",
      "--add-discriminators",
      "--tailcallelim",
      "--separate-const-offset-from-gep"
    ],
    "performance_vs_Oz": "+0.6%"
  }
}
{
  "program_id": "linux-v0_2649.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 46,
    "onePredOneSuc": 39,
    "onePredTwoSuc": 2,
    "oneSuccessor": 45,
    "twoPred": 9,
    "twoPredOneSuc": 0,
    "twoEach": 6,
    "twoSuccessor": 11,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 72,
    "BeginPhi": 0,
    "BranchCount": 56,
    "returnInt": 5,
    "CriticalCount": 3,
    "NumEdges": 72,
    "const32Bit": 143,
    "const64Bit": 4,
    "numConstZeroes": 62,
    "numConstOnes": 50,
    "UncondBranches": 45,
    "binaryConstArg": 8,
    "NumAShrInst": 0,
    "NumAddInst": 5,
    "NumAllocaInst": 39,
    "NumAndInst": 0,
    "BlockMid": 7,
    "BlockLow": 65,
    "NumBitCastInst": 14,
    "NumBrInst": 56,
    "NumCallInst": 39,
    "NumGetElementPtrInst": 51,
    "NumICmpInst": 13,
    "NumLShrInst": 0,
    "NumLoadInst": 163,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 15,
    "NumSExtInst": 8,
    "NumSelectInst": 1,
    "NumShlInst": 1,
    "NumStoreInst": 53,
    "NumSubInst": 1,
    "NumTruncInst": 1,
    "NumXorInst": 2,
    "NumZExtInst": 8,
    "TotalBlocks": 72,
    "TotalInsts": 475,
    "TotalMemInst": 345,
    "TotalFuncs": 29,
    "ArgsPhi": 0,
    "testUnary": 236
  },
  "baseline_oz_instcount": 475,
  "knowledge_base_entry": [
    "--mem2reg",
    "--mergefunc",
    "--lower-constant-intrinsics",
    "--early-cse-memssa",
    "--early-cse",
    "--adce",
    "--loop-simplifycfg",
    "--loop-reroll"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--consthoist",
          "--instnamer",
          "--prune-eh",
          "--mldst-motion",
          "--licm",
          "--globaldce",
          "--loop-versioning-licm",
          "--globalsplit",
          "--loop-interchange",
          "--mergefunc",
          "--simplifycfg",
          "--loop-fusion",
          "--sroa",
          "--partial-inliner",
          "--loop-load-elim",
          "--sccp",
          "--loop-simplifycfg",
          "--loop-distribute",
          "--forceattrs",
          "--irce",
          "--indvars"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--consthoist",
      "--instnamer",
      "--prune-eh",
      "--mldst-motion",
      "--licm",
      "--globaldce",
      "--loop-versioning-licm",
      "--globalsplit",
      "--loop-interchange",
      "--mergefunc",
      "--simplifycfg",
      "--loop-fusion",
      "--sroa",
      "--partial-inliner",
      "--loop-load-elim",
      "--sccp",
      "--loop-simplifycfg",
      "--loop-distribute",
      "--forceattrs",
      "--irce",
      "--indvars"
    ],
    "performance_vs_Oz": "+1.5%"
  }
}
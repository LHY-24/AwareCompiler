{
  "program_id": "github-v0_47575.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 80,
    "onePredOneSuc": 72,
    "onePredTwoSuc": 4,
    "oneSuccessor": 80,
    "twoPred": 22,
    "twoPredOneSuc": 4,
    "twoEach": 16,
    "twoSuccessor": 22,
    "morePreds": 4,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 108,
    "BeginPhi": 0,
    "BranchCount": 102,
    "returnInt": 0,
    "CriticalCount": 0,
    "NumEdges": 144,
    "const32Bit": 39,
    "const64Bit": 68,
    "numConstZeroes": 22,
    "numConstOnes": 53,
    "UncondBranches": 80,
    "binaryConstArg": 40,
    "NumAShrInst": 0,
    "NumAddInst": 16,
    "NumAllocaInst": 13,
    "NumAndInst": 0,
    "BlockMid": 12,
    "BlockLow": 96,
    "NumBitCastInst": 36,
    "NumBrInst": 102,
    "NumCallInst": 8,
    "NumGetElementPtrInst": 48,
    "NumICmpInst": 22,
    "NumLShrInst": 0,
    "NumLoadInst": 218,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 2,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 63,
    "NumSubInst": 8,
    "NumTruncInst": 8,
    "NumXorInst": 16,
    "NumZExtInst": 40,
    "TotalBlocks": 108,
    "TotalInsts": 620,
    "TotalMemInst": 350,
    "TotalFuncs": 2,
    "ArgsPhi": 0,
    "testUnary": 315
  },
  "baseline_oz_instcount": 620,
  "knowledge_base_entry": [
    "--loop-fusion",
    "--early-cse-memssa",
    "--globalopt",
    "--instsimplify",
    "--inline",
    "--aggressive-instcombine",
    "--licm",
    "--memcpyopt"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--gvn",
          "--aggressive-instcombine",
          "--lower-constant-intrinsics",
          "--reassociate",
          "--loop-guard-widening",
          "--functionattrs",
          "--consthoist",
          "--rpo-functionattrs",
          "--hotcoldsplit",
          "--break-crit-edges",
          "--libcalls-shrinkwrap",
          "-loop-reduce",
          "--constmerge",
          "--mldst-motion",
          "--ipconstprop",
          "--loop-versioning",
          "--canonicalize-aliases",
          "--early-cse-memssa",
          "--mergereturn",
          "--add-discriminators",
          "--loop-unroll-and-jam",
          "--redundant-dbg-inst-elim",
          "--instnamer",
          "--irce"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--gvn",
      "--aggressive-instcombine",
      "--lower-constant-intrinsics",
      "--reassociate",
      "--loop-guard-widening",
      "--functionattrs",
      "--consthoist",
      "--rpo-functionattrs",
      "--hotcoldsplit",
      "--break-crit-edges",
      "--libcalls-shrinkwrap",
      "-loop-reduce",
      "--constmerge",
      "--mldst-motion",
      "--ipconstprop",
      "--loop-versioning",
      "--canonicalize-aliases",
      "--early-cse-memssa",
      "--mergereturn",
      "--add-discriminators",
      "--loop-unroll-and-jam",
      "--redundant-dbg-inst-elim",
      "--instnamer",
      "--irce"
    ],
    "performance_vs_Oz": "+3.9%"
  }
}
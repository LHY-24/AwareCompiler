{
  "program_id": "linux-v0_6259.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 84,
    "onePredOneSuc": 60,
    "onePredTwoSuc": 20,
    "oneSuccessor": 80,
    "twoPred": 22,
    "twoPredOneSuc": 13,
    "twoEach": 5,
    "twoSuccessor": 29,
    "morePreds": 7,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 143,
    "BeginPhi": 0,
    "BranchCount": 109,
    "returnInt": 20,
    "CriticalCount": 21,
    "NumEdges": 157,
    "const32Bit": 273,
    "const64Bit": 47,
    "numConstZeroes": 107,
    "numConstOnes": 166,
    "UncondBranches": 80,
    "binaryConstArg": 29,
    "NumAShrInst": 2,
    "NumAddInst": 3,
    "NumAllocaInst": 123,
    "NumAndInst": 6,
    "BlockMid": 15,
    "BlockLow": 128,
    "NumBitCastInst": 41,
    "NumBrInst": 109,
    "NumCallInst": 82,
    "NumGetElementPtrInst": 59,
    "NumICmpInst": 30,
    "NumLShrInst": 1,
    "NumLoadInst": 251,
    "NumMulInst": 2,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 30,
    "NumSExtInst": 9,
    "NumSelectInst": 0,
    "NumShlInst": 3,
    "NumStoreInst": 150,
    "NumSubInst": 3,
    "NumTruncInst": 5,
    "NumXorInst": 12,
    "NumZExtInst": 17,
    "TotalBlocks": 143,
    "TotalInsts": 958,
    "TotalMemInst": 665,
    "TotalFuncs": 51,
    "ArgsPhi": 0,
    "testUnary": 461
  },
  "baseline_oz_instcount": 938,
  "knowledge_base_entry": [
    "--globaldce",
    "--mergefunc",
    "--sroa",
    "--loop-simplifycfg",
    "--slsr",
    "--load-store-vectorizer",
    "--loop-instsimplify",
    "--ipsccp",
    "--mem2reg",
    "--flattencfg",
    "--instcombine",
    "--nary-reassociate",
    "--load-store-vectorizer",
    "--correlated-propagation",
    "--gvn-hoist",
    "--sccp",
    "--early-cse",
    "--prune-eh",
    "--aggressive-instcombine",
    "--loweratomic",
    "--ipsccp",
    "--dse",
    "--early-cse-memssa",
    "--indvars",
    "--slp-vectorizer"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--mergefunc",
          "--early-cse-memssa",
          "--loop-load-elim",
          "--ipsccp",
          "--instnamer",
          "--loweratomic",
          "--alignment-from-assumptions",
          "--strip-nondebug",
          "--loop-versioning-licm",
          "--lower-matrix-intrinsics"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--mergefunc",
      "--early-cse-memssa",
      "--loop-load-elim",
      "--ipsccp",
      "--instnamer",
      "--loweratomic",
      "--alignment-from-assumptions",
      "--strip-nondebug",
      "--loop-versioning-licm",
      "--lower-matrix-intrinsics"
    ],
    "performance_vs_Oz": "+0.5%"
  }
}
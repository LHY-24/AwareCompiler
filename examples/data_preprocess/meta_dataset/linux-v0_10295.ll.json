{
  "program_id": "linux-v0_10295.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 3,
    "onePred": 22,
    "onePredOneSuc": 18,
    "onePredTwoSuc": 3,
    "oneSuccessor": 20,
    "twoPred": 6,
    "twoPredOneSuc": 1,
    "twoEach": 2,
    "twoSuccessor": 10,
    "morePreds": 2,
    "BB03Phi": 3,
    "BBHiPhi": 0,
    "BBNoPhi": 46,
    "BeginPhi": 3,
    "BranchCount": 30,
    "returnInt": 11,
    "CriticalCount": 0,
    "NumEdges": 40,
    "const32Bit": 173,
    "const64Bit": 16,
    "numConstZeroes": 69,
    "numConstOnes": 70,
    "UncondBranches": 20,
    "binaryConstArg": 11,
    "NumAShrInst": 1,
    "NumAddInst": 1,
    "NumAllocaInst": 55,
    "NumAndInst": 4,
    "BlockMid": 5,
    "BlockLow": 44,
    "NumBitCastInst": 7,
    "NumBrInst": 30,
    "NumCallInst": 26,
    "NumGetElementPtrInst": 43,
    "NumICmpInst": 13,
    "NumLShrInst": 0,
    "NumLoadInst": 102,
    "NumMulInst": 1,
    "NumOrInst": 1,
    "NumPHIInst": 3,
    "NumRetInst": 19,
    "NumSExtInst": 2,
    "NumSelectInst": 1,
    "NumShlInst": 2,
    "NumStoreInst": 75,
    "NumSubInst": 1,
    "NumTruncInst": 5,
    "NumXorInst": 0,
    "NumZExtInst": 9,
    "TotalBlocks": 49,
    "TotalInsts": 403,
    "TotalMemInst": 301,
    "TotalFuncs": 29,
    "ArgsPhi": 6,
    "testUnary": 181
  },
  "baseline_oz_instcount": 403,
  "knowledge_base_entry": [
    "--tailcallelim",
    "--jump-threading",
    "--licm",
    "--elim-avail-extern",
    "--aggressive-instcombine",
    "--prune-eh",
    "--lower-expect",
    "--instsimplify",
    "--nary-reassociate",
    "--loop-fusion",
    "--newgvn",
    "--loop-instsimplify",
    "--early-cse-memssa",
    "--loop-deletion",
    "--newgvn",
    "--gvn",
    "--mergefunc",
    "--loop-instsimplify",
    "--bdce",
    "--lower-constant-intrinsics",
    "--licm",
    "--flattencfg",
    "--inline"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--partially-inline-libcalls",
          "--loop-deletion",
          "--alignment-from-assumptions",
          "--coro-early",
          "--die",
          "--aggressive-instcombine",
          "--mem2reg",
          "--infer-address-spaces",
          "--simple-loop-unswitch",
          "--jump-threading",
          "--attributor",
          "--strip-nondebug"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--partially-inline-libcalls",
      "--loop-deletion",
      "--alignment-from-assumptions",
      "--coro-early",
      "--die",
      "--aggressive-instcombine",
      "--mem2reg",
      "--infer-address-spaces",
      "--simple-loop-unswitch",
      "--jump-threading",
      "--attributor",
      "--strip-nondebug"
    ],
    "performance_vs_Oz": "+0.2%"
  }
}
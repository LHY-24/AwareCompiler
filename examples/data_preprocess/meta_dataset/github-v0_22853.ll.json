{
  "program_id": "github-v0_22853.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 29,
    "onePredOneSuc": 18,
    "onePredTwoSuc": 11,
    "oneSuccessor": 27,
    "twoPred": 14,
    "twoPredOneSuc": 8,
    "twoEach": 4,
    "twoSuccessor": 18,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 48,
    "BeginPhi": 0,
    "BranchCount": 45,
    "returnInt": 1,
    "CriticalCount": 13,
    "NumEdges": 63,
    "const32Bit": 58,
    "const64Bit": 2,
    "numConstZeroes": 19,
    "numConstOnes": 12,
    "UncondBranches": 27,
    "binaryConstArg": 9,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 11,
    "NumAndInst": 4,
    "BlockMid": 0,
    "BlockLow": 48,
    "NumBitCastInst": 0,
    "NumBrInst": 45,
    "NumCallInst": 3,
    "NumGetElementPtrInst": 9,
    "NumICmpInst": 18,
    "NumLShrInst": 0,
    "NumLoadInst": 50,
    "NumMulInst": 0,
    "NumOrInst": 2,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 27,
    "NumSubInst": 1,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 2,
    "TotalBlocks": 48,
    "TotalInsts": 179,
    "TotalMemInst": 100,
    "TotalFuncs": 9,
    "ArgsPhi": 0,
    "testUnary": 65
  },
  "baseline_oz_instcount": 180,
  "knowledge_base_entry": [
    "--inline",
    "--memcpyopt",
    "--newgvn",
    "--newgvn",
    "--lower-expect",
    "--jump-threading",
    "--dce",
    "--sccp",
    "--lower-constant-intrinsics",
    "--aggressive-instcombine",
    "--bdce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--scalarizer",
          "--div-rem-pairs",
          "--coro-elide",
          "--attributor",
          "--lower-constant-intrinsics",
          "--coro-early",
          "--partial-inliner",
          "--mem2reg",
          "--strip-dead-prototypes",
          "--strip-debug-declare"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--scalarizer",
      "--div-rem-pairs",
      "--coro-elide",
      "--attributor",
      "--lower-constant-intrinsics",
      "--coro-early",
      "--partial-inliner",
      "--mem2reg",
      "--strip-dead-prototypes",
      "--strip-debug-declare"
    ],
    "performance_vs_Oz": "+0.6%"
  }
}
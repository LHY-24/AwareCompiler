{
  "program_id": "linux-v0_6905.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 13,
    "onePredOneSuc": 10,
    "onePredTwoSuc": 3,
    "oneSuccessor": 12,
    "twoPred": 3,
    "twoPredOneSuc": 0,
    "twoEach": 1,
    "twoSuccessor": 5,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 30,
    "BeginPhi": 0,
    "BranchCount": 17,
    "returnInt": 8,
    "CriticalCount": 2,
    "NumEdges": 22,
    "const32Bit": 103,
    "const64Bit": 6,
    "numConstZeroes": 48,
    "numConstOnes": 35,
    "UncondBranches": 12,
    "binaryConstArg": 4,
    "NumAShrInst": 1,
    "NumAddInst": 0,
    "NumAllocaInst": 35,
    "NumAndInst": 1,
    "BlockMid": 6,
    "BlockLow": 24,
    "NumBitCastInst": 12,
    "NumBrInst": 17,
    "NumCallInst": 20,
    "NumGetElementPtrInst": 30,
    "NumICmpInst": 5,
    "NumLShrInst": 0,
    "NumLoadInst": 49,
    "NumMulInst": 0,
    "NumOrInst": 2,
    "NumPHIInst": 0,
    "NumRetInst": 13,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 37,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 3,
    "TotalBlocks": 30,
    "TotalInsts": 227,
    "TotalMemInst": 171,
    "TotalFuncs": 23,
    "ArgsPhi": 0,
    "testUnary": 99
  },
  "baseline_oz_instcount": 227,
  "knowledge_base_entry": [
    "--simple-loop-unswitch",
    "--early-cse-memssa",
    "--gvn",
    "--dce",
    "--simplifycfg",
    "--early-cse",
    "--slsr",
    "--indvars",
    "--slp-vectorizer",
    "--mem2reg",
    "--newgvn",
    "--gvn-hoist",
    "--dse",
    "--slp-vectorizer",
    "--mergefunc",
    "-loop-reduce",
    "--reassociate"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--coro-elide",
          "--lower-constant-intrinsics",
          "--loweratomic",
          "--simplifycfg",
          "--loop-load-elim",
          "--loop-vectorize",
          "--licm",
          "--hotcoldsplit",
          "--lcssa",
          "--loop-deletion",
          "--consthoist",
          "--inferattrs",
          "--speculative-execution",
          "--inject-tli-mappings",
          "--loop-idiom",
          "--add-discriminators",
          "--mergefunc",
          "--loop-versioning",
          "--loop-unroll-and-jam",
          "--jump-threading",
          "--ipsccp",
          "--div-rem-pairs",
          "--sink",
          "--pgo-memop-opt",
          "--loop-reroll"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+6.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--coro-elide",
      "--lower-constant-intrinsics",
      "--loweratomic",
      "--simplifycfg",
      "--loop-load-elim",
      "--loop-vectorize",
      "--licm",
      "--hotcoldsplit",
      "--lcssa",
      "--loop-deletion",
      "--consthoist",
      "--inferattrs",
      "--speculative-execution",
      "--inject-tli-mappings",
      "--loop-idiom",
      "--add-discriminators",
      "--mergefunc",
      "--loop-versioning",
      "--loop-unroll-and-jam",
      "--jump-threading",
      "--ipsccp",
      "--div-rem-pairs",
      "--sink",
      "--pgo-memop-opt",
      "--loop-reroll"
    ],
    "performance_vs_Oz": "+6.2%"
  }
}
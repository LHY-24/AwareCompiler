{
  "program_id": "github-v0_11416.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 5,
    "onePredOneSuc": 5,
    "onePredTwoSuc": 0,
    "oneSuccessor": 5,
    "twoPred": 5,
    "twoPredOneSuc": 0,
    "twoEach": 2,
    "twoSuccessor": 5,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 21,
    "BeginPhi": 0,
    "BranchCount": 10,
    "returnInt": 5,
    "CriticalCount": 5,
    "NumEdges": 15,
    "const32Bit": 108,
    "const64Bit": 4,
    "numConstZeroes": 56,
    "numConstOnes": 35,
    "UncondBranches": 5,
    "binaryConstArg": 0,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 31,
    "NumAndInst": 0,
    "BlockMid": 4,
    "BlockLow": 17,
    "NumBitCastInst": 1,
    "NumBrInst": 10,
    "NumCallInst": 16,
    "NumGetElementPtrInst": 34,
    "NumICmpInst": 5,
    "NumLShrInst": 0,
    "NumLoadInst": 62,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 11,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 40,
    "NumSubInst": 1,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 21,
    "TotalInsts": 211,
    "TotalMemInst": 183,
    "TotalFuncs": 19,
    "ArgsPhi": 0,
    "testUnary": 94
  },
  "baseline_oz_instcount": 211,
  "knowledge_base_entry": [
    "--die",
    "--early-cse-memssa",
    "--correlated-propagation",
    "--loop-reroll",
    "--newgvn",
    "--mergefunc",
    "--load-store-vectorizer",
    "--lower-constant-intrinsics",
    "--gvn",
    "--load-store-vectorizer",
    "--elim-avail-extern",
    "--early-cse-memssa",
    "--sroa",
    "--load-store-vectorizer",
    "--reassociate",
    "--bdce",
    "--gvn-hoist",
    "--globalopt",
    "--mem2reg",
    "--ipsccp",
    "--globaldce",
    "--aggressive-instcombine"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--prune-eh",
          "--mldst-motion",
          "--lower-matrix-intrinsics",
          "--sancov",
          "--strip-dead-prototypes",
          "--deadargelim",
          "--licm",
          "--adce",
          "--load-store-vectorizer",
          "--partial-inliner",
          "--dce",
          "--loop-predication",
          "--called-value-propagation",
          "--libcalls-shrinkwrap",
          "--ipsccp",
          "--strip-nondebug",
          "--alignment-from-assumptions",
          "--lower-constant-intrinsics",
          "--mergefunc",
          "--coro-elide"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+5.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--prune-eh",
      "--mldst-motion",
      "--lower-matrix-intrinsics",
      "--sancov",
      "--strip-dead-prototypes",
      "--deadargelim",
      "--licm",
      "--adce",
      "--load-store-vectorizer",
      "--partial-inliner",
      "--dce",
      "--loop-predication",
      "--called-value-propagation",
      "--libcalls-shrinkwrap",
      "--ipsccp",
      "--strip-nondebug",
      "--alignment-from-assumptions",
      "--lower-constant-intrinsics",
      "--mergefunc",
      "--coro-elide"
    ],
    "performance_vs_Oz": "+5.7%"
  }
}
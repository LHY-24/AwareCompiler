{
  "program_id": "linux-v0_13351.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 3,
    "onePred": 48,
    "onePredOneSuc": 35,
    "onePredTwoSuc": 13,
    "oneSuccessor": 43,
    "twoPred": 15,
    "twoPredOneSuc": 6,
    "twoEach": 3,
    "twoSuccessor": 25,
    "morePreds": 5,
    "BB03Phi": 3,
    "BBHiPhi": 0,
    "BBNoPhi": 101,
    "BeginPhi": 3,
    "BranchCount": 68,
    "returnInt": 40,
    "CriticalCount": 13,
    "NumEdges": 93,
    "const32Bit": 304,
    "const64Bit": 68,
    "numConstZeroes": 158,
    "numConstOnes": 163,
    "UncondBranches": 43,
    "binaryConstArg": 38,
    "NumAShrInst": 1,
    "NumAddInst": 11,
    "NumAllocaInst": 143,
    "NumAndInst": 25,
    "BlockMid": 17,
    "BlockLow": 87,
    "NumBitCastInst": 1,
    "NumBrInst": 68,
    "NumCallInst": 68,
    "NumGetElementPtrInst": 76,
    "NumICmpInst": 24,
    "NumLShrInst": 6,
    "NumLoadInst": 215,
    "NumMulInst": 0,
    "NumOrInst": 3,
    "NumPHIInst": 3,
    "NumRetInst": 36,
    "NumSExtInst": 2,
    "NumSelectInst": 1,
    "NumShlInst": 3,
    "NumStoreInst": 177,
    "NumSubInst": 2,
    "NumTruncInst": 2,
    "NumXorInst": 5,
    "NumZExtInst": 4,
    "TotalBlocks": 104,
    "TotalInsts": 910,
    "TotalMemInst": 679,
    "TotalFuncs": 40,
    "ArgsPhi": 6,
    "testUnary": 401
  },
  "baseline_oz_instcount": 900,
  "knowledge_base_entry": [
    "--sccp",
    "--globalopt",
    "--jump-threading",
    "--lower-expect",
    "--slp-vectorizer",
    "--mergefunc",
    "--early-cse",
    "--globalopt",
    "--elim-avail-extern",
    "--early-cse-memssa",
    "--flattencfg",
    "--simplifycfg",
    "--gvn-hoist",
    "--flattencfg",
    "--sroa",
    "--mldst-motion",
    "--mem2reg",
    "--reassociate",
    "--lower-constant-intrinsics",
    "--correlated-propagation",
    "--dse",
    "--load-store-vectorizer"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-guard-widening",
          "--partial-inliner",
          "--instnamer",
          "--ipsccp",
          "--callsite-splitting",
          "--rewrite-statepoints-for-gc",
          "--strip-nondebug",
          "--prune-eh",
          "--mergefunc",
          "--canonicalize-aliases",
          "--loop-simplify",
          "--constmerge",
          "--called-value-propagation",
          "--name-anon-globals",
          "--mldst-motion",
          "--inject-tli-mappings",
          "--loop-versioning",
          "--flattencfg",
          "--gvn"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-guard-widening",
      "--partial-inliner",
      "--instnamer",
      "--ipsccp",
      "--callsite-splitting",
      "--rewrite-statepoints-for-gc",
      "--strip-nondebug",
      "--prune-eh",
      "--mergefunc",
      "--canonicalize-aliases",
      "--loop-simplify",
      "--constmerge",
      "--called-value-propagation",
      "--name-anon-globals",
      "--mldst-motion",
      "--inject-tli-mappings",
      "--loop-versioning",
      "--flattencfg",
      "--gvn"
    ],
    "performance_vs_Oz": "+0.7%"
  }
}
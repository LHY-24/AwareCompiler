{
  "program_id": "github-v0_23817.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 4,
    "onePredOneSuc": 2,
    "onePredTwoSuc": 0,
    "oneSuccessor": 4,
    "twoPred": 2,
    "twoPredOneSuc": 0,
    "twoEach": 1,
    "twoSuccessor": 2,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 12,
    "BeginPhi": 0,
    "BranchCount": 6,
    "returnInt": 5,
    "CriticalCount": 0,
    "NumEdges": 8,
    "const32Bit": 124,
    "const64Bit": 40,
    "numConstZeroes": 97,
    "numConstOnes": 52,
    "UncondBranches": 4,
    "binaryConstArg": 0,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 32,
    "NumAndInst": 0,
    "BlockMid": 5,
    "BlockLow": 7,
    "NumBitCastInst": 38,
    "NumBrInst": 6,
    "NumCallInst": 28,
    "NumGetElementPtrInst": 55,
    "NumICmpInst": 2,
    "NumLShrInst": 0,
    "NumLoadInst": 39,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 29,
    "NumSubInst": 0,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 14,
    "TotalBlocks": 12,
    "TotalInsts": 259,
    "TotalMemInst": 183,
    "TotalFuncs": 11,
    "ArgsPhi": 0,
    "testUnary": 130
  },
  "baseline_oz_instcount": 255,
  "knowledge_base_entry": [
    "--early-cse-memssa",
    "--aggressive-instcombine",
    "--globalopt",
    "--ipsccp",
    "--nary-reassociate",
    "--ipsccp",
    "--nary-reassociate",
    "--early-cse",
    "--reassociate",
    "--instsimplify",
    "--correlated-propagation",
    "--reassociate",
    "--lower-expect",
    "--early-cse-memssa",
    "--aggressive-instcombine",
    "--mem2reg",
    "--simplifycfg",
    "--correlated-propagation",
    "--jump-threading",
    "--die",
    "--gvn-hoist",
    "--sroa",
    "-loop-reduce",
    "--slsr",
    "--newgvn",
    "--loop-reroll"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--sroa",
          "--early-cse-memssa",
          "--coro-split",
          "--constprop",
          "--pgo-memop-opt",
          "--irce",
          "--loweratomic",
          "--post-inline-ee-instrument",
          "--name-anon-globals",
          "--indvars",
          "--aggressive-instcombine",
          "--instnamer",
          "--bdce",
          "--guard-widening",
          "--globalopt",
          "-loop-reduce",
          "--slp-vectorizer",
          "--div-rem-pairs",
          "--float2int",
          "--loop-fusion",
          "--loop-predication",
          "--insert-gcov-profiling",
          "--newgvn",
          "--simple-loop-unswitch",
          "--partially-inline-libcalls",
          "--licm"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--sroa",
      "--early-cse-memssa",
      "--coro-split",
      "--constprop",
      "--pgo-memop-opt",
      "--irce",
      "--loweratomic",
      "--post-inline-ee-instrument",
      "--name-anon-globals",
      "--indvars",
      "--aggressive-instcombine",
      "--instnamer",
      "--bdce",
      "--guard-widening",
      "--globalopt",
      "-loop-reduce",
      "--slp-vectorizer",
      "--div-rem-pairs",
      "--float2int",
      "--loop-fusion",
      "--loop-predication",
      "--insert-gcov-profiling",
      "--newgvn",
      "--simple-loop-unswitch",
      "--partially-inline-libcalls",
      "--licm"
    ],
    "performance_vs_Oz": "+2.4%"
  }
}
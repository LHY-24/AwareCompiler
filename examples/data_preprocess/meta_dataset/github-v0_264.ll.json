{
  "program_id": "github-v0_264.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 54,
    "onePredOneSuc": 30,
    "onePredTwoSuc": 14,
    "oneSuccessor": 38,
    "twoPred": 16,
    "twoPredOneSuc": 7,
    "twoEach": 9,
    "twoSuccessor": 25,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 76,
    "BeginPhi": 0,
    "BranchCount": 63,
    "returnInt": 14,
    "CriticalCount": 9,
    "NumEdges": 98,
    "const32Bit": 67,
    "const64Bit": 9,
    "numConstZeroes": 14,
    "numConstOnes": 38,
    "UncondBranches": 38,
    "binaryConstArg": 17,
    "NumAShrInst": 0,
    "NumAddInst": 6,
    "NumAllocaInst": 16,
    "NumAndInst": 4,
    "BlockMid": 6,
    "BlockLow": 70,
    "NumBitCastInst": 3,
    "NumBrInst": 63,
    "NumCallInst": 53,
    "NumGetElementPtrInst": 22,
    "NumICmpInst": 25,
    "NumLShrInst": 0,
    "NumLoadInst": 105,
    "NumMulInst": 4,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 28,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 33,
    "NumSubInst": 1,
    "NumTruncInst": 0,
    "NumXorInst": 2,
    "NumZExtInst": 4,
    "TotalBlocks": 76,
    "TotalInsts": 382,
    "TotalMemInst": 229,
    "TotalFuncs": 24,
    "ArgsPhi": 0,
    "testUnary": 156
  },
  "baseline_oz_instcount": 385,
  "knowledge_base_entry": [
    "--mergefunc",
    "--aggressive-instcombine",
    "--lower-constant-intrinsics",
    "--dce",
    "--correlated-propagation",
    "--load-store-vectorizer",
    "--early-cse-memssa",
    "--sroa",
    "--ipsccp",
    "--newgvn",
    "--instsimplify",
    "--dse",
    "--early-cse",
    "--inline"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--rpo-functionattrs",
          "--lowerinvoke",
          "--lower-expect",
          "--loop-unroll-and-jam",
          "--adce",
          "--lower-matrix-intrinsics",
          "--elim-avail-extern",
          "--coro-elide",
          "--insert-gcov-profiling",
          "--speculative-execution"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--rpo-functionattrs",
      "--lowerinvoke",
      "--lower-expect",
      "--loop-unroll-and-jam",
      "--adce",
      "--lower-matrix-intrinsics",
      "--elim-avail-extern",
      "--coro-elide",
      "--insert-gcov-profiling",
      "--speculative-execution"
    ],
    "performance_vs_Oz": "+0.8%"
  }
}
{
  "program_id": "github-v0_11056.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 28,
    "onePredOneSuc": 11,
    "onePredTwoSuc": 10,
    "oneSuccessor": 28,
    "twoPred": 23,
    "twoPredOneSuc": 10,
    "twoEach": 11,
    "twoSuccessor": 23,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 68,
    "BeginPhi": 0,
    "BranchCount": 51,
    "returnInt": 6,
    "CriticalCount": 23,
    "NumEdges": 74,
    "const32Bit": 157,
    "const64Bit": 35,
    "numConstZeroes": 119,
    "numConstOnes": 47,
    "UncondBranches": 28,
    "binaryConstArg": 13,
    "NumAShrInst": 0,
    "NumAddInst": 7,
    "NumAllocaInst": 33,
    "NumAndInst": 0,
    "BlockMid": 2,
    "BlockLow": 66,
    "NumBitCastInst": 12,
    "NumBrInst": 51,
    "NumCallInst": 36,
    "NumGetElementPtrInst": 64,
    "NumICmpInst": 23,
    "NumLShrInst": 0,
    "NumLoadInst": 67,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 17,
    "NumSExtInst": 21,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 32,
    "NumSubInst": 6,
    "NumTruncInst": 6,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 68,
    "TotalInsts": 375,
    "TotalMemInst": 232,
    "TotalFuncs": 20,
    "ArgsPhi": 0,
    "testUnary": 139
  },
  "baseline_oz_instcount": 375,
  "knowledge_base_entry": [
    "--loop-simplify",
    "--early-cse-memssa",
    "--die",
    "--licm",
    "--bdce",
    "--newgvn",
    "--ipsccp",
    "--lower-constant-intrinsics",
    "--nary-reassociate",
    "-loop-reduce",
    "--gvn-hoist"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-load-elim",
          "--alignment-from-assumptions",
          "--loop-idiom",
          "--consthoist",
          "--float2int",
          "--lower-constant-intrinsics",
          "--simplifycfg",
          "--lower-matrix-intrinsics",
          "--loop-versioning",
          "--load-store-vectorizer",
          "--strip-nondebug",
          "--dce",
          "--loop-distribute",
          "--partially-inline-libcalls",
          "--loop-interchange",
          "--constmerge",
          "--sancov",
          "--prune-eh",
          "--flattencfg",
          "--attributor",
          "--mergereturn",
          "--correlated-propagation",
          "--always-inline",
          "--speculative-execution",
          "--mergefunc",
          "--instcombine",
          "--ipconstprop",
          "--die",
          "--rewrite-statepoints-for-gc"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-load-elim",
      "--alignment-from-assumptions",
      "--loop-idiom",
      "--consthoist",
      "--float2int",
      "--lower-constant-intrinsics",
      "--simplifycfg",
      "--lower-matrix-intrinsics",
      "--loop-versioning",
      "--load-store-vectorizer",
      "--strip-nondebug",
      "--dce",
      "--loop-distribute",
      "--partially-inline-libcalls",
      "--loop-interchange",
      "--constmerge",
      "--sancov",
      "--prune-eh",
      "--flattencfg",
      "--attributor",
      "--mergereturn",
      "--correlated-propagation",
      "--always-inline",
      "--speculative-execution",
      "--mergefunc",
      "--instcombine",
      "--ipconstprop",
      "--die",
      "--rewrite-statepoints-for-gc"
    ],
    "performance_vs_Oz": "+2.1%"
  }
}
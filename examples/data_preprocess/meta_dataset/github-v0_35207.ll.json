{
  "program_id": "github-v0_35207.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 10,
    "onePredOneSuc": 9,
    "onePredTwoSuc": 1,
    "oneSuccessor": 11,
    "twoPred": 1,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 1,
    "morePreds": 3,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 16,
    "BeginPhi": 0,
    "BranchCount": 12,
    "returnInt": 19,
    "CriticalCount": 2,
    "NumEdges": 23,
    "const32Bit": 55,
    "const64Bit": 0,
    "numConstZeroes": 25,
    "numConstOnes": 25,
    "UncondBranches": 11,
    "binaryConstArg": 8,
    "NumAShrInst": 2,
    "NumAddInst": 1,
    "NumAllocaInst": 12,
    "NumAndInst": 0,
    "BlockMid": 4,
    "BlockLow": 12,
    "NumBitCastInst": 2,
    "NumBrInst": 12,
    "NumCallInst": 31,
    "NumGetElementPtrInst": 14,
    "NumICmpInst": 1,
    "NumLShrInst": 0,
    "NumLoadInst": 95,
    "NumMulInst": 2,
    "NumOrInst": 3,
    "NumPHIInst": 0,
    "NumRetInst": 2,
    "NumSExtInst": 1,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 15,
    "NumSubInst": 0,
    "NumTruncInst": 5,
    "NumXorInst": 0,
    "NumZExtInst": 9,
    "TotalBlocks": 16,
    "TotalInsts": 209,
    "TotalMemInst": 167,
    "TotalFuncs": 12,
    "ArgsPhi": 0,
    "testUnary": 124
  },
  "baseline_oz_instcount": 209,
  "knowledge_base_entry": [
    "--float2int",
    "--early-cse",
    "--aggressive-instcombine",
    "--lower-constant-intrinsics",
    "--loop-simplifycfg",
    "--instsimplify",
    "--gvn-hoist",
    "--early-cse-memssa",
    "--loop-deletion",
    "--elim-avail-extern",
    "--mergefunc",
    "--newgvn",
    "--loop-reroll",
    "--indvars"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--lower-expect",
          "--simple-loop-unswitch",
          "--nary-reassociate",
          "--name-anon-globals",
          "--argpromotion",
          "--loop-unroll",
          "--insert-gcov-profiling",
          "--div-rem-pairs",
          "--newgvn",
          "--lcssa",
          "--float2int",
          "--mergereturn",
          "--consthoist",
          "--aggressive-instcombine",
          "--add-discriminators",
          "--loop-load-elim",
          "--loop-idiom",
          "--alignment-from-assumptions",
          "--strip-nondebug",
          "--elim-avail-extern",
          "--ipconstprop",
          "--globalsplit",
          "--loop-unroll-and-jam",
          "--memcpyopt",
          "--lower-guard-intrinsic",
          "--redundant-dbg-inst-elim"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--lower-expect",
      "--simple-loop-unswitch",
      "--nary-reassociate",
      "--name-anon-globals",
      "--argpromotion",
      "--loop-unroll",
      "--insert-gcov-profiling",
      "--div-rem-pairs",
      "--newgvn",
      "--lcssa",
      "--float2int",
      "--mergereturn",
      "--consthoist",
      "--aggressive-instcombine",
      "--add-discriminators",
      "--loop-load-elim",
      "--loop-idiom",
      "--alignment-from-assumptions",
      "--strip-nondebug",
      "--elim-avail-extern",
      "--ipconstprop",
      "--globalsplit",
      "--loop-unroll-and-jam",
      "--memcpyopt",
      "--lower-guard-intrinsic",
      "--redundant-dbg-inst-elim"
    ],
    "performance_vs_Oz": "+2.9%"
  }
}
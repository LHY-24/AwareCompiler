{
  "program_id": "github-v0_41594.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 5,
    "onePredOneSuc": 4,
    "onePredTwoSuc": 0,
    "oneSuccessor": 5,
    "twoPred": 2,
    "twoPredOneSuc": 0,
    "twoEach": 1,
    "twoSuccessor": 2,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 11,
    "BeginPhi": 0,
    "BranchCount": 7,
    "returnInt": 0,
    "CriticalCount": 0,
    "NumEdges": 9,
    "const32Bit": 40,
    "const64Bit": 2,
    "numConstZeroes": 4,
    "numConstOnes": 24,
    "UncondBranches": 5,
    "binaryConstArg": 18,
    "NumAShrInst": 8,
    "NumAddInst": 2,
    "NumAllocaInst": 20,
    "NumAndInst": 10,
    "BlockMid": 5,
    "BlockLow": 6,
    "NumBitCastInst": 1,
    "NumBrInst": 7,
    "NumCallInst": 1,
    "NumGetElementPtrInst": 6,
    "NumICmpInst": 2,
    "NumLShrInst": 1,
    "NumLoadInst": 38,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 4,
    "NumSExtInst": 5,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 25,
    "NumSubInst": 0,
    "NumTruncInst": 5,
    "NumXorInst": 0,
    "NumZExtInst": 10,
    "TotalBlocks": 11,
    "TotalInsts": 147,
    "TotalMemInst": 90,
    "TotalFuncs": 4,
    "ArgsPhi": 0,
    "testUnary": 79
  },
  "baseline_oz_instcount": 147,
  "knowledge_base_entry": [
    "--reg2mem",
    "--sroa",
    "--aggressive-instcombine",
    "--dse",
    "--licm",
    "--aggressive-instcombine",
    "--bdce",
    "--simplifycfg",
    "--inline"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--inferattrs",
          "--called-value-propagation",
          "--loop-reroll",
          "--early-cse-memssa",
          "--always-inline",
          "--sroa",
          "--reg2mem",
          "--loop-unroll",
          "--inject-tli-mappings",
          "--barrier",
          "--sancov",
          "--aggressive-instcombine",
          "--load-store-vectorizer",
          "--loop-predication"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--inferattrs",
      "--called-value-propagation",
      "--loop-reroll",
      "--early-cse-memssa",
      "--always-inline",
      "--sroa",
      "--reg2mem",
      "--loop-unroll",
      "--inject-tli-mappings",
      "--barrier",
      "--sancov",
      "--aggressive-instcombine",
      "--load-store-vectorizer",
      "--loop-predication"
    ],
    "performance_vs_Oz": "+1.4%"
  }
}
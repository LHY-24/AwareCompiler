{
  "program_id": "github-v0_44692.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 25,
    "onePredOneSuc": 19,
    "onePredTwoSuc": 4,
    "oneSuccessor": 27,
    "twoPred": 7,
    "twoPredOneSuc": 4,
    "twoEach": 1,
    "twoSuccessor": 5,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 39,
    "BeginPhi": 0,
    "BranchCount": 32,
    "returnInt": 22,
    "CriticalCount": 2,
    "NumEdges": 51,
    "const32Bit": 59,
    "const64Bit": 1,
    "numConstZeroes": 19,
    "numConstOnes": 27,
    "UncondBranches": 27,
    "binaryConstArg": 9,
    "NumAShrInst": 1,
    "NumAddInst": 6,
    "NumAllocaInst": 21,
    "NumAndInst": 1,
    "BlockMid": 3,
    "BlockLow": 36,
    "NumBitCastInst": 4,
    "NumBrInst": 32,
    "NumCallInst": 43,
    "NumGetElementPtrInst": 10,
    "NumICmpInst": 5,
    "NumLShrInst": 0,
    "NumLoadInst": 86,
    "NumMulInst": 1,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 5,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 35,
    "NumSubInst": 1,
    "NumTruncInst": 7,
    "NumXorInst": 1,
    "NumZExtInst": 17,
    "TotalBlocks": 39,
    "TotalInsts": 278,
    "TotalMemInst": 195,
    "TotalFuncs": 15,
    "ArgsPhi": 0,
    "testUnary": 135
  },
  "baseline_oz_instcount": 278,
  "knowledge_base_entry": [
    "--prune-eh",
    "--aggressive-instcombine",
    "--sroa",
    "--mergefunc",
    "--jump-threading",
    "--globalopt",
    "--gvn",
    "--correlated-propagation",
    "--load-store-vectorizer",
    "--aggressive-instcombine",
    "--instsimplify",
    "--adce",
    "--mem2reg",
    "--memcpyopt",
    "--loop-reroll"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--sancov",
          "--early-cse",
          "--jump-threading",
          "--infer-address-spaces",
          "--pgo-memop-opt",
          "--ipsccp",
          "--aggressive-instcombine",
          "--loop-unswitch",
          "--indvars",
          "--sink"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+4.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--sancov",
      "--early-cse",
      "--jump-threading",
      "--infer-address-spaces",
      "--pgo-memop-opt",
      "--ipsccp",
      "--aggressive-instcombine",
      "--loop-unswitch",
      "--indvars",
      "--sink"
    ],
    "performance_vs_Oz": "+4.3%"
  }
}
{
  "program_id": "linux-v0_208.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 3,
    "onePred": 72,
    "onePredOneSuc": 46,
    "onePredTwoSuc": 26,
    "oneSuccessor": 61,
    "twoPred": 20,
    "twoPredOneSuc": 10,
    "twoEach": 8,
    "twoSuccessor": 37,
    "morePreds": 6,
    "BB03Phi": 3,
    "BBHiPhi": 0,
    "BBNoPhi": 107,
    "BeginPhi": 3,
    "BranchCount": 98,
    "returnInt": 3,
    "CriticalCount": 13,
    "NumEdges": 135,
    "const32Bit": 202,
    "const64Bit": 28,
    "numConstZeroes": 78,
    "numConstOnes": 104,
    "UncondBranches": 61,
    "binaryConstArg": 49,
    "NumAShrInst": 3,
    "NumAddInst": 23,
    "NumAllocaInst": 66,
    "NumAndInst": 15,
    "BlockMid": 13,
    "BlockLow": 97,
    "NumBitCastInst": 6,
    "NumBrInst": 98,
    "NumCallInst": 38,
    "NumGetElementPtrInst": 56,
    "NumICmpInst": 48,
    "NumLShrInst": 3,
    "NumLoadInst": 274,
    "NumMulInst": 0,
    "NumOrInst": 3,
    "NumPHIInst": 3,
    "NumRetInst": 12,
    "NumSExtInst": 26,
    "NumSelectInst": 2,
    "NumShlInst": 5,
    "NumStoreInst": 111,
    "NumSubInst": 10,
    "NumTruncInst": 5,
    "NumXorInst": 8,
    "NumZExtInst": 17,
    "TotalBlocks": 110,
    "TotalInsts": 835,
    "TotalMemInst": 545,
    "TotalFuncs": 25,
    "ArgsPhi": 6,
    "testUnary": 397
  },
  "baseline_oz_instcount": 835,
  "knowledge_base_entry": [
    "--lower-constant-intrinsics",
    "--adce",
    "--aggressive-instcombine",
    "--lower-constant-intrinsics",
    "--reassociate",
    "--lower-constant-intrinsics",
    "--adce",
    "--gvn-hoist",
    "--instsimplify",
    "--loop-rotate",
    "--inline",
    "--bdce",
    "--early-cse",
    "--ipsccp",
    "--loweratomic",
    "--early-cse-memssa",
    "--prune-eh"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--constprop",
          "--lower-expect",
          "--inferattrs",
          "--consthoist",
          "--canonicalize-aliases",
          "--loop-instsimplify",
          "--licm",
          "--aggressive-instcombine",
          "--loop-predication",
          "--globaldce",
          "--separate-const-offset-from-gep",
          "-loop-reduce",
          "--lower-guard-intrinsic",
          "--loop-fusion",
          "--globalsplit",
          "--flattencfg",
          "--loop-unroll",
          "--coro-cleanup",
          "--sancov",
          "--partial-inliner",
          "--slsr",
          "--newgvn",
          "--elim-avail-extern",
          "--insert-gcov-profiling",
          "--simplifycfg",
          "--ipconstprop",
          "--die"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--constprop",
      "--lower-expect",
      "--inferattrs",
      "--consthoist",
      "--canonicalize-aliases",
      "--loop-instsimplify",
      "--licm",
      "--aggressive-instcombine",
      "--loop-predication",
      "--globaldce",
      "--separate-const-offset-from-gep",
      "-loop-reduce",
      "--lower-guard-intrinsic",
      "--loop-fusion",
      "--globalsplit",
      "--flattencfg",
      "--loop-unroll",
      "--coro-cleanup",
      "--sancov",
      "--partial-inliner",
      "--slsr",
      "--newgvn",
      "--elim-avail-extern",
      "--insert-gcov-profiling",
      "--simplifycfg",
      "--ipconstprop",
      "--die"
    ],
    "performance_vs_Oz": "+0.2%"
  }
}
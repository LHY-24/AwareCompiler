{
  "program_id": "github-v0_46619.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 0,
    "onePredOneSuc": 0,
    "onePredTwoSuc": 0,
    "oneSuccessor": 0,
    "twoPred": 0,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 0,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 19,
    "BeginPhi": 0,
    "BranchCount": 0,
    "returnInt": 10,
    "CriticalCount": 0,
    "NumEdges": 0,
    "const32Bit": 62,
    "const64Bit": 0,
    "numConstZeroes": 20,
    "numConstOnes": 42,
    "UncondBranches": 0,
    "binaryConstArg": 0,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 36,
    "NumAndInst": 0,
    "BlockMid": 1,
    "BlockLow": 18,
    "NumBitCastInst": 6,
    "NumBrInst": 0,
    "NumCallInst": 23,
    "NumGetElementPtrInst": 12,
    "NumICmpInst": 0,
    "NumLShrInst": 0,
    "NumLoadInst": 20,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 19,
    "NumSExtInst": 7,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 34,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 19,
    "TotalInsts": 157,
    "TotalMemInst": 125,
    "TotalFuncs": 22,
    "ArgsPhi": 0,
    "testUnary": 69
  },
  "baseline_oz_instcount": 157,
  "knowledge_base_entry": [
    "--mergefunc",
    "--flattencfg",
    "--mergefunc",
    "--inline",
    "--early-cse",
    "--lower-expect",
    "--gvn-hoist",
    "--sccp",
    "--lower-constant-intrinsics",
    "--loop-rotate",
    "--aggressive-instcombine",
    "--ipsccp",
    "--lower-constant-intrinsics"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-fusion",
          "--alignment-from-assumptions",
          "--always-inline",
          "--strip-nondebug",
          "--loop-interchange",
          "--lower-expect",
          "--globalopt",
          "--mergefunc",
          "--constprop",
          "--loop-vectorize",
          "--lower-widenable-condition",
          "--memcpyopt",
          "--consthoist",
          "--canonicalize-aliases",
          "--mldst-motion",
          "--mergeicmps",
          "--partial-inliner",
          "--loop-simplifycfg",
          "--newgvn",
          "--break-crit-edges",
          "--lower-constant-intrinsics",
          "--lower-guard-intrinsic",
          "--loop-versioning",
          "--loop-unroll",
          "--loop-distribute",
          "--div-rem-pairs",
          "--coro-cleanup",
          "--loop-idiom",
          "--bdce"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+29.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-fusion",
      "--alignment-from-assumptions",
      "--always-inline",
      "--strip-nondebug",
      "--loop-interchange",
      "--lower-expect",
      "--globalopt",
      "--mergefunc",
      "--constprop",
      "--loop-vectorize",
      "--lower-widenable-condition",
      "--memcpyopt",
      "--consthoist",
      "--canonicalize-aliases",
      "--mldst-motion",
      "--mergeicmps",
      "--partial-inliner",
      "--loop-simplifycfg",
      "--newgvn",
      "--break-crit-edges",
      "--lower-constant-intrinsics",
      "--lower-guard-intrinsic",
      "--loop-versioning",
      "--loop-unroll",
      "--loop-distribute",
      "--div-rem-pairs",
      "--coro-cleanup",
      "--loop-idiom",
      "--bdce"
    ],
    "performance_vs_Oz": "+29.9%"
  }
}
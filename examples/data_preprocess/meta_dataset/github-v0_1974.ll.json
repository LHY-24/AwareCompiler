{
  "program_id": "github-v0_1974.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 68,
    "onePredOneSuc": 50,
    "onePredTwoSuc": 10,
    "oneSuccessor": 67,
    "twoPred": 28,
    "twoPredOneSuc": 6,
    "twoEach": 20,
    "twoSuccessor": 30,
    "morePreds": 1,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 107,
    "BeginPhi": 1,
    "BranchCount": 97,
    "returnInt": 28,
    "CriticalCount": 6,
    "NumEdges": 127,
    "const32Bit": 172,
    "const64Bit": 53,
    "numConstZeroes": 70,
    "numConstOnes": 106,
    "UncondBranches": 67,
    "binaryConstArg": 32,
    "NumAShrInst": 0,
    "NumAddInst": 22,
    "NumAllocaInst": 74,
    "NumAndInst": 2,
    "BlockMid": 18,
    "BlockLow": 90,
    "NumBitCastInst": 3,
    "NumBrInst": 97,
    "NumCallInst": 53,
    "NumGetElementPtrInst": 78,
    "NumICmpInst": 30,
    "NumLShrInst": 2,
    "NumLoadInst": 265,
    "NumMulInst": 3,
    "NumOrInst": 0,
    "NumPHIInst": 1,
    "NumRetInst": 11,
    "NumSExtInst": 46,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 112,
    "NumSubInst": 4,
    "NumTruncInst": 9,
    "NumXorInst": 8,
    "NumZExtInst": 25,
    "TotalBlocks": 108,
    "TotalInsts": 846,
    "TotalMemInst": 582,
    "TotalFuncs": 17,
    "ArgsPhi": 2,
    "testUnary": 422
  },
  "baseline_oz_instcount": 845,
  "knowledge_base_entry": [
    "--aggressive-instcombine",
    "--elim-avail-extern",
    "--instcombine",
    "--ipsccp",
    "--globalopt",
    "--ipsccp",
    "--aggressive-instcombine",
    "--elim-avail-extern",
    "--instcombine",
    "--ipsccp",
    "--loweratomic",
    "--early-cse-memssa"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--constprop",
          "--partial-inliner",
          "--alignment-from-assumptions",
          "--mergereturn",
          "--tailcallelim",
          "--loop-unroll",
          "--loop-versioning",
          "--slp-vectorizer",
          "--constmerge",
          "--aggressive-instcombine",
          "--ipsccp",
          "--consthoist",
          "--lower-expect",
          "--canonicalize-aliases"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--constprop",
      "--partial-inliner",
      "--alignment-from-assumptions",
      "--mergereturn",
      "--tailcallelim",
      "--loop-unroll",
      "--loop-versioning",
      "--slp-vectorizer",
      "--constmerge",
      "--aggressive-instcombine",
      "--ipsccp",
      "--consthoist",
      "--lower-expect",
      "--canonicalize-aliases"
    ],
    "performance_vs_Oz": "+2.1%"
  }
}
{
  "program_id": "linux-v0_13373.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 35,
    "onePredOneSuc": 27,
    "onePredTwoSuc": 8,
    "oneSuccessor": 35,
    "twoPred": 19,
    "twoPredOneSuc": 4,
    "twoEach": 7,
    "twoSuccessor": 19,
    "morePreds": 0,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 66,
    "BeginPhi": 1,
    "BranchCount": 54,
    "returnInt": 13,
    "CriticalCount": 10,
    "NumEdges": 73,
    "const32Bit": 179,
    "const64Bit": 15,
    "numConstZeroes": 75,
    "numConstOnes": 64,
    "UncondBranches": 35,
    "binaryConstArg": 24,
    "NumAShrInst": 0,
    "NumAddInst": 3,
    "NumAllocaInst": 42,
    "NumAndInst": 10,
    "BlockMid": 7,
    "BlockLow": 60,
    "NumBitCastInst": 9,
    "NumBrInst": 54,
    "NumCallInst": 28,
    "NumGetElementPtrInst": 53,
    "NumICmpInst": 26,
    "NumLShrInst": 2,
    "NumLoadInst": 123,
    "NumMulInst": 0,
    "NumOrInst": 2,
    "NumPHIInst": 1,
    "NumRetInst": 13,
    "NumSExtInst": 5,
    "NumSelectInst": 3,
    "NumShlInst": 0,
    "NumStoreInst": 61,
    "NumSubInst": 1,
    "NumTruncInst": 1,
    "NumXorInst": 6,
    "NumZExtInst": 15,
    "TotalBlocks": 67,
    "TotalInsts": 458,
    "TotalMemInst": 307,
    "TotalFuncs": 17,
    "ArgsPhi": 2,
    "testUnary": 195
  },
  "baseline_oz_instcount": 461,
  "knowledge_base_entry": [
    "--memcpyopt",
    "--gvn",
    "--reassociate",
    "--bdce",
    "--sccp",
    "--early-cse-memssa",
    "--ipsccp",
    "--gvn",
    "--slp-vectorizer",
    "--dse",
    "--sroa",
    "--mem2reg",
    "--newgvn",
    "--dse",
    "--lower-expect",
    "--prune-eh",
    "--instsimplify",
    "--inline",
    "--jump-threading",
    "--aggressive-instcombine",
    "--lower-constant-intrinsics",
    "--adce",
    "--instcombine",
    "--early-cse"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--partially-inline-libcalls",
          "--mergereturn",
          "--slsr",
          "--adce",
          "--mergeicmps",
          "--name-anon-globals",
          "--tailcallelim",
          "--sccp",
          "--correlated-propagation",
          "--div-rem-pairs",
          "--lower-widenable-condition",
          "--pgo-memop-opt",
          "--simplifycfg",
          "--ipconstprop",
          "--gvn-hoist",
          "--slp-vectorizer",
          "--globalopt"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--partially-inline-libcalls",
      "--mergereturn",
      "--slsr",
      "--adce",
      "--mergeicmps",
      "--name-anon-globals",
      "--tailcallelim",
      "--sccp",
      "--correlated-propagation",
      "--div-rem-pairs",
      "--lower-widenable-condition",
      "--pgo-memop-opt",
      "--simplifycfg",
      "--ipconstprop",
      "--gvn-hoist",
      "--slp-vectorizer",
      "--globalopt"
    ],
    "performance_vs_Oz": "+0.7%"
  }
}
{
  "program_id": "github-v0_12304.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 84,
    "onePredOneSuc": 50,
    "onePredTwoSuc": 34,
    "oneSuccessor": 61,
    "twoPred": 18,
    "twoPredOneSuc": 8,
    "twoEach": 6,
    "twoSuccessor": 48,
    "morePreds": 8,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 118,
    "BeginPhi": 0,
    "BranchCount": 109,
    "returnInt": 24,
    "CriticalCount": 31,
    "NumEdges": 162,
    "const32Bit": 173,
    "const64Bit": 31,
    "numConstZeroes": 111,
    "numConstOnes": 63,
    "UncondBranches": 61,
    "binaryConstArg": 11,
    "NumAShrInst": 0,
    "NumAddInst": 9,
    "NumAllocaInst": 34,
    "NumAndInst": 0,
    "BlockMid": 9,
    "BlockLow": 109,
    "NumBitCastInst": 16,
    "NumBrInst": 109,
    "NumCallInst": 64,
    "NumGetElementPtrInst": 58,
    "NumICmpInst": 49,
    "NumLShrInst": 0,
    "NumLoadInst": 197,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 8,
    "NumSExtInst": 5,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 69,
    "NumSubInst": 5,
    "NumTruncInst": 11,
    "NumXorInst": 0,
    "NumZExtInst": 29,
    "TotalBlocks": 118,
    "TotalInsts": 664,
    "TotalMemInst": 422,
    "TotalFuncs": 25,
    "ArgsPhi": 0,
    "testUnary": 292
  },
  "baseline_oz_instcount": 664,
  "knowledge_base_entry": [
    "--ipsccp",
    "--sccp",
    "--lower-constant-intrinsics",
    "--licm",
    "--ipsccp",
    "--globaldce",
    "--aggressive-instcombine",
    "--globaldce",
    "--mergefunc",
    "--reassociate",
    "-loop-reduce",
    "--early-cse-memssa",
    "--ipsccp",
    "--inline",
    "--memcpyopt",
    "--lower-constant-intrinsics",
    "--dse",
    "--aggressive-instcombine",
    "--load-store-vectorizer",
    "--aggressive-instcombine",
    "--jump-threading",
    "--mem2reg",
    "--ipsccp",
    "--globalopt"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--scalarizer",
          "--aggressive-instcombine",
          "--constprop",
          "--loop-unswitch",
          "--libcalls-shrinkwrap",
          "--loop-deletion",
          "-loop-reduce",
          "--loop-simplify",
          "--load-store-vectorizer",
          "--loop-versioning-licm",
          "--inline",
          "--rewrite-statepoints-for-gc",
          "--coro-cleanup",
          "--loop-distribute"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--scalarizer",
      "--aggressive-instcombine",
      "--constprop",
      "--loop-unswitch",
      "--libcalls-shrinkwrap",
      "--loop-deletion",
      "-loop-reduce",
      "--loop-simplify",
      "--load-store-vectorizer",
      "--loop-versioning-licm",
      "--inline",
      "--rewrite-statepoints-for-gc",
      "--coro-cleanup",
      "--loop-distribute"
    ],
    "performance_vs_Oz": "+2.3%"
  }
}
{
  "program_id": "linux-v0_5486.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 43,
    "onePredOneSuc": 26,
    "onePredTwoSuc": 15,
    "oneSuccessor": 38,
    "twoPred": 9,
    "twoPredOneSuc": 8,
    "twoEach": 1,
    "twoSuccessor": 17,
    "morePreds": 3,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 61,
    "BeginPhi": 0,
    "BranchCount": 55,
    "returnInt": 6,
    "CriticalCount": 9,
    "NumEdges": 72,
    "const32Bit": 120,
    "const64Bit": 26,
    "numConstZeroes": 55,
    "numConstOnes": 49,
    "UncondBranches": 38,
    "binaryConstArg": 42,
    "NumAShrInst": 1,
    "NumAddInst": 1,
    "NumAllocaInst": 24,
    "NumAndInst": 16,
    "BlockMid": 4,
    "BlockLow": 57,
    "NumBitCastInst": 4,
    "NumBrInst": 55,
    "NumCallInst": 25,
    "NumGetElementPtrInst": 32,
    "NumICmpInst": 24,
    "NumLShrInst": 7,
    "NumLoadInst": 73,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 6,
    "NumSExtInst": 11,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 35,
    "NumSubInst": 0,
    "NumTruncInst": 3,
    "NumXorInst": 16,
    "NumZExtInst": 8,
    "TotalBlocks": 61,
    "TotalInsts": 342,
    "TotalMemInst": 189,
    "TotalFuncs": 16,
    "ArgsPhi": 0,
    "testUnary": 123
  },
  "baseline_oz_instcount": 342,
  "knowledge_base_entry": [
    "--aggressive-instcombine",
    "--dce",
    "--ipsccp",
    "--globaldce",
    "--mergefunc",
    "--dse",
    "--loop-rotate",
    "--inline",
    "--gvn",
    "--dse",
    "--early-cse",
    "--loop-rotate",
    "--inline",
    "--gvn",
    "--die",
    "--aggressive-instcombine",
    "--lower-expect",
    "--instsimplify",
    "--instcombine",
    "--simplifycfg",
    "--gvn",
    "--aggressive-instcombine",
    "--jump-threading",
    "--globalopt",
    "--instcombine",
    "--licm"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--aggressive-instcombine",
          "--mergereturn",
          "--early-cse",
          "--loop-vectorize",
          "--loweratomic",
          "--loop-guard-widening",
          "--loop-versioning",
          "--flattencfg",
          "--loop-simplifycfg",
          "--dce",
          "--loop-unroll",
          "--loop-instsimplify",
          "--separate-const-offset-from-gep",
          "--lower-constant-intrinsics",
          "--irce",
          "--coro-split",
          "--instnamer"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--aggressive-instcombine",
      "--mergereturn",
      "--early-cse",
      "--loop-vectorize",
      "--loweratomic",
      "--loop-guard-widening",
      "--loop-versioning",
      "--flattencfg",
      "--loop-simplifycfg",
      "--dce",
      "--loop-unroll",
      "--loop-instsimplify",
      "--separate-const-offset-from-gep",
      "--lower-constant-intrinsics",
      "--irce",
      "--coro-split",
      "--instnamer"
    ],
    "performance_vs_Oz": "+1.2%"
  }
}
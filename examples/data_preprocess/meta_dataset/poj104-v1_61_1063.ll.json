{
  "program_id": "poj104-v1_61_1063.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 12,
    "onePredOneSuc": 8,
    "onePredTwoSuc": 1,
    "oneSuccessor": 10,
    "twoPred": 4,
    "twoPredOneSuc": 1,
    "twoEach": 2,
    "twoSuccessor": 5,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 25,
    "BeginPhi": 0,
    "BranchCount": 15,
    "returnInt": 3,
    "CriticalCount": 0,
    "NumEdges": 20,
    "const32Bit": 37,
    "const64Bit": 15,
    "numConstZeroes": 7,
    "numConstOnes": 27,
    "UncondBranches": 10,
    "binaryConstArg": 5,
    "NumAShrInst": 0,
    "NumAddInst": 4,
    "NumAllocaInst": 17,
    "NumAndInst": 0,
    "BlockMid": 2,
    "BlockLow": 23,
    "NumBitCastInst": 17,
    "NumBrInst": 15,
    "NumCallInst": 31,
    "NumGetElementPtrInst": 7,
    "NumICmpInst": 5,
    "NumLShrInst": 0,
    "NumLoadInst": 33,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 9,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 22,
    "NumSubInst": 1,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 1,
    "TotalBlocks": 25,
    "TotalInsts": 165,
    "TotalMemInst": 110,
    "TotalFuncs": 20,
    "ArgsPhi": 0,
    "testUnary": 68
  },
  "baseline_oz_instcount": 49,
  "knowledge_base_entry": [
    "--flattencfg",
    "--loop-simplifycfg",
    "--correlated-propagation",
    "--load-store-vectorizer",
    "--early-cse-memssa",
    "--early-cse-memssa",
    "--dce",
    "--elim-avail-extern",
    "--loop-simplifycfg",
    "--loop-deletion",
    "--sroa",
    "--dse",
    "--elim-avail-extern",
    "--loop-simplifycfg",
    "--early-cse-memssa",
    "--slsr",
    "--slp-vectorizer",
    "--inline",
    "--elim-avail-extern",
    "--inline",
    "--gvn",
    "--nary-reassociate",
    "--slp-vectorizer",
    "--mem2reg",
    "--aggressive-instcombine",
    "--mergefunc"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-data-prefetch",
          "--mem2reg",
          "--adce",
          "--lowerswitch",
          "--pgo-memop-opt",
          "--mldst-motion",
          "--elim-avail-extern",
          "--dse",
          "--redundant-dbg-inst-elim",
          "--attributor",
          "--strip",
          "--called-value-propagation",
          "--lowerinvoke",
          "--inline",
          "--deadargelim"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.0%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-data-prefetch",
      "--mem2reg",
      "--adce",
      "--lowerswitch",
      "--pgo-memop-opt",
      "--mldst-motion",
      "--elim-avail-extern",
      "--dse",
      "--redundant-dbg-inst-elim",
      "--attributor",
      "--strip",
      "--called-value-propagation",
      "--lowerinvoke",
      "--inline",
      "--deadargelim"
    ],
    "performance_vs_Oz": "+2.0%"
  }
}
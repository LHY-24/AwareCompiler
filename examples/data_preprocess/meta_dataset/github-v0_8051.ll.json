{
  "program_id": "github-v0_8051.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 15,
    "onePredOneSuc": 10,
    "onePredTwoSuc": 2,
    "oneSuccessor": 13,
    "twoPred": 6,
    "twoPredOneSuc": 2,
    "twoEach": 4,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 24,
    "BeginPhi": 0,
    "BranchCount": 20,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 27,
    "const32Bit": 36,
    "const64Bit": 29,
    "numConstZeroes": 29,
    "numConstOnes": 26,
    "UncondBranches": 13,
    "binaryConstArg": 17,
    "NumAShrInst": 5,
    "NumAddInst": 5,
    "NumAllocaInst": 13,
    "NumAndInst": 4,
    "BlockMid": 6,
    "BlockLow": 18,
    "NumBitCastInst": 0,
    "NumBrInst": 20,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 17,
    "NumICmpInst": 7,
    "NumLShrInst": 0,
    "NumLoadInst": 33,
    "NumMulInst": 0,
    "NumOrInst": 4,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 6,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 19,
    "NumSubInst": 0,
    "NumTruncInst": 9,
    "NumXorInst": 0,
    "NumZExtInst": 18,
    "TotalBlocks": 24,
    "TotalInsts": 173,
    "TotalMemInst": 89,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 79
  },
  "baseline_oz_instcount": 173,
  "knowledge_base_entry": [
    "--deadargelim",
    "--mergefunc",
    "--aggressive-instcombine",
    "--newgvn",
    "--adce",
    "--die",
    "--newgvn",
    "--loop-reroll",
    "--instsimplify"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--hotcoldsplit",
          "--loop-vectorize",
          "--loop-fusion",
          "--deadargelim",
          "--strip-dead-prototypes",
          "--strip-debug-declare",
          "--coro-cleanup",
          "--inline",
          "--aggressive-instcombine",
          "--add-discriminators",
          "--coro-elide",
          "--inferattrs",
          "--argpromotion",
          "--sroa"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+5.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--hotcoldsplit",
      "--loop-vectorize",
      "--loop-fusion",
      "--deadargelim",
      "--strip-dead-prototypes",
      "--strip-debug-declare",
      "--coro-cleanup",
      "--inline",
      "--aggressive-instcombine",
      "--add-discriminators",
      "--coro-elide",
      "--inferattrs",
      "--argpromotion",
      "--sroa"
    ],
    "performance_vs_Oz": "+5.8%"
  }
}
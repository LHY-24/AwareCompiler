{
  "program_id": "poj104-v1_81_250.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 23,
    "onePredOneSuc": 17,
    "onePredTwoSuc": 6,
    "oneSuccessor": 21,
    "twoPred": 8,
    "twoPredOneSuc": 2,
    "twoEach": 5,
    "twoSuccessor": 11,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 35,
    "BeginPhi": 0,
    "BranchCount": 32,
    "returnInt": 7,
    "CriticalCount": 4,
    "NumEdges": 43,
    "const32Bit": 29,
    "const64Bit": 32,
    "numConstZeroes": 29,
    "numConstOnes": 11,
    "UncondBranches": 21,
    "binaryConstArg": 5,
    "NumAShrInst": 0,
    "NumAddInst": 5,
    "NumAllocaInst": 6,
    "NumAndInst": 0,
    "BlockMid": 2,
    "BlockLow": 33,
    "NumBitCastInst": 10,
    "NumBrInst": 32,
    "NumCallInst": 19,
    "NumGetElementPtrInst": 20,
    "NumICmpInst": 11,
    "NumLShrInst": 0,
    "NumLoadInst": 40,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 18,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 14,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 35,
    "TotalInsts": 178,
    "TotalMemInst": 99,
    "TotalFuncs": 10,
    "ArgsPhi": 0,
    "testUnary": 74
  },
  "baseline_oz_instcount": 145,
  "knowledge_base_entry": [
    "--sink",
    "--gvn",
    "--simplifycfg",
    "--instsimplify",
    "--sccp",
    "--reassociate",
    "--newgvn",
    "--loop-rotate",
    "--instcombine",
    "--prune-eh",
    "--lower-expect",
    "--ipsccp",
    "--early-cse",
    "--mldst-motion",
    "--mem2reg",
    "--nary-reassociate",
    "--jump-threading",
    "--simplifycfg",
    "--jump-threading",
    "--loop-rotate",
    "--dse",
    "--bdce",
    "--gvn-hoist",
    "--loop-reroll",
    "--indvars",
    "--newgvn",
    "--sccp",
    "--globalopt",
    "--inline",
    "--memcpyopt"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--globalopt",
          "--irce",
          "--constmerge",
          "--die",
          "--prune-eh",
          "--mergefunc",
          "--lowerinvoke",
          "--gvn",
          "--consthoist",
          "--sroa",
          "--simple-loop-unswitch",
          "--loop-vectorize",
          "--coro-early",
          "--float2int",
          "--indvars"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+31.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--globalopt",
      "--irce",
      "--constmerge",
      "--die",
      "--prune-eh",
      "--mergefunc",
      "--lowerinvoke",
      "--gvn",
      "--consthoist",
      "--sroa",
      "--simple-loop-unswitch",
      "--loop-vectorize",
      "--coro-early",
      "--float2int",
      "--indvars"
    ],
    "performance_vs_Oz": "+31.7%"
  }
}
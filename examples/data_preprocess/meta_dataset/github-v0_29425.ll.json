{
  "program_id": "github-v0_29425.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 14,
    "onePredOneSuc": 9,
    "onePredTwoSuc": 2,
    "oneSuccessor": 12,
    "twoPred": 6,
    "twoPredOneSuc": 2,
    "twoEach": 4,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 23,
    "BeginPhi": 0,
    "BranchCount": 19,
    "returnInt": 4,
    "CriticalCount": 1,
    "NumEdges": 26,
    "const32Bit": 36,
    "const64Bit": 19,
    "numConstZeroes": 25,
    "numConstOnes": 21,
    "UncondBranches": 12,
    "binaryConstArg": 12,
    "NumAShrInst": 1,
    "NumAddInst": 5,
    "NumAllocaInst": 13,
    "NumAndInst": 2,
    "BlockMid": 5,
    "BlockLow": 18,
    "NumBitCastInst": 0,
    "NumBrInst": 19,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 13,
    "NumICmpInst": 7,
    "NumLShrInst": 0,
    "NumLoadInst": 29,
    "NumMulInst": 0,
    "NumOrInst": 3,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 5,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 18,
    "NumSubInst": 0,
    "NumTruncInst": 8,
    "NumXorInst": 1,
    "NumZExtInst": 15,
    "TotalBlocks": 23,
    "TotalInsts": 152,
    "TotalMemInst": 80,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 70
  },
  "baseline_oz_instcount": 152,
  "knowledge_base_entry": [
    "--loop-load-elim",
    "--jump-threading",
    "--sccp",
    "--jump-threading",
    "--sccp",
    "--loop-simplifycfg",
    "--flattencfg",
    "--aggressive-instcombine",
    "--jump-threading",
    "--sccp",
    "--early-cse",
    "--simplifycfg",
    "--sccp",
    "--gvn",
    "--sroa",
    "--dce",
    "--elim-avail-extern",
    "--loop-instsimplify",
    "--bdce",
    "--inline",
    "--die",
    "--mergefunc",
    "--globaldce",
    "--ipsccp",
    "--gvn-hoist",
    "--lower-constant-intrinsics"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--simplifycfg",
          "--aggressive-instcombine",
          "--sroa",
          "--loop-versioning-licm",
          "--redundant-dbg-inst-elim",
          "--loop-vectorize",
          "--loop-unswitch",
          "--guard-widening",
          "--scalarizer",
          "--inline",
          "--prune-eh",
          "--constprop",
          "--mergefunc",
          "--mem2reg",
          "--mldst-motion"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+7.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--simplifycfg",
      "--aggressive-instcombine",
      "--sroa",
      "--loop-versioning-licm",
      "--redundant-dbg-inst-elim",
      "--loop-vectorize",
      "--loop-unswitch",
      "--guard-widening",
      "--scalarizer",
      "--inline",
      "--prune-eh",
      "--constprop",
      "--mergefunc",
      "--mem2reg",
      "--mldst-motion"
    ],
    "performance_vs_Oz": "+7.9%"
  }
}
{
  "program_id": "github-v0_29212.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 24,
    "onePredOneSuc": 20,
    "onePredTwoSuc": 3,
    "oneSuccessor": 21,
    "twoPred": 7,
    "twoPredOneSuc": 1,
    "twoEach": 0,
    "twoSuccessor": 11,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 42,
    "BeginPhi": 0,
    "BranchCount": 31,
    "returnInt": 2,
    "CriticalCount": 1,
    "NumEdges": 46,
    "const32Bit": 50,
    "const64Bit": 10,
    "numConstZeroes": 22,
    "numConstOnes": 35,
    "UncondBranches": 21,
    "binaryConstArg": 2,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 26,
    "NumAndInst": 0,
    "BlockMid": 2,
    "BlockLow": 40,
    "NumBitCastInst": 5,
    "NumBrInst": 31,
    "NumCallInst": 12,
    "NumGetElementPtrInst": 15,
    "NumICmpInst": 10,
    "NumLShrInst": 0,
    "NumLoadInst": 53,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 9,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 32,
    "NumSubInst": 1,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 11,
    "TotalBlocks": 42,
    "TotalInsts": 210,
    "TotalMemInst": 138,
    "TotalFuncs": 14,
    "ArgsPhi": 0,
    "testUnary": 97
  },
  "baseline_oz_instcount": 211,
  "knowledge_base_entry": [
    "--loop-simplifycfg",
    "--gvn-hoist",
    "--aggressive-instcombine",
    "--loweratomic",
    "--early-cse-memssa",
    "--newgvn",
    "--prune-eh",
    "--instcombine",
    "--aggressive-instcombine",
    "--flattencfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--aggressive-instcombine",
          "--barrier",
          "--loop-predication",
          "--cross-dso-cfi",
          "--simple-loop-unswitch",
          "--name-anon-globals",
          "--mergeicmps",
          "--prune-eh",
          "--loop-idiom",
          "--memcpyopt"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--aggressive-instcombine",
      "--barrier",
      "--loop-predication",
      "--cross-dso-cfi",
      "--simple-loop-unswitch",
      "--name-anon-globals",
      "--mergeicmps",
      "--prune-eh",
      "--loop-idiom",
      "--memcpyopt"
    ],
    "performance_vs_Oz": "+1.9%"
  }
}
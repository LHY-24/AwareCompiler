{
  "program_id": "linux-v0_11619.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 52,
    "onePredOneSuc": 34,
    "onePredTwoSuc": 14,
    "oneSuccessor": 47,
    "twoPred": 11,
    "twoPredOneSuc": 8,
    "twoEach": 2,
    "twoSuccessor": 20,
    "morePreds": 4,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 83,
    "BeginPhi": 1,
    "BranchCount": 67,
    "returnInt": 13,
    "CriticalCount": 13,
    "NumEdges": 87,
    "const32Bit": 198,
    "const64Bit": 30,
    "numConstZeroes": 55,
    "numConstOnes": 118,
    "UncondBranches": 47,
    "binaryConstArg": 17,
    "NumAShrInst": 0,
    "NumAddInst": 6,
    "NumAllocaInst": 107,
    "NumAndInst": 3,
    "BlockMid": 15,
    "BlockLow": 69,
    "NumBitCastInst": 10,
    "NumBrInst": 67,
    "NumCallInst": 51,
    "NumGetElementPtrInst": 35,
    "NumICmpInst": 20,
    "NumLShrInst": 1,
    "NumLoadInst": 171,
    "NumMulInst": 1,
    "NumOrInst": 2,
    "NumPHIInst": 1,
    "NumRetInst": 17,
    "NumSExtInst": 7,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 133,
    "NumSubInst": 0,
    "NumTruncInst": 17,
    "NumXorInst": 6,
    "NumZExtInst": 17,
    "TotalBlocks": 84,
    "TotalInsts": 696,
    "TotalMemInst": 497,
    "TotalFuncs": 29,
    "ArgsPhi": 2,
    "testUnary": 351
  },
  "baseline_oz_instcount": 660,
  "knowledge_base_entry": [
    "--jump-threading",
    "--aggressive-instcombine",
    "--instsimplify",
    "--prune-eh",
    "--early-cse",
    "--jump-threading",
    "--sroa",
    "--mldst-motion",
    "--mem2reg",
    "--globalopt",
    "--ipsccp",
    "--reassociate",
    "--die",
    "--licm",
    "--mergefunc",
    "--elim-avail-extern",
    "--sroa",
    "--newgvn",
    "--aggressive-instcombine",
    "--simplifycfg",
    "--loop-reroll",
    "--correlated-propagation",
    "--adce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--add-discriminators",
          "--dse",
          "--mergefunc",
          "--pgo-memop-opt",
          "--ipsccp",
          "--globalopt",
          "--argpromotion",
          "--strip-dead-prototypes",
          "--load-store-vectorizer",
          "--loop-distribute",
          "--lcssa",
          "--memcpyopt",
          "--lower-constant-intrinsics",
          "--inject-tli-mappings",
          "--die",
          "--prune-eh",
          "--loop-unswitch",
          "--loop-deletion",
          "--always-inline",
          "--lower-expect",
          "--loop-instsimplify",
          "--loop-idiom",
          "--simple-loop-unswitch",
          "--bdce",
          "--partial-inliner",
          "--irce",
          "--loop-rotate",
          "--partially-inline-libcalls",
          "--aggressive-instcombine"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--add-discriminators",
      "--dse",
      "--mergefunc",
      "--pgo-memop-opt",
      "--ipsccp",
      "--globalopt",
      "--argpromotion",
      "--strip-dead-prototypes",
      "--load-store-vectorizer",
      "--loop-distribute",
      "--lcssa",
      "--memcpyopt",
      "--lower-constant-intrinsics",
      "--inject-tli-mappings",
      "--die",
      "--prune-eh",
      "--loop-unswitch",
      "--loop-deletion",
      "--always-inline",
      "--lower-expect",
      "--loop-instsimplify",
      "--loop-idiom",
      "--simple-loop-unswitch",
      "--bdce",
      "--partial-inliner",
      "--irce",
      "--loop-rotate",
      "--partially-inline-libcalls",
      "--aggressive-instcombine"
    ],
    "performance_vs_Oz": "+0.3%"
  }
}
{
  "program_id": "github-v0_4064.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 10,
    "onePredOneSuc": 6,
    "onePredTwoSuc": 4,
    "oneSuccessor": 6,
    "twoPred": 0,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 5,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 13,
    "BeginPhi": 0,
    "BranchCount": 11,
    "returnInt": 9,
    "CriticalCount": 0,
    "NumEdges": 16,
    "const32Bit": 28,
    "const64Bit": 0,
    "numConstZeroes": 9,
    "numConstOnes": 6,
    "UncondBranches": 6,
    "binaryConstArg": 0,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 3,
    "NumAndInst": 0,
    "BlockMid": 0,
    "BlockLow": 13,
    "NumBitCastInst": 1,
    "NumBrInst": 11,
    "NumCallInst": 12,
    "NumGetElementPtrInst": 3,
    "NumICmpInst": 5,
    "NumLShrInst": 0,
    "NumLoadInst": 3,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 2,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 11,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 13,
    "TotalInsts": 51,
    "TotalMemInst": 32,
    "TotalFuncs": 10,
    "ArgsPhi": 0,
    "testUnary": 7
  },
  "baseline_oz_instcount": 53,
  "knowledge_base_entry": [
    "--loop-guard-widening",
    "--gvn",
    "--elim-avail-extern",
    "--dse",
    "--instcombine",
    "--loop-instsimplify",
    "--inline",
    "--early-cse-memssa",
    "-loop-reduce",
    "--gvn-hoist",
    "--loop-reroll",
    "--jump-threading",
    "--loop-simplifycfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--load-store-vectorizer",
          "--loop-unroll-and-jam",
          "--loop-unswitch",
          "--loop-idiom",
          "--loop-simplify",
          "--ipconstprop",
          "--strip-dead-prototypes",
          "--cross-dso-cfi",
          "--partial-inliner",
          "--strip-nondebug",
          "--loop-simplifycfg",
          "--coro-early",
          "--separate-const-offset-from-gep",
          "--infer-address-spaces",
          "--deadargelim",
          "--mem2reg",
          "--coro-cleanup",
          "--mergefunc",
          "-loop-reduce",
          "--callsite-splitting",
          "--inject-tli-mappings",
          "--flattencfg",
          "--simplifycfg",
          "--speculative-execution",
          "--lcssa",
          "--constmerge",
          "--elim-avail-extern",
          "--memcpyopt"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--load-store-vectorizer",
      "--loop-unroll-and-jam",
      "--loop-unswitch",
      "--loop-idiom",
      "--loop-simplify",
      "--ipconstprop",
      "--strip-dead-prototypes",
      "--cross-dso-cfi",
      "--partial-inliner",
      "--strip-nondebug",
      "--loop-simplifycfg",
      "--coro-early",
      "--separate-const-offset-from-gep",
      "--infer-address-spaces",
      "--deadargelim",
      "--mem2reg",
      "--coro-cleanup",
      "--mergefunc",
      "-loop-reduce",
      "--callsite-splitting",
      "--inject-tli-mappings",
      "--flattencfg",
      "--simplifycfg",
      "--speculative-execution",
      "--lcssa",
      "--constmerge",
      "--elim-avail-extern",
      "--memcpyopt"
    ],
    "performance_vs_Oz": "+3.8%"
  }
}
{
  "program_id": "github-v0_14043.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 99,
    "onePredOneSuc": 62,
    "onePredTwoSuc": 19,
    "oneSuccessor": 92,
    "twoPred": 43,
    "twoPredOneSuc": 12,
    "twoEach": 25,
    "twoSuccessor": 54,
    "morePreds": 4,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 173,
    "BeginPhi": 2,
    "BranchCount": 146,
    "returnInt": 7,
    "CriticalCount": 19,
    "NumEdges": 200,
    "const32Bit": 213,
    "const64Bit": 36,
    "numConstZeroes": 82,
    "numConstOnes": 101,
    "UncondBranches": 92,
    "binaryConstArg": 40,
    "NumAShrInst": 3,
    "NumAddInst": 11,
    "NumAllocaInst": 51,
    "NumAndInst": 14,
    "BlockMid": 9,
    "BlockLow": 166,
    "NumBitCastInst": 4,
    "NumBrInst": 146,
    "NumCallInst": 41,
    "NumGetElementPtrInst": 57,
    "NumICmpInst": 54,
    "NumLShrInst": 0,
    "NumLoadInst": 207,
    "NumMulInst": 0,
    "NumOrInst": 2,
    "NumPHIInst": 2,
    "NumRetInst": 15,
    "NumSExtInst": 31,
    "NumSelectInst": 0,
    "NumShlInst": 3,
    "NumStoreInst": 98,
    "NumSubInst": 6,
    "NumTruncInst": 8,
    "NumXorInst": 1,
    "NumZExtInst": 33,
    "TotalBlocks": 175,
    "TotalInsts": 808,
    "TotalMemInst": 454,
    "TotalFuncs": 26,
    "ArgsPhi": 4,
    "testUnary": 334
  },
  "baseline_oz_instcount": 790,
  "knowledge_base_entry": [
    "--globaldce",
    "--ipsccp",
    "--instsimplify",
    "--jump-threading",
    "--prune-eh",
    "--aggressive-instcombine",
    "--lower-expect",
    "--ipsccp",
    "--bdce",
    "--newgvn",
    "--memcpyopt",
    "--newgvn",
    "--lower-expect",
    "--die",
    "--dse",
    "--adce",
    "--lower-constant-intrinsics",
    "--load-store-vectorizer",
    "--slsr"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-predication",
          "--aggressive-instcombine",
          "--sroa",
          "--pgo-memop-opt",
          "--loop-reroll",
          "--coro-early",
          "--lower-expect",
          "--bdce",
          "--loweratomic",
          "--simple-loop-unswitch",
          "--flattencfg",
          "--partially-inline-libcalls",
          "--globaldce",
          "--loop-unswitch",
          "--mergereturn",
          "--loop-simplify",
          "--prune-eh",
          "--instsimplify",
          "--libcalls-shrinkwrap",
          "--callsite-splitting",
          "--dce",
          "--ipsccp",
          "--functionattrs",
          "--instnamer",
          "--attributor",
          "--ee-instrument",
          "--inferattrs",
          "--partial-inliner"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-predication",
      "--aggressive-instcombine",
      "--sroa",
      "--pgo-memop-opt",
      "--loop-reroll",
      "--coro-early",
      "--lower-expect",
      "--bdce",
      "--loweratomic",
      "--simple-loop-unswitch",
      "--flattencfg",
      "--partially-inline-libcalls",
      "--globaldce",
      "--loop-unswitch",
      "--mergereturn",
      "--loop-simplify",
      "--prune-eh",
      "--instsimplify",
      "--libcalls-shrinkwrap",
      "--callsite-splitting",
      "--dce",
      "--ipsccp",
      "--functionattrs",
      "--instnamer",
      "--attributor",
      "--ee-instrument",
      "--inferattrs",
      "--partial-inliner"
    ],
    "performance_vs_Oz": "+1.1%"
  }
}
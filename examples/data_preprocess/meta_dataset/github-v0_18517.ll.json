{
  "program_id": "github-v0_18517.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 15,
    "onePredOneSuc": 10,
    "onePredTwoSuc": 2,
    "oneSuccessor": 13,
    "twoPred": 6,
    "twoPredOneSuc": 2,
    "twoEach": 4,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 24,
    "BeginPhi": 0,
    "BranchCount": 20,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 27,
    "const32Bit": 40,
    "const64Bit": 55,
    "numConstZeroes": 52,
    "numConstOnes": 29,
    "UncondBranches": 13,
    "binaryConstArg": 24,
    "NumAShrInst": 8,
    "NumAddInst": 4,
    "NumAllocaInst": 12,
    "NumAndInst": 7,
    "BlockMid": 7,
    "BlockLow": 17,
    "NumBitCastInst": 0,
    "NumBrInst": 20,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 31,
    "NumICmpInst": 7,
    "NumLShrInst": 1,
    "NumLoadInst": 48,
    "NumMulInst": 0,
    "NumOrInst": 9,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 9,
    "NumSelectInst": 0,
    "NumShlInst": 3,
    "NumStoreInst": 23,
    "NumSubInst": 0,
    "NumTruncInst": 18,
    "NumXorInst": 0,
    "NumZExtInst": 34,
    "TotalBlocks": 24,
    "TotalInsts": 245,
    "TotalMemInst": 121,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 121
  },
  "baseline_oz_instcount": 245,
  "knowledge_base_entry": [
    "--aggressive-instcombine",
    "--reassociate",
    "--early-cse-memssa",
    "--dce",
    "--aggressive-instcombine",
    "--reassociate",
    "--instcombine",
    "--lower-constant-intrinsics",
    "--jump-threading",
    "--correlated-propagation",
    "--bdce",
    "--slp-vectorizer",
    "--simplifycfg",
    "--mldst-motion",
    "--sroa",
    "--instsimplify"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-unswitch",
          "--loop-simplify",
          "--break-crit-edges",
          "--loop-versioning-licm",
          "--argpromotion",
          "--speculative-execution",
          "--sccp",
          "--early-cse",
          "--hotcoldsplit",
          "--aggressive-instcombine",
          "--globalsplit",
          "--globaldce",
          "--scalarizer"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+9.0%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-unswitch",
      "--loop-simplify",
      "--break-crit-edges",
      "--loop-versioning-licm",
      "--argpromotion",
      "--speculative-execution",
      "--sccp",
      "--early-cse",
      "--hotcoldsplit",
      "--aggressive-instcombine",
      "--globalsplit",
      "--globaldce",
      "--scalarizer"
    ],
    "performance_vs_Oz": "+9.0%"
  }
}
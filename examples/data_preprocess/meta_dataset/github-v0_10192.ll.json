{
  "program_id": "github-v0_10192.ll",
  "autophase_features": {
    "BBNumArgsHi": 10,
    "BBNumArgsLo": 13,
    "onePred": 31,
    "onePredOneSuc": 18,
    "onePredTwoSuc": 13,
    "oneSuccessor": 23,
    "twoPred": 28,
    "twoPredOneSuc": 4,
    "twoEach": 17,
    "twoSuccessor": 42,
    "morePreds": 6,
    "BB03Phi": 21,
    "BBHiPhi": 2,
    "BBNoPhi": 63,
    "BeginPhi": 23,
    "BranchCount": 65,
    "returnInt": 9,
    "CriticalCount": 53,
    "NumEdges": 107,
    "const32Bit": 82,
    "const64Bit": 108,
    "numConstZeroes": 73,
    "numConstOnes": 59,
    "UncondBranches": 23,
    "binaryConstArg": 53,
    "NumAShrInst": 5,
    "NumAddInst": 42,
    "NumAllocaInst": 0,
    "NumAndInst": 10,
    "BlockMid": 23,
    "BlockLow": 63,
    "NumBitCastInst": 14,
    "NumBrInst": 65,
    "NumCallInst": 80,
    "NumGetElementPtrInst": 45,
    "NumICmpInst": 51,
    "NumLShrInst": 0,
    "NumLoadInst": 42,
    "NumMulInst": 26,
    "NumOrInst": 0,
    "NumPHIInst": 50,
    "NumRetInst": 21,
    "NumSExtInst": 61,
    "NumSelectInst": 5,
    "NumShlInst": 3,
    "NumStoreInst": 12,
    "NumSubInst": 2,
    "NumTruncInst": 3,
    "NumXorInst": 0,
    "NumZExtInst": 1,
    "TotalBlocks": 86,
    "TotalInsts": 871,
    "TotalMemInst": 179,
    "TotalFuncs": 31,
    "ArgsPhi": 106,
    "testUnary": 172
  },
  "baseline_oz_instcount": 867,
  "knowledge_base_entry": [
    "--loop-idiom",
    "--gvn-hoist",
    "--bdce",
    "--licm",
    "--ipsccp",
    "--flattencfg",
    "--instcombine",
    "--nary-reassociate",
    "--lower-expect",
    "--bdce",
    "--slp-vectorizer",
    "--dse",
    "--licm",
    "--jump-threading",
    "--sccp",
    "--gvn-hoist",
    "--loop-deletion",
    "--mem2reg",
    "--reassociate",
    "--correlated-propagation",
    "--instcombine",
    "--mergefunc",
    "--gvn",
    "--instsimplify",
    "--prune-eh",
    "--lower-constant-intrinsics",
    "--gvn-hoist",
    "--bdce",
    "--licm",
    "--ipsccp",
    "--flattencfg",
    "--instcombine",
    "--nary-reassociate",
    "--lower-expect",
    "--bdce",
    "--slp-vectorizer",
    "--dse",
    "--licm",
    "--jump-threading",
    "--sccp",
    "--gvn-hoist",
    "--loop-deletion",
    "--mem2reg",
    "--reassociate",
    "--correlated-propagation",
    "--instcombine",
    "--mergefunc",
    "--bdce",
    "--sroa",
    "--gvn-hoist",
    "--loop-reroll",
    "--instsimplify",
    "--early-cse-memssa",
    "--newgvn",
    "--early-cse",
    "--sroa",
    "--loop-deletion",
    "--sccp",
    "--loop-instsimplify",
    "--gvn",
    "--loop-simplifycfg",
    "--flattencfg",
    "--mem2reg",
    "--nary-reassociate",
    "--lower-expect",
    "--bdce",
    "--slp-vectorizer",
    "--dse",
    "--licm",
    "--jump-threading",
    "--sccp",
    "--gvn-hoist",
    "--loop-deletion",
    "--mem2reg",
    "--reassociate",
    "--correlated-propagation",
    "--instcombine",
    "--mergefunc",
    "--bdce",
    "--sroa",
    "--gvn-hoist",
    "--loop-reroll",
    "--instsimplify",
    "--early-cse-memssa",
    "--die",
    "--early-cse-memssa",
    "--ipsccp",
    "--flattencfg",
    "--instcombine",
    "--nary-reassociate",
    "--loop-fusion",
    "--gvn-hoist",
    "--simplifycfg",
    "--load-store-vectorizer"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--lowerswitch",
          "--partial-inliner",
          "--bdce",
          "--loop-unswitch",
          "--rewrite-statepoints-for-gc",
          "--dse",
          "--correlated-propagation",
          "--aggressive-instcombine",
          "--loweratomic",
          "--constprop",
          "--constmerge",
          "--loop-interchange",
          "--deadargelim",
          "--loop-simplifycfg",
          "--name-anon-globals",
          "--strip",
          "--cross-dso-cfi",
          "--simplifycfg"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--lowerswitch",
      "--partial-inliner",
      "--bdce",
      "--loop-unswitch",
      "--rewrite-statepoints-for-gc",
      "--dse",
      "--correlated-propagation",
      "--aggressive-instcombine",
      "--loweratomic",
      "--constprop",
      "--constmerge",
      "--loop-interchange",
      "--deadargelim",
      "--loop-simplifycfg",
      "--name-anon-globals",
      "--strip",
      "--cross-dso-cfi",
      "--simplifycfg"
    ],
    "performance_vs_Oz": "+0.5%"
  }
}
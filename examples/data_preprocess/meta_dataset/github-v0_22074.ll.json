{
  "program_id": "github-v0_22074.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 10,
    "onePredOneSuc": 7,
    "onePredTwoSuc": 1,
    "oneSuccessor": 9,
    "twoPred": 4,
    "twoPredOneSuc": 0,
    "twoEach": 4,
    "twoSuccessor": 6,
    "morePreds": 1,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 16,
    "BeginPhi": 1,
    "BranchCount": 15,
    "returnInt": 3,
    "CriticalCount": 2,
    "NumEdges": 21,
    "const32Bit": 38,
    "const64Bit": 2,
    "numConstZeroes": 20,
    "numConstOnes": 20,
    "UncondBranches": 9,
    "binaryConstArg": 13,
    "NumAShrInst": 0,
    "NumAddInst": 9,
    "NumAllocaInst": 9,
    "NumAndInst": 1,
    "BlockMid": 4,
    "BlockLow": 13,
    "NumBitCastInst": 0,
    "NumBrInst": 15,
    "NumCallInst": 5,
    "NumGetElementPtrInst": 16,
    "NumICmpInst": 6,
    "NumLShrInst": 0,
    "NumLoadInst": 31,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 1,
    "NumRetInst": 2,
    "NumSExtInst": 21,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 17,
    "NumSubInst": 3,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 1,
    "TotalBlocks": 17,
    "TotalInsts": 139,
    "TotalMemInst": 78,
    "TotalFuncs": 5,
    "ArgsPhi": 3,
    "testUnary": 64
  },
  "baseline_oz_instcount": 139,
  "knowledge_base_entry": [
    "--die",
    "--loop-instsimplify",
    "--nary-reassociate",
    "--loop-instsimplify",
    "--die",
    "--loop-instsimplify",
    "--jump-threading",
    "--reassociate",
    "--aggressive-instcombine",
    "--instcombine",
    "--memcpyopt",
    "--sroa",
    "--flattencfg",
    "--newgvn",
    "--mldst-motion",
    "--slp-vectorizer",
    "--loop-reroll",
    "--slp-vectorizer",
    "--adce",
    "--licm"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--mergeicmps",
          "--inject-tli-mappings",
          "--indvars",
          "--loop-rotate",
          "--newgvn",
          "--loop-load-elim",
          "--slp-vectorizer",
          "--inline",
          "--loop-instsimplify",
          "--always-inline",
          "--loop-simplify",
          "--insert-gcov-profiling",
          "--scalarizer",
          "--loop-idiom",
          "--slsr",
          "--aggressive-instcombine",
          "--globalopt",
          "--constmerge",
          "--coro-elide",
          "--partially-inline-libcalls",
          "--loop-deletion",
          "--mem2reg",
          "--prune-eh",
          "--nary-reassociate",
          "--deadargelim",
          "--guard-widening",
          "--correlated-propagation"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--mergeicmps",
      "--inject-tli-mappings",
      "--indvars",
      "--loop-rotate",
      "--newgvn",
      "--loop-load-elim",
      "--slp-vectorizer",
      "--inline",
      "--loop-instsimplify",
      "--always-inline",
      "--loop-simplify",
      "--insert-gcov-profiling",
      "--scalarizer",
      "--loop-idiom",
      "--slsr",
      "--aggressive-instcombine",
      "--globalopt",
      "--constmerge",
      "--coro-elide",
      "--partially-inline-libcalls",
      "--loop-deletion",
      "--mem2reg",
      "--prune-eh",
      "--nary-reassociate",
      "--deadargelim",
      "--guard-widening",
      "--correlated-propagation"
    ],
    "performance_vs_Oz": "+1.4%"
  }
}
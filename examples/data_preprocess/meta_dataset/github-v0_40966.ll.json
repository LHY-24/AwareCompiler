{
  "program_id": "github-v0_40966.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 15,
    "onePredOneSuc": 10,
    "onePredTwoSuc": 2,
    "oneSuccessor": 13,
    "twoPred": 6,
    "twoPredOneSuc": 2,
    "twoEach": 4,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 24,
    "BeginPhi": 0,
    "BranchCount": 20,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 27,
    "const32Bit": 34,
    "const64Bit": 36,
    "numConstZeroes": 39,
    "numConstOnes": 24,
    "UncondBranches": 13,
    "binaryConstArg": 8,
    "NumAShrInst": 0,
    "NumAddInst": 9,
    "NumAllocaInst": 14,
    "NumAndInst": 0,
    "BlockMid": 4,
    "BlockLow": 20,
    "NumBitCastInst": 8,
    "NumBrInst": 20,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 29,
    "NumICmpInst": 7,
    "NumLShrInst": 0,
    "NumLoadInst": 41,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 24,
    "NumSubInst": 1,
    "NumTruncInst": 6,
    "NumXorInst": 0,
    "NumZExtInst": 21,
    "TotalBlocks": 24,
    "TotalInsts": 194,
    "TotalMemInst": 115,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 93
  },
  "baseline_oz_instcount": 194,
  "knowledge_base_entry": [
    "--tailcallelim",
    "--instcombine",
    "--slsr",
    "--jump-threading",
    "--aggressive-instcombine",
    "--newgvn",
    "--inline",
    "--flattencfg",
    "--gvn-hoist",
    "--globalopt",
    "--elim-avail-extern",
    "--flattencfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--sccp",
          "--guard-widening",
          "--loop-distribute",
          "--irce",
          "--post-inline-ee-instrument",
          "--insert-gcov-profiling",
          "--div-rem-pairs",
          "--mergereturn",
          "--strip-dead-prototypes",
          "--licm",
          "--loop-guard-widening",
          "--loop-instsimplify",
          "--constprop",
          "--lower-expect",
          "--partial-inliner",
          "--globaldce",
          "--die",
          "--constmerge",
          "--loop-interchange",
          "-loop-reduce",
          "--loop-versioning-licm",
          "--redundant-dbg-inst-elim",
          "--loop-predication",
          "--gvn-hoist",
          "--loop-reroll",
          "--libcalls-shrinkwrap",
          "--lowerinvoke",
          "--hotcoldsplit",
          "--aggressive-instcombine"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+5.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--sccp",
      "--guard-widening",
      "--loop-distribute",
      "--irce",
      "--post-inline-ee-instrument",
      "--insert-gcov-profiling",
      "--div-rem-pairs",
      "--mergereturn",
      "--strip-dead-prototypes",
      "--licm",
      "--loop-guard-widening",
      "--loop-instsimplify",
      "--constprop",
      "--lower-expect",
      "--partial-inliner",
      "--globaldce",
      "--die",
      "--constmerge",
      "--loop-interchange",
      "-loop-reduce",
      "--loop-versioning-licm",
      "--redundant-dbg-inst-elim",
      "--loop-predication",
      "--gvn-hoist",
      "--loop-reroll",
      "--libcalls-shrinkwrap",
      "--lowerinvoke",
      "--hotcoldsplit",
      "--aggressive-instcombine"
    ],
    "performance_vs_Oz": "+5.7%"
  }
}
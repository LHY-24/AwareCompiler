{
  "program_id": "linux-v0_10031.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 58,
    "onePredOneSuc": 39,
    "onePredTwoSuc": 19,
    "oneSuccessor": 50,
    "twoPred": 23,
    "twoPredOneSuc": 10,
    "twoEach": 8,
    "twoSuccessor": 34,
    "morePreds": 3,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 102,
    "BeginPhi": 0,
    "BranchCount": 84,
    "returnInt": 14,
    "CriticalCount": 17,
    "NumEdges": 118,
    "const32Bit": 269,
    "const64Bit": 19,
    "numConstZeroes": 128,
    "numConstOnes": 89,
    "UncondBranches": 50,
    "binaryConstArg": 26,
    "NumAShrInst": 1,
    "NumAddInst": 4,
    "NumAllocaInst": 65,
    "NumAndInst": 11,
    "BlockMid": 9,
    "BlockLow": 93,
    "NumBitCastInst": 9,
    "NumBrInst": 84,
    "NumCallInst": 29,
    "NumGetElementPtrInst": 84,
    "NumICmpInst": 35,
    "NumLShrInst": 0,
    "NumLoadInst": 222,
    "NumMulInst": 0,
    "NumOrInst": 9,
    "NumPHIInst": 0,
    "NumRetInst": 18,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 4,
    "NumStoreInst": 113,
    "NumSubInst": 1,
    "NumTruncInst": 16,
    "NumXorInst": 2,
    "NumZExtInst": 27,
    "TotalBlocks": 102,
    "TotalInsts": 735,
    "TotalMemInst": 513,
    "TotalFuncs": 27,
    "ArgsPhi": 0,
    "testUnary": 339
  },
  "baseline_oz_instcount": 736,
  "knowledge_base_entry": [
    "--lower-expect",
    "--mergefunc",
    "--newgvn",
    "--mergefunc",
    "--newgvn",
    "--adce",
    "--aggressive-instcombine",
    "--adce",
    "--lower-constant-intrinsics",
    "--aggressive-instcombine",
    "--load-store-vectorizer",
    "--instcombine",
    "--memcpyopt",
    "--lower-constant-intrinsics",
    "--correlated-propagation",
    "--nary-reassociate",
    "--elim-avail-extern",
    "--dce",
    "--simplifycfg",
    "--reassociate",
    "--mergefunc",
    "--reassociate",
    "--early-cse-memssa",
    "--sroa",
    "--jump-threading",
    "--lower-expect",
    "--early-cse"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--aggressive-instcombine",
          "--lcssa",
          "--sancov",
          "--dse",
          "--constmerge",
          "--globalopt",
          "--correlated-propagation",
          "--gvn-hoist",
          "--globaldce",
          "--loweratomic"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--aggressive-instcombine",
      "--lcssa",
      "--sancov",
      "--dse",
      "--constmerge",
      "--globalopt",
      "--correlated-propagation",
      "--gvn-hoist",
      "--globaldce",
      "--loweratomic"
    ],
    "performance_vs_Oz": "+2.3%"
  }
}
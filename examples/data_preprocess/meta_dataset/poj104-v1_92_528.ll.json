{
  "program_id": "poj104-v1_92_528.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 30,
    "onePredOneSuc": 22,
    "onePredTwoSuc": 7,
    "oneSuccessor": 28,
    "twoPred": 10,
    "twoPredOneSuc": 5,
    "twoEach": 5,
    "twoSuccessor": 13,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 45,
    "BeginPhi": 0,
    "BranchCount": 41,
    "returnInt": 8,
    "CriticalCount": 2,
    "NumEdges": 54,
    "const32Bit": 43,
    "const64Bit": 46,
    "numConstZeroes": 33,
    "numConstOnes": 23,
    "UncondBranches": 28,
    "binaryConstArg": 22,
    "NumAShrInst": 0,
    "NumAddInst": 18,
    "NumAllocaInst": 12,
    "NumAndInst": 0,
    "BlockMid": 4,
    "BlockLow": 41,
    "NumBitCastInst": 22,
    "NumBrInst": 41,
    "NumCallInst": 32,
    "NumGetElementPtrInst": 24,
    "NumICmpInst": 13,
    "NumLShrInst": 0,
    "NumLoadInst": 81,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 4,
    "NumSExtInst": 24,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 38,
    "NumSubInst": 4,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 45,
    "TotalInsts": 313,
    "TotalMemInst": 187,
    "TotalFuncs": 12,
    "ArgsPhi": 0,
    "testUnary": 139
  },
  "baseline_oz_instcount": 146,
  "knowledge_base_entry": [
    "--simple-loop-unswitch",
    "--gvn-hoist",
    "--adce",
    "--mem2reg",
    "--globalopt",
    "--elim-avail-extern",
    "--load-store-vectorizer",
    "--loop-simplifycfg",
    "--jump-threading",
    "--load-store-vectorizer",
    "--mergefunc",
    "--inline",
    "--flattencfg",
    "--early-cse",
    "--mergefunc",
    "--early-cse",
    "--mem2reg",
    "--lower-constant-intrinsics",
    "--sccp",
    "--simplifycfg",
    "--gvn-hoist",
    "--inline",
    "--mergefunc",
    "--lower-expect",
    "--early-cse",
    "--slp-vectorizer",
    "--bdce",
    "--inline",
    "--elim-avail-extern",
    "--mem2reg",
    "--flattencfg",
    "--inline",
    "--sccp",
    "--sroa",
    "--inline",
    "--flattencfg",
    "--early-cse",
    "--lower-expect",
    "--load-store-vectorizer",
    "--instsimplify",
    "--die",
    "--early-cse",
    "--prune-eh",
    "--sroa",
    "--simplifycfg",
    "--gvn-hoist",
    "--early-cse-memssa",
    "--ipsccp",
    "--nary-reassociate"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--strip-dead-prototypes",
          "--rewrite-statepoints-for-gc",
          "--loop-versioning",
          "--sccp",
          "--memcpyopt",
          "--mergefunc",
          "--loop-deletion",
          "--loweratomic",
          "--reassociate",
          "--sink",
          "--partial-inliner",
          "--sroa",
          "--dce",
          "--loop-sink",
          "--gvn-hoist",
          "--early-cse",
          "--load-store-vectorizer",
          "--tailcallelim",
          "--mldst-motion",
          "--guard-widening",
          "--coro-split",
          "--loop-predication",
          "--instcombine",
          "--slsr",
          "--loop-distribute",
          "--jump-threading"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+6.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--strip-dead-prototypes",
      "--rewrite-statepoints-for-gc",
      "--loop-versioning",
      "--sccp",
      "--memcpyopt",
      "--mergefunc",
      "--loop-deletion",
      "--loweratomic",
      "--reassociate",
      "--sink",
      "--partial-inliner",
      "--sroa",
      "--dce",
      "--loop-sink",
      "--gvn-hoist",
      "--early-cse",
      "--load-store-vectorizer",
      "--tailcallelim",
      "--mldst-motion",
      "--guard-widening",
      "--coro-split",
      "--loop-predication",
      "--instcombine",
      "--slsr",
      "--loop-distribute",
      "--jump-threading"
    ],
    "performance_vs_Oz": "+6.2%"
  }
}
{
  "program_id": "linux-v0_8836.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 31,
    "onePredOneSuc": 19,
    "onePredTwoSuc": 12,
    "oneSuccessor": 27,
    "twoPred": 14,
    "twoPredOneSuc": 5,
    "twoEach": 4,
    "twoSuccessor": 20,
    "morePreds": 2,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 56,
    "BeginPhi": 1,
    "BranchCount": 47,
    "returnInt": 13,
    "CriticalCount": 12,
    "NumEdges": 67,
    "const32Bit": 97,
    "const64Bit": 8,
    "numConstZeroes": 34,
    "numConstOnes": 65,
    "UncondBranches": 27,
    "binaryConstArg": 18,
    "NumAShrInst": 1,
    "NumAddInst": 11,
    "NumAllocaInst": 47,
    "NumAndInst": 4,
    "BlockMid": 6,
    "BlockLow": 51,
    "NumBitCastInst": 6,
    "NumBrInst": 47,
    "NumCallInst": 22,
    "NumGetElementPtrInst": 25,
    "NumICmpInst": 15,
    "NumLShrInst": 0,
    "NumLoadInst": 100,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 1,
    "NumRetInst": 10,
    "NumSExtInst": 5,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 66,
    "NumSubInst": 2,
    "NumTruncInst": 5,
    "NumXorInst": 0,
    "NumZExtInst": 23,
    "TotalBlocks": 57,
    "TotalInsts": 392,
    "TotalMemInst": 260,
    "TotalFuncs": 11,
    "ArgsPhi": 2,
    "testUnary": 186
  },
  "baseline_oz_instcount": 391,
  "knowledge_base_entry": [
    "--flattencfg",
    "--aggressive-instcombine",
    "--load-store-vectorizer",
    "--gvn",
    "--correlated-propagation",
    "--simplifycfg",
    "--adce",
    "--lower-constant-intrinsics",
    "--ipsccp",
    "--instsimplify",
    "--early-cse",
    "--ipsccp",
    "--aggressive-instcombine",
    "--mergefunc",
    "--lower-constant-intrinsics",
    "--nary-reassociate"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--early-cse",
          "--loop-simplifycfg",
          "--loop-sink",
          "--loop-unroll",
          "--strip",
          "--loop-vectorize",
          "--loop-rotate",
          "--sroa",
          "--rewrite-statepoints-for-gc",
          "--mergereturn",
          "--speculative-execution",
          "--loop-guard-widening",
          "--sancov",
          "--loweratomic",
          "--name-anon-globals",
          "--barrier",
          "--instsimplify",
          "--dse",
          "--insert-gcov-profiling",
          "--lowerswitch",
          "--ipsccp",
          "--aggressive-instcombine",
          "--loop-fusion",
          "--add-discriminators",
          "--argpromotion",
          "--lower-expect",
          "--slp-vectorizer",
          "--constmerge",
          "--coro-early"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--early-cse",
      "--loop-simplifycfg",
      "--loop-sink",
      "--loop-unroll",
      "--strip",
      "--loop-vectorize",
      "--loop-rotate",
      "--sroa",
      "--rewrite-statepoints-for-gc",
      "--mergereturn",
      "--speculative-execution",
      "--loop-guard-widening",
      "--sancov",
      "--loweratomic",
      "--name-anon-globals",
      "--barrier",
      "--instsimplify",
      "--dse",
      "--insert-gcov-profiling",
      "--lowerswitch",
      "--ipsccp",
      "--aggressive-instcombine",
      "--loop-fusion",
      "--add-discriminators",
      "--argpromotion",
      "--lower-expect",
      "--slp-vectorizer",
      "--constmerge",
      "--coro-early"
    ],
    "performance_vs_Oz": "+1.5%"
  }
}
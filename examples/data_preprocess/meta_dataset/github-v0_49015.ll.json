{
  "program_id": "github-v0_49015.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 100,
    "onePredOneSuc": 58,
    "onePredTwoSuc": 37,
    "oneSuccessor": 86,
    "twoPred": 40,
    "twoPredOneSuc": 23,
    "twoEach": 17,
    "twoSuccessor": 57,
    "morePreds": 5,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 147,
    "BeginPhi": 2,
    "BranchCount": 143,
    "returnInt": 16,
    "CriticalCount": 28,
    "NumEdges": 208,
    "const32Bit": 110,
    "const64Bit": 27,
    "numConstZeroes": 39,
    "numConstOnes": 47,
    "UncondBranches": 86,
    "binaryConstArg": 31,
    "NumAShrInst": 0,
    "NumAddInst": 16,
    "NumAllocaInst": 26,
    "NumAndInst": 7,
    "BlockMid": 1,
    "BlockLow": 148,
    "NumBitCastInst": 0,
    "NumBrInst": 143,
    "NumCallInst": 42,
    "NumGetElementPtrInst": 12,
    "NumICmpInst": 57,
    "NumLShrInst": 0,
    "NumLoadInst": 191,
    "NumMulInst": 10,
    "NumOrInst": 5,
    "NumPHIInst": 2,
    "NumRetInst": 1,
    "NumSExtInst": 20,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 86,
    "NumSubInst": 7,
    "NumTruncInst": 3,
    "NumXorInst": 0,
    "NumZExtInst": 3,
    "TotalBlocks": 149,
    "TotalInsts": 636,
    "TotalMemInst": 357,
    "TotalFuncs": 20,
    "ArgsPhi": 4,
    "testUnary": 243
  },
  "baseline_oz_instcount": 631,
  "knowledge_base_entry": [
    "--loop-deletion",
    "--loop-simplifycfg",
    "--ipsccp",
    "--aggressive-instcombine",
    "--loop-rotate",
    "--mem2reg",
    "--newgvn",
    "--instcombine",
    "--aggressive-instcombine",
    "--ipsccp",
    "--elim-avail-extern",
    "--adce",
    "--loop-simplifycfg",
    "--ipsccp",
    "--sccp",
    "--lower-expect",
    "--ipsccp",
    "--dce",
    "--loop-instsimplify",
    "--aggressive-instcombine",
    "--die",
    "--newgvn",
    "--mergefunc",
    "--aggressive-instcombine",
    "--loweratomic",
    "--ipsccp",
    "--loweratomic",
    "--ipsccp",
    "--die"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--mergeicmps",
          "--deadargelim",
          "--constmerge",
          "--lower-widenable-condition",
          "--infer-address-spaces",
          "--aggressive-instcombine",
          "--inferattrs",
          "--globalopt",
          "--strip-dead-prototypes",
          "--attributor",
          "--dce",
          "--loop-simplifycfg",
          "--ipsccp"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--mergeicmps",
      "--deadargelim",
      "--constmerge",
      "--lower-widenable-condition",
      "--infer-address-spaces",
      "--aggressive-instcombine",
      "--inferattrs",
      "--globalopt",
      "--strip-dead-prototypes",
      "--attributor",
      "--dce",
      "--loop-simplifycfg",
      "--ipsccp"
    ],
    "performance_vs_Oz": "+0.3%"
  }
}
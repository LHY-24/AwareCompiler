{
  "program_id": "linux-v0_7227.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 12,
    "onePredOneSuc": 8,
    "onePredTwoSuc": 0,
    "oneSuccessor": 12,
    "twoPred": 2,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 2,
    "morePreds": 0,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 26,
    "BeginPhi": 1,
    "BranchCount": 14,
    "returnInt": 13,
    "CriticalCount": 0,
    "NumEdges": 16,
    "const32Bit": 54,
    "const64Bit": 4,
    "numConstZeroes": 9,
    "numConstOnes": 32,
    "UncondBranches": 12,
    "binaryConstArg": 4,
    "NumAShrInst": 1,
    "NumAddInst": 0,
    "NumAllocaInst": 32,
    "NumAndInst": 3,
    "BlockMid": 0,
    "BlockLow": 27,
    "NumBitCastInst": 8,
    "NumBrInst": 14,
    "NumCallInst": 15,
    "NumGetElementPtrInst": 11,
    "NumICmpInst": 3,
    "NumLShrInst": 0,
    "NumLoadInst": 44,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 1,
    "NumRetInst": 13,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 33,
    "NumSubInst": 0,
    "NumTruncInst": 3,
    "NumXorInst": 0,
    "NumZExtInst": 5,
    "TotalBlocks": 27,
    "TotalInsts": 188,
    "TotalMemInst": 135,
    "TotalFuncs": 21,
    "ArgsPhi": 2,
    "testUnary": 92
  },
  "baseline_oz_instcount": 188,
  "knowledge_base_entry": [
    "-loop-reduce",
    "--early-cse-memssa",
    "--bdce",
    "--aggressive-instcombine",
    "--simplifycfg",
    "--slp-vectorizer",
    "--load-store-vectorizer",
    "--licm",
    "--early-cse",
    "--dse",
    "--nary-reassociate",
    "--gvn-hoist",
    "--inline",
    "--mergefunc",
    "--globaldce",
    "--aggressive-instcombine",
    "--adce",
    "--licm",
    "--loop-instsimplify",
    "--gvn",
    "--sccp",
    "--instsimplify",
    "--nary-reassociate",
    "--early-cse"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--irce",
          "--indvars",
          "--scalarizer",
          "--loop-rotate",
          "--prune-eh",
          "--inline",
          "--lower-matrix-intrinsics",
          "--mldst-motion",
          "--loop-versioning-licm",
          "--functionattrs",
          "--always-inline",
          "--deadargelim",
          "--lowerinvoke",
          "--globalsplit",
          "--aggressive-instcombine",
          "--flattencfg",
          "--jump-threading",
          "--alignment-from-assumptions",
          "--canonicalize-aliases",
          "--redundant-dbg-inst-elim",
          "--lowerswitch",
          "--called-value-propagation",
          "--strip",
          "--strip-debug-declare",
          "--slsr",
          "--globaldce"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--irce",
      "--indvars",
      "--scalarizer",
      "--loop-rotate",
      "--prune-eh",
      "--inline",
      "--lower-matrix-intrinsics",
      "--mldst-motion",
      "--loop-versioning-licm",
      "--functionattrs",
      "--always-inline",
      "--deadargelim",
      "--lowerinvoke",
      "--globalsplit",
      "--aggressive-instcombine",
      "--flattencfg",
      "--jump-threading",
      "--alignment-from-assumptions",
      "--canonicalize-aliases",
      "--redundant-dbg-inst-elim",
      "--lowerswitch",
      "--called-value-propagation",
      "--strip",
      "--strip-debug-declare",
      "--slsr",
      "--globaldce"
    ],
    "performance_vs_Oz": "+1.1%"
  }
}
{
  "program_id": "github-v0_27897.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 10,
    "onePred": 56,
    "onePredOneSuc": 41,
    "onePredTwoSuc": 14,
    "oneSuccessor": 50,
    "twoPred": 20,
    "twoPredOneSuc": 7,
    "twoEach": 13,
    "twoSuccessor": 28,
    "morePreds": 3,
    "BB03Phi": 10,
    "BBHiPhi": 0,
    "BBNoPhi": 70,
    "BeginPhi": 10,
    "BranchCount": 78,
    "returnInt": 0,
    "CriticalCount": 6,
    "NumEdges": 111,
    "const32Bit": 112,
    "const64Bit": 14,
    "numConstZeroes": 29,
    "numConstOnes": 47,
    "UncondBranches": 50,
    "binaryConstArg": 68,
    "NumAShrInst": 7,
    "NumAddInst": 40,
    "NumAllocaInst": 14,
    "NumAndInst": 12,
    "BlockMid": 12,
    "BlockLow": 68,
    "NumBitCastInst": 7,
    "NumBrInst": 78,
    "NumCallInst": 0,
    "NumGetElementPtrInst": 40,
    "NumICmpInst": 28,
    "NumLShrInst": 2,
    "NumLoadInst": 163,
    "NumMulInst": 0,
    "NumOrInst": 5,
    "NumPHIInst": 10,
    "NumRetInst": 1,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 11,
    "NumStoreInst": 67,
    "NumSubInst": 4,
    "NumTruncInst": 10,
    "NumXorInst": 4,
    "NumZExtInst": 71,
    "TotalBlocks": 80,
    "TotalInsts": 575,
    "TotalMemInst": 284,
    "TotalFuncs": 1,
    "ArgsPhi": 21,
    "testUnary": 265
  },
  "baseline_oz_instcount": 576,
  "knowledge_base_entry": [
    "--deadargelim",
    "--mergefunc",
    "--globalopt",
    "--mergefunc",
    "--die",
    "--slp-vectorizer",
    "--simplifycfg",
    "--slsr",
    "--early-cse",
    "--sroa",
    "--aggressive-instcombine",
    "--loweratomic",
    "--early-cse",
    "--load-store-vectorizer",
    "--gvn-hoist",
    "--early-cse",
    "--simplifycfg",
    "--bdce",
    "--jump-threading",
    "--inline",
    "--dce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--sroa",
          "--lower-widenable-condition",
          "--cross-dso-cfi",
          "--slp-vectorizer",
          "--prune-eh",
          "--newgvn",
          "--div-rem-pairs",
          "--dse",
          "--always-inline",
          "--instsimplify",
          "--aggressive-instcombine",
          "--correlated-propagation",
          "--strip-nondebug"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--sroa",
      "--lower-widenable-condition",
      "--cross-dso-cfi",
      "--slp-vectorizer",
      "--prune-eh",
      "--newgvn",
      "--div-rem-pairs",
      "--dse",
      "--always-inline",
      "--instsimplify",
      "--aggressive-instcombine",
      "--correlated-propagation",
      "--strip-nondebug"
    ],
    "performance_vs_Oz": "+1.6%"
  }
}
{
  "program_id": "github-v0_3012.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 0,
    "onePredOneSuc": 0,
    "onePredTwoSuc": 0,
    "oneSuccessor": 0,
    "twoPred": 0,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 0,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 1,
    "BeginPhi": 0,
    "BranchCount": 0,
    "returnInt": 1,
    "CriticalCount": 0,
    "NumEdges": 0,
    "const32Bit": 3,
    "const64Bit": 0,
    "numConstZeroes": 0,
    "numConstOnes": 1,
    "UncondBranches": 0,
    "binaryConstArg": 2,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 1,
    "NumAndInst": 0,
    "BlockMid": 1,
    "BlockLow": 0,
    "NumBitCastInst": 0,
    "NumBrInst": 0,
    "NumCallInst": 2,
    "NumGetElementPtrInst": 0,
    "NumICmpInst": 0,
    "NumLShrInst": 0,
    "NumLoadInst": 3,
    "NumMulInst": 0,
    "NumOrInst": 2,
    "NumPHIInst": 0,
    "NumRetInst": 1,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 3,
    "NumSubInst": 0,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 2,
    "TotalBlocks": 1,
    "TotalInsts": 16,
    "TotalMemInst": 9,
    "TotalFuncs": 3,
    "ArgsPhi": 0,
    "testUnary": 8
  },
  "baseline_oz_instcount": 16,
  "knowledge_base_entry": [
    "--loweratomic",
    "--early-cse",
    "--gvn-hoist",
    "--correlated-propagation",
    "--die",
    "--licm",
    "--reassociate",
    "--aggressive-instcombine",
    "--prune-eh"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--mergeicmps",
          "--always-inline",
          "--div-rem-pairs",
          "--strip-nondebug",
          "--die",
          "--functionattrs",
          "--libcalls-shrinkwrap",
          "--lower-guard-intrinsic",
          "--sroa",
          "--aggressive-instcombine",
          "--barrier",
          "--pgo-memop-opt",
          "--canonicalize-aliases",
          "--redundant-dbg-inst-elim",
          "--partial-inliner",
          "--coro-early",
          "--ipsccp",
          "--insert-gcov-profiling",
          "--loop-vectorize",
          "--prune-eh",
          "--loop-predication",
          "--loop-versioning",
          "--irce",
          "--sccp",
          "--strip",
          "--adce",
          "--guard-widening",
          "--rpo-functionattrs",
          "--hotcoldsplit",
          "--early-cse"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+25.0%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--mergeicmps",
      "--always-inline",
      "--div-rem-pairs",
      "--strip-nondebug",
      "--die",
      "--functionattrs",
      "--libcalls-shrinkwrap",
      "--lower-guard-intrinsic",
      "--sroa",
      "--aggressive-instcombine",
      "--barrier",
      "--pgo-memop-opt",
      "--canonicalize-aliases",
      "--redundant-dbg-inst-elim",
      "--partial-inliner",
      "--coro-early",
      "--ipsccp",
      "--insert-gcov-profiling",
      "--loop-vectorize",
      "--prune-eh",
      "--loop-predication",
      "--loop-versioning",
      "--irce",
      "--sccp",
      "--strip",
      "--adce",
      "--guard-widening",
      "--rpo-functionattrs",
      "--hotcoldsplit",
      "--early-cse"
    ],
    "performance_vs_Oz": "+25.0%"
  }
}
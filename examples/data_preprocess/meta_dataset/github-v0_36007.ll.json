{
  "program_id": "github-v0_36007.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 86,
    "onePredOneSuc": 59,
    "onePredTwoSuc": 25,
    "oneSuccessor": 83,
    "twoPred": 42,
    "twoPredOneSuc": 19,
    "twoEach": 19,
    "twoSuccessor": 47,
    "morePreds": 4,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 138,
    "BeginPhi": 0,
    "BranchCount": 130,
    "returnInt": 50,
    "CriticalCount": 25,
    "NumEdges": 187,
    "const32Bit": 176,
    "const64Bit": 17,
    "numConstZeroes": 57,
    "numConstOnes": 75,
    "UncondBranches": 83,
    "binaryConstArg": 25,
    "NumAShrInst": 1,
    "NumAddInst": 10,
    "NumAllocaInst": 41,
    "NumAndInst": 1,
    "BlockMid": 4,
    "BlockLow": 134,
    "NumBitCastInst": 4,
    "NumBrInst": 130,
    "NumCallInst": 77,
    "NumGetElementPtrInst": 23,
    "NumICmpInst": 49,
    "NumLShrInst": 0,
    "NumLoadInst": 188,
    "NumMulInst": 5,
    "NumOrInst": 3,
    "NumPHIInst": 0,
    "NumRetInst": 5,
    "NumSExtInst": 10,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 95,
    "NumSubInst": 7,
    "NumTruncInst": 9,
    "NumXorInst": 0,
    "NumZExtInst": 15,
    "TotalBlocks": 138,
    "TotalInsts": 682,
    "TotalMemInst": 424,
    "TotalFuncs": 25,
    "ArgsPhi": 0,
    "testUnary": 269
  },
  "baseline_oz_instcount": 682,
  "knowledge_base_entry": [
    "--simplifycfg",
    "--newgvn",
    "--aggressive-instcombine",
    "--adce",
    "--reassociate",
    "--early-cse",
    "--adce",
    "--ipsccp",
    "--early-cse-memssa"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--lower-expect",
          "--nary-reassociate",
          "--inject-tli-mappings",
          "--sccp",
          "--barrier",
          "--lower-guard-intrinsic",
          "--loop-sink",
          "--scalarizer",
          "--partially-inline-libcalls",
          "--instcombine",
          "--aggressive-instcombine",
          "--forceattrs",
          "--strip",
          "--loop-instsimplify",
          "--globalopt",
          "--loop-data-prefetch",
          "--loop-vectorize",
          "--jump-threading",
          "--early-cse-memssa",
          "--loop-versioning-licm",
          "--attributor",
          "--coro-split"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--lower-expect",
      "--nary-reassociate",
      "--inject-tli-mappings",
      "--sccp",
      "--barrier",
      "--lower-guard-intrinsic",
      "--loop-sink",
      "--scalarizer",
      "--partially-inline-libcalls",
      "--instcombine",
      "--aggressive-instcombine",
      "--forceattrs",
      "--strip",
      "--loop-instsimplify",
      "--globalopt",
      "--loop-data-prefetch",
      "--loop-vectorize",
      "--jump-threading",
      "--early-cse-memssa",
      "--loop-versioning-licm",
      "--attributor",
      "--coro-split"
    ],
    "performance_vs_Oz": "+0.6%"
  }
}
{
  "program_id": "github-v0_37476.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 38,
    "onePredOneSuc": 29,
    "onePredTwoSuc": 9,
    "oneSuccessor": 30,
    "twoPred": 7,
    "twoPredOneSuc": 1,
    "twoEach": 1,
    "twoSuccessor": 19,
    "morePreds": 4,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 59,
    "BeginPhi": 0,
    "BranchCount": 49,
    "returnInt": 17,
    "CriticalCount": 1,
    "NumEdges": 68,
    "const32Bit": 104,
    "const64Bit": 5,
    "numConstZeroes": 46,
    "numConstOnes": 58,
    "UncondBranches": 30,
    "binaryConstArg": 17,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 27,
    "NumAndInst": 8,
    "BlockMid": 3,
    "BlockLow": 56,
    "NumBitCastInst": 0,
    "NumBrInst": 49,
    "NumCallInst": 18,
    "NumGetElementPtrInst": 11,
    "NumICmpInst": 20,
    "NumLShrInst": 0,
    "NumLoadInst": 70,
    "NumMulInst": 1,
    "NumOrInst": 10,
    "NumPHIInst": 0,
    "NumRetInst": 10,
    "NumSExtInst": 0,
    "NumSelectInst": 1,
    "NumShlInst": 2,
    "NumStoreInst": 62,
    "NumSubInst": 0,
    "NumTruncInst": 17,
    "NumXorInst": 0,
    "NumZExtInst": 31,
    "TotalBlocks": 59,
    "TotalInsts": 344,
    "TotalMemInst": 188,
    "TotalFuncs": 14,
    "ArgsPhi": 0,
    "testUnary": 147
  },
  "baseline_oz_instcount": 344,
  "knowledge_base_entry": [
    "--flattencfg",
    "--gvn",
    "--aggressive-instcombine",
    "--flattencfg",
    "--early-cse",
    "--jump-threading",
    "--licm",
    "--slp-vectorizer"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-guard-widening",
          "--lcssa",
          "--indvars",
          "--attributor",
          "--lowerinvoke",
          "--memcpyopt",
          "--bdce",
          "--gvn",
          "--float2int",
          "--loop-unroll-and-jam",
          "--coro-early",
          "--always-inline",
          "--forceattrs",
          "--loop-unswitch",
          "--strip-debug-declare",
          "--lower-guard-intrinsic",
          "--name-anon-globals",
          "--prune-eh",
          "--early-cse",
          "--strip-dead-prototypes",
          "--aggressive-instcombine",
          "--rewrite-statepoints-for-gc",
          "--loop-versioning",
          "--lower-expect",
          "--gvn-hoist",
          "--loop-idiom",
          "--sccp",
          "--guard-widening",
          "--constmerge",
          "--coro-elide"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+10.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-guard-widening",
      "--lcssa",
      "--indvars",
      "--attributor",
      "--lowerinvoke",
      "--memcpyopt",
      "--bdce",
      "--gvn",
      "--float2int",
      "--loop-unroll-and-jam",
      "--coro-early",
      "--always-inline",
      "--forceattrs",
      "--loop-unswitch",
      "--strip-debug-declare",
      "--lower-guard-intrinsic",
      "--name-anon-globals",
      "--prune-eh",
      "--early-cse",
      "--strip-dead-prototypes",
      "--aggressive-instcombine",
      "--rewrite-statepoints-for-gc",
      "--loop-versioning",
      "--lower-expect",
      "--gvn-hoist",
      "--loop-idiom",
      "--sccp",
      "--guard-widening",
      "--constmerge",
      "--coro-elide"
    ],
    "performance_vs_Oz": "+10.5%"
  }
}
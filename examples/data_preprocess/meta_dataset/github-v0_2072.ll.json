{
  "program_id": "github-v0_2072.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 6,
    "onePredOneSuc": 3,
    "onePredTwoSuc": 2,
    "oneSuccessor": 6,
    "twoPred": 4,
    "twoPredOneSuc": 1,
    "twoEach": 2,
    "twoSuccessor": 4,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 16,
    "BeginPhi": 0,
    "BranchCount": 10,
    "returnInt": 6,
    "CriticalCount": 2,
    "NumEdges": 14,
    "const32Bit": 83,
    "const64Bit": 49,
    "numConstZeroes": 61,
    "numConstOnes": 34,
    "UncondBranches": 6,
    "binaryConstArg": 12,
    "NumAShrInst": 0,
    "NumAddInst": 5,
    "NumAllocaInst": 25,
    "NumAndInst": 2,
    "BlockMid": 4,
    "BlockLow": 12,
    "NumBitCastInst": 4,
    "NumBrInst": 10,
    "NumCallInst": 20,
    "NumGetElementPtrInst": 51,
    "NumICmpInst": 4,
    "NumLShrInst": 2,
    "NumLoadInst": 55,
    "NumMulInst": 0,
    "NumOrInst": 2,
    "NumPHIInst": 0,
    "NumRetInst": 6,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 43,
    "NumSubInst": 1,
    "NumTruncInst": 1,
    "NumXorInst": 1,
    "NumZExtInst": 2,
    "TotalBlocks": 16,
    "TotalInsts": 236,
    "TotalMemInst": 194,
    "TotalFuncs": 10,
    "ArgsPhi": 0,
    "testUnary": 87
  },
  "baseline_oz_instcount": 237,
  "knowledge_base_entry": [
    "--gvn-hoist",
    "--aggressive-instcombine",
    "--globalopt",
    "--dse",
    "--gvn",
    "--inline"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--load-store-vectorizer",
          "--instcombine",
          "--constmerge",
          "--mergeicmps",
          "--forceattrs",
          "--coro-early",
          "--attributor",
          "--aggressive-instcombine",
          "--coro-elide",
          "--add-discriminators",
          "--tailcallelim",
          "--lower-widenable-condition"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--load-store-vectorizer",
      "--instcombine",
      "--constmerge",
      "--mergeicmps",
      "--forceattrs",
      "--coro-early",
      "--attributor",
      "--aggressive-instcombine",
      "--coro-elide",
      "--add-discriminators",
      "--tailcallelim",
      "--lower-widenable-condition"
    ],
    "performance_vs_Oz": "+1.7%"
  }
}
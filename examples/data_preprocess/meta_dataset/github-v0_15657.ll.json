{
  "program_id": "github-v0_15657.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 32,
    "onePredOneSuc": 26,
    "onePredTwoSuc": 4,
    "oneSuccessor": 32,
    "twoPred": 15,
    "twoPredOneSuc": 3,
    "twoEach": 9,
    "twoSuccessor": 15,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 54,
    "BeginPhi": 0,
    "BranchCount": 47,
    "returnInt": 7,
    "CriticalCount": 6,
    "NumEdges": 66,
    "const32Bit": 80,
    "const64Bit": 8,
    "numConstZeroes": 35,
    "numConstOnes": 37,
    "UncondBranches": 32,
    "binaryConstArg": 14,
    "NumAShrInst": 0,
    "NumAddInst": 8,
    "NumAllocaInst": 22,
    "NumAndInst": 0,
    "BlockMid": 3,
    "BlockLow": 51,
    "NumBitCastInst": 0,
    "NumBrInst": 47,
    "NumCallInst": 30,
    "NumGetElementPtrInst": 20,
    "NumICmpInst": 15,
    "NumLShrInst": 0,
    "NumLoadInst": 80,
    "NumMulInst": 0,
    "NumOrInst": 3,
    "NumPHIInst": 0,
    "NumRetInst": 5,
    "NumSExtInst": 14,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 39,
    "NumSubInst": 0,
    "NumTruncInst": 5,
    "NumXorInst": 1,
    "NumZExtInst": 5,
    "TotalBlocks": 54,
    "TotalInsts": 299,
    "TotalMemInst": 191,
    "TotalFuncs": 26,
    "ArgsPhi": 0,
    "testUnary": 126
  },
  "baseline_oz_instcount": 298,
  "knowledge_base_entry": [
    "--strip",
    "--mergefunc",
    "--gvn",
    "--ipsccp",
    "--sccp",
    "--inline",
    "--die",
    "--ipsccp",
    "--dce",
    "--gvn",
    "--ipsccp",
    "--sccp",
    "--inline",
    "--die",
    "--aggressive-instcombine",
    "--prune-eh",
    "--simplifycfg",
    "--globalopt",
    "--instcombine",
    "--slsr",
    "--jump-threading"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--gvn-hoist",
          "--indvars",
          "--loop-unswitch",
          "--argpromotion",
          "--aggressive-instcombine",
          "--tailcallelim",
          "--strip-nondebug",
          "--loop-reroll",
          "--early-cse",
          "--loop-distribute",
          "--slsr",
          "--constprop",
          "--constmerge",
          "--instnamer",
          "--strip",
          "--inject-tli-mappings",
          "--loop-idiom",
          "--sancov",
          "--mergeicmps"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--gvn-hoist",
      "--indvars",
      "--loop-unswitch",
      "--argpromotion",
      "--aggressive-instcombine",
      "--tailcallelim",
      "--strip-nondebug",
      "--loop-reroll",
      "--early-cse",
      "--loop-distribute",
      "--slsr",
      "--constprop",
      "--constmerge",
      "--instnamer",
      "--strip",
      "--inject-tli-mappings",
      "--loop-idiom",
      "--sancov",
      "--mergeicmps"
    ],
    "performance_vs_Oz": "+1.3%"
  }
}
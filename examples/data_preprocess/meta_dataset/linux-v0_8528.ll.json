{
  "program_id": "linux-v0_8528.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 51,
    "onePredOneSuc": 33,
    "onePredTwoSuc": 16,
    "oneSuccessor": 41,
    "twoPred": 10,
    "twoPredOneSuc": 4,
    "twoEach": 5,
    "twoSuccessor": 24,
    "morePreds": 4,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 81,
    "BeginPhi": 1,
    "BranchCount": 65,
    "returnInt": 10,
    "CriticalCount": 3,
    "NumEdges": 89,
    "const32Bit": 271,
    "const64Bit": 11,
    "numConstZeroes": 114,
    "numConstOnes": 107,
    "UncondBranches": 41,
    "binaryConstArg": 18,
    "NumAShrInst": 0,
    "NumAddInst": 8,
    "NumAllocaInst": 76,
    "NumAndInst": 9,
    "BlockMid": 12,
    "BlockLow": 70,
    "NumBitCastInst": 10,
    "NumBrInst": 65,
    "NumCallInst": 30,
    "NumGetElementPtrInst": 84,
    "NumICmpInst": 25,
    "NumLShrInst": 0,
    "NumLoadInst": 205,
    "NumMulInst": 2,
    "NumOrInst": 2,
    "NumPHIInst": 1,
    "NumRetInst": 17,
    "NumSExtInst": 14,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 121,
    "NumSubInst": 0,
    "NumTruncInst": 5,
    "NumXorInst": 0,
    "NumZExtInst": 17,
    "TotalBlocks": 82,
    "TotalInsts": 692,
    "TotalMemInst": 516,
    "TotalFuncs": 30,
    "ArgsPhi": 2,
    "testUnary": 328
  },
  "baseline_oz_instcount": 692,
  "knowledge_base_entry": [
    "--early-cse-memssa",
    "--aggressive-instcombine",
    "--reassociate",
    "--jump-threading",
    "--early-cse",
    "--instcombine",
    "--simplifycfg",
    "--loop-reroll",
    "--sroa",
    "--indvars",
    "--jump-threading",
    "--aggressive-instcombine",
    "--loop-simplifycfg",
    "--slsr",
    "--load-store-vectorizer",
    "--mldst-motion",
    "--elim-avail-extern",
    "--dse",
    "--loop-rotate",
    "--gvn-hoist",
    "--adce",
    "--inline",
    "--slp-vectorizer"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-data-prefetch",
          "--callsite-splitting",
          "--hotcoldsplit",
          "--partial-inliner",
          "--lowerswitch",
          "--aggressive-instcombine",
          "--nary-reassociate",
          "--licm",
          "--barrier",
          "--indvars",
          "--loop-unswitch",
          "--sancov",
          "--div-rem-pairs",
          "--elim-avail-extern",
          "--strip-dead-prototypes",
          "--dce",
          "--simple-loop-unswitch",
          "--loop-versioning-licm"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-data-prefetch",
      "--callsite-splitting",
      "--hotcoldsplit",
      "--partial-inliner",
      "--lowerswitch",
      "--aggressive-instcombine",
      "--nary-reassociate",
      "--licm",
      "--barrier",
      "--indvars",
      "--loop-unswitch",
      "--sancov",
      "--div-rem-pairs",
      "--elim-avail-extern",
      "--strip-dead-prototypes",
      "--dce",
      "--simple-loop-unswitch",
      "--loop-versioning-licm"
    ],
    "performance_vs_Oz": "+0.7%"
  }
}
{
  "program_id": "github-v0_24982.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 64,
    "onePredOneSuc": 43,
    "onePredTwoSuc": 20,
    "oneSuccessor": 55,
    "twoPred": 27,
    "twoPredOneSuc": 11,
    "twoEach": 15,
    "twoSuccessor": 39,
    "morePreds": 3,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 97,
    "BeginPhi": 1,
    "BranchCount": 94,
    "returnInt": 39,
    "CriticalCount": 22,
    "NumEdges": 133,
    "const32Bit": 162,
    "const64Bit": 80,
    "numConstZeroes": 99,
    "numConstOnes": 71,
    "UncondBranches": 55,
    "binaryConstArg": 34,
    "NumAShrInst": 0,
    "NumAddInst": 16,
    "NumAllocaInst": 40,
    "NumAndInst": 8,
    "BlockMid": 6,
    "BlockLow": 92,
    "NumBitCastInst": 1,
    "NumBrInst": 94,
    "NumCallInst": 43,
    "NumGetElementPtrInst": 57,
    "NumICmpInst": 40,
    "NumLShrInst": 2,
    "NumLoadInst": 151,
    "NumMulInst": 2,
    "NumOrInst": 1,
    "NumPHIInst": 1,
    "NumRetInst": 4,
    "NumSExtInst": 36,
    "NumSelectInst": 1,
    "NumShlInst": 3,
    "NumStoreInst": 90,
    "NumSubInst": 6,
    "NumTruncInst": 10,
    "NumXorInst": 5,
    "NumZExtInst": 1,
    "TotalBlocks": 98,
    "TotalInsts": 614,
    "TotalMemInst": 381,
    "TotalFuncs": 16,
    "ArgsPhi": 2,
    "testUnary": 239
  },
  "baseline_oz_instcount": 616,
  "knowledge_base_entry": [
    "--separate-const-offset-from-gep",
    "--instcombine",
    "--jump-threading",
    "--aggressive-instcombine",
    "--load-store-vectorizer",
    "--instcombine",
    "--bdce",
    "--sroa",
    "--simplifycfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--instsimplify",
          "--sroa",
          "--aggressive-instcombine",
          "--flattencfg",
          "--load-store-vectorizer",
          "--slp-vectorizer",
          "--strip-nondebug",
          "--infer-address-spaces",
          "--early-cse-memssa",
          "--add-discriminators",
          "--loop-simplify",
          "-loop-reduce",
          "--coro-split"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--instsimplify",
      "--sroa",
      "--aggressive-instcombine",
      "--flattencfg",
      "--load-store-vectorizer",
      "--slp-vectorizer",
      "--strip-nondebug",
      "--infer-address-spaces",
      "--early-cse-memssa",
      "--add-discriminators",
      "--loop-simplify",
      "-loop-reduce",
      "--coro-split"
    ],
    "performance_vs_Oz": "+2.6%"
  }
}
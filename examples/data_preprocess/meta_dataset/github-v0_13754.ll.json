{
  "program_id": "github-v0_13754.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 2,
    "onePredOneSuc": 1,
    "onePredTwoSuc": 1,
    "oneSuccessor": 2,
    "twoPred": 2,
    "twoPredOneSuc": 1,
    "twoEach": 0,
    "twoSuccessor": 2,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 19,
    "BeginPhi": 0,
    "BranchCount": 4,
    "returnInt": 0,
    "CriticalCount": 2,
    "NumEdges": 6,
    "const32Bit": 89,
    "const64Bit": 0,
    "numConstZeroes": 7,
    "numConstOnes": 56,
    "UncondBranches": 2,
    "binaryConstArg": 41,
    "NumAShrInst": 16,
    "NumAddInst": 14,
    "NumAllocaInst": 37,
    "NumAndInst": 18,
    "BlockMid": 7,
    "BlockLow": 12,
    "NumBitCastInst": 0,
    "NumBrInst": 4,
    "NumCallInst": 0,
    "NumGetElementPtrInst": 0,
    "NumICmpInst": 8,
    "NumLShrInst": 1,
    "NumLoadInst": 63,
    "NumMulInst": 0,
    "NumOrInst": 4,
    "NumPHIInst": 0,
    "NumRetInst": 15,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 3,
    "NumStoreInst": 43,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 17,
    "NumZExtInst": 6,
    "TotalBlocks": 19,
    "TotalInsts": 249,
    "TotalMemInst": 143,
    "TotalFuncs": 15,
    "ArgsPhi": 0,
    "testUnary": 106
  },
  "baseline_oz_instcount": 249,
  "knowledge_base_entry": [
    "--deadargelim",
    "--mergefunc",
    "--loop-instsimplify",
    "--mergefunc",
    "--gvn",
    "--load-store-vectorizer",
    "--dse",
    "--aggressive-instcombine",
    "--loweratomic",
    "--early-cse",
    "--licm",
    "--reassociate"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-guard-widening",
          "--redundant-dbg-inst-elim",
          "--loop-fusion",
          "--loop-idiom",
          "--hotcoldsplit",
          "--callsite-splitting",
          "--coro-split",
          "--indvars",
          "--attributor",
          "--mergefunc",
          "--adce",
          "--rpo-functionattrs",
          "--coro-cleanup",
          "--pgo-memop-opt",
          "--loop-reroll",
          "--loop-versioning",
          "--sink",
          "--lower-expect",
          "--sroa",
          "--constprop",
          "--mergereturn",
          "--loop-interchange",
          "--gvn-hoist",
          "--insert-gcov-profiling",
          "--irce",
          "-loop-reduce",
          "--flattencfg",
          "--coro-elide",
          "--libcalls-shrinkwrap",
          "--guard-widening"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-guard-widening",
      "--redundant-dbg-inst-elim",
      "--loop-fusion",
      "--loop-idiom",
      "--hotcoldsplit",
      "--callsite-splitting",
      "--coro-split",
      "--indvars",
      "--attributor",
      "--mergefunc",
      "--adce",
      "--rpo-functionattrs",
      "--coro-cleanup",
      "--pgo-memop-opt",
      "--loop-reroll",
      "--loop-versioning",
      "--sink",
      "--lower-expect",
      "--sroa",
      "--constprop",
      "--mergereturn",
      "--loop-interchange",
      "--gvn-hoist",
      "--insert-gcov-profiling",
      "--irce",
      "-loop-reduce",
      "--flattencfg",
      "--coro-elide",
      "--libcalls-shrinkwrap",
      "--guard-widening"
    ],
    "performance_vs_Oz": "+0.4%"
  }
}
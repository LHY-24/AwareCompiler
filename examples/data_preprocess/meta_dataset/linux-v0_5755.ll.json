{
  "program_id": "linux-v0_5755.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 24,
    "onePredOneSuc": 18,
    "onePredTwoSuc": 5,
    "oneSuccessor": 19,
    "twoPred": 5,
    "twoPredOneSuc": 0,
    "twoEach": 3,
    "twoSuccessor": 12,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 44,
    "BeginPhi": 0,
    "BranchCount": 31,
    "returnInt": 14,
    "CriticalCount": 2,
    "NumEdges": 43,
    "const32Bit": 101,
    "const64Bit": 25,
    "numConstZeroes": 52,
    "numConstOnes": 48,
    "UncondBranches": 19,
    "binaryConstArg": 5,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 38,
    "NumAndInst": 1,
    "BlockMid": 2,
    "BlockLow": 42,
    "NumBitCastInst": 7,
    "NumBrInst": 31,
    "NumCallInst": 33,
    "NumGetElementPtrInst": 29,
    "NumICmpInst": 12,
    "NumLShrInst": 0,
    "NumLoadInst": 82,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 13,
    "NumSExtInst": 1,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 65,
    "NumSubInst": 0,
    "NumTruncInst": 1,
    "NumXorInst": 2,
    "NumZExtInst": 3,
    "TotalBlocks": 44,
    "TotalInsts": 323,
    "TotalMemInst": 247,
    "TotalFuncs": 24,
    "ArgsPhi": 0,
    "testUnary": 135
  },
  "baseline_oz_instcount": 323,
  "knowledge_base_entry": [
    "--hotcoldsplit",
    "--mergefunc",
    "--elim-avail-extern",
    "--instsimplify",
    "--sroa",
    "--aggressive-instcombine",
    "--dse",
    "--mergefunc",
    "-loop-reduce",
    "--indvars",
    "--instcombine"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-unroll-and-jam",
          "--mergefunc",
          "--correlated-propagation",
          "--coro-early",
          "--loweratomic",
          "--loop-interchange",
          "--loop-sink",
          "--loop-unroll",
          "--bdce",
          "--inject-tli-mappings"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-unroll-and-jam",
      "--mergefunc",
      "--correlated-propagation",
      "--coro-early",
      "--loweratomic",
      "--loop-interchange",
      "--loop-sink",
      "--loop-unroll",
      "--bdce",
      "--inject-tli-mappings"
    ],
    "performance_vs_Oz": "+1.9%"
  }
}
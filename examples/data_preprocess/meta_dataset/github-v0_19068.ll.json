{
  "program_id": "github-v0_19068.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 15,
    "onePredOneSuc": 9,
    "onePredTwoSuc": 3,
    "oneSuccessor": 13,
    "twoPred": 6,
    "twoPredOneSuc": 3,
    "twoEach": 3,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 24,
    "BeginPhi": 0,
    "BranchCount": 20,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 27,
    "const32Bit": 35,
    "const64Bit": 78,
    "numConstZeroes": 72,
    "numConstOnes": 35,
    "UncondBranches": 13,
    "binaryConstArg": 6,
    "NumAShrInst": 0,
    "NumAddInst": 8,
    "NumAllocaInst": 16,
    "NumAndInst": 0,
    "BlockMid": 6,
    "BlockLow": 18,
    "NumBitCastInst": 24,
    "NumBrInst": 20,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 66,
    "NumICmpInst": 7,
    "NumLShrInst": 0,
    "NumLoadInst": 68,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 35,
    "NumSubInst": 0,
    "NumTruncInst": 6,
    "NumXorInst": 0,
    "NumZExtInst": 35,
    "TotalBlocks": 24,
    "TotalInsts": 299,
    "TotalMemInst": 192,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 152
  },
  "baseline_oz_instcount": 299,
  "knowledge_base_entry": [
    "--loop-versioning-licm",
    "--instcombine",
    "--flattencfg",
    "--aggressive-instcombine",
    "--gvn",
    "--die",
    "--loop-simplifycfg",
    "--adce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--lower-matrix-intrinsics",
          "--mem2reg",
          "--post-inline-ee-instrument",
          "--loop-rotate",
          "--add-discriminators",
          "--loop-data-prefetch",
          "--coro-early",
          "--loop-reroll",
          "--loop-instsimplify",
          "--load-store-vectorizer",
          "--globalsplit",
          "--alignment-from-assumptions",
          "--mergereturn",
          "--pgo-memop-opt",
          "--slsr",
          "--flattencfg",
          "--inject-tli-mappings",
          "--simple-loop-unswitch",
          "--loop-unswitch",
          "--libcalls-shrinkwrap",
          "--loop-unroll",
          "--globalopt",
          "--canonicalize-aliases",
          "--aggressive-instcombine",
          "--loop-predication",
          "--loop-sink",
          "--strip",
          "--globaldce",
          "--loop-load-elim"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+4.0%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--lower-matrix-intrinsics",
      "--mem2reg",
      "--post-inline-ee-instrument",
      "--loop-rotate",
      "--add-discriminators",
      "--loop-data-prefetch",
      "--coro-early",
      "--loop-reroll",
      "--loop-instsimplify",
      "--load-store-vectorizer",
      "--globalsplit",
      "--alignment-from-assumptions",
      "--mergereturn",
      "--pgo-memop-opt",
      "--slsr",
      "--flattencfg",
      "--inject-tli-mappings",
      "--simple-loop-unswitch",
      "--loop-unswitch",
      "--libcalls-shrinkwrap",
      "--loop-unroll",
      "--globalopt",
      "--canonicalize-aliases",
      "--aggressive-instcombine",
      "--loop-predication",
      "--loop-sink",
      "--strip",
      "--globaldce",
      "--loop-load-elim"
    ],
    "performance_vs_Oz": "+4.0%"
  }
}
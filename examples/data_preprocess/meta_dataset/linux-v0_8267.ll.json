{
  "program_id": "linux-v0_8267.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 35,
    "onePredOneSuc": 27,
    "onePredTwoSuc": 7,
    "oneSuccessor": 35,
    "twoPred": 19,
    "twoPredOneSuc": 5,
    "twoEach": 12,
    "twoSuccessor": 19,
    "morePreds": 0,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 59,
    "BeginPhi": 1,
    "BranchCount": 54,
    "returnInt": 23,
    "CriticalCount": 13,
    "NumEdges": 73,
    "const32Bit": 155,
    "const64Bit": 16,
    "numConstZeroes": 42,
    "numConstOnes": 63,
    "UncondBranches": 35,
    "binaryConstArg": 32,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 50,
    "NumAndInst": 20,
    "BlockMid": 9,
    "BlockLow": 51,
    "NumBitCastInst": 8,
    "NumBrInst": 54,
    "NumCallInst": 27,
    "NumGetElementPtrInst": 28,
    "NumICmpInst": 21,
    "NumLShrInst": 0,
    "NumLoadInst": 147,
    "NumMulInst": 2,
    "NumOrInst": 14,
    "NumPHIInst": 1,
    "NumRetInst": 6,
    "NumSExtInst": 1,
    "NumSelectInst": 1,
    "NumShlInst": 9,
    "NumStoreInst": 53,
    "NumSubInst": 4,
    "NumTruncInst": 23,
    "NumXorInst": 7,
    "NumZExtInst": 61,
    "TotalBlocks": 60,
    "TotalInsts": 538,
    "TotalMemInst": 305,
    "TotalFuncs": 19,
    "ArgsPhi": 2,
    "testUnary": 290
  },
  "baseline_oz_instcount": 538,
  "knowledge_base_entry": [
    "--instcombine",
    "--licm",
    "--lower-expect",
    "--elim-avail-extern",
    "--aggressive-instcombine",
    "--reassociate",
    "--gvn-hoist",
    "--gvn",
    "--loop-simplifycfg",
    "--dse",
    "--aggressive-instcombine",
    "--early-cse",
    "-loop-reduce",
    "--reassociate",
    "--instsimplify",
    "--loop-reroll",
    "--memcpyopt",
    "--early-cse-memssa",
    "--loop-rotate",
    "--inline",
    "--loop-instsimplify",
    "--elim-avail-extern",
    "--lower-constant-intrinsics",
    "--ipsccp",
    "--die",
    "--simplifycfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-guard-widening",
          "--sccp",
          "--argpromotion",
          "--loop-versioning-licm",
          "--constmerge",
          "--newgvn",
          "--alignment-from-assumptions",
          "--jump-threading",
          "--flattencfg",
          "--float2int",
          "--scalarizer",
          "--aggressive-instcombine",
          "--loop-instsimplify",
          "-loop-reduce",
          "--lcssa",
          "--slsr",
          "--callsite-splitting",
          "--early-cse",
          "--loop-distribute",
          "--dse"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.0%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-guard-widening",
      "--sccp",
      "--argpromotion",
      "--loop-versioning-licm",
      "--constmerge",
      "--newgvn",
      "--alignment-from-assumptions",
      "--jump-threading",
      "--flattencfg",
      "--float2int",
      "--scalarizer",
      "--aggressive-instcombine",
      "--loop-instsimplify",
      "-loop-reduce",
      "--lcssa",
      "--slsr",
      "--callsite-splitting",
      "--early-cse",
      "--loop-distribute",
      "--dse"
    ],
    "performance_vs_Oz": "+3.0%"
  }
}
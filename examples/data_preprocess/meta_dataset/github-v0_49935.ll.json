{
  "program_id": "github-v0_49935.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 0,
    "onePredOneSuc": 0,
    "onePredTwoSuc": 0,
    "oneSuccessor": 0,
    "twoPred": 0,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 0,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 2,
    "BeginPhi": 0,
    "BranchCount": 0,
    "returnInt": 8,
    "CriticalCount": 0,
    "NumEdges": 0,
    "const32Bit": 8,
    "const64Bit": 6,
    "numConstZeroes": 2,
    "numConstOnes": 4,
    "UncondBranches": 0,
    "binaryConstArg": 0,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 0,
    "NumAndInst": 0,
    "BlockMid": 2,
    "BlockLow": 0,
    "NumBitCastInst": 0,
    "NumBrInst": 0,
    "NumCallInst": 8,
    "NumGetElementPtrInst": 6,
    "NumICmpInst": 0,
    "NumLShrInst": 0,
    "NumLoadInst": 0,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 2,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 8,
    "NumSubInst": 0,
    "NumTruncInst": 8,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 2,
    "TotalInsts": 32,
    "TotalMemInst": 22,
    "TotalFuncs": 3,
    "ArgsPhi": 0,
    "testUnary": 8
  },
  "baseline_oz_instcount": 32,
  "knowledge_base_entry": [
    "--gvn",
    "--loop-rotate",
    "--dse",
    "--early-cse-memssa",
    "--loop-simplifycfg",
    "--dce",
    "--aggressive-instcombine",
    "--mergefunc",
    "--mergefunc",
    "--early-cse",
    "--mem2reg",
    "--loop-simplifycfg",
    "--elim-avail-extern",
    "--jump-threading",
    "--slp-vectorizer",
    "--mem2reg",
    "--dce",
    "--aggressive-instcombine",
    "--mergefunc",
    "--inline",
    "--mergefunc",
    "--mergefunc",
    "--gvn-hoist",
    "--loop-reroll"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--jump-threading",
          "--loop-unswitch",
          "--memcpyopt",
          "--sancov",
          "--cross-dso-cfi",
          "--instnamer",
          "--deadargelim",
          "--consthoist",
          "--loop-distribute",
          "--sccp",
          "--hotcoldsplit",
          "--correlated-propagation",
          "--insert-gcov-profiling",
          "--mergefunc",
          "--inline",
          "--called-value-propagation",
          "--post-inline-ee-instrument",
          "--load-store-vectorizer",
          "--elim-avail-extern",
          "--rewrite-statepoints-for-gc",
          "--loop-vectorize",
          "--loop-unroll-and-jam",
          "--mldst-motion",
          "--lower-constant-intrinsics",
          "--loop-versioning-licm",
          "--strip-dead-prototypes",
          "--loop-simplifycfg"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+43.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--jump-threading",
      "--loop-unswitch",
      "--memcpyopt",
      "--sancov",
      "--cross-dso-cfi",
      "--instnamer",
      "--deadargelim",
      "--consthoist",
      "--loop-distribute",
      "--sccp",
      "--hotcoldsplit",
      "--correlated-propagation",
      "--insert-gcov-profiling",
      "--mergefunc",
      "--inline",
      "--called-value-propagation",
      "--post-inline-ee-instrument",
      "--load-store-vectorizer",
      "--elim-avail-extern",
      "--rewrite-statepoints-for-gc",
      "--loop-vectorize",
      "--loop-unroll-and-jam",
      "--mldst-motion",
      "--lower-constant-intrinsics",
      "--loop-versioning-licm",
      "--strip-dead-prototypes",
      "--loop-simplifycfg"
    ],
    "performance_vs_Oz": "+43.8%"
  }
}
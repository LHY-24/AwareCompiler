{
  "program_id": "linux-v0_9271.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 109,
    "onePredOneSuc": 79,
    "onePredTwoSuc": 30,
    "oneSuccessor": 96,
    "twoPred": 24,
    "twoPredOneSuc": 12,
    "twoEach": 9,
    "twoSuccessor": 45,
    "morePreds": 8,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 155,
    "BeginPhi": 0,
    "BranchCount": 141,
    "returnInt": 31,
    "CriticalCount": 19,
    "NumEdges": 186,
    "const32Bit": 351,
    "const64Bit": 23,
    "numConstZeroes": 163,
    "numConstOnes": 79,
    "UncondBranches": 96,
    "binaryConstArg": 30,
    "NumAShrInst": 3,
    "NumAddInst": 1,
    "NumAllocaInst": 61,
    "NumAndInst": 15,
    "BlockMid": 14,
    "BlockLow": 141,
    "NumBitCastInst": 9,
    "NumBrInst": 141,
    "NumCallInst": 60,
    "NumGetElementPtrInst": 103,
    "NumICmpInst": 45,
    "NumLShrInst": 3,
    "NumLoadInst": 248,
    "NumMulInst": 5,
    "NumOrInst": 7,
    "NumPHIInst": 0,
    "NumRetInst": 14,
    "NumSExtInst": 10,
    "NumSelectInst": 0,
    "NumShlInst": 4,
    "NumStoreInst": 121,
    "NumSubInst": 4,
    "NumTruncInst": 5,
    "NumXorInst": 0,
    "NumZExtInst": 5,
    "TotalBlocks": 155,
    "TotalInsts": 864,
    "TotalMemInst": 593,
    "TotalFuncs": 31,
    "ArgsPhi": 0,
    "testUnary": 338
  },
  "baseline_oz_instcount": 864,
  "knowledge_base_entry": [
    "--simplifycfg",
    "--mldst-motion",
    "--dse",
    "--sroa",
    "--aggressive-instcombine",
    "--lower-constant-intrinsics",
    "--sccp",
    "--loop-simplifycfg",
    "--mem2reg",
    "--newgvn",
    "--loop-reroll",
    "--loop-fusion",
    "--jump-threading",
    "--loop-rotate",
    "--aggressive-instcombine",
    "--lower-constant-intrinsics",
    "--slp-vectorizer",
    "--licm",
    "--jump-threading",
    "--lower-expect"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--prune-eh",
          "--mergefunc",
          "--reassociate",
          "--loop-simplify",
          "--ipconstprop",
          "--jump-threading",
          "--bdce",
          "--mergereturn",
          "--newgvn",
          "--barrier",
          "--rpo-functionattrs",
          "--add-discriminators",
          "--insert-gcov-profiling",
          "--name-anon-globals",
          "--loop-vectorize",
          "--scalarizer",
          "--strip-nondebug",
          "--mem2reg",
          "--die",
          "--lowerinvoke",
          "--coro-elide",
          "--aggressive-instcombine",
          "-loop-reduce",
          "--strip-dead-prototypes",
          "--sccp"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--prune-eh",
      "--mergefunc",
      "--reassociate",
      "--loop-simplify",
      "--ipconstprop",
      "--jump-threading",
      "--bdce",
      "--mergereturn",
      "--newgvn",
      "--barrier",
      "--rpo-functionattrs",
      "--add-discriminators",
      "--insert-gcov-profiling",
      "--name-anon-globals",
      "--loop-vectorize",
      "--scalarizer",
      "--strip-nondebug",
      "--mem2reg",
      "--die",
      "--lowerinvoke",
      "--coro-elide",
      "--aggressive-instcombine",
      "-loop-reduce",
      "--strip-dead-prototypes",
      "--sccp"
    ],
    "performance_vs_Oz": "+0.5%"
  }
}
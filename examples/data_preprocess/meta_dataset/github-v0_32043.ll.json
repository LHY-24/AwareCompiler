{
  "program_id": "github-v0_32043.ll",
  "autophase_features": {
    "BBNumArgsHi": 3,
    "BBNumArgsLo": 4,
    "onePred": 16,
    "onePredOneSuc": 6,
    "onePredTwoSuc": 10,
    "oneSuccessor": 6,
    "twoPred": 3,
    "twoPredOneSuc": 0,
    "twoEach": 2,
    "twoSuccessor": 17,
    "morePreds": 4,
    "BB03Phi": 6,
    "BBHiPhi": 1,
    "BBNoPhi": 19,
    "BeginPhi": 7,
    "BranchCount": 23,
    "returnInt": 0,
    "CriticalCount": 18,
    "NumEdges": 40,
    "const32Bit": 27,
    "const64Bit": 5,
    "numConstZeroes": 13,
    "numConstOnes": 12,
    "UncondBranches": 6,
    "binaryConstArg": 15,
    "NumAShrInst": 0,
    "NumAddInst": 9,
    "NumAllocaInst": 0,
    "NumAndInst": 4,
    "BlockMid": 2,
    "BlockLow": 24,
    "NumBitCastInst": 0,
    "NumBrInst": 23,
    "NumCallInst": 30,
    "NumGetElementPtrInst": 15,
    "NumICmpInst": 2,
    "NumLShrInst": 0,
    "NumLoadInst": 18,
    "NumMulInst": 2,
    "NumOrInst": 8,
    "NumPHIInst": 14,
    "NumRetInst": 3,
    "NumSExtInst": 12,
    "NumSelectInst": 1,
    "NumShlInst": 0,
    "NumStoreInst": 4,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 1,
    "TotalBlocks": 26,
    "TotalInsts": 230,
    "TotalMemInst": 67,
    "TotalFuncs": 7,
    "ArgsPhi": 44,
    "testUnary": 31
  },
  "baseline_oz_instcount": 230,
  "knowledge_base_entry": [
    "--strip-nondebug",
    "--mergefunc",
    "--instcombine",
    "--early-cse-memssa",
    "--loop-rotate",
    "--instcombine",
    "--simplifycfg",
    "--dce",
    "--lower-expect",
    "--nary-reassociate",
    "--load-store-vectorizer",
    "--nary-reassociate",
    "--gvn-hoist"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-interchange",
          "--lower-expect",
          "--globaldce",
          "--canonicalize-aliases",
          "--bdce",
          "--loop-fusion",
          "--mergereturn",
          "--callsite-splitting",
          "--instsimplify",
          "--indvars",
          "--sroa",
          "--dce",
          "--inferattrs",
          "--lower-constant-intrinsics",
          "--insert-gcov-profiling",
          "--nary-reassociate",
          "--functionattrs",
          "--rpo-functionattrs",
          "--ee-instrument",
          "--coro-elide",
          "--constmerge",
          "--dse",
          "--loop-deletion",
          "--loop-versioning",
          "--instnamer",
          "--sink",
          "--gvn",
          "--early-cse-memssa",
          "--constprop",
          "--lowerinvoke"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+6.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-interchange",
      "--lower-expect",
      "--globaldce",
      "--canonicalize-aliases",
      "--bdce",
      "--loop-fusion",
      "--mergereturn",
      "--callsite-splitting",
      "--instsimplify",
      "--indvars",
      "--sroa",
      "--dce",
      "--inferattrs",
      "--lower-constant-intrinsics",
      "--insert-gcov-profiling",
      "--nary-reassociate",
      "--functionattrs",
      "--rpo-functionattrs",
      "--ee-instrument",
      "--coro-elide",
      "--constmerge",
      "--dse",
      "--loop-deletion",
      "--loop-versioning",
      "--instnamer",
      "--sink",
      "--gvn",
      "--early-cse-memssa",
      "--constprop",
      "--lowerinvoke"
    ],
    "performance_vs_Oz": "+6.5%"
  }
}
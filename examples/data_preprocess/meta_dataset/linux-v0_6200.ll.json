{
  "program_id": "linux-v0_6200.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 41,
    "onePredOneSuc": 27,
    "onePredTwoSuc": 12,
    "oneSuccessor": 38,
    "twoPred": 17,
    "twoPredOneSuc": 8,
    "twoEach": 4,
    "twoSuccessor": 23,
    "morePreds": 3,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 81,
    "BeginPhi": 0,
    "BranchCount": 61,
    "returnInt": 13,
    "CriticalCount": 9,
    "NumEdges": 84,
    "const32Bit": 191,
    "const64Bit": 14,
    "numConstZeroes": 77,
    "numConstOnes": 96,
    "UncondBranches": 38,
    "binaryConstArg": 2,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 73,
    "NumAndInst": 0,
    "BlockMid": 12,
    "BlockLow": 69,
    "NumBitCastInst": 13,
    "NumBrInst": 61,
    "NumCallInst": 52,
    "NumGetElementPtrInst": 54,
    "NumICmpInst": 18,
    "NumLShrInst": 0,
    "NumLoadInst": 156,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 20,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 89,
    "NumSubInst": 1,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 2,
    "TotalBlocks": 81,
    "TotalInsts": 546,
    "TotalMemInst": 424,
    "TotalFuncs": 41,
    "ArgsPhi": 0,
    "testUnary": 250
  },
  "baseline_oz_instcount": 548,
  "knowledge_base_entry": [
    "--float2int",
    "--newgvn",
    "--mldst-motion",
    "--instsimplify",
    "--mem2reg",
    "--ipsccp",
    "--gvn-hoist",
    "--aggressive-instcombine",
    "--globaldce",
    "--ipsccp",
    "--correlated-propagation"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--bdce",
          "--globalopt",
          "--argpromotion",
          "--lcssa",
          "--early-cse",
          "--add-discriminators",
          "--aggressive-instcombine",
          "--loop-unroll-and-jam",
          "--loweratomic",
          "--sink",
          "--lower-constant-intrinsics"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--bdce",
      "--globalopt",
      "--argpromotion",
      "--lcssa",
      "--early-cse",
      "--add-discriminators",
      "--aggressive-instcombine",
      "--loop-unroll-and-jam",
      "--loweratomic",
      "--sink",
      "--lower-constant-intrinsics"
    ],
    "performance_vs_Oz": "+0.4%"
  }
}
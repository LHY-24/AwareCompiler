{
  "program_id": "linux-v0_12184.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 42,
    "onePredOneSuc": 34,
    "onePredTwoSuc": 6,
    "oneSuccessor": 40,
    "twoPred": 13,
    "twoPredOneSuc": 3,
    "twoEach": 7,
    "twoSuccessor": 17,
    "morePreds": 3,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 66,
    "BeginPhi": 1,
    "BranchCount": 57,
    "returnInt": 2,
    "CriticalCount": 14,
    "NumEdges": 78,
    "const32Bit": 208,
    "const64Bit": 10,
    "numConstZeroes": 102,
    "numConstOnes": 69,
    "UncondBranches": 40,
    "binaryConstArg": 20,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 44,
    "NumAndInst": 2,
    "BlockMid": 9,
    "BlockLow": 58,
    "NumBitCastInst": 18,
    "NumBrInst": 57,
    "NumCallInst": 27,
    "NumGetElementPtrInst": 71,
    "NumICmpInst": 19,
    "NumLShrInst": 1,
    "NumLoadInst": 140,
    "NumMulInst": 1,
    "NumOrInst": 6,
    "NumPHIInst": 1,
    "NumRetInst": 9,
    "NumSExtInst": 6,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 56,
    "NumSubInst": 0,
    "NumTruncInst": 3,
    "NumXorInst": 9,
    "NumZExtInst": 5,
    "TotalBlocks": 67,
    "TotalInsts": 477,
    "TotalMemInst": 338,
    "TotalFuncs": 17,
    "ArgsPhi": 2,
    "testUnary": 216
  },
  "baseline_oz_instcount": 480,
  "knowledge_base_entry": [
    "--globalopt",
    "--elim-avail-extern",
    "--sroa",
    "--adce",
    "--jump-threading",
    "--lower-constant-intrinsics",
    "--aggressive-instcombine",
    "--gvn",
    "--die"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-data-prefetch",
          "--loop-rotate",
          "--div-rem-pairs",
          "--speculative-execution",
          "--globalopt",
          "--constprop",
          "--inline",
          "--load-store-vectorizer",
          "--aggressive-instcombine",
          "--gvn",
          "--loop-vectorize",
          "--add-discriminators",
          "--jump-threading"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-data-prefetch",
      "--loop-rotate",
      "--div-rem-pairs",
      "--speculative-execution",
      "--globalopt",
      "--constprop",
      "--inline",
      "--load-store-vectorizer",
      "--aggressive-instcombine",
      "--gvn",
      "--loop-vectorize",
      "--add-discriminators",
      "--jump-threading"
    ],
    "performance_vs_Oz": "+0.8%"
  }
}
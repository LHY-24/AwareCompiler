{
  "program_id": "poj104-v1_47_3012.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 8,
    "onePredOneSuc": 6,
    "onePredTwoSuc": 1,
    "oneSuccessor": 8,
    "twoPred": 3,
    "twoPredOneSuc": 1,
    "twoEach": 2,
    "twoSuccessor": 3,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 15,
    "BeginPhi": 0,
    "BranchCount": 11,
    "returnInt": 1,
    "CriticalCount": 0,
    "NumEdges": 14,
    "const32Bit": 13,
    "const64Bit": 11,
    "numConstZeroes": 5,
    "numConstOnes": 13,
    "UncondBranches": 8,
    "binaryConstArg": 3,
    "NumAShrInst": 0,
    "NumAddInst": 3,
    "NumAllocaInst": 6,
    "NumAndInst": 0,
    "BlockMid": 0,
    "BlockLow": 15,
    "NumBitCastInst": 6,
    "NumBrInst": 11,
    "NumCallInst": 15,
    "NumGetElementPtrInst": 3,
    "NumICmpInst": 3,
    "NumLShrInst": 0,
    "NumLoadInst": 14,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 4,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 7,
    "NumSubInst": 1,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 15,
    "TotalInsts": 75,
    "TotalMemInst": 45,
    "TotalFuncs": 12,
    "ArgsPhi": 0,
    "testUnary": 28
  },
  "baseline_oz_instcount": 49,
  "knowledge_base_entry": [
    "--sink",
    "--gvn-hoist",
    "--globalopt",
    "--licm",
    "--loop-instsimplify",
    "--nary-reassociate",
    "--load-store-vectorizer",
    "--elim-avail-extern",
    "--dse",
    "--inline",
    "--flattencfg",
    "--mem2reg",
    "--dce",
    "--gvn-hoist",
    "--adce",
    "--sccp",
    "--adce",
    "--early-cse",
    "--nary-reassociate",
    "--early-cse-memssa",
    "--lower-constant-intrinsics",
    "--elim-avail-extern",
    "--newgvn",
    "--instcombine",
    "--slp-vectorizer",
    "--jump-threading",
    "--dse",
    "--inline",
    "--flattencfg",
    "--mem2reg",
    "--dce",
    "--licm"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--gvn",
          "--loop-idiom",
          "--reg2mem",
          "--ipsccp",
          "--licm",
          "--nary-reassociate",
          "--mergefunc",
          "--flattencfg",
          "--loop-fusion",
          "--break-crit-edges",
          "--tailcallelim",
          "--loop-unroll-and-jam",
          "--inferattrs",
          "--early-cse",
          "--mem2reg",
          "--indvars",
          "--elim-avail-extern",
          "--jump-threading",
          "--separate-const-offset-from-gep",
          "--loop-versioning-licm"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+4.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--gvn",
      "--loop-idiom",
      "--reg2mem",
      "--ipsccp",
      "--licm",
      "--nary-reassociate",
      "--mergefunc",
      "--flattencfg",
      "--loop-fusion",
      "--break-crit-edges",
      "--tailcallelim",
      "--loop-unroll-and-jam",
      "--inferattrs",
      "--early-cse",
      "--mem2reg",
      "--indvars",
      "--elim-avail-extern",
      "--jump-threading",
      "--separate-const-offset-from-gep",
      "--loop-versioning-licm"
    ],
    "performance_vs_Oz": "+4.1%"
  }
}
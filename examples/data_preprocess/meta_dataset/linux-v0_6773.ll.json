{
  "program_id": "linux-v0_6773.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 69,
    "onePredOneSuc": 50,
    "onePredTwoSuc": 13,
    "oneSuccessor": 69,
    "twoPred": 29,
    "twoPredOneSuc": 12,
    "twoEach": 8,
    "twoSuccessor": 31,
    "morePreds": 4,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 129,
    "BeginPhi": 1,
    "BranchCount": 100,
    "returnInt": 13,
    "CriticalCount": 27,
    "NumEdges": 142,
    "const32Bit": 446,
    "const64Bit": 25,
    "numConstZeroes": 236,
    "numConstOnes": 129,
    "UncondBranches": 69,
    "binaryConstArg": 19,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 87,
    "NumAndInst": 4,
    "BlockMid": 18,
    "BlockLow": 112,
    "NumBitCastInst": 42,
    "NumBrInst": 100,
    "NumCallInst": 86,
    "NumGetElementPtrInst": 155,
    "NumICmpInst": 38,
    "NumLShrInst": 0,
    "NumLoadInst": 228,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 1,
    "NumRetInst": 28,
    "NumSExtInst": 10,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 139,
    "NumSubInst": 1,
    "NumTruncInst": 7,
    "NumXorInst": 12,
    "NumZExtInst": 14,
    "TotalBlocks": 130,
    "TotalInsts": 963,
    "TotalMemInst": 695,
    "TotalFuncs": 49,
    "ArgsPhi": 2,
    "testUnary": 395
  },
  "baseline_oz_instcount": 963,
  "knowledge_base_entry": [
    "--hotcoldsplit",
    "--mergefunc",
    "--elim-avail-extern",
    "--gvn-hoist",
    "--loop-deletion",
    "--gvn",
    "--mergefunc",
    "--aggressive-instcombine",
    "--newgvn",
    "--early-cse",
    "-loop-reduce",
    "--early-cse-memssa",
    "--loop-simplifycfg",
    "--globalopt",
    "--lower-constant-intrinsics",
    "--prune-eh",
    "--jump-threading",
    "--memcpyopt",
    "--sroa",
    "--mldst-motion",
    "--load-store-vectorizer"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--aggressive-instcombine",
          "--sccp",
          "--flattencfg",
          "--inject-tli-mappings",
          "--functionattrs",
          "--loop-distribute",
          "--mergefunc",
          "--forceattrs",
          "--insert-gcov-profiling",
          "--coro-split",
          "--dse",
          "--partially-inline-libcalls",
          "--strip",
          "--cross-dso-cfi",
          "--consthoist",
          "--strip-debug-declare"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--aggressive-instcombine",
      "--sccp",
      "--flattencfg",
      "--inject-tli-mappings",
      "--functionattrs",
      "--loop-distribute",
      "--mergefunc",
      "--forceattrs",
      "--insert-gcov-profiling",
      "--coro-split",
      "--dse",
      "--partially-inline-libcalls",
      "--strip",
      "--cross-dso-cfi",
      "--consthoist",
      "--strip-debug-declare"
    ],
    "performance_vs_Oz": "+0.3%"
  }
}
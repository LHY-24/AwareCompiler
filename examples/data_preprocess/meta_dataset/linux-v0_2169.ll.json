{
  "program_id": "linux-v0_2169.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 76,
    "onePredOneSuc": 52,
    "onePredTwoSuc": 23,
    "oneSuccessor": 63,
    "twoPred": 13,
    "twoPredOneSuc": 9,
    "twoEach": 2,
    "twoSuccessor": 29,
    "morePreds": 4,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 110,
    "BeginPhi": 0,
    "BranchCount": 92,
    "returnInt": 11,
    "CriticalCount": 7,
    "NumEdges": 126,
    "const32Bit": 237,
    "const64Bit": 31,
    "numConstZeroes": 113,
    "numConstOnes": 80,
    "UncondBranches": 63,
    "binaryConstArg": 39,
    "NumAShrInst": 0,
    "NumAddInst": 21,
    "NumAllocaInst": 43,
    "NumAndInst": 4,
    "BlockMid": 11,
    "BlockLow": 99,
    "NumBitCastInst": 12,
    "NumBrInst": 92,
    "NumCallInst": 40,
    "NumGetElementPtrInst": 85,
    "NumICmpInst": 30,
    "NumLShrInst": 4,
    "NumLoadInst": 182,
    "NumMulInst": 6,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 17,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 94,
    "NumSubInst": 2,
    "NumTruncInst": 10,
    "NumXorInst": 5,
    "NumZExtInst": 35,
    "TotalBlocks": 110,
    "TotalInsts": 695,
    "TotalMemInst": 444,
    "TotalFuncs": 29,
    "ArgsPhi": 0,
    "testUnary": 291
  },
  "baseline_oz_instcount": 695,
  "knowledge_base_entry": [
    "--simple-loop-unswitch",
    "--early-cse-memssa",
    "--aggressive-instcombine",
    "--bdce",
    "--gvn-hoist",
    "--sroa",
    "--mldst-motion",
    "--load-store-vectorizer"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-distribute",
          "--cross-dso-cfi",
          "--aggressive-instcombine",
          "--instcombine",
          "--lcssa",
          "--forceattrs",
          "--consthoist",
          "--infer-address-spaces",
          "--simplifycfg",
          "--memcpyopt",
          "--loop-fusion"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.0%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-distribute",
      "--cross-dso-cfi",
      "--aggressive-instcombine",
      "--instcombine",
      "--lcssa",
      "--forceattrs",
      "--consthoist",
      "--infer-address-spaces",
      "--simplifycfg",
      "--memcpyopt",
      "--loop-fusion"
    ],
    "performance_vs_Oz": "+1.0%"
  }
}
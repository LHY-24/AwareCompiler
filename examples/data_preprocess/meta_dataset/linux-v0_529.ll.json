{
  "program_id": "linux-v0_529.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 35,
    "onePredOneSuc": 29,
    "onePredTwoSuc": 6,
    "oneSuccessor": 36,
    "twoPred": 20,
    "twoPredOneSuc": 7,
    "twoEach": 2,
    "twoSuccessor": 18,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 78,
    "BeginPhi": 0,
    "BranchCount": 54,
    "returnInt": 23,
    "CriticalCount": 12,
    "NumEdges": 83,
    "const32Bit": 317,
    "const64Bit": 4,
    "numConstZeroes": 138,
    "numConstOnes": 83,
    "UncondBranches": 36,
    "binaryConstArg": 9,
    "NumAShrInst": 0,
    "NumAddInst": 6,
    "NumAllocaInst": 69,
    "NumAndInst": 0,
    "BlockMid": 13,
    "BlockLow": 65,
    "NumBitCastInst": 25,
    "NumBrInst": 54,
    "NumCallInst": 52,
    "NumGetElementPtrInst": 102,
    "NumICmpInst": 15,
    "NumLShrInst": 0,
    "NumLoadInst": 203,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 21,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 95,
    "NumSubInst": 1,
    "NumTruncInst": 2,
    "NumXorInst": 2,
    "NumZExtInst": 2,
    "TotalBlocks": 78,
    "TotalInsts": 654,
    "TotalMemInst": 521,
    "TotalFuncs": 43,
    "ArgsPhi": 0,
    "testUnary": 303
  },
  "baseline_oz_instcount": 654,
  "knowledge_base_entry": [
    "-loop-reduce",
    "--instcombine",
    "--mem2reg",
    "--die",
    "--early-cse-memssa",
    "--memcpyopt",
    "--load-store-vectorizer",
    "--mergefunc",
    "--ipsccp",
    "--flattencfg",
    "--elim-avail-extern",
    "--lower-expect",
    "--adce",
    "--lower-constant-intrinsics",
    "--sccp",
    "--mem2reg",
    "--load-store-vectorizer",
    "--licm",
    "--memcpyopt",
    "--loop-simplifycfg",
    "--instcombine",
    "--mldst-motion",
    "--newgvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--inline",
          "--adce",
          "--early-cse-memssa",
          "--loop-unroll-and-jam",
          "--canonicalize-aliases",
          "--coro-cleanup",
          "--mergefunc",
          "--loop-idiom",
          "--memcpyopt",
          "--rewrite-statepoints-for-gc",
          "--attributor",
          "--rpo-functionattrs",
          "--gvn-hoist",
          "--inferattrs",
          "--slsr",
          "--globalopt",
          "--loop-versioning",
          "--alignment-from-assumptions"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+12.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--inline",
      "--adce",
      "--early-cse-memssa",
      "--loop-unroll-and-jam",
      "--canonicalize-aliases",
      "--coro-cleanup",
      "--mergefunc",
      "--loop-idiom",
      "--memcpyopt",
      "--rewrite-statepoints-for-gc",
      "--attributor",
      "--rpo-functionattrs",
      "--gvn-hoist",
      "--inferattrs",
      "--slsr",
      "--globalopt",
      "--loop-versioning",
      "--alignment-from-assumptions"
    ],
    "performance_vs_Oz": "+12.1%"
  }
}
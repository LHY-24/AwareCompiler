{
  "program_id": "linux-v0_1521.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 35,
    "onePredOneSuc": 27,
    "onePredTwoSuc": 6,
    "oneSuccessor": 30,
    "twoPred": 4,
    "twoPredOneSuc": 1,
    "twoEach": 1,
    "twoSuccessor": 11,
    "morePreds": 5,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 69,
    "BeginPhi": 0,
    "BranchCount": 40,
    "returnInt": 13,
    "CriticalCount": 1,
    "NumEdges": 65,
    "const32Bit": 246,
    "const64Bit": 20,
    "numConstZeroes": 118,
    "numConstOnes": 94,
    "UncondBranches": 30,
    "binaryConstArg": 12,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 71,
    "NumAndInst": 3,
    "BlockMid": 11,
    "BlockLow": 58,
    "NumBitCastInst": 31,
    "NumBrInst": 40,
    "NumCallInst": 47,
    "NumGetElementPtrInst": 76,
    "NumICmpInst": 11,
    "NumLShrInst": 2,
    "NumLoadInst": 179,
    "NumMulInst": 0,
    "NumOrInst": 2,
    "NumPHIInst": 0,
    "NumRetInst": 25,
    "NumSExtInst": 6,
    "NumSelectInst": 1,
    "NumShlInst": 1,
    "NumStoreInst": 113,
    "NumSubInst": 2,
    "NumTruncInst": 6,
    "NumXorInst": 2,
    "NumZExtInst": 9,
    "TotalBlocks": 69,
    "TotalInsts": 637,
    "TotalMemInst": 486,
    "TotalFuncs": 39,
    "ArgsPhi": 0,
    "testUnary": 306
  },
  "baseline_oz_instcount": 637,
  "knowledge_base_entry": [
    "--deadargelim",
    "--mergefunc",
    "--adce",
    "--ipsccp",
    "--lower-constant-intrinsics",
    "--instsimplify",
    "--simplifycfg",
    "--aggressive-instcombine",
    "--loweratomic",
    "--early-cse",
    "--gvn",
    "--loop-simplifycfg",
    "--jump-threading",
    "--mergefunc",
    "--licm",
    "--licm",
    "--loop-simplifycfg",
    "--nary-reassociate",
    "--instcombine",
    "--gvn",
    "--indvars",
    "--loop-fusion",
    "--jump-threading",
    "--loop-simplifycfg",
    "--loop-deletion",
    "--early-cse-memssa"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--gvn",
          "--loop-guard-widening",
          "--dse",
          "--loop-vectorize",
          "--loop-deletion",
          "--ipsccp",
          "--mergeicmps",
          "--strip-debug-declare",
          "--globalsplit",
          "--correlated-propagation",
          "--slp-vectorizer",
          "--separate-const-offset-from-gep",
          "--flattencfg"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--gvn",
      "--loop-guard-widening",
      "--dse",
      "--loop-vectorize",
      "--loop-deletion",
      "--ipsccp",
      "--mergeicmps",
      "--strip-debug-declare",
      "--globalsplit",
      "--correlated-propagation",
      "--slp-vectorizer",
      "--separate-const-offset-from-gep",
      "--flattencfg"
    ],
    "performance_vs_Oz": "+0.2%"
  }
}
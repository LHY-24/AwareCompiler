{
  "program_id": "github-v0_39215.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 4,
    "onePred": 78,
    "onePredOneSuc": 51,
    "onePredTwoSuc": 22,
    "oneSuccessor": 74,
    "twoPred": 36,
    "twoPredOneSuc": 18,
    "twoEach": 18,
    "twoSuccessor": 43,
    "morePreds": 3,
    "BB03Phi": 4,
    "BBHiPhi": 0,
    "BBNoPhi": 118,
    "BeginPhi": 4,
    "BranchCount": 117,
    "returnInt": 11,
    "CriticalCount": 19,
    "NumEdges": 160,
    "const32Bit": 211,
    "const64Bit": 81,
    "numConstZeroes": 123,
    "numConstOnes": 145,
    "UncondBranches": 74,
    "binaryConstArg": 95,
    "NumAShrInst": 2,
    "NumAddInst": 47,
    "NumAllocaInst": 56,
    "NumAndInst": 4,
    "BlockMid": 11,
    "BlockLow": 111,
    "NumBitCastInst": 0,
    "NumBrInst": 117,
    "NumCallInst": 12,
    "NumGetElementPtrInst": 64,
    "NumICmpInst": 45,
    "NumLShrInst": 2,
    "NumLoadInst": 260,
    "NumMulInst": 1,
    "NumOrInst": 23,
    "NumPHIInst": 4,
    "NumRetInst": 5,
    "NumSExtInst": 52,
    "NumSelectInst": 2,
    "NumShlInst": 16,
    "NumStoreInst": 123,
    "NumSubInst": 44,
    "NumTruncInst": 0,
    "NumXorInst": 2,
    "NumZExtInst": 2,
    "TotalBlocks": 122,
    "TotalInsts": 885,
    "TotalMemInst": 515,
    "TotalFuncs": 8,
    "ArgsPhi": 8,
    "testUnary": 370
  },
  "baseline_oz_instcount": 886,
  "knowledge_base_entry": [
    "--mldst-motion",
    "--sroa",
    "--die",
    "--sccp",
    "--instcombine",
    "--dse",
    "--correlated-propagation",
    "--mergefunc",
    "--dce",
    "--aggressive-instcombine",
    "--lower-expect",
    "--dse",
    "--mem2reg",
    "--flattencfg",
    "--gvn",
    "--correlated-propagation",
    "--globalopt",
    "--instsimplify",
    "--early-cse-memssa",
    "--aggressive-instcombine",
    "--inline",
    "--memcpyopt",
    "--lower-constant-intrinsics",
    "--dce",
    "--die"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--cross-dso-cfi",
          "--loop-vectorize",
          "--barrier",
          "--canonicalize-aliases",
          "--inject-tli-mappings",
          "--nary-reassociate",
          "--aggressive-instcombine",
          "--lcssa",
          "--newgvn",
          "--forceattrs"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--cross-dso-cfi",
      "--loop-vectorize",
      "--barrier",
      "--canonicalize-aliases",
      "--inject-tli-mappings",
      "--nary-reassociate",
      "--aggressive-instcombine",
      "--lcssa",
      "--newgvn",
      "--forceattrs"
    ],
    "performance_vs_Oz": "+0.1%"
  }
}
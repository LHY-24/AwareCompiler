{
  "program_id": "github-v0_12523.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 22,
    "onePredOneSuc": 19,
    "onePredTwoSuc": 2,
    "oneSuccessor": 25,
    "twoPred": 8,
    "twoPredOneSuc": 4,
    "twoEach": 4,
    "twoSuccessor": 7,
    "morePreds": 3,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 34,
    "BeginPhi": 0,
    "BranchCount": 32,
    "returnInt": 1,
    "CriticalCount": 6,
    "NumEdges": 52,
    "const32Bit": 51,
    "const64Bit": 11,
    "numConstZeroes": 16,
    "numConstOnes": 17,
    "UncondBranches": 25,
    "binaryConstArg": 11,
    "NumAShrInst": 0,
    "NumAddInst": 9,
    "NumAllocaInst": 12,
    "NumAndInst": 7,
    "BlockMid": 2,
    "BlockLow": 32,
    "NumBitCastInst": 0,
    "NumBrInst": 32,
    "NumCallInst": 3,
    "NumGetElementPtrInst": 8,
    "NumICmpInst": 7,
    "NumLShrInst": 0,
    "NumLoadInst": 36,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 1,
    "NumSExtInst": 14,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 29,
    "NumSubInst": 0,
    "NumTruncInst": 10,
    "NumXorInst": 0,
    "NumZExtInst": 2,
    "TotalBlocks": 34,
    "TotalInsts": 173,
    "TotalMemInst": 88,
    "TotalFuncs": 4,
    "ArgsPhi": 0,
    "testUnary": 74
  },
  "baseline_oz_instcount": 175,
  "knowledge_base_entry": [
    "--elim-avail-extern",
    "--bdce",
    "--correlated-propagation",
    "--mergefunc",
    "--sroa",
    "--flattencfg",
    "--aggressive-instcombine",
    "--adce",
    "--newgvn",
    "--dce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--partially-inline-libcalls",
          "--redundant-dbg-inst-elim",
          "--constmerge",
          "--indvars",
          "--loop-unroll-and-jam",
          "--post-inline-ee-instrument",
          "--strip-dead-prototypes",
          "--libcalls-shrinkwrap",
          "--loop-interchange",
          "--rpo-functionattrs",
          "--aggressive-instcombine",
          "--pgo-memop-opt",
          "--irce",
          "--sccp",
          "--instcombine",
          "--slp-vectorizer",
          "--lowerinvoke",
          "--gvn",
          "-loop-reduce"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+5.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--partially-inline-libcalls",
      "--redundant-dbg-inst-elim",
      "--constmerge",
      "--indvars",
      "--loop-unroll-and-jam",
      "--post-inline-ee-instrument",
      "--strip-dead-prototypes",
      "--libcalls-shrinkwrap",
      "--loop-interchange",
      "--rpo-functionattrs",
      "--aggressive-instcombine",
      "--pgo-memop-opt",
      "--irce",
      "--sccp",
      "--instcombine",
      "--slp-vectorizer",
      "--lowerinvoke",
      "--gvn",
      "-loop-reduce"
    ],
    "performance_vs_Oz": "+5.7%"
  }
}
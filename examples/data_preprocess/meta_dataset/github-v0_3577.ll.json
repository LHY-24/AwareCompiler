{
  "program_id": "github-v0_3577.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 2,
    "onePredOneSuc": 2,
    "onePredTwoSuc": 0,
    "oneSuccessor": 2,
    "twoPred": 1,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 1,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 4,
    "BeginPhi": 0,
    "BranchCount": 3,
    "returnInt": 1,
    "CriticalCount": 0,
    "NumEdges": 4,
    "const32Bit": 4,
    "const64Bit": 1,
    "numConstZeroes": 2,
    "numConstOnes": 3,
    "UncondBranches": 2,
    "binaryConstArg": 1,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 2,
    "NumAndInst": 0,
    "BlockMid": 0,
    "BlockLow": 4,
    "NumBitCastInst": 0,
    "NumBrInst": 3,
    "NumCallInst": 1,
    "NumGetElementPtrInst": 0,
    "NumICmpInst": 1,
    "NumLShrInst": 0,
    "NumLoadInst": 3,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 1,
    "NumSExtInst": 1,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 3,
    "NumSubInst": 1,
    "NumTruncInst": 1,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 4,
    "TotalInsts": 17,
    "TotalMemInst": 9,
    "TotalFuncs": 2,
    "ArgsPhi": 0,
    "testUnary": 7
  },
  "baseline_oz_instcount": 17,
  "knowledge_base_entry": [
    "--deadargelim",
    "--mergefunc",
    "--aggressive-instcombine",
    "--simplifycfg",
    "--gvn",
    "--mem2reg",
    "--dse",
    "--correlated-propagation",
    "--early-cse-memssa",
    "--mldst-motion",
    "--early-cse",
    "--nary-reassociate",
    "--sroa",
    "--loop-rotate",
    "--instcombine",
    "--memcpyopt",
    "--slp-vectorizer",
    "--indvars",
    "--load-store-vectorizer"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--sccp",
          "--die",
          "--load-store-vectorizer",
          "--loop-unroll",
          "--loop-unswitch",
          "--loop-simplifycfg",
          "--break-crit-edges",
          "--lower-matrix-intrinsics",
          "--gvn-hoist",
          "--globalopt",
          "--loop-fusion",
          "--mergefunc",
          "--aggressive-instcombine",
          "--loop-guard-widening",
          "--instcombine",
          "--simple-loop-unswitch",
          "--partially-inline-libcalls",
          "--inject-tli-mappings",
          "--strip-dead-prototypes",
          "--constprop"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+11.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--sccp",
      "--die",
      "--load-store-vectorizer",
      "--loop-unroll",
      "--loop-unswitch",
      "--loop-simplifycfg",
      "--break-crit-edges",
      "--lower-matrix-intrinsics",
      "--gvn-hoist",
      "--globalopt",
      "--loop-fusion",
      "--mergefunc",
      "--aggressive-instcombine",
      "--loop-guard-widening",
      "--instcombine",
      "--simple-loop-unswitch",
      "--partially-inline-libcalls",
      "--inject-tli-mappings",
      "--strip-dead-prototypes",
      "--constprop"
    ],
    "performance_vs_Oz": "+11.8%"
  }
}
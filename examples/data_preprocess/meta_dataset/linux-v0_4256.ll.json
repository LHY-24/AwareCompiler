{
  "program_id": "linux-v0_4256.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 22,
    "onePredOneSuc": 13,
    "onePredTwoSuc": 8,
    "oneSuccessor": 19,
    "twoPred": 8,
    "twoPredOneSuc": 5,
    "twoEach": 2,
    "twoSuccessor": 12,
    "morePreds": 1,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 43,
    "BeginPhi": 1,
    "BranchCount": 31,
    "returnInt": 11,
    "CriticalCount": 4,
    "NumEdges": 43,
    "const32Bit": 122,
    "const64Bit": 8,
    "numConstZeroes": 55,
    "numConstOnes": 51,
    "UncondBranches": 19,
    "binaryConstArg": 9,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 32,
    "NumAndInst": 1,
    "BlockMid": 6,
    "BlockLow": 38,
    "NumBitCastInst": 12,
    "NumBrInst": 31,
    "NumCallInst": 47,
    "NumGetElementPtrInst": 35,
    "NumICmpInst": 11,
    "NumLShrInst": 0,
    "NumLoadInst": 117,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 1,
    "NumRetInst": 13,
    "NumSExtInst": 1,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 51,
    "NumSubInst": 3,
    "NumTruncInst": 7,
    "NumXorInst": 3,
    "NumZExtInst": 10,
    "TotalBlocks": 44,
    "TotalInsts": 384,
    "TotalMemInst": 282,
    "TotalFuncs": 24,
    "ArgsPhi": 2,
    "testUnary": 183
  },
  "baseline_oz_instcount": 376,
  "knowledge_base_entry": [
    "--partially-inline-libcalls",
    "--gvn",
    "--simplifycfg",
    "--sccp",
    "--loop-deletion",
    "--sroa",
    "--aggressive-instcombine",
    "--ipsccp",
    "--adce",
    "--lower-expect",
    "--correlated-propagation",
    "--adce",
    "--instsimplify",
    "--load-store-vectorizer",
    "--mem2reg",
    "--slp-vectorizer",
    "--indvars",
    "--sroa",
    "--aggressive-instcombine",
    "--ipsccp",
    "--globalopt",
    "--lower-constant-intrinsics",
    "--mldst-motion",
    "--elim-avail-extern"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--jump-threading",
          "--libcalls-shrinkwrap",
          "--infer-address-spaces",
          "--irce",
          "--coro-early",
          "--newgvn",
          "--lowerswitch",
          "--aggressive-instcombine",
          "--mergeicmps",
          "--loop-guard-widening",
          "--canonicalize-aliases",
          "--loop-rotate",
          "--lower-guard-intrinsic",
          "--loop-interchange",
          "--guard-widening",
          "--partially-inline-libcalls",
          "--simple-loop-unswitch",
          "--ipsccp",
          "--rpo-functionattrs"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--jump-threading",
      "--libcalls-shrinkwrap",
      "--infer-address-spaces",
      "--irce",
      "--coro-early",
      "--newgvn",
      "--lowerswitch",
      "--aggressive-instcombine",
      "--mergeicmps",
      "--loop-guard-widening",
      "--canonicalize-aliases",
      "--loop-rotate",
      "--lower-guard-intrinsic",
      "--loop-interchange",
      "--guard-widening",
      "--partially-inline-libcalls",
      "--simple-loop-unswitch",
      "--ipsccp",
      "--rpo-functionattrs"
    ],
    "performance_vs_Oz": "+0.5%"
  }
}
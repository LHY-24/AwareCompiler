{
  "program_id": "linux-v0_11272.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 31,
    "onePredOneSuc": 23,
    "onePredTwoSuc": 8,
    "oneSuccessor": 28,
    "twoPred": 11,
    "twoPredOneSuc": 2,
    "twoEach": 5,
    "twoSuccessor": 15,
    "morePreds": 2,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 51,
    "BeginPhi": 1,
    "BranchCount": 43,
    "returnInt": 8,
    "CriticalCount": 9,
    "NumEdges": 61,
    "const32Bit": 191,
    "const64Bit": 15,
    "numConstZeroes": 85,
    "numConstOnes": 74,
    "UncondBranches": 28,
    "binaryConstArg": 27,
    "NumAShrInst": 0,
    "NumAddInst": 8,
    "NumAllocaInst": 43,
    "NumAndInst": 4,
    "BlockMid": 7,
    "BlockLow": 45,
    "NumBitCastInst": 3,
    "NumBrInst": 43,
    "NumCallInst": 30,
    "NumGetElementPtrInst": 64,
    "NumICmpInst": 18,
    "NumLShrInst": 1,
    "NumLoadInst": 130,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 1,
    "NumRetInst": 8,
    "NumSExtInst": 11,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 52,
    "NumSubInst": 1,
    "NumTruncInst": 2,
    "NumXorInst": 14,
    "NumZExtInst": 11,
    "TotalBlocks": 52,
    "TotalInsts": 453,
    "TotalMemInst": 319,
    "TotalFuncs": 22,
    "ArgsPhi": 2,
    "testUnary": 203
  },
  "baseline_oz_instcount": 454,
  "knowledge_base_entry": [
    "--sink",
    "--jump-threading",
    "--globalopt",
    "--instsimplify",
    "--gvn-hoist",
    "--lower-expect",
    "--mem2reg",
    "--aggressive-instcombine",
    "--dse",
    "--nary-reassociate",
    "--newgvn",
    "--loop-simplifycfg",
    "--dse",
    "--aggressive-instcombine",
    "--globaldce",
    "--mergefunc",
    "--correlated-propagation",
    "--die",
    "--simplifycfg",
    "--loop-deletion",
    "--newgvn",
    "--early-cse-memssa"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--tailcallelim",
          "--loop-unroll",
          "--simplifycfg",
          "--argpromotion",
          "--globaldce",
          "--functionattrs",
          "--ee-instrument",
          "--indvars",
          "--div-rem-pairs",
          "--load-store-vectorizer",
          "--redundant-dbg-inst-elim",
          "--sroa",
          "--globalopt",
          "--barrier",
          "--loop-versioning-licm",
          "--loop-sink",
          "--aggressive-instcombine",
          "--loop-simplifycfg",
          "--canonicalize-aliases",
          "--flattencfg",
          "--deadargelim",
          "--correlated-propagation",
          "--licm",
          "--loop-simplify",
          "--scalarizer",
          "--jump-threading"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--tailcallelim",
      "--loop-unroll",
      "--simplifycfg",
      "--argpromotion",
      "--globaldce",
      "--functionattrs",
      "--ee-instrument",
      "--indvars",
      "--div-rem-pairs",
      "--load-store-vectorizer",
      "--redundant-dbg-inst-elim",
      "--sroa",
      "--globalopt",
      "--barrier",
      "--loop-versioning-licm",
      "--loop-sink",
      "--aggressive-instcombine",
      "--loop-simplifycfg",
      "--canonicalize-aliases",
      "--flattencfg",
      "--deadargelim",
      "--correlated-propagation",
      "--licm",
      "--loop-simplify",
      "--scalarizer",
      "--jump-threading"
    ],
    "performance_vs_Oz": "+0.4%"
  }
}
{
  "program_id": "linux-v0_6943.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 48,
    "onePredOneSuc": 37,
    "onePredTwoSuc": 9,
    "oneSuccessor": 46,
    "twoPred": 11,
    "twoPredOneSuc": 7,
    "twoEach": 4,
    "twoSuccessor": 13,
    "morePreds": 10,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 87,
    "BeginPhi": 0,
    "BranchCount": 59,
    "returnInt": 31,
    "CriticalCount": 20,
    "NumEdges": 106,
    "const32Bit": 243,
    "const64Bit": 0,
    "numConstZeroes": 78,
    "numConstOnes": 93,
    "UncondBranches": 46,
    "binaryConstArg": 22,
    "NumAShrInst": 0,
    "NumAddInst": 3,
    "NumAllocaInst": 88,
    "NumAndInst": 9,
    "BlockMid": 16,
    "BlockLow": 71,
    "NumBitCastInst": 26,
    "NumBrInst": 59,
    "NumCallInst": 48,
    "NumGetElementPtrInst": 45,
    "NumICmpInst": 13,
    "NumLShrInst": 5,
    "NumLoadInst": 229,
    "NumMulInst": 0,
    "NumOrInst": 2,
    "NumPHIInst": 0,
    "NumRetInst": 18,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 120,
    "NumSubInst": 8,
    "NumTruncInst": 8,
    "NumXorInst": 4,
    "NumZExtInst": 15,
    "TotalBlocks": 87,
    "TotalInsts": 715,
    "TotalMemInst": 530,
    "TotalFuncs": 25,
    "ArgsPhi": 0,
    "testUnary": 369
  },
  "baseline_oz_instcount": 715,
  "knowledge_base_entry": [
    "--loop-versioning-licm",
    "--newgvn",
    "--newgvn",
    "--newgvn",
    "--memcpyopt",
    "--slp-vectorizer",
    "--mergefunc",
    "-loop-reduce",
    "--load-store-vectorizer",
    "--loop-reroll",
    "--nary-reassociate"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--lower-expect",
          "--libcalls-shrinkwrap",
          "--forceattrs",
          "--inject-tli-mappings",
          "--infer-address-spaces",
          "--loop-instsimplify",
          "--deadargelim",
          "--mergefunc",
          "--called-value-propagation",
          "--inferattrs",
          "--coro-elide",
          "--aggressive-instcombine",
          "--licm",
          "--rpo-functionattrs",
          "--ipconstprop",
          "--mldst-motion",
          "--mergeicmps",
          "--coro-split",
          "--consthoist",
          "-loop-reduce",
          "--irce",
          "--early-cse-memssa",
          "--memcpyopt",
          "--loop-versioning-licm",
          "--coro-cleanup"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--lower-expect",
      "--libcalls-shrinkwrap",
      "--forceattrs",
      "--inject-tli-mappings",
      "--infer-address-spaces",
      "--loop-instsimplify",
      "--deadargelim",
      "--mergefunc",
      "--called-value-propagation",
      "--inferattrs",
      "--coro-elide",
      "--aggressive-instcombine",
      "--licm",
      "--rpo-functionattrs",
      "--ipconstprop",
      "--mldst-motion",
      "--mergeicmps",
      "--coro-split",
      "--consthoist",
      "-loop-reduce",
      "--irce",
      "--early-cse-memssa",
      "--memcpyopt",
      "--loop-versioning-licm",
      "--coro-cleanup"
    ],
    "performance_vs_Oz": "+0.8%"
  }
}
{
  "program_id": "github-v0_17783.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 39,
    "onePredOneSuc": 32,
    "onePredTwoSuc": 4,
    "oneSuccessor": 42,
    "twoPred": 14,
    "twoPredOneSuc": 6,
    "twoEach": 4,
    "twoSuccessor": 11,
    "morePreds": 4,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 62,
    "BeginPhi": 0,
    "BranchCount": 52,
    "returnInt": 8,
    "CriticalCount": 7,
    "NumEdges": 85,
    "const32Bit": 390,
    "const64Bit": 99,
    "numConstZeroes": 327,
    "numConstOnes": 91,
    "UncondBranches": 42,
    "binaryConstArg": 13,
    "NumAShrInst": 1,
    "NumAddInst": 6,
    "NumAllocaInst": 26,
    "NumAndInst": 3,
    "BlockMid": 12,
    "BlockLow": 50,
    "NumBitCastInst": 2,
    "NumBrInst": 52,
    "NumCallInst": 32,
    "NumGetElementPtrInst": 218,
    "NumICmpInst": 10,
    "NumLShrInst": 0,
    "NumLoadInst": 153,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 5,
    "NumSExtInst": 25,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 92,
    "NumSubInst": 4,
    "NumTruncInst": 12,
    "NumXorInst": 0,
    "NumZExtInst": 9,
    "TotalBlocks": 62,
    "TotalInsts": 657,
    "TotalMemInst": 521,
    "TotalFuncs": 16,
    "ArgsPhi": 0,
    "testUnary": 227
  },
  "baseline_oz_instcount": 658,
  "knowledge_base_entry": [
    "--sroa",
    "--loop-deletion",
    "--sroa",
    "--instsimplify",
    "--prune-eh",
    "--aggressive-instcombine",
    "--flattencfg",
    "--licm",
    "--simplifycfg",
    "--lower-expect",
    "--instcombine"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-sink",
          "--correlated-propagation",
          "--licm",
          "--simple-loop-unswitch",
          "--rewrite-statepoints-for-gc",
          "--loop-unroll-and-jam",
          "--indvars",
          "--inject-tli-mappings",
          "--loop-load-elim",
          "--loop-simplifycfg",
          "--lower-guard-intrinsic",
          "--jump-threading",
          "--name-anon-globals",
          "-loop-reduce",
          "--coro-early",
          "--strip-debug-declare",
          "--aggressive-instcombine",
          "--loweratomic",
          "--instsimplify",
          "--inferattrs",
          "--strip",
          "--scalarizer",
          "--loop-interchange",
          "--loop-reroll",
          "--post-inline-ee-instrument",
          "--callsite-splitting",
          "--speculative-execution",
          "--ee-instrument"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-sink",
      "--correlated-propagation",
      "--licm",
      "--simple-loop-unswitch",
      "--rewrite-statepoints-for-gc",
      "--loop-unroll-and-jam",
      "--indvars",
      "--inject-tli-mappings",
      "--loop-load-elim",
      "--loop-simplifycfg",
      "--lower-guard-intrinsic",
      "--jump-threading",
      "--name-anon-globals",
      "-loop-reduce",
      "--coro-early",
      "--strip-debug-declare",
      "--aggressive-instcombine",
      "--loweratomic",
      "--instsimplify",
      "--inferattrs",
      "--strip",
      "--scalarizer",
      "--loop-interchange",
      "--loop-reroll",
      "--post-inline-ee-instrument",
      "--callsite-splitting",
      "--speculative-execution",
      "--ee-instrument"
    ],
    "performance_vs_Oz": "+2.4%"
  }
}
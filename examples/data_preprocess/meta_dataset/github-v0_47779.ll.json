{
  "program_id": "github-v0_47779.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 12,
    "onePredOneSuc": 8,
    "onePredTwoSuc": 4,
    "oneSuccessor": 11,
    "twoPred": 5,
    "twoPredOneSuc": 2,
    "twoEach": 1,
    "twoSuccessor": 7,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 21,
    "BeginPhi": 0,
    "BranchCount": 18,
    "returnInt": 5,
    "CriticalCount": 3,
    "NumEdges": 25,
    "const32Bit": 160,
    "const64Bit": 12,
    "numConstZeroes": 119,
    "numConstOnes": 43,
    "UncondBranches": 11,
    "binaryConstArg": 12,
    "NumAShrInst": 0,
    "NumAddInst": 6,
    "NumAllocaInst": 29,
    "NumAndInst": 0,
    "BlockMid": 7,
    "BlockLow": 14,
    "NumBitCastInst": 8,
    "NumBrInst": 18,
    "NumCallInst": 28,
    "NumGetElementPtrInst": 64,
    "NumICmpInst": 9,
    "NumLShrInst": 0,
    "NumLoadInst": 69,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 25,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 28,
    "NumSubInst": 0,
    "NumTruncInst": 2,
    "NumXorInst": 2,
    "NumZExtInst": 4,
    "TotalBlocks": 21,
    "TotalInsts": 299,
    "TotalMemInst": 218,
    "TotalFuncs": 14,
    "ArgsPhi": 0,
    "testUnary": 137
  },
  "baseline_oz_instcount": 278,
  "knowledge_base_entry": [
    "--sroa",
    "--loop-rotate",
    "--aggressive-instcombine",
    "--ipsccp",
    "--early-cse-memssa",
    "--ipsccp",
    "--elim-avail-extern",
    "--instsimplify",
    "--die",
    "--loop-simplifycfg",
    "--globalopt",
    "--aggressive-instcombine",
    "--mem2reg",
    "--nary-reassociate",
    "--indvars",
    "--loop-fusion",
    "--early-cse-memssa",
    "--lower-expect",
    "--bdce",
    "--aggressive-instcombine",
    "--die",
    "--licm",
    "--bdce",
    "--mergefunc",
    "--reassociate"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--separate-const-offset-from-gep",
          "--ipconstprop",
          "--guard-widening",
          "--mergereturn",
          "--slp-vectorizer",
          "--ipsccp",
          "--bdce",
          "--forceattrs",
          "--licm",
          "--lowerswitch",
          "--lower-constant-intrinsics",
          "--lower-widenable-condition",
          "--aggressive-instcombine",
          "--hotcoldsplit",
          "--coro-split",
          "--loop-simplify",
          "--loop-versioning-licm",
          "--post-inline-ee-instrument",
          "--strip-dead-prototypes",
          "--coro-elide",
          "--loweratomic",
          "--globalsplit",
          "--mem2reg",
          "--die",
          "--functionattrs",
          "--lower-guard-intrinsic",
          "--deadargelim",
          "--callsite-splitting",
          "--loop-instsimplify",
          "--name-anon-globals"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--separate-const-offset-from-gep",
      "--ipconstprop",
      "--guard-widening",
      "--mergereturn",
      "--slp-vectorizer",
      "--ipsccp",
      "--bdce",
      "--forceattrs",
      "--licm",
      "--lowerswitch",
      "--lower-constant-intrinsics",
      "--lower-widenable-condition",
      "--aggressive-instcombine",
      "--hotcoldsplit",
      "--coro-split",
      "--loop-simplify",
      "--loop-versioning-licm",
      "--post-inline-ee-instrument",
      "--strip-dead-prototypes",
      "--coro-elide",
      "--loweratomic",
      "--globalsplit",
      "--mem2reg",
      "--die",
      "--functionattrs",
      "--lower-guard-intrinsic",
      "--deadargelim",
      "--callsite-splitting",
      "--loop-instsimplify",
      "--name-anon-globals"
    ],
    "performance_vs_Oz": "+0.7%"
  }
}
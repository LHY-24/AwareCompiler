{
  "program_id": "linux-v0_80.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 4,
    "onePred": 74,
    "onePredOneSuc": 50,
    "onePredTwoSuc": 20,
    "oneSuccessor": 65,
    "twoPred": 16,
    "twoPredOneSuc": 10,
    "twoEach": 5,
    "twoSuccessor": 27,
    "morePreds": 5,
    "BB03Phi": 4,
    "BBHiPhi": 0,
    "BBNoPhi": 112,
    "BeginPhi": 4,
    "BranchCount": 92,
    "returnInt": 16,
    "CriticalCount": 12,
    "NumEdges": 135,
    "const32Bit": 407,
    "const64Bit": 30,
    "numConstZeroes": 164,
    "numConstOnes": 133,
    "UncondBranches": 65,
    "binaryConstArg": 38,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 91,
    "NumAndInst": 11,
    "BlockMid": 17,
    "BlockLow": 99,
    "NumBitCastInst": 36,
    "NumBrInst": 92,
    "NumCallInst": 78,
    "NumGetElementPtrInst": 118,
    "NumICmpInst": 33,
    "NumLShrInst": 5,
    "NumLoadInst": 308,
    "NumMulInst": 0,
    "NumOrInst": 9,
    "NumPHIInst": 4,
    "NumRetInst": 21,
    "NumSExtInst": 8,
    "NumSelectInst": 0,
    "NumShlInst": 3,
    "NumStoreInst": 140,
    "NumSubInst": 2,
    "NumTruncInst": 3,
    "NumXorInst": 10,
    "NumZExtInst": 9,
    "TotalBlocks": 116,
    "TotalInsts": 986,
    "TotalMemInst": 735,
    "TotalFuncs": 41,
    "ArgsPhi": 8,
    "testUnary": 456
  },
  "baseline_oz_instcount": 986,
  "knowledge_base_entry": [
    "--loop-deletion",
    "--elim-avail-extern",
    "--instsimplify",
    "--mergefunc",
    "--load-store-vectorizer",
    "--memcpyopt",
    "--early-cse-memssa",
    "--gvn",
    "--inline",
    "--dse",
    "--instcombine",
    "--simplifycfg",
    "--elim-avail-extern",
    "--instsimplify",
    "--newgvn",
    "--nary-reassociate",
    "--lower-constant-intrinsics",
    "--lower-expect",
    "--adce",
    "--bdce",
    "--ipsccp"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-guard-widening",
          "--mergereturn",
          "--inferattrs",
          "--loop-simplify",
          "--aggressive-instcombine",
          "--early-cse",
          "--infer-address-spaces",
          "--strip-debug-declare",
          "--mergeicmps",
          "-loop-reduce",
          "--prune-eh",
          "--mergefunc",
          "--globalsplit",
          "--newgvn",
          "--cross-dso-cfi",
          "--load-store-vectorizer",
          "--loop-data-prefetch"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.0%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-guard-widening",
      "--mergereturn",
      "--inferattrs",
      "--loop-simplify",
      "--aggressive-instcombine",
      "--early-cse",
      "--infer-address-spaces",
      "--strip-debug-declare",
      "--mergeicmps",
      "-loop-reduce",
      "--prune-eh",
      "--mergefunc",
      "--globalsplit",
      "--newgvn",
      "--cross-dso-cfi",
      "--load-store-vectorizer",
      "--loop-data-prefetch"
    ],
    "performance_vs_Oz": "+1.0%"
  }
}
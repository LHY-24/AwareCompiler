{
  "program_id": "linux-v0_12792.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 10,
    "onePredOneSuc": 7,
    "onePredTwoSuc": 3,
    "oneSuccessor": 8,
    "twoPred": 2,
    "twoPredOneSuc": 0,
    "twoEach": 1,
    "twoSuccessor": 6,
    "morePreds": 2,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 18,
    "BeginPhi": 1,
    "BranchCount": 14,
    "returnInt": 18,
    "CriticalCount": 2,
    "NumEdges": 20,
    "const32Bit": 31,
    "const64Bit": 9,
    "numConstZeroes": 13,
    "numConstOnes": 24,
    "UncondBranches": 8,
    "binaryConstArg": 8,
    "NumAShrInst": 1,
    "NumAddInst": 1,
    "NumAllocaInst": 19,
    "NumAndInst": 5,
    "BlockMid": 3,
    "BlockLow": 16,
    "NumBitCastInst": 0,
    "NumBrInst": 14,
    "NumCallInst": 26,
    "NumGetElementPtrInst": 0,
    "NumICmpInst": 10,
    "NumLShrInst": 0,
    "NumLoadInst": 34,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 1,
    "NumRetInst": 5,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 13,
    "NumSubInst": 1,
    "NumTruncInst": 2,
    "NumXorInst": 2,
    "NumZExtInst": 9,
    "TotalBlocks": 19,
    "TotalInsts": 143,
    "TotalMemInst": 92,
    "TotalFuncs": 10,
    "ArgsPhi": 3,
    "testUnary": 64
  },
  "baseline_oz_instcount": 143,
  "knowledge_base_entry": [
    "--sroa",
    "--prune-eh",
    "--reassociate",
    "--aggressive-instcombine",
    "--globalopt",
    "--newgvn",
    "-loop-reduce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--aggressive-instcombine",
          "--barrier",
          "--loop-idiom",
          "--loop-predication",
          "--coro-split",
          "--lowerinvoke",
          "--attributor",
          "--argpromotion",
          "--lower-expect",
          "--bdce",
          "--loop-unroll",
          "--loop-versioning-licm",
          "--licm",
          "--coro-elide",
          "--functionattrs",
          "--strip-debug-declare",
          "--post-inline-ee-instrument",
          "--loop-interchange",
          "--add-discriminators",
          "--hotcoldsplit",
          "--strip-dead-prototypes",
          "--inferattrs",
          "--inject-tli-mappings",
          "--load-store-vectorizer",
          "--callsite-splitting",
          "--cross-dso-cfi"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--aggressive-instcombine",
      "--barrier",
      "--loop-idiom",
      "--loop-predication",
      "--coro-split",
      "--lowerinvoke",
      "--attributor",
      "--argpromotion",
      "--lower-expect",
      "--bdce",
      "--loop-unroll",
      "--loop-versioning-licm",
      "--licm",
      "--coro-elide",
      "--functionattrs",
      "--strip-debug-declare",
      "--post-inline-ee-instrument",
      "--loop-interchange",
      "--add-discriminators",
      "--hotcoldsplit",
      "--strip-dead-prototypes",
      "--inferattrs",
      "--inject-tli-mappings",
      "--load-store-vectorizer",
      "--callsite-splitting",
      "--cross-dso-cfi"
    ],
    "performance_vs_Oz": "+1.4%"
  }
}
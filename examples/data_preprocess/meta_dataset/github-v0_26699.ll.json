{
  "program_id": "github-v0_26699.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 7,
    "onePredOneSuc": 6,
    "onePredTwoSuc": 0,
    "oneSuccessor": 7,
    "twoPred": 5,
    "twoPredOneSuc": 1,
    "twoEach": 3,
    "twoSuccessor": 5,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 15,
    "BeginPhi": 0,
    "BranchCount": 12,
    "returnInt": 3,
    "CriticalCount": 4,
    "NumEdges": 17,
    "const32Bit": 60,
    "const64Bit": 1,
    "numConstZeroes": 29,
    "numConstOnes": 10,
    "UncondBranches": 7,
    "binaryConstArg": 1,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 6,
    "NumAndInst": 0,
    "BlockMid": 1,
    "BlockLow": 14,
    "NumBitCastInst": 1,
    "NumBrInst": 12,
    "NumCallInst": 9,
    "NumGetElementPtrInst": 21,
    "NumICmpInst": 5,
    "NumLShrInst": 0,
    "NumLoadInst": 39,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 27,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 15,
    "TotalInsts": 126,
    "TotalMemInst": 102,
    "TotalFuncs": 9,
    "ArgsPhi": 0,
    "testUnary": 48
  },
  "baseline_oz_instcount": 127,
  "knowledge_base_entry": [
    "--lowerswitch",
    "--gvn-hoist",
    "--mem2reg",
    "--memcpyopt",
    "--instcombine",
    "--simplifycfg",
    "--dse",
    "--aggressive-instcombine",
    "--instsimplify",
    "--correlated-propagation",
    "--dce",
    "--mergefunc"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--constprop",
          "--adce",
          "--canonicalize-aliases",
          "--elim-avail-extern",
          "--post-inline-ee-instrument",
          "--loop-deletion",
          "--reassociate",
          "--dce",
          "--instcombine",
          "--mergereturn",
          "--lower-expect",
          "--coro-split",
          "--loop-sink",
          "--functionattrs",
          "--indvars",
          "--early-cse-memssa",
          "--slp-vectorizer",
          "--ipconstprop",
          "--lower-matrix-intrinsics",
          "--ipsccp",
          "--globaldce",
          "--constmerge",
          "--prune-eh"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--constprop",
      "--adce",
      "--canonicalize-aliases",
      "--elim-avail-extern",
      "--post-inline-ee-instrument",
      "--loop-deletion",
      "--reassociate",
      "--dce",
      "--instcombine",
      "--mergereturn",
      "--lower-expect",
      "--coro-split",
      "--loop-sink",
      "--functionattrs",
      "--indvars",
      "--early-cse-memssa",
      "--slp-vectorizer",
      "--ipconstprop",
      "--lower-matrix-intrinsics",
      "--ipsccp",
      "--globaldce",
      "--constmerge",
      "--prune-eh"
    ],
    "performance_vs_Oz": "+0.8%"
  }
}
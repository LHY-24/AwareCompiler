{
  "program_id": "github-v0_15012.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 6,
    "onePredOneSuc": 1,
    "onePredTwoSuc": 5,
    "oneSuccessor": 6,
    "twoPred": 7,
    "twoPredOneSuc": 5,
    "twoEach": 1,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 14,
    "BeginPhi": 0,
    "BranchCount": 13,
    "returnInt": 0,
    "CriticalCount": 8,
    "NumEdges": 20,
    "const32Bit": 38,
    "const64Bit": 4,
    "numConstZeroes": 23,
    "numConstOnes": 8,
    "UncondBranches": 6,
    "binaryConstArg": 9,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 3,
    "NumAndInst": 4,
    "BlockMid": 2,
    "BlockLow": 12,
    "NumBitCastInst": 3,
    "NumBrInst": 13,
    "NumCallInst": 4,
    "NumGetElementPtrInst": 11,
    "NumICmpInst": 7,
    "NumLShrInst": 0,
    "NumLoadInst": 28,
    "NumMulInst": 0,
    "NumOrInst": 3,
    "NumPHIInst": 0,
    "NumRetInst": 1,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 13,
    "NumSubInst": 0,
    "NumTruncInst": 3,
    "NumXorInst": 0,
    "NumZExtInst": 7,
    "TotalBlocks": 14,
    "TotalInsts": 102,
    "TotalMemInst": 59,
    "TotalFuncs": 4,
    "ArgsPhi": 0,
    "testUnary": 44
  },
  "baseline_oz_instcount": 102,
  "knowledge_base_entry": [
    "--mergereturn",
    "--jump-threading",
    "--instsimplify",
    "--loop-reroll",
    "--slp-vectorizer",
    "--instsimplify",
    "--mem2reg",
    "--loop-instsimplify",
    "--aggressive-instcombine",
    "--loop-rotate",
    "--dse",
    "--correlated-propagation",
    "--ipsccp",
    "--dce",
    "--newgvn",
    "--adce",
    "--lower-constant-intrinsics",
    "--globalopt",
    "--loweratomic",
    "--early-cse",
    "--flattencfg",
    "--elim-avail-extern",
    "--inline",
    "--instcombine"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--add-discriminators",
          "--constmerge",
          "--strip-dead-prototypes",
          "--mem2reg",
          "--load-store-vectorizer",
          "--ipsccp",
          "--instcombine",
          "--nary-reassociate",
          "--constprop",
          "--loop-instsimplify",
          "--aggressive-instcombine",
          "--loop-distribute",
          "--lower-matrix-intrinsics",
          "--coro-split",
          "--attributor",
          "--loop-sink",
          "--licm"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+5.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--add-discriminators",
      "--constmerge",
      "--strip-dead-prototypes",
      "--mem2reg",
      "--load-store-vectorizer",
      "--ipsccp",
      "--instcombine",
      "--nary-reassociate",
      "--constprop",
      "--loop-instsimplify",
      "--aggressive-instcombine",
      "--loop-distribute",
      "--lower-matrix-intrinsics",
      "--coro-split",
      "--attributor",
      "--loop-sink",
      "--licm"
    ],
    "performance_vs_Oz": "+5.9%"
  }
}
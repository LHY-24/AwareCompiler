{
  "program_id": "github-v0_29596.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 16,
    "onePredOneSuc": 9,
    "onePredTwoSuc": 4,
    "oneSuccessor": 14,
    "twoPred": 7,
    "twoPredOneSuc": 4,
    "twoEach": 3,
    "twoSuccessor": 8,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 26,
    "BeginPhi": 0,
    "BranchCount": 22,
    "returnInt": 4,
    "CriticalCount": 1,
    "NumEdges": 30,
    "const32Bit": 36,
    "const64Bit": 47,
    "numConstZeroes": 46,
    "numConstOnes": 25,
    "UncondBranches": 14,
    "binaryConstArg": 16,
    "NumAShrInst": 5,
    "NumAddInst": 4,
    "NumAllocaInst": 13,
    "NumAndInst": 4,
    "BlockMid": 6,
    "BlockLow": 20,
    "NumBitCastInst": 4,
    "NumBrInst": 22,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 30,
    "NumICmpInst": 8,
    "NumLShrInst": 2,
    "NumLoadInst": 42,
    "NumMulInst": 0,
    "NumOrInst": 4,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 6,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 21,
    "NumSubInst": 0,
    "NumTruncInst": 10,
    "NumXorInst": 0,
    "NumZExtInst": 25,
    "TotalBlocks": 26,
    "TotalInsts": 211,
    "TotalMemInst": 113,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 100
  },
  "baseline_oz_instcount": 211,
  "knowledge_base_entry": [
    "--loop-simplify",
    "--gvn",
    "--mergefunc",
    "--adce",
    "--lower-expect",
    "--sroa",
    "--aggressive-instcombine",
    "--flattencfg",
    "--sroa",
    "--aggressive-instcombine",
    "--instsimplify",
    "--gvn-hoist",
    "--mem2reg",
    "--bdce",
    "--inline",
    "--licm",
    "--loop-rotate"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--strip",
          "--indvars",
          "--ipsccp",
          "--dce",
          "--loop-unroll-and-jam",
          "--coro-cleanup",
          "--prune-eh",
          "--add-discriminators",
          "--reassociate",
          "--always-inline",
          "--scalarizer",
          "--loop-interchange",
          "-loop-reduce",
          "--canonicalize-aliases",
          "--mergereturn",
          "--inferattrs",
          "--barrier",
          "--loop-deletion",
          "--simple-loop-unswitch",
          "--instcombine",
          "--coro-split",
          "--gvn-hoist",
          "--loop-idiom",
          "--aggressive-instcombine",
          "--mergefunc",
          "--loop-versioning",
          "--cross-dso-cfi",
          "--licm"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--strip",
      "--indvars",
      "--ipsccp",
      "--dce",
      "--loop-unroll-and-jam",
      "--coro-cleanup",
      "--prune-eh",
      "--add-discriminators",
      "--reassociate",
      "--always-inline",
      "--scalarizer",
      "--loop-interchange",
      "-loop-reduce",
      "--canonicalize-aliases",
      "--mergereturn",
      "--inferattrs",
      "--barrier",
      "--loop-deletion",
      "--simple-loop-unswitch",
      "--instcombine",
      "--coro-split",
      "--gvn-hoist",
      "--loop-idiom",
      "--aggressive-instcombine",
      "--mergefunc",
      "--loop-versioning",
      "--cross-dso-cfi",
      "--licm"
    ],
    "performance_vs_Oz": "+3.8%"
  }
}
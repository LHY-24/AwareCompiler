{
  "program_id": "linux-v0_2862.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 59,
    "onePredOneSuc": 47,
    "onePredTwoSuc": 11,
    "oneSuccessor": 55,
    "twoPred": 18,
    "twoPredOneSuc": 4,
    "twoEach": 7,
    "twoSuccessor": 24,
    "morePreds": 5,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 127,
    "BeginPhi": 0,
    "BranchCount": 79,
    "returnInt": 44,
    "CriticalCount": 4,
    "NumEdges": 118,
    "const32Bit": 362,
    "const64Bit": 54,
    "numConstZeroes": 239,
    "numConstOnes": 117,
    "UncondBranches": 55,
    "binaryConstArg": 31,
    "NumAShrInst": 0,
    "NumAddInst": 9,
    "NumAllocaInst": 105,
    "NumAndInst": 22,
    "BlockMid": 15,
    "BlockLow": 112,
    "NumBitCastInst": 44,
    "NumBrInst": 79,
    "NumCallInst": 83,
    "NumGetElementPtrInst": 121,
    "NumICmpInst": 23,
    "NumLShrInst": 4,
    "NumLoadInst": 260,
    "NumMulInst": 0,
    "NumOrInst": 6,
    "NumPHIInst": 0,
    "NumRetInst": 45,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 150,
    "NumSubInst": 3,
    "NumTruncInst": 4,
    "NumXorInst": 3,
    "NumZExtInst": 0,
    "TotalBlocks": 127,
    "TotalInsts": 979,
    "TotalMemInst": 719,
    "TotalFuncs": 48,
    "ArgsPhi": 0,
    "testUnary": 428
  },
  "baseline_oz_instcount": 930,
  "knowledge_base_entry": [
    "--ipconstprop",
    "--aggressive-instcombine",
    "--instcombine",
    "--mldst-motion",
    "--loop-simplifycfg",
    "--simplifycfg",
    "--mem2reg",
    "--memcpyopt",
    "--lower-constant-intrinsics",
    "--ipsccp",
    "--instcombine",
    "--lower-expect",
    "--simplifycfg",
    "--mergefunc",
    "--simplifycfg",
    "--slsr",
    "--early-cse-memssa",
    "--elim-avail-extern",
    "--load-store-vectorizer",
    "--slp-vectorizer",
    "--gvn-hoist",
    "--newgvn",
    "--loop-instsimplify",
    "--inline"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--globaldce",
          "--loop-unroll-and-jam",
          "--dse",
          "--gvn-hoist",
          "--irce",
          "--mergereturn",
          "--loop-reroll",
          "--mergefunc",
          "--strip-dead-prototypes",
          "--simple-loop-unswitch",
          "--libcalls-shrinkwrap",
          "--slsr",
          "--loop-idiom",
          "--called-value-propagation",
          "--loop-unswitch",
          "--loop-versioning",
          "--lower-expect",
          "--coro-cleanup",
          "--instnamer",
          "--ipsccp",
          "--licm",
          "--constprop",
          "--loop-versioning-licm",
          "--loop-interchange",
          "--jump-threading",
          "--coro-split",
          "--inline"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+9.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--globaldce",
      "--loop-unroll-and-jam",
      "--dse",
      "--gvn-hoist",
      "--irce",
      "--mergereturn",
      "--loop-reroll",
      "--mergefunc",
      "--strip-dead-prototypes",
      "--simple-loop-unswitch",
      "--libcalls-shrinkwrap",
      "--slsr",
      "--loop-idiom",
      "--called-value-propagation",
      "--loop-unswitch",
      "--loop-versioning",
      "--lower-expect",
      "--coro-cleanup",
      "--instnamer",
      "--ipsccp",
      "--licm",
      "--constprop",
      "--loop-versioning-licm",
      "--loop-interchange",
      "--jump-threading",
      "--coro-split",
      "--inline"
    ],
    "performance_vs_Oz": "+9.5%"
  }
}
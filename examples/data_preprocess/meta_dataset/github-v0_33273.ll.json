{
  "program_id": "github-v0_33273.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 26,
    "onePredOneSuc": 20,
    "onePredTwoSuc": 5,
    "oneSuccessor": 26,
    "twoPred": 15,
    "twoPredOneSuc": 5,
    "twoEach": 9,
    "twoSuccessor": 15,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 44,
    "BeginPhi": 0,
    "BranchCount": 41,
    "returnInt": 3,
    "CriticalCount": 8,
    "NumEdges": 56,
    "const32Bit": 60,
    "const64Bit": 3,
    "numConstZeroes": 12,
    "numConstOnes": 34,
    "UncondBranches": 26,
    "binaryConstArg": 13,
    "NumAShrInst": 1,
    "NumAddInst": 12,
    "NumAllocaInst": 28,
    "NumAndInst": 1,
    "BlockMid": 5,
    "BlockLow": 39,
    "NumBitCastInst": 0,
    "NumBrInst": 41,
    "NumCallInst": 5,
    "NumGetElementPtrInst": 7,
    "NumICmpInst": 17,
    "NumLShrInst": 0,
    "NumLoadInst": 92,
    "NumMulInst": 3,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 13,
    "NumSelectInst": 1,
    "NumShlInst": 1,
    "NumStoreInst": 56,
    "NumSubInst": 9,
    "NumTruncInst": 2,
    "NumXorInst": 1,
    "NumZExtInst": 3,
    "TotalBlocks": 44,
    "TotalInsts": 297,
    "TotalMemInst": 188,
    "TotalFuncs": 4,
    "ArgsPhi": 0,
    "testUnary": 138
  },
  "baseline_oz_instcount": 296,
  "knowledge_base_entry": [
    "--loop-sink",
    "--instcombine",
    "--loop-reroll",
    "--slp-vectorizer",
    "--lower-constant-intrinsics",
    "--jump-threading",
    "--memcpyopt",
    "--simplifycfg",
    "--instcombine",
    "--dce",
    "--ipsccp",
    "--lower-constant-intrinsics",
    "--dce",
    "--elim-avail-extern",
    "--aggressive-instcombine",
    "--ipsccp",
    "--jump-threading",
    "--gvn",
    "--early-cse-memssa",
    "--reassociate",
    "--die",
    "--sroa",
    "--slp-vectorizer",
    "--dce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--ipsccp",
          "--partially-inline-libcalls",
          "--indvars",
          "--slp-vectorizer",
          "--attributor",
          "--early-cse",
          "--lower-constant-intrinsics",
          "--loop-versioning-licm",
          "--deadargelim",
          "--loop-predication",
          "--strip-debug-declare",
          "--rpo-functionattrs",
          "--memcpyopt",
          "--slsr",
          "--aggressive-instcombine",
          "--div-rem-pairs",
          "--simple-loop-unswitch",
          "--mergefunc",
          "--loop-guard-widening",
          "--loop-vectorize",
          "--mldst-motion"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--ipsccp",
      "--partially-inline-libcalls",
      "--indvars",
      "--slp-vectorizer",
      "--attributor",
      "--early-cse",
      "--lower-constant-intrinsics",
      "--loop-versioning-licm",
      "--deadargelim",
      "--loop-predication",
      "--strip-debug-declare",
      "--rpo-functionattrs",
      "--memcpyopt",
      "--slsr",
      "--aggressive-instcombine",
      "--div-rem-pairs",
      "--simple-loop-unswitch",
      "--mergefunc",
      "--loop-guard-widening",
      "--loop-vectorize",
      "--mldst-motion"
    ],
    "performance_vs_Oz": "+0.7%"
  }
}
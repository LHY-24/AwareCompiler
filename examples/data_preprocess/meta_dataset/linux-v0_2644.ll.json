{
  "program_id": "linux-v0_2644.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 28,
    "onePredOneSuc": 16,
    "onePredTwoSuc": 12,
    "oneSuccessor": 22,
    "twoPred": 7,
    "twoPredOneSuc": 5,
    "twoEach": 0,
    "twoSuccessor": 16,
    "morePreds": 3,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 51,
    "BeginPhi": 0,
    "BranchCount": 38,
    "returnInt": 18,
    "CriticalCount": 9,
    "NumEdges": 54,
    "const32Bit": 155,
    "const64Bit": 4,
    "numConstZeroes": 68,
    "numConstOnes": 56,
    "UncondBranches": 22,
    "binaryConstArg": 24,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 28,
    "NumAndInst": 13,
    "BlockMid": 7,
    "BlockLow": 44,
    "NumBitCastInst": 0,
    "NumBrInst": 38,
    "NumCallInst": 32,
    "NumGetElementPtrInst": 37,
    "NumICmpInst": 18,
    "NumLShrInst": 5,
    "NumLoadInst": 105,
    "NumMulInst": 0,
    "NumOrInst": 2,
    "NumPHIInst": 0,
    "NumRetInst": 13,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 65,
    "NumSubInst": 0,
    "NumTruncInst": 8,
    "NumXorInst": 4,
    "NumZExtInst": 7,
    "TotalBlocks": 51,
    "TotalInsts": 377,
    "TotalMemInst": 267,
    "TotalFuncs": 21,
    "ArgsPhi": 0,
    "testUnary": 150
  },
  "baseline_oz_instcount": 377,
  "knowledge_base_entry": [
    "--newgvn",
    "--adce",
    "--dce",
    "--gvn",
    "--dse",
    "--loop-rotate",
    "--dse",
    "--loop-rotate",
    "--lower-expect",
    "--mergefunc",
    "--gvn-hoist",
    "--gvn-hoist",
    "--loop-rotate",
    "--early-cse",
    "--early-cse",
    "--indvars",
    "--gvn-hoist",
    "--jump-threading",
    "--flattencfg",
    "--aggressive-instcombine",
    "--load-store-vectorizer",
    "--instsimplify",
    "--nary-reassociate",
    "--correlated-propagation"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--correlated-propagation",
          "--loop-versioning-licm",
          "--constmerge",
          "--rewrite-statepoints-for-gc",
          "--lower-expect",
          "--instsimplify",
          "--coro-split",
          "--simple-loop-unswitch",
          "--early-cse",
          "--separate-const-offset-from-gep",
          "--aggressive-instcombine",
          "--pgo-memop-opt",
          "--loop-instsimplify",
          "--slp-vectorizer",
          "--rpo-functionattrs",
          "--sroa",
          "--loop-versioning",
          "--strip",
          "--die",
          "--constprop",
          "--sancov",
          "--sink",
          "--bdce",
          "--loop-idiom",
          "--coro-cleanup",
          "--instnamer",
          "--load-store-vectorizer",
          "--flattencfg"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--correlated-propagation",
      "--loop-versioning-licm",
      "--constmerge",
      "--rewrite-statepoints-for-gc",
      "--lower-expect",
      "--instsimplify",
      "--coro-split",
      "--simple-loop-unswitch",
      "--early-cse",
      "--separate-const-offset-from-gep",
      "--aggressive-instcombine",
      "--pgo-memop-opt",
      "--loop-instsimplify",
      "--slp-vectorizer",
      "--rpo-functionattrs",
      "--sroa",
      "--loop-versioning",
      "--strip",
      "--die",
      "--constprop",
      "--sancov",
      "--sink",
      "--bdce",
      "--loop-idiom",
      "--coro-cleanup",
      "--instnamer",
      "--load-store-vectorizer",
      "--flattencfg"
    ],
    "performance_vs_Oz": "+1.6%"
  }
}
{
  "program_id": "github-v0_7779.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 13,
    "onePredOneSuc": 9,
    "onePredTwoSuc": 1,
    "oneSuccessor": 11,
    "twoPred": 5,
    "twoPredOneSuc": 1,
    "twoEach": 4,
    "twoSuccessor": 6,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 21,
    "BeginPhi": 0,
    "BranchCount": 17,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 23,
    "const32Bit": 30,
    "const64Bit": 24,
    "numConstZeroes": 28,
    "numConstOnes": 21,
    "UncondBranches": 11,
    "binaryConstArg": 8,
    "NumAShrInst": 0,
    "NumAddInst": 8,
    "NumAllocaInst": 12,
    "NumAndInst": 0,
    "BlockMid": 5,
    "BlockLow": 16,
    "NumBitCastInst": 0,
    "NumBrInst": 17,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 15,
    "NumICmpInst": 6,
    "NumLShrInst": 0,
    "NumLoadInst": 27,
    "NumMulInst": 2,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 19,
    "NumSubInst": 0,
    "NumTruncInst": 6,
    "NumXorInst": 0,
    "NumZExtInst": 12,
    "TotalBlocks": 21,
    "TotalInsts": 138,
    "TotalMemInst": 80,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 60
  },
  "baseline_oz_instcount": 138,
  "knowledge_base_entry": [
    "--dce",
    "--aggressive-instcombine",
    "--gvn-hoist",
    "--sroa",
    "--inline",
    "--early-cse",
    "--gvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--called-value-propagation",
          "--loop-sink",
          "--inject-tli-mappings",
          "--deadargelim",
          "--bdce",
          "--aggressive-instcombine",
          "--loop-distribute",
          "--loop-unroll",
          "--inferattrs",
          "--argpromotion",
          "--loop-simplifycfg"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+8.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--called-value-propagation",
      "--loop-sink",
      "--inject-tli-mappings",
      "--deadargelim",
      "--bdce",
      "--aggressive-instcombine",
      "--loop-distribute",
      "--loop-unroll",
      "--inferattrs",
      "--argpromotion",
      "--loop-simplifycfg"
    ],
    "performance_vs_Oz": "+8.7%"
  }
}
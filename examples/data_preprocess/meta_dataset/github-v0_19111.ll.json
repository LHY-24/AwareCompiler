{
  "program_id": "github-v0_19111.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 13,
    "onePredOneSuc": 9,
    "onePredTwoSuc": 1,
    "oneSuccessor": 11,
    "twoPred": 5,
    "twoPredOneSuc": 1,
    "twoEach": 4,
    "twoSuccessor": 6,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 21,
    "BeginPhi": 0,
    "BranchCount": 17,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 23,
    "const32Bit": 38,
    "const64Bit": 60,
    "numConstZeroes": 55,
    "numConstOnes": 28,
    "UncondBranches": 11,
    "binaryConstArg": 7,
    "NumAShrInst": 0,
    "NumAddInst": 5,
    "NumAllocaInst": 15,
    "NumAndInst": 0,
    "BlockMid": 5,
    "BlockLow": 16,
    "NumBitCastInst": 16,
    "NumBrInst": 17,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 42,
    "NumICmpInst": 6,
    "NumLShrInst": 0,
    "NumLoadInst": 34,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 29,
    "NumSubInst": 0,
    "NumTruncInst": 3,
    "NumXorInst": 2,
    "NumZExtInst": 2,
    "TotalBlocks": 21,
    "TotalInsts": 185,
    "TotalMemInst": 127,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 73
  },
  "baseline_oz_instcount": 185,
  "knowledge_base_entry": [
    "--loop-instsimplify",
    "--mem2reg",
    "--aggressive-instcombine",
    "--newgvn",
    "--indvars",
    "--slsr",
    "--nary-reassociate",
    "--instsimplify",
    "--sroa",
    "--correlated-propagation",
    "--early-cse-memssa"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--dse",
          "--attributor",
          "--loop-reroll",
          "--early-cse-memssa",
          "--strip-debug-declare",
          "--argpromotion",
          "--coro-early",
          "--aggressive-instcombine",
          "--instcombine",
          "--instnamer",
          "--lcssa",
          "--mem2reg",
          "--inline",
          "--jump-threading",
          "--constmerge",
          "--flattencfg",
          "--partially-inline-libcalls",
          "--slp-vectorizer",
          "--rewrite-statepoints-for-gc",
          "--slsr",
          "--loop-instsimplify",
          "--ipconstprop",
          "--always-inline",
          "--coro-cleanup",
          "--loop-unswitch",
          "--constprop",
          "--alignment-from-assumptions"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--dse",
      "--attributor",
      "--loop-reroll",
      "--early-cse-memssa",
      "--strip-debug-declare",
      "--argpromotion",
      "--coro-early",
      "--aggressive-instcombine",
      "--instcombine",
      "--instnamer",
      "--lcssa",
      "--mem2reg",
      "--inline",
      "--jump-threading",
      "--constmerge",
      "--flattencfg",
      "--partially-inline-libcalls",
      "--slp-vectorizer",
      "--rewrite-statepoints-for-gc",
      "--slsr",
      "--loop-instsimplify",
      "--ipconstprop",
      "--always-inline",
      "--coro-cleanup",
      "--loop-unswitch",
      "--constprop",
      "--alignment-from-assumptions"
    ],
    "performance_vs_Oz": "+2.2%"
  }
}
{
  "program_id": "github-v0_2339.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 20,
    "onePredOneSuc": 11,
    "onePredTwoSuc": 9,
    "oneSuccessor": 17,
    "twoPred": 6,
    "twoPredOneSuc": 4,
    "twoEach": 1,
    "twoSuccessor": 12,
    "morePreds": 3,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 33,
    "BeginPhi": 0,
    "BranchCount": 29,
    "returnInt": 20,
    "CriticalCount": 7,
    "NumEdges": 41,
    "const32Bit": 35,
    "const64Bit": 6,
    "numConstZeroes": 26,
    "numConstOnes": 14,
    "UncondBranches": 17,
    "binaryConstArg": 3,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 8,
    "NumAndInst": 0,
    "BlockMid": 0,
    "BlockLow": 33,
    "NumBitCastInst": 0,
    "NumBrInst": 29,
    "NumCallInst": 35,
    "NumGetElementPtrInst": 10,
    "NumICmpInst": 12,
    "NumLShrInst": 0,
    "NumLoadInst": 31,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 4,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 14,
    "NumSubInst": 1,
    "NumTruncInst": 1,
    "NumXorInst": 2,
    "NumZExtInst": 1,
    "TotalBlocks": 33,
    "TotalInsts": 148,
    "TotalMemInst": 98,
    "TotalFuncs": 16,
    "ArgsPhi": 0,
    "testUnary": 41
  },
  "baseline_oz_instcount": 148,
  "knowledge_base_entry": [
    "--licm",
    "--dce",
    "--jump-threading",
    "--aggressive-instcombine",
    "--flattencfg",
    "--ipsccp",
    "--newgvn",
    "--simplifycfg",
    "--slp-vectorizer",
    "-loop-reduce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--lowerswitch",
          "--strip-dead-prototypes",
          "--correlated-propagation",
          "--alignment-from-assumptions",
          "--bdce",
          "--early-cse-memssa",
          "--speculative-execution",
          "--lower-matrix-intrinsics",
          "--callsite-splitting",
          "--mldst-motion",
          "--loop-data-prefetch",
          "--load-store-vectorizer",
          "--loop-versioning",
          "--separate-const-offset-from-gep",
          "--loop-unroll-and-jam",
          "--sccp",
          "--strip",
          "--infer-address-spaces",
          "--flattencfg",
          "--globalopt",
          "--prune-eh",
          "--simplifycfg",
          "--loop-reroll",
          "--loop-idiom",
          "--libcalls-shrinkwrap",
          "--loop-sink",
          "--aggressive-instcombine",
          "--mergefunc"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--lowerswitch",
      "--strip-dead-prototypes",
      "--correlated-propagation",
      "--alignment-from-assumptions",
      "--bdce",
      "--early-cse-memssa",
      "--speculative-execution",
      "--lower-matrix-intrinsics",
      "--callsite-splitting",
      "--mldst-motion",
      "--loop-data-prefetch",
      "--load-store-vectorizer",
      "--loop-versioning",
      "--separate-const-offset-from-gep",
      "--loop-unroll-and-jam",
      "--sccp",
      "--strip",
      "--infer-address-spaces",
      "--flattencfg",
      "--globalopt",
      "--prune-eh",
      "--simplifycfg",
      "--loop-reroll",
      "--loop-idiom",
      "--libcalls-shrinkwrap",
      "--loop-sink",
      "--aggressive-instcombine",
      "--mergefunc"
    ],
    "performance_vs_Oz": "+0.7%"
  }
}
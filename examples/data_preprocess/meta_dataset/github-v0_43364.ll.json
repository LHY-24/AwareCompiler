{
  "program_id": "github-v0_43364.ll",
  "autophase_features": {
    "BBNumArgsHi": 8,
    "BBNumArgsLo": 1,
    "onePred": 10,
    "onePredOneSuc": 7,
    "onePredTwoSuc": 3,
    "oneSuccessor": 7,
    "twoPred": 7,
    "twoPredOneSuc": 0,
    "twoEach": 7,
    "twoSuccessor": 12,
    "morePreds": 2,
    "BB03Phi": 3,
    "BBHiPhi": 6,
    "BBNoPhi": 12,
    "BeginPhi": 9,
    "BranchCount": 19,
    "returnInt": 4,
    "CriticalCount": 14,
    "NumEdges": 31,
    "const32Bit": 36,
    "const64Bit": 0,
    "numConstZeroes": 21,
    "numConstOnes": 16,
    "UncondBranches": 7,
    "binaryConstArg": 15,
    "NumAShrInst": 0,
    "NumAddInst": 33,
    "NumAllocaInst": 0,
    "NumAndInst": 3,
    "BlockMid": 4,
    "BlockLow": 17,
    "NumBitCastInst": 0,
    "NumBrInst": 19,
    "NumCallInst": 4,
    "NumGetElementPtrInst": 17,
    "NumICmpInst": 17,
    "NumLShrInst": 0,
    "NumLoadInst": 12,
    "NumMulInst": 20,
    "NumOrInst": 0,
    "NumPHIInst": 34,
    "NumRetInst": 2,
    "NumSExtInst": 12,
    "NumSelectInst": 20,
    "NumShlInst": 0,
    "NumStoreInst": 5,
    "NumSubInst": 3,
    "NumTruncInst": 13,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 21,
    "TotalInsts": 220,
    "TotalMemInst": 38,
    "TotalFuncs": 3,
    "ArgsPhi": 74,
    "testUnary": 37
  },
  "baseline_oz_instcount": 233,
  "knowledge_base_entry": [
    "--loop-predication",
    "--gvn-hoist",
    "--gvn-hoist",
    "--jump-threading",
    "--loop-simplifycfg",
    "--early-cse-memssa",
    "--slsr",
    "--simplifycfg",
    "--sccp",
    "--instcombine",
    "--loop-reroll",
    "--gvn",
    "--gvn",
    "--instcombine",
    "--prune-eh",
    "--early-cse",
    "--nary-reassociate",
    "--gvn",
    "--sroa",
    "--sccp",
    "--licm",
    "--loop-rotate",
    "--jump-threading",
    "--newgvn",
    "--correlated-propagation"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--strip",
          "--loop-distribute",
          "--callsite-splitting",
          "--loop-reroll",
          "--inject-tli-mappings",
          "--mergefunc",
          "--partially-inline-libcalls",
          "--licm",
          "--called-value-propagation",
          "--gvn",
          "--prune-eh",
          "--loop-simplifycfg",
          "--lowerinvoke",
          "--loop-instsimplify",
          "--aggressive-instcombine",
          "--constmerge",
          "--ipconstprop",
          "--lower-guard-intrinsic",
          "--redundant-dbg-inst-elim",
          "--lower-widenable-condition",
          "--always-inline",
          "--irce",
          "--simplifycfg",
          "--pgo-memop-opt",
          "--ee-instrument",
          "--early-cse-memssa",
          "--gvn-hoist",
          "--functionattrs",
          "--globalopt"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+7.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--strip",
      "--loop-distribute",
      "--callsite-splitting",
      "--loop-reroll",
      "--inject-tli-mappings",
      "--mergefunc",
      "--partially-inline-libcalls",
      "--licm",
      "--called-value-propagation",
      "--gvn",
      "--prune-eh",
      "--loop-simplifycfg",
      "--lowerinvoke",
      "--loop-instsimplify",
      "--aggressive-instcombine",
      "--constmerge",
      "--ipconstprop",
      "--lower-guard-intrinsic",
      "--redundant-dbg-inst-elim",
      "--lower-widenable-condition",
      "--always-inline",
      "--irce",
      "--simplifycfg",
      "--pgo-memop-opt",
      "--ee-instrument",
      "--early-cse-memssa",
      "--gvn-hoist",
      "--functionattrs",
      "--globalopt"
    ],
    "performance_vs_Oz": "+7.7%"
  }
}
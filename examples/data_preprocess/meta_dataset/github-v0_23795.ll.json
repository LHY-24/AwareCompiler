{
  "program_id": "github-v0_23795.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 26,
    "onePredOneSuc": 20,
    "onePredTwoSuc": 3,
    "oneSuccessor": 24,
    "twoPred": 9,
    "twoPredOneSuc": 2,
    "twoEach": 5,
    "twoSuccessor": 10,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 40,
    "BeginPhi": 0,
    "BranchCount": 34,
    "returnInt": 11,
    "CriticalCount": 3,
    "NumEdges": 50,
    "const32Bit": 59,
    "const64Bit": 5,
    "numConstZeroes": 16,
    "numConstOnes": 34,
    "UncondBranches": 24,
    "binaryConstArg": 15,
    "NumAShrInst": 0,
    "NumAddInst": 13,
    "NumAllocaInst": 19,
    "NumAndInst": 0,
    "BlockMid": 4,
    "BlockLow": 36,
    "NumBitCastInst": 0,
    "NumBrInst": 34,
    "NumCallInst": 16,
    "NumGetElementPtrInst": 10,
    "NumICmpInst": 10,
    "NumLShrInst": 0,
    "NumLoadInst": 73,
    "NumMulInst": 5,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 4,
    "NumSExtInst": 12,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 44,
    "NumSubInst": 4,
    "NumTruncInst": 9,
    "NumXorInst": 0,
    "NumZExtInst": 6,
    "TotalBlocks": 40,
    "TotalInsts": 266,
    "TotalMemInst": 162,
    "TotalFuncs": 11,
    "ArgsPhi": 0,
    "testUnary": 121
  },
  "baseline_oz_instcount": 266,
  "knowledge_base_entry": [
    "--loweratomic",
    "--globalopt",
    "--lower-expect",
    "--bdce",
    "--early-cse",
    "--aggressive-instcombine",
    "--ipsccp",
    "--instcombine",
    "--newgvn",
    "--slp-vectorizer",
    "--elim-avail-extern",
    "--prune-eh",
    "--simplifycfg",
    "--early-cse-memssa",
    "--gvn",
    "--dse",
    "--early-cse",
    "--slsr",
    "--slp-vectorizer",
    "--early-cse",
    "--loop-fusion",
    "--newgvn",
    "--inline",
    "--reassociate",
    "--adce",
    "--lower-constant-intrinsics",
    "--simplifycfg",
    "--prune-eh",
    "--elim-avail-extern",
    "--sccp"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--deadargelim",
          "--mldst-motion",
          "--loop-fusion",
          "--loop-vectorize",
          "--loop-rotate",
          "--correlated-propagation",
          "--float2int",
          "--barrier",
          "--loop-idiom",
          "--always-inline",
          "--aggressive-instcombine",
          "--instnamer",
          "--strip",
          "--speculative-execution",
          "--ee-instrument",
          "--simple-loop-unswitch",
          "--add-discriminators"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--deadargelim",
      "--mldst-motion",
      "--loop-fusion",
      "--loop-vectorize",
      "--loop-rotate",
      "--correlated-propagation",
      "--float2int",
      "--barrier",
      "--loop-idiom",
      "--always-inline",
      "--aggressive-instcombine",
      "--instnamer",
      "--strip",
      "--speculative-execution",
      "--ee-instrument",
      "--simple-loop-unswitch",
      "--add-discriminators"
    ],
    "performance_vs_Oz": "+1.5%"
  }
}
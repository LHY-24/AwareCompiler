{
  "program_id": "poj104-v1_50_2528.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 4,
    "onePredOneSuc": 2,
    "onePredTwoSuc": 1,
    "oneSuccessor": 4,
    "twoPred": 2,
    "twoPredOneSuc": 1,
    "twoEach": 1,
    "twoSuccessor": 2,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 9,
    "BeginPhi": 0,
    "BranchCount": 6,
    "returnInt": 3,
    "CriticalCount": 1,
    "NumEdges": 8,
    "const32Bit": 25,
    "const64Bit": 35,
    "numConstZeroes": 17,
    "numConstOnes": 9,
    "UncondBranches": 4,
    "binaryConstArg": 2,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 6,
    "NumAndInst": 0,
    "BlockMid": 1,
    "BlockLow": 8,
    "NumBitCastInst": 10,
    "NumBrInst": 6,
    "NumCallInst": 15,
    "NumGetElementPtrInst": 13,
    "NumICmpInst": 2,
    "NumLShrInst": 0,
    "NumLoadInst": 8,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 1,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 17,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 9,
    "TotalInsts": 84,
    "TotalMemInst": 59,
    "TotalFuncs": 10,
    "ArgsPhi": 0,
    "testUnary": 25
  },
  "baseline_oz_instcount": 54,
  "knowledge_base_entry": [
    "--adce",
    "--load-store-vectorizer",
    "--aggressive-instcombine",
    "--simplifycfg",
    "--correlated-propagation",
    "--loop-reroll",
    "--jump-threading",
    "--early-cse",
    "--aggressive-instcombine",
    "--mergefunc",
    "--lower-expect",
    "--mem2reg",
    "--loop-rotate",
    "--early-cse-memssa",
    "--inline",
    "--memcpyopt",
    "--loop-simplifycfg",
    "--loop-reroll",
    "--memcpyopt",
    "--load-store-vectorizer",
    "--correlated-propagation",
    "--lower-constant-intrinsics",
    "--instsimplify",
    "--mldst-motion",
    "--instsimplify",
    "--lower-expect",
    "--newgvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--indvars",
          "--loop-guard-widening",
          "--load-store-vectorizer",
          "--consthoist",
          "--div-rem-pairs",
          "--loop-deletion",
          "--mergefunc",
          "--lower-guard-intrinsic",
          "--inferattrs",
          "--bdce",
          "--slp-vectorizer",
          "--loop-instsimplify",
          "--sroa",
          "--loop-data-prefetch",
          "--mergeicmps",
          "--prune-eh",
          "--early-cse-memssa",
          "--loop-unswitch",
          "--loop-simplifycfg",
          "--loop-sink",
          "--reassociate",
          "--instnamer",
          "--gvn-hoist",
          "--strip",
          "--mem2reg",
          "--callsite-splitting",
          "--add-discriminators"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+24.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--indvars",
      "--loop-guard-widening",
      "--load-store-vectorizer",
      "--consthoist",
      "--div-rem-pairs",
      "--loop-deletion",
      "--mergefunc",
      "--lower-guard-intrinsic",
      "--inferattrs",
      "--bdce",
      "--slp-vectorizer",
      "--loop-instsimplify",
      "--sroa",
      "--loop-data-prefetch",
      "--mergeicmps",
      "--prune-eh",
      "--early-cse-memssa",
      "--loop-unswitch",
      "--loop-simplifycfg",
      "--loop-sink",
      "--reassociate",
      "--instnamer",
      "--gvn-hoist",
      "--strip",
      "--mem2reg",
      "--callsite-splitting",
      "--add-discriminators"
    ],
    "performance_vs_Oz": "+24.1%"
  }
}
{
  "program_id": "linux-v0_761.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 13,
    "onePredOneSuc": 11,
    "onePredTwoSuc": 2,
    "oneSuccessor": 13,
    "twoPred": 8,
    "twoPredOneSuc": 2,
    "twoEach": 1,
    "twoSuccessor": 8,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 28,
    "BeginPhi": 0,
    "BranchCount": 21,
    "returnInt": 6,
    "CriticalCount": 3,
    "NumEdges": 29,
    "const32Bit": 79,
    "const64Bit": 8,
    "numConstZeroes": 19,
    "numConstOnes": 63,
    "UncondBranches": 13,
    "binaryConstArg": 4,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 54,
    "NumAndInst": 0,
    "BlockMid": 6,
    "BlockLow": 22,
    "NumBitCastInst": 18,
    "NumBrInst": 21,
    "NumCallInst": 21,
    "NumGetElementPtrInst": 11,
    "NumICmpInst": 7,
    "NumLShrInst": 0,
    "NumLoadInst": 77,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 7,
    "NumSExtInst": 1,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 61,
    "NumSubInst": 1,
    "NumTruncInst": 3,
    "NumXorInst": 3,
    "NumZExtInst": 2,
    "TotalBlocks": 28,
    "TotalInsts": 288,
    "TotalMemInst": 224,
    "TotalFuncs": 15,
    "ArgsPhi": 0,
    "testUnary": 156
  },
  "baseline_oz_instcount": 290,
  "knowledge_base_entry": [
    "--globalopt",
    "--instsimplify",
    "--licm",
    "--globalopt",
    "--aggressive-instcombine",
    "--globalopt",
    "--newgvn",
    "--load-store-vectorizer",
    "--aggressive-instcombine",
    "--sroa"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-idiom",
          "--redundant-dbg-inst-elim",
          "--globalopt",
          "--attributor",
          "--consthoist",
          "--loop-vectorize",
          "--aggressive-instcombine",
          "--coro-cleanup",
          "--loop-sink",
          "--slp-vectorizer",
          "--loop-data-prefetch",
          "--lower-guard-intrinsic",
          "--functionattrs",
          "--rewrite-statepoints-for-gc",
          "--div-rem-pairs",
          "--lowerinvoke",
          "--post-inline-ee-instrument",
          "--hotcoldsplit",
          "--loop-rotate",
          "--loop-unroll-and-jam",
          "--lower-matrix-intrinsics",
          "--loop-deletion",
          "--gvn",
          "--dse",
          "--dce",
          "--name-anon-globals",
          "--mldst-motion",
          "--early-cse-memssa"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-idiom",
      "--redundant-dbg-inst-elim",
      "--globalopt",
      "--attributor",
      "--consthoist",
      "--loop-vectorize",
      "--aggressive-instcombine",
      "--coro-cleanup",
      "--loop-sink",
      "--slp-vectorizer",
      "--loop-data-prefetch",
      "--lower-guard-intrinsic",
      "--functionattrs",
      "--rewrite-statepoints-for-gc",
      "--div-rem-pairs",
      "--lowerinvoke",
      "--post-inline-ee-instrument",
      "--hotcoldsplit",
      "--loop-rotate",
      "--loop-unroll-and-jam",
      "--lower-matrix-intrinsics",
      "--loop-deletion",
      "--gvn",
      "--dse",
      "--dce",
      "--name-anon-globals",
      "--mldst-motion",
      "--early-cse-memssa"
    ],
    "performance_vs_Oz": "+1.4%"
  }
}
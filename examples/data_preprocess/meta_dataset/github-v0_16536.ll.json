{
  "program_id": "github-v0_16536.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 58,
    "onePredOneSuc": 34,
    "onePredTwoSuc": 12,
    "oneSuccessor": 46,
    "twoPred": 21,
    "twoPredOneSuc": 4,
    "twoEach": 14,
    "twoSuccessor": 27,
    "morePreds": 0,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 97,
    "BeginPhi": 2,
    "BranchCount": 73,
    "returnInt": 29,
    "CriticalCount": 6,
    "NumEdges": 100,
    "const32Bit": 94,
    "const64Bit": 8,
    "numConstZeroes": 18,
    "numConstOnes": 77,
    "UncondBranches": 46,
    "binaryConstArg": 28,
    "NumAShrInst": 0,
    "NumAddInst": 14,
    "NumAllocaInst": 53,
    "NumAndInst": 0,
    "BlockMid": 11,
    "BlockLow": 88,
    "NumBitCastInst": 2,
    "NumBrInst": 73,
    "NumCallInst": 73,
    "NumGetElementPtrInst": 26,
    "NumICmpInst": 14,
    "NumLShrInst": 0,
    "NumLoadInst": 204,
    "NumMulInst": 2,
    "NumOrInst": 0,
    "NumPHIInst": 2,
    "NumRetInst": 20,
    "NumSExtInst": 22,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 97,
    "NumSubInst": 1,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 99,
    "TotalInsts": 664,
    "TotalMemInst": 453,
    "TotalFuncs": 32,
    "ArgsPhi": 4,
    "testUnary": 293
  },
  "baseline_oz_instcount": 664,
  "knowledge_base_entry": [
    "--mergefunc",
    "--lower-constant-intrinsics",
    "--newgvn",
    "--aggressive-instcombine",
    "--lower-expect",
    "--loop-simplifycfg",
    "--loop-deletion",
    "--sroa"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--ipconstprop",
          "--prune-eh",
          "--inline",
          "--loop-sink",
          "--simple-loop-unswitch",
          "--add-discriminators",
          "--partial-inliner",
          "--partially-inline-libcalls",
          "--guard-widening",
          "--loop-predication",
          "--loop-unswitch",
          "--consthoist",
          "--lower-guard-intrinsic",
          "--reassociate",
          "--mergefunc",
          "--instsimplify"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--ipconstprop",
      "--prune-eh",
      "--inline",
      "--loop-sink",
      "--simple-loop-unswitch",
      "--add-discriminators",
      "--partial-inliner",
      "--partially-inline-libcalls",
      "--guard-widening",
      "--loop-predication",
      "--loop-unswitch",
      "--consthoist",
      "--lower-guard-intrinsic",
      "--reassociate",
      "--mergefunc",
      "--instsimplify"
    ],
    "performance_vs_Oz": "+0.5%"
  }
}
{
  "program_id": "linux-v0_2340.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 10,
    "onePredOneSuc": 9,
    "onePredTwoSuc": 0,
    "oneSuccessor": 11,
    "twoPred": 0,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 0,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 18,
    "BeginPhi": 0,
    "BranchCount": 11,
    "returnInt": 5,
    "CriticalCount": 4,
    "NumEdges": 23,
    "const32Bit": 50,
    "const64Bit": 1,
    "numConstZeroes": 12,
    "numConstOnes": 16,
    "UncondBranches": 11,
    "binaryConstArg": 5,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 15,
    "NumAndInst": 2,
    "BlockMid": 3,
    "BlockLow": 15,
    "NumBitCastInst": 2,
    "NumBrInst": 11,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 8,
    "NumICmpInst": 1,
    "NumLShrInst": 0,
    "NumLoadInst": 27,
    "NumMulInst": 2,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 6,
    "NumSExtInst": 0,
    "NumSelectInst": 1,
    "NumShlInst": 2,
    "NumStoreInst": 27,
    "NumSubInst": 0,
    "NumTruncInst": 2,
    "NumXorInst": 1,
    "NumZExtInst": 9,
    "TotalBlocks": 18,
    "TotalInsts": 125,
    "TotalMemInst": 84,
    "TotalFuncs": 14,
    "ArgsPhi": 0,
    "testUnary": 55
  },
  "baseline_oz_instcount": 125,
  "knowledge_base_entry": [
    "--gvn",
    "--gvn",
    "--die",
    "--aggressive-instcombine",
    "--newgvn",
    "--instsimplify",
    "--load-store-vectorizer",
    "--reassociate"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--instnamer",
          "--consthoist",
          "--slp-vectorizer",
          "--adce",
          "--loop-versioning",
          "--cross-dso-cfi",
          "--loop-simplifycfg",
          "--always-inline",
          "--gvn",
          "--loop-interchange",
          "--strip-nondebug",
          "--tailcallelim",
          "--libcalls-shrinkwrap",
          "--infer-address-spaces",
          "--rpo-functionattrs",
          "--name-anon-globals",
          "--add-discriminators",
          "--hotcoldsplit",
          "--gvn-hoist",
          "--coro-elide",
          "--loop-deletion",
          "--loop-fusion",
          "--instcombine",
          "--mldst-motion",
          "--lowerinvoke",
          "--aggressive-instcombine",
          "--partially-inline-libcalls",
          "--prune-eh",
          "--strip-dead-prototypes",
          "--separate-const-offset-from-gep"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--instnamer",
      "--consthoist",
      "--slp-vectorizer",
      "--adce",
      "--loop-versioning",
      "--cross-dso-cfi",
      "--loop-simplifycfg",
      "--always-inline",
      "--gvn",
      "--loop-interchange",
      "--strip-nondebug",
      "--tailcallelim",
      "--libcalls-shrinkwrap",
      "--infer-address-spaces",
      "--rpo-functionattrs",
      "--name-anon-globals",
      "--add-discriminators",
      "--hotcoldsplit",
      "--gvn-hoist",
      "--coro-elide",
      "--loop-deletion",
      "--loop-fusion",
      "--instcombine",
      "--mldst-motion",
      "--lowerinvoke",
      "--aggressive-instcombine",
      "--partially-inline-libcalls",
      "--prune-eh",
      "--strip-dead-prototypes",
      "--separate-const-offset-from-gep"
    ],
    "performance_vs_Oz": "+1.6%"
  }
}
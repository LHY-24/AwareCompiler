{
  "program_id": "linux-v0_8712.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 39,
    "onePredOneSuc": 39,
    "onePredTwoSuc": 0,
    "oneSuccessor": 40,
    "twoPred": 10,
    "twoPredOneSuc": 1,
    "twoEach": 7,
    "twoSuccessor": 9,
    "morePreds": 5,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 63,
    "BeginPhi": 0,
    "BranchCount": 49,
    "returnInt": 2,
    "CriticalCount": 11,
    "NumEdges": 90,
    "const32Bit": 143,
    "const64Bit": 31,
    "numConstZeroes": 68,
    "numConstOnes": 50,
    "UncondBranches": 40,
    "binaryConstArg": 26,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 28,
    "NumAndInst": 9,
    "BlockMid": 4,
    "BlockLow": 59,
    "NumBitCastInst": 2,
    "NumBrInst": 49,
    "NumCallInst": 4,
    "NumGetElementPtrInst": 36,
    "NumICmpInst": 10,
    "NumLShrInst": 0,
    "NumLoadInst": 89,
    "NumMulInst": 2,
    "NumOrInst": 14,
    "NumPHIInst": 0,
    "NumRetInst": 9,
    "NumSExtInst": 1,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 74,
    "NumSubInst": 1,
    "NumTruncInst": 17,
    "NumXorInst": 0,
    "NumZExtInst": 30,
    "TotalBlocks": 63,
    "TotalInsts": 382,
    "TotalMemInst": 231,
    "TotalFuncs": 11,
    "ArgsPhi": 0,
    "testUnary": 167
  },
  "baseline_oz_instcount": 382,
  "knowledge_base_entry": [
    "--globalopt",
    "--instsimplify",
    "--aggressive-instcombine",
    "--gvn",
    "--elim-avail-extern",
    "--newgvn",
    "--flattencfg",
    "--mem2reg",
    "--early-cse",
    "--licm",
    "--dse",
    "--gvn-hoist",
    "--mldst-motion",
    "--slp-vectorizer",
    "--newgvn",
    "--sccp",
    "--early-cse"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--callsite-splitting",
          "--loop-reroll",
          "--loop-data-prefetch",
          "--early-cse",
          "--loop-load-elim",
          "--redundant-dbg-inst-elim",
          "--tailcallelim",
          "--lowerinvoke",
          "--lower-matrix-intrinsics",
          "--mldst-motion",
          "--lower-widenable-condition",
          "--add-discriminators",
          "--strip",
          "--irce",
          "--guard-widening",
          "--mem2reg",
          "--coro-cleanup",
          "--canonicalize-aliases",
          "--loop-guard-widening",
          "--barrier",
          "--loop-unswitch",
          "--slp-vectorizer",
          "--instcombine",
          "--flattencfg",
          "--inferattrs",
          "--aggressive-instcombine",
          "--partial-inliner"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+7.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--callsite-splitting",
      "--loop-reroll",
      "--loop-data-prefetch",
      "--early-cse",
      "--loop-load-elim",
      "--redundant-dbg-inst-elim",
      "--tailcallelim",
      "--lowerinvoke",
      "--lower-matrix-intrinsics",
      "--mldst-motion",
      "--lower-widenable-condition",
      "--add-discriminators",
      "--strip",
      "--irce",
      "--guard-widening",
      "--mem2reg",
      "--coro-cleanup",
      "--canonicalize-aliases",
      "--loop-guard-widening",
      "--barrier",
      "--loop-unswitch",
      "--slp-vectorizer",
      "--instcombine",
      "--flattencfg",
      "--inferattrs",
      "--aggressive-instcombine",
      "--partial-inliner"
    ],
    "performance_vs_Oz": "+7.3%"
  }
}
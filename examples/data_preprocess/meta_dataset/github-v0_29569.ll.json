{
  "program_id": "github-v0_29569.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 14,
    "onePredOneSuc": 9,
    "onePredTwoSuc": 2,
    "oneSuccessor": 12,
    "twoPred": 6,
    "twoPredOneSuc": 2,
    "twoEach": 4,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 23,
    "BeginPhi": 0,
    "BranchCount": 19,
    "returnInt": 4,
    "CriticalCount": 1,
    "NumEdges": 26,
    "const32Bit": 34,
    "const64Bit": 23,
    "numConstZeroes": 26,
    "numConstOnes": 23,
    "UncondBranches": 12,
    "binaryConstArg": 9,
    "NumAShrInst": 0,
    "NumAddInst": 10,
    "NumAllocaInst": 13,
    "NumAndInst": 0,
    "BlockMid": 3,
    "BlockLow": 20,
    "NumBitCastInst": 0,
    "NumBrInst": 19,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 14,
    "NumICmpInst": 7,
    "NumLShrInst": 0,
    "NumLoadInst": 28,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 18,
    "NumSubInst": 1,
    "NumTruncInst": 3,
    "NumXorInst": 0,
    "NumZExtInst": 5,
    "TotalBlocks": 23,
    "TotalInsts": 132,
    "TotalMemInst": 80,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 52
  },
  "baseline_oz_instcount": 132,
  "knowledge_base_entry": [
    "--loop-simplifycfg",
    "--globalopt",
    "--loweratomic",
    "--aggressive-instcombine",
    "--load-store-vectorizer",
    "--jump-threading",
    "--dce",
    "--reassociate",
    "--simplifycfg",
    "--ipsccp",
    "--simplifycfg",
    "--bdce",
    "--inline",
    "--early-cse-memssa",
    "--mem2reg",
    "--lower-expect"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--canonicalize-aliases",
          "--loop-predication",
          "--lower-guard-intrinsic",
          "--coro-elide",
          "--strip-debug-declare",
          "--div-rem-pairs",
          "--aggressive-instcombine",
          "--slsr",
          "--sancov",
          "--correlated-propagation",
          "--libcalls-shrinkwrap",
          "--loop-rotate",
          "-loop-reduce",
          "--dse",
          "--early-cse",
          "--globalopt",
          "--loop-sink",
          "--simplifycfg",
          "--consthoist",
          "--lower-constant-intrinsics",
          "--instsimplify",
          "--sink"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.0%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--canonicalize-aliases",
      "--loop-predication",
      "--lower-guard-intrinsic",
      "--coro-elide",
      "--strip-debug-declare",
      "--div-rem-pairs",
      "--aggressive-instcombine",
      "--slsr",
      "--sancov",
      "--correlated-propagation",
      "--libcalls-shrinkwrap",
      "--loop-rotate",
      "-loop-reduce",
      "--dse",
      "--early-cse",
      "--globalopt",
      "--loop-sink",
      "--simplifycfg",
      "--consthoist",
      "--lower-constant-intrinsics",
      "--instsimplify",
      "--sink"
    ],
    "performance_vs_Oz": "+3.0%"
  }
}
{
  "program_id": "poj104-v1_101_222.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 29,
    "onePredOneSuc": 22,
    "onePredTwoSuc": 7,
    "oneSuccessor": 26,
    "twoPred": 13,
    "twoPredOneSuc": 1,
    "twoEach": 11,
    "twoSuccessor": 18,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 48,
    "BeginPhi": 0,
    "BranchCount": 44,
    "returnInt": 1,
    "CriticalCount": 14,
    "NumEdges": 62,
    "const32Bit": 43,
    "const64Bit": 80,
    "numConstZeroes": 65,
    "numConstOnes": 30,
    "UncondBranches": 26,
    "binaryConstArg": 9,
    "NumAShrInst": 0,
    "NumAddInst": 12,
    "NumAllocaInst": 10,
    "NumAndInst": 0,
    "BlockMid": 2,
    "BlockLow": 46,
    "NumBitCastInst": 12,
    "NumBrInst": 44,
    "NumCallInst": 17,
    "NumGetElementPtrInst": 43,
    "NumICmpInst": 24,
    "NumLShrInst": 0,
    "NumLoadInst": 70,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 4,
    "NumSExtInst": 19,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 29,
    "NumSubInst": 0,
    "NumTruncInst": 1,
    "NumXorInst": 0,
    "NumZExtInst": 6,
    "TotalBlocks": 48,
    "TotalInsts": 291,
    "TotalMemInst": 169,
    "TotalFuncs": 10,
    "ArgsPhi": 0,
    "testUnary": 118
  },
  "baseline_oz_instcount": 170,
  "knowledge_base_entry": [
    "--flattencfg",
    "--instcombine",
    "--lower-expect",
    "--aggressive-instcombine",
    "--loop-rotate",
    "--newgvn",
    "--correlated-propagation",
    "--adce",
    "--mergefunc",
    "--loop-simplifycfg",
    "--sroa",
    "--adce",
    "--slp-vectorizer",
    "--slsr",
    "--loop-reroll",
    "--sroa",
    "--newgvn",
    "--instsimplify",
    "--early-cse",
    "--elim-avail-extern",
    "--gvn",
    "--slp-vectorizer",
    "--bdce",
    "--gvn-hoist",
    "--newgvn",
    "--lower-expect",
    "--adce",
    "--ipsccp",
    "--gvn",
    "--reassociate",
    "--die",
    "--aggressive-instcombine",
    "--newgvn",
    "--mldst-motion",
    "--mem2reg",
    "--instcombine",
    "--early-cse-memssa",
    "--nary-reassociate",
    "--jump-threading",
    "--loop-rotate",
    "--newgvn",
    "--slsr",
    "--gvn-hoist",
    "--adce",
    "--slp-vectorizer",
    "--correlated-propagation",
    "--lower-expect",
    "--reassociate",
    "--correlated-propagation",
    "--bdce",
    "--loop-instsimplify",
    "--elim-avail-extern",
    "--instsimplify",
    "--licm",
    "--prune-eh",
    "--instcombine",
    "--lower-expect",
    "--sroa",
    "--gvn",
    "--loop-rotate",
    "--inline",
    "--ipsccp",
    "--jump-threading",
    "--bdce",
    "--load-store-vectorizer",
    "--die",
    "--loop-instsimplify",
    "--jump-threading",
    "--prune-eh",
    "--instcombine",
    "--lower-expect",
    "--sroa",
    "--indvars",
    "--jump-threading",
    "--correlated-propagation",
    "--early-cse-memssa",
    "--early-cse",
    "--elim-avail-extern",
    "--gvn-hoist",
    "--newgvn",
    "--lower-expect",
    "--adce",
    "--ipsccp",
    "--gvn",
    "--reassociate",
    "--die",
    "--aggressive-instcombine",
    "--newgvn",
    "--mldst-motion",
    "--mem2reg",
    "--instcombine",
    "--early-cse-memssa",
    "--nary-reassociate",
    "--jump-threading",
    "--loop-rotate",
    "--newgvn",
    "--slsr",
    "--gvn-hoist",
    "--adce",
    "--slp-vectorizer",
    "--correlated-propagation",
    "--lower-expect",
    "--reassociate",
    "--correlated-propagation",
    "--bdce",
    "--loop-instsimplify",
    "--elim-avail-extern",
    "--instsimplify",
    "--licm",
    "--prune-eh",
    "--instcombine",
    "--lower-expect",
    "--sroa",
    "--gvn",
    "--loop-rotate",
    "--inline",
    "--ipsccp",
    "--jump-threading",
    "--bdce",
    "--load-store-vectorizer",
    "--die",
    "--loop-instsimplify",
    "--jump-threading",
    "--prune-eh",
    "--instcombine",
    "--lower-expect",
    "--sroa",
    "--indvars",
    "--jump-threading",
    "--correlated-propagation",
    "--early-cse-memssa",
    "--early-cse",
    "--jump-threading",
    "--gvn",
    "--aggressive-instcombine",
    "--gvn",
    "--dce",
    "--gvn-hoist",
    "--loop-rotate",
    "--inline",
    "--mem2reg",
    "--ipsccp",
    "--gvn-hoist",
    "--aggressive-instcombine",
    "--jump-threading",
    "--early-cse",
    "--slsr",
    "--simplifycfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--coro-early",
          "--loop-distribute",
          "--early-cse-memssa",
          "--functionattrs",
          "--sccp",
          "--ipsccp",
          "--tailcallelim",
          "--pgo-memop-opt",
          "--loop-versioning",
          "--instcombine",
          "--mergeicmps",
          "--loop-versioning-licm",
          "--name-anon-globals",
          "--scalarizer",
          "--constmerge",
          "--adce",
          "--loop-interchange",
          "--ipconstprop",
          "--sroa",
          "--inject-tli-mappings",
          "--simple-loop-unswitch",
          "--mem2reg",
          "--reassociate",
          "--newgvn",
          "--loop-rotate",
          "--jump-threading"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+15.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--coro-early",
      "--loop-distribute",
      "--early-cse-memssa",
      "--functionattrs",
      "--sccp",
      "--ipsccp",
      "--tailcallelim",
      "--pgo-memop-opt",
      "--loop-versioning",
      "--instcombine",
      "--mergeicmps",
      "--loop-versioning-licm",
      "--name-anon-globals",
      "--scalarizer",
      "--constmerge",
      "--adce",
      "--loop-interchange",
      "--ipconstprop",
      "--sroa",
      "--inject-tli-mappings",
      "--simple-loop-unswitch",
      "--mem2reg",
      "--reassociate",
      "--newgvn",
      "--loop-rotate",
      "--jump-threading"
    ],
    "performance_vs_Oz": "+15.3%"
  }
}
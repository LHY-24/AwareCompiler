{
  "program_id": "linux-v0_1459.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 66,
    "onePredOneSuc": 47,
    "onePredTwoSuc": 15,
    "oneSuccessor": 59,
    "twoPred": 14,
    "twoPredOneSuc": 7,
    "twoEach": 5,
    "twoSuccessor": 26,
    "morePreds": 10,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 106,
    "BeginPhi": 2,
    "BranchCount": 85,
    "returnInt": 21,
    "CriticalCount": 6,
    "NumEdges": 127,
    "const32Bit": 264,
    "const64Bit": 27,
    "numConstZeroes": 101,
    "numConstOnes": 100,
    "UncondBranches": 59,
    "binaryConstArg": 23,
    "NumAShrInst": 1,
    "NumAddInst": 9,
    "NumAllocaInst": 83,
    "NumAndInst": 4,
    "BlockMid": 13,
    "BlockLow": 95,
    "NumBitCastInst": 8,
    "NumBrInst": 85,
    "NumCallInst": 50,
    "NumGetElementPtrInst": 63,
    "NumICmpInst": 30,
    "NumLShrInst": 0,
    "NumLoadInst": 222,
    "NumMulInst": 1,
    "NumOrInst": 8,
    "NumPHIInst": 2,
    "NumRetInst": 18,
    "NumSExtInst": 4,
    "NumSelectInst": 0,
    "NumShlInst": 3,
    "NumStoreInst": 138,
    "NumSubInst": 3,
    "NumTruncInst": 9,
    "NumXorInst": 0,
    "NumZExtInst": 17,
    "TotalBlocks": 108,
    "TotalInsts": 772,
    "TotalMemInst": 556,
    "TotalFuncs": 32,
    "ArgsPhi": 4,
    "testUnary": 343
  },
  "baseline_oz_instcount": 773,
  "knowledge_base_entry": [
    "--loop-unroll-and-jam",
    "--early-cse-memssa",
    "--flattencfg",
    "--aggressive-instcombine",
    "--early-cse-memssa",
    "--instcombine",
    "--load-store-vectorizer",
    "--inline",
    "--nary-reassociate",
    "--sroa",
    "--slp-vectorizer",
    "--early-cse-memssa",
    "--flattencfg",
    "--aggressive-instcombine",
    "--ipsccp",
    "--die",
    "--early-cse",
    "--jump-threading",
    "--mem2reg",
    "--aggressive-instcombine",
    "--early-cse-memssa",
    "--instcombine",
    "--load-store-vectorizer",
    "--adce",
    "--ipsccp",
    "--correlated-propagation"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-deletion",
          "--functionattrs",
          "--nary-reassociate",
          "--canonicalize-aliases",
          "--tailcallelim",
          "--loop-guard-widening",
          "--aggressive-instcombine",
          "--ee-instrument",
          "--ipsccp",
          "--loop-interchange",
          "--loop-instsimplify",
          "--globaldce",
          "--argpromotion",
          "--irce",
          "--loop-sink",
          "--hotcoldsplit",
          "--memcpyopt",
          "--simplifycfg",
          "--elim-avail-extern",
          "--barrier"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.0%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-deletion",
      "--functionattrs",
      "--nary-reassociate",
      "--canonicalize-aliases",
      "--tailcallelim",
      "--loop-guard-widening",
      "--aggressive-instcombine",
      "--ee-instrument",
      "--ipsccp",
      "--loop-interchange",
      "--loop-instsimplify",
      "--globaldce",
      "--argpromotion",
      "--irce",
      "--loop-sink",
      "--hotcoldsplit",
      "--memcpyopt",
      "--simplifycfg",
      "--elim-avail-extern",
      "--barrier"
    ],
    "performance_vs_Oz": "+1.0%"
  }
}
{
  "program_id": "github-v0_7981.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 15,
    "onePredOneSuc": 10,
    "onePredTwoSuc": 2,
    "oneSuccessor": 13,
    "twoPred": 6,
    "twoPredOneSuc": 2,
    "twoEach": 4,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 24,
    "BeginPhi": 0,
    "BranchCount": 20,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 27,
    "const32Bit": 38,
    "const64Bit": 31,
    "numConstZeroes": 30,
    "numConstOnes": 28,
    "UncondBranches": 13,
    "binaryConstArg": 14,
    "NumAShrInst": 0,
    "NumAddInst": 5,
    "NumAllocaInst": 14,
    "NumAndInst": 3,
    "BlockMid": 5,
    "BlockLow": 19,
    "NumBitCastInst": 4,
    "NumBrInst": 20,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 24,
    "NumICmpInst": 7,
    "NumLShrInst": 3,
    "NumLoadInst": 41,
    "NumMulInst": 0,
    "NumOrInst": 3,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 21,
    "NumSubInst": 0,
    "NumTruncInst": 6,
    "NumXorInst": 0,
    "NumZExtInst": 12,
    "TotalBlocks": 24,
    "TotalInsts": 179,
    "TotalMemInst": 107,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 80
  },
  "baseline_oz_instcount": 179,
  "knowledge_base_entry": [
    "--aggressive-instcombine",
    "--flattencfg",
    "--jump-threading",
    "--prune-eh",
    "--lower-expect",
    "--simplifycfg",
    "--globalopt",
    "--ipsccp",
    "--nary-reassociate"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--memcpyopt",
          "--lower-constant-intrinsics",
          "--slsr",
          "--lower-expect",
          "--loop-versioning-licm",
          "--adce",
          "--coro-split",
          "--correlated-propagation",
          "--globaldce",
          "--gvn",
          "--aggressive-instcombine",
          "--guard-widening",
          "--loop-load-elim",
          "--insert-gcov-profiling",
          "--sroa",
          "--load-store-vectorizer",
          "--loop-deletion",
          "--strip-dead-prototypes",
          "--simple-loop-unswitch",
          "--consthoist",
          "--early-cse-memssa",
          "--lower-matrix-intrinsics",
          "--loop-predication",
          "--simplifycfg"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+4.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--memcpyopt",
      "--lower-constant-intrinsics",
      "--slsr",
      "--lower-expect",
      "--loop-versioning-licm",
      "--adce",
      "--coro-split",
      "--correlated-propagation",
      "--globaldce",
      "--gvn",
      "--aggressive-instcombine",
      "--guard-widening",
      "--loop-load-elim",
      "--insert-gcov-profiling",
      "--sroa",
      "--load-store-vectorizer",
      "--loop-deletion",
      "--strip-dead-prototypes",
      "--simple-loop-unswitch",
      "--consthoist",
      "--early-cse-memssa",
      "--lower-matrix-intrinsics",
      "--loop-predication",
      "--simplifycfg"
    ],
    "performance_vs_Oz": "+4.5%"
  }
}
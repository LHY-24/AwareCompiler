{
  "program_id": "github-v0_35989.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 0,
    "onePredOneSuc": 0,
    "onePredTwoSuc": 0,
    "oneSuccessor": 0,
    "twoPred": 0,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 0,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 3,
    "BeginPhi": 0,
    "BranchCount": 0,
    "returnInt": 0,
    "CriticalCount": 0,
    "NumEdges": 0,
    "const32Bit": 6,
    "const64Bit": 0,
    "numConstZeroes": 0,
    "numConstOnes": 6,
    "UncondBranches": 0,
    "binaryConstArg": 0,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 6,
    "NumAndInst": 0,
    "BlockMid": 0,
    "BlockLow": 3,
    "NumBitCastInst": 0,
    "NumBrInst": 0,
    "NumCallInst": 0,
    "NumGetElementPtrInst": 0,
    "NumICmpInst": 0,
    "NumLShrInst": 0,
    "NumLoadInst": 0,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 6,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 3,
    "TotalInsts": 15,
    "TotalMemInst": 12,
    "TotalFuncs": 3,
    "ArgsPhi": 0,
    "testUnary": 6
  },
  "baseline_oz_instcount": 15,
  "knowledge_base_entry": [
    "--ipconstprop",
    "--aggressive-instcombine",
    "--load-store-vectorizer",
    "--jump-threading",
    "--mergefunc",
    "--loop-reroll",
    "--newgvn",
    "--inline",
    "--adce",
    "--die",
    "--lower-constant-intrinsics",
    "--memcpyopt",
    "--mem2reg",
    "--sccp",
    "--loop-instsimplify",
    "--dse",
    "--correlated-propagation",
    "--jump-threading",
    "--gvn",
    "--reassociate",
    "--gvn-hoist",
    "--aggressive-instcombine"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--name-anon-globals",
          "--loop-simplifycfg",
          "--redundant-dbg-inst-elim",
          "--strip-debug-declare",
          "--ee-instrument",
          "--sccp",
          "--barrier",
          "--memcpyopt",
          "--lcssa",
          "--cross-dso-cfi",
          "-loop-reduce",
          "--dse",
          "--simplifycfg",
          "--functionattrs",
          "--mergefunc",
          "--gvn",
          "--break-crit-edges",
          "--aggressive-instcombine",
          "--load-store-vectorizer",
          "--loop-guard-widening",
          "--loop-load-elim",
          "--sroa",
          "--lower-constant-intrinsics",
          "--loop-rotate",
          "--insert-gcov-profiling"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+20.0%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--name-anon-globals",
      "--loop-simplifycfg",
      "--redundant-dbg-inst-elim",
      "--strip-debug-declare",
      "--ee-instrument",
      "--sccp",
      "--barrier",
      "--memcpyopt",
      "--lcssa",
      "--cross-dso-cfi",
      "-loop-reduce",
      "--dse",
      "--simplifycfg",
      "--functionattrs",
      "--mergefunc",
      "--gvn",
      "--break-crit-edges",
      "--aggressive-instcombine",
      "--load-store-vectorizer",
      "--loop-guard-widening",
      "--loop-load-elim",
      "--sroa",
      "--lower-constant-intrinsics",
      "--loop-rotate",
      "--insert-gcov-profiling"
    ],
    "performance_vs_Oz": "+20.0%"
  }
}
{
  "program_id": "linux-v0_12580.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 35,
    "onePredOneSuc": 25,
    "onePredTwoSuc": 7,
    "oneSuccessor": 34,
    "twoPred": 8,
    "twoPredOneSuc": 7,
    "twoEach": 0,
    "twoSuccessor": 9,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 57,
    "BeginPhi": 0,
    "BranchCount": 42,
    "returnInt": 10,
    "CriticalCount": 5,
    "NumEdges": 55,
    "const32Bit": 62,
    "const64Bit": 11,
    "numConstZeroes": 18,
    "numConstOnes": 42,
    "UncondBranches": 34,
    "binaryConstArg": 4,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 28,
    "NumAndInst": 0,
    "BlockMid": 3,
    "BlockLow": 54,
    "NumBitCastInst": 9,
    "NumBrInst": 42,
    "NumCallInst": 19,
    "NumGetElementPtrInst": 12,
    "NumICmpInst": 8,
    "NumLShrInst": 0,
    "NumLoadInst": 47,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 13,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 35,
    "NumSubInst": 0,
    "NumTruncInst": 1,
    "NumXorInst": 4,
    "NumZExtInst": 12,
    "TotalBlocks": 57,
    "TotalInsts": 234,
    "TotalMemInst": 141,
    "TotalFuncs": 15,
    "ArgsPhi": 0,
    "testUnary": 99
  },
  "baseline_oz_instcount": 229,
  "knowledge_base_entry": [
    "--memcpyopt",
    "--lower-constant-intrinsics",
    "--loop-reroll",
    "--newgvn",
    "--jump-threading",
    "--correlated-propagation",
    "--gvn",
    "--licm",
    "--licm",
    "--ipsccp",
    "--inline",
    "--ipsccp",
    "--globaldce",
    "--aggressive-instcombine",
    "--gvn",
    "--lower-constant-intrinsics",
    "--ipsccp",
    "--lower-expect",
    "--adce",
    "--gvn-hoist",
    "--loop-simplifycfg",
    "--adce",
    "--early-cse-memssa",
    "--loop-instsimplify",
    "--simplifycfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--div-rem-pairs",
          "--indvars",
          "--adce",
          "--loop-rotate",
          "--strip-debug-declare",
          "--loop-unswitch",
          "--jump-threading",
          "--lowerinvoke",
          "--loop-reroll",
          "--strip-dead-prototypes",
          "--sccp",
          "--ipsccp"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--div-rem-pairs",
      "--indvars",
      "--adce",
      "--loop-rotate",
      "--strip-debug-declare",
      "--loop-unswitch",
      "--jump-threading",
      "--lowerinvoke",
      "--loop-reroll",
      "--strip-dead-prototypes",
      "--sccp",
      "--ipsccp"
    ],
    "performance_vs_Oz": "+0.4%"
  }
}
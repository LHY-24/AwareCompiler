{
  "program_id": "github-v0_4582.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 15,
    "onePredOneSuc": 12,
    "onePredTwoSuc": 3,
    "oneSuccessor": 14,
    "twoPred": 6,
    "twoPredOneSuc": 1,
    "twoEach": 4,
    "twoSuccessor": 8,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 24,
    "BeginPhi": 0,
    "BranchCount": 22,
    "returnInt": 9,
    "CriticalCount": 3,
    "NumEdges": 30,
    "const32Bit": 64,
    "const64Bit": 10,
    "numConstZeroes": 45,
    "numConstOnes": 23,
    "UncondBranches": 14,
    "binaryConstArg": 6,
    "NumAShrInst": 0,
    "NumAddInst": 5,
    "NumAllocaInst": 15,
    "NumAndInst": 0,
    "BlockMid": 3,
    "BlockLow": 21,
    "NumBitCastInst": 0,
    "NumBrInst": 22,
    "NumCallInst": 15,
    "NumGetElementPtrInst": 22,
    "NumICmpInst": 8,
    "NumLShrInst": 0,
    "NumLoadInst": 19,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 2,
    "NumSExtInst": 10,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 16,
    "NumSubInst": 1,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 24,
    "TotalInsts": 137,
    "TotalMemInst": 87,
    "TotalFuncs": 12,
    "ArgsPhi": 0,
    "testUnary": 46
  },
  "baseline_oz_instcount": 139,
  "knowledge_base_entry": [
    "--instcombine",
    "--inline",
    "--reassociate",
    "--aggressive-instcombine",
    "--elim-avail-extern",
    "--globalopt",
    "--inline",
    "--reassociate",
    "--aggressive-instcombine",
    "--early-cse",
    "--mem2reg",
    "--aggressive-instcombine",
    "--instsimplify",
    "--dce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--licm",
          "--loop-unroll",
          "--deadargelim",
          "--sancov",
          "--sink",
          "--aggressive-instcombine",
          "--mergeicmps",
          "--gvn",
          "--dce",
          "--loop-fusion",
          "--irce",
          "--loop-rotate",
          "-loop-reduce"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--licm",
      "--loop-unroll",
      "--deadargelim",
      "--sancov",
      "--sink",
      "--aggressive-instcombine",
      "--mergeicmps",
      "--gvn",
      "--dce",
      "--loop-fusion",
      "--irce",
      "--loop-rotate",
      "-loop-reduce"
    ],
    "performance_vs_Oz": "+2.9%"
  }
}
{
  "program_id": "linux-v0_11967.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 20,
    "onePredOneSuc": 11,
    "onePredTwoSuc": 9,
    "oneSuccessor": 15,
    "twoPred": 6,
    "twoPredOneSuc": 4,
    "twoEach": 1,
    "twoSuccessor": 15,
    "morePreds": 4,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 39,
    "BeginPhi": 1,
    "BranchCount": 29,
    "returnInt": 4,
    "CriticalCount": 10,
    "NumEdges": 45,
    "const32Bit": 86,
    "const64Bit": 11,
    "numConstZeroes": 42,
    "numConstOnes": 28,
    "UncondBranches": 15,
    "binaryConstArg": 7,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 22,
    "NumAndInst": 4,
    "BlockMid": 4,
    "BlockLow": 36,
    "NumBitCastInst": 1,
    "NumBrInst": 29,
    "NumCallInst": 16,
    "NumGetElementPtrInst": 28,
    "NumICmpInst": 13,
    "NumLShrInst": 2,
    "NumLoadInst": 64,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 1,
    "NumRetInst": 10,
    "NumSExtInst": 9,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 33,
    "NumSubInst": 0,
    "NumTruncInst": 1,
    "NumXorInst": 0,
    "NumZExtInst": 5,
    "TotalBlocks": 40,
    "TotalInsts": 241,
    "TotalMemInst": 163,
    "TotalFuncs": 19,
    "ArgsPhi": 2,
    "testUnary": 103
  },
  "baseline_oz_instcount": 242,
  "knowledge_base_entry": [
    "--nary-reassociate",
    "--lower-constant-intrinsics",
    "--simplifycfg",
    "--loop-reroll",
    "--early-cse",
    "--sroa",
    "--jump-threading",
    "--aggressive-instcombine",
    "--dce",
    "--ipsccp",
    "--aggressive-instcombine",
    "--mem2reg",
    "--gvn-hoist"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--newgvn",
          "--coro-cleanup",
          "--lower-constant-intrinsics",
          "--loop-idiom",
          "--div-rem-pairs",
          "--sccp",
          "--instsimplify",
          "--aggressive-instcombine",
          "--ipsccp",
          "-loop-reduce"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--newgvn",
      "--coro-cleanup",
      "--lower-constant-intrinsics",
      "--loop-idiom",
      "--div-rem-pairs",
      "--sccp",
      "--instsimplify",
      "--aggressive-instcombine",
      "--ipsccp",
      "-loop-reduce"
    ],
    "performance_vs_Oz": "+1.2%"
  }
}
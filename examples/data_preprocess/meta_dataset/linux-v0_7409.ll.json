{
  "program_id": "linux-v0_7409.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 37,
    "onePredOneSuc": 28,
    "onePredTwoSuc": 9,
    "oneSuccessor": 30,
    "twoPred": 9,
    "twoPredOneSuc": 2,
    "twoEach": 2,
    "twoSuccessor": 17,
    "morePreds": 1,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 64,
    "BeginPhi": 2,
    "BranchCount": 46,
    "returnInt": 14,
    "CriticalCount": 1,
    "NumEdges": 64,
    "const32Bit": 167,
    "const64Bit": 4,
    "numConstZeroes": 74,
    "numConstOnes": 49,
    "UncondBranches": 30,
    "binaryConstArg": 3,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 42,
    "NumAndInst": 1,
    "BlockMid": 7,
    "BlockLow": 59,
    "NumBitCastInst": 14,
    "NumBrInst": 46,
    "NumCallInst": 42,
    "NumGetElementPtrInst": 54,
    "NumICmpInst": 17,
    "NumLShrInst": 0,
    "NumLoadInst": 122,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 2,
    "NumRetInst": 19,
    "NumSExtInst": 1,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 61,
    "NumSubInst": 0,
    "NumTruncInst": 4,
    "NumXorInst": 2,
    "NumZExtInst": 6,
    "TotalBlocks": 66,
    "TotalInsts": 440,
    "TotalMemInst": 321,
    "TotalFuncs": 35,
    "ArgsPhi": 4,
    "testUnary": 194
  },
  "baseline_oz_instcount": 440,
  "knowledge_base_entry": [
    "--strip-nondebug",
    "--mergefunc",
    "--dse",
    "--dse",
    "--ipsccp",
    "--lower-constant-intrinsics",
    "--gvn-hoist",
    "--instcombine",
    "--reassociate",
    "--instsimplify",
    "--simplifycfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--speculative-execution",
          "--early-cse-memssa",
          "--loop-fusion",
          "--lower-guard-intrinsic",
          "--mergereturn",
          "--load-store-vectorizer",
          "--ipsccp",
          "--mergefunc",
          "--rpo-functionattrs",
          "--strip-nondebug",
          "--deadargelim",
          "--scalarizer",
          "--loop-idiom",
          "--inline",
          "--coro-cleanup",
          "--inferattrs"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--speculative-execution",
      "--early-cse-memssa",
      "--loop-fusion",
      "--lower-guard-intrinsic",
      "--mergereturn",
      "--load-store-vectorizer",
      "--ipsccp",
      "--mergefunc",
      "--rpo-functionattrs",
      "--strip-nondebug",
      "--deadargelim",
      "--scalarizer",
      "--loop-idiom",
      "--inline",
      "--coro-cleanup",
      "--inferattrs"
    ],
    "performance_vs_Oz": "+0.2%"
  }
}
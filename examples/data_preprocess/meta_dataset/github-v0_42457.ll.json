{
  "program_id": "github-v0_42457.ll",
  "autophase_features": {
    "BBNumArgsHi": 2,
    "BBNumArgsLo": 0,
    "onePred": 2,
    "onePredOneSuc": 1,
    "onePredTwoSuc": 0,
    "oneSuccessor": 2,
    "twoPred": 2,
    "twoPredOneSuc": 0,
    "twoEach": 2,
    "twoSuccessor": 2,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 2,
    "BBNoPhi": 4,
    "BeginPhi": 2,
    "BranchCount": 4,
    "returnInt": 8,
    "CriticalCount": 2,
    "NumEdges": 6,
    "const32Bit": 113,
    "const64Bit": 26,
    "numConstZeroes": 18,
    "numConstOnes": 30,
    "UncondBranches": 2,
    "binaryConstArg": 129,
    "NumAShrInst": 0,
    "NumAddInst": 24,
    "NumAllocaInst": 0,
    "NumAndInst": 0,
    "BlockMid": 6,
    "BlockLow": 0,
    "NumBitCastInst": 0,
    "NumBrInst": 4,
    "NumCallInst": 120,
    "NumGetElementPtrInst": 51,
    "NumICmpInst": 2,
    "NumLShrInst": 0,
    "NumLoadInst": 40,
    "NumMulInst": 10,
    "NumOrInst": 38,
    "NumPHIInst": 10,
    "NumRetInst": 2,
    "NumSExtInst": 51,
    "NumSelectInst": 2,
    "NumShlInst": 48,
    "NumStoreInst": 11,
    "NumSubInst": 8,
    "NumTruncInst": 3,
    "NumXorInst": 0,
    "NumZExtInst": 8,
    "TotalBlocks": 6,
    "TotalInsts": 617,
    "TotalMemInst": 222,
    "TotalFuncs": 11,
    "ArgsPhi": 20,
    "testUnary": 184
  },
  "baseline_oz_instcount": 617,
  "knowledge_base_entry": [
    "--strip-nondebug",
    "--mergefunc",
    "--mergefunc",
    "--globalopt",
    "--ipsccp",
    "--sroa",
    "--newgvn",
    "--inline",
    "--simplifycfg",
    "--slp-vectorizer",
    "--lower-constant-intrinsics",
    "--instcombine",
    "--licm",
    "--instcombine",
    "--newgvn",
    "--elim-avail-extern",
    "--mldst-motion",
    "--elim-avail-extern",
    "--nary-reassociate",
    "--gvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--cross-dso-cfi",
          "--loop-versioning-licm",
          "--loop-vectorize",
          "--rpo-functionattrs",
          "--loop-versioning",
          "--loop-distribute",
          "--flattencfg",
          "--reg2mem",
          "--slp-vectorizer",
          "--partially-inline-libcalls",
          "--sroa",
          "--gvn"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--cross-dso-cfi",
      "--loop-versioning-licm",
      "--loop-vectorize",
      "--rpo-functionattrs",
      "--loop-versioning",
      "--loop-distribute",
      "--flattencfg",
      "--reg2mem",
      "--slp-vectorizer",
      "--partially-inline-libcalls",
      "--sroa",
      "--gvn"
    ],
    "performance_vs_Oz": "+0.8%"
  }
}
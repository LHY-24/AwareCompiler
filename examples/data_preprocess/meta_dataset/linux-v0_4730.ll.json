{
  "program_id": "linux-v0_4730.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 5,
    "onePred": 100,
    "onePredOneSuc": 67,
    "onePredTwoSuc": 31,
    "oneSuccessor": 80,
    "twoPred": 25,
    "twoPredOneSuc": 10,
    "twoEach": 13,
    "twoSuccessor": 51,
    "morePreds": 6,
    "BB03Phi": 5,
    "BBHiPhi": 0,
    "BBNoPhi": 145,
    "BeginPhi": 5,
    "BranchCount": 131,
    "returnInt": 35,
    "CriticalCount": 10,
    "NumEdges": 182,
    "const32Bit": 284,
    "const64Bit": 20,
    "numConstZeroes": 106,
    "numConstOnes": 91,
    "UncondBranches": 80,
    "binaryConstArg": 41,
    "NumAShrInst": 6,
    "NumAddInst": 20,
    "NumAllocaInst": 62,
    "NumAndInst": 12,
    "BlockMid": 11,
    "BlockLow": 139,
    "NumBitCastInst": 8,
    "NumBrInst": 131,
    "NumCallInst": 73,
    "NumGetElementPtrInst": 48,
    "NumICmpInst": 54,
    "NumLShrInst": 0,
    "NumLoadInst": 152,
    "NumMulInst": 4,
    "NumOrInst": 1,
    "NumPHIInst": 5,
    "NumRetInst": 19,
    "NumSExtInst": 20,
    "NumSelectInst": 1,
    "NumShlInst": 1,
    "NumStoreInst": 103,
    "NumSubInst": 1,
    "NumTruncInst": 9,
    "NumXorInst": 0,
    "NumZExtInst": 24,
    "TotalBlocks": 150,
    "TotalInsts": 757,
    "TotalMemInst": 438,
    "TotalFuncs": 27,
    "ArgsPhi": 10,
    "testUnary": 276
  },
  "baseline_oz_instcount": 757,
  "knowledge_base_entry": [
    "--globaldce",
    "--aggressive-instcombine",
    "--loop-instsimplify",
    "--mergefunc",
    "--simplifycfg",
    "--loop-instsimplify",
    "--licm",
    "--instcombine",
    "--jump-threading",
    "--loop-simplifycfg",
    "--lower-expect",
    "--lower-constant-intrinsics",
    "--instcombine",
    "--globalopt",
    "--loop-simplifycfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--die",
          "--deadargelim",
          "--coro-cleanup",
          "--aggressive-instcombine",
          "--consthoist",
          "--mergefunc",
          "--flattencfg",
          "--prune-eh",
          "--loop-simplify",
          "--lcssa",
          "--called-value-propagation",
          "--coro-split",
          "--pgo-memop-opt",
          "--mergereturn",
          "--coro-early",
          "--mergeicmps",
          "--constprop",
          "--strip-debug-declare",
          "--partial-inliner",
          "--loop-idiom",
          "--strip-nondebug"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--die",
      "--deadargelim",
      "--coro-cleanup",
      "--aggressive-instcombine",
      "--consthoist",
      "--mergefunc",
      "--flattencfg",
      "--prune-eh",
      "--loop-simplify",
      "--lcssa",
      "--called-value-propagation",
      "--coro-split",
      "--pgo-memop-opt",
      "--mergereturn",
      "--coro-early",
      "--mergeicmps",
      "--constprop",
      "--strip-debug-declare",
      "--partial-inliner",
      "--loop-idiom",
      "--strip-nondebug"
    ],
    "performance_vs_Oz": "+0.7%"
  }
}
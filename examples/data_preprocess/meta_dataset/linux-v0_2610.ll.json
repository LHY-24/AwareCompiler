{
  "program_id": "linux-v0_2610.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 15,
    "onePredOneSuc": 9,
    "onePredTwoSuc": 6,
    "oneSuccessor": 11,
    "twoPred": 3,
    "twoPredOneSuc": 2,
    "twoEach": 1,
    "twoSuccessor": 8,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 28,
    "BeginPhi": 0,
    "BranchCount": 19,
    "returnInt": 3,
    "CriticalCount": 1,
    "NumEdges": 27,
    "const32Bit": 90,
    "const64Bit": 5,
    "numConstZeroes": 48,
    "numConstOnes": 25,
    "UncondBranches": 11,
    "binaryConstArg": 4,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 20,
    "NumAndInst": 0,
    "BlockMid": 2,
    "BlockLow": 26,
    "NumBitCastInst": 8,
    "NumBrInst": 19,
    "NumCallInst": 15,
    "NumGetElementPtrInst": 31,
    "NumICmpInst": 9,
    "NumLShrInst": 0,
    "NumLoadInst": 49,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 9,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 32,
    "NumSubInst": 0,
    "NumTruncInst": 1,
    "NumXorInst": 2,
    "NumZExtInst": 1,
    "TotalBlocks": 28,
    "TotalInsts": 204,
    "TotalMemInst": 147,
    "TotalFuncs": 16,
    "ArgsPhi": 0,
    "testUnary": 85
  },
  "baseline_oz_instcount": 205,
  "knowledge_base_entry": [
    "--nary-reassociate",
    "--elim-avail-extern",
    "--flattencfg",
    "--gvn-hoist",
    "--gvn-hoist",
    "--instcombine",
    "--globalopt",
    "--mergefunc",
    "--simplifycfg",
    "--jump-threading",
    "--die",
    "--gvn",
    "--instcombine",
    "--mem2reg",
    "--ipsccp",
    "--aggressive-instcombine",
    "--early-cse",
    "--lower-expect",
    "--gvn-hoist",
    "--newgvn",
    "--lower-constant-intrinsics",
    "--ipsccp",
    "--correlated-propagation"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--sccp",
          "--mem2reg",
          "--coro-early",
          "--libcalls-shrinkwrap",
          "--speculative-execution",
          "--mergereturn",
          "--flattencfg",
          "--lowerinvoke",
          "--deadargelim",
          "--lower-expect",
          "--adce",
          "--mldst-motion",
          "--strip",
          "--early-cse-memssa",
          "--jump-threading"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--sccp",
      "--mem2reg",
      "--coro-early",
      "--libcalls-shrinkwrap",
      "--speculative-execution",
      "--mergereturn",
      "--flattencfg",
      "--lowerinvoke",
      "--deadargelim",
      "--lower-expect",
      "--adce",
      "--mldst-motion",
      "--strip",
      "--early-cse-memssa",
      "--jump-threading"
    ],
    "performance_vs_Oz": "+0.5%"
  }
}
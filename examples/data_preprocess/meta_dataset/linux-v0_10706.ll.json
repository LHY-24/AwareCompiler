{
  "program_id": "linux-v0_10706.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 59,
    "onePredOneSuc": 45,
    "onePredTwoSuc": 10,
    "oneSuccessor": 59,
    "twoPred": 18,
    "twoPredOneSuc": 7,
    "twoEach": 5,
    "twoSuccessor": 18,
    "morePreds": 0,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 97,
    "BeginPhi": 2,
    "BranchCount": 77,
    "returnInt": 28,
    "CriticalCount": 8,
    "NumEdges": 95,
    "const32Bit": 285,
    "const64Bit": 1,
    "numConstZeroes": 86,
    "numConstOnes": 132,
    "UncondBranches": 59,
    "binaryConstArg": 29,
    "NumAShrInst": 1,
    "NumAddInst": 6,
    "NumAllocaInst": 97,
    "NumAndInst": 9,
    "BlockMid": 13,
    "BlockLow": 86,
    "NumBitCastInst": 17,
    "NumBrInst": 77,
    "NumCallInst": 64,
    "NumGetElementPtrInst": 49,
    "NumICmpInst": 28,
    "NumLShrInst": 2,
    "NumLoadInst": 196,
    "NumMulInst": 1,
    "NumOrInst": 16,
    "NumPHIInst": 2,
    "NumRetInst": 22,
    "NumSExtInst": 0,
    "NumSelectInst": 5,
    "NumShlInst": 4,
    "NumStoreInst": 107,
    "NumSubInst": 2,
    "NumTruncInst": 4,
    "NumXorInst": 0,
    "NumZExtInst": 19,
    "TotalBlocks": 99,
    "TotalInsts": 730,
    "TotalMemInst": 513,
    "TotalFuncs": 27,
    "ArgsPhi": 4,
    "testUnary": 333
  },
  "baseline_oz_instcount": 730,
  "knowledge_base_entry": [
    "--globalopt",
    "--loop-simplifycfg",
    "--simplifycfg",
    "--newgvn",
    "--elim-avail-extern",
    "--inline",
    "--gvn-hoist",
    "--sroa",
    "--aggressive-instcombine",
    "--ipsccp",
    "--reassociate",
    "--prune-eh",
    "--instcombine",
    "--lower-expect",
    "--bdce",
    "--mergefunc",
    "--early-cse-memssa",
    "-loop-reduce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--inferattrs",
          "--lower-expect",
          "--hotcoldsplit",
          "--lowerswitch",
          "--loweratomic",
          "--inline",
          "--mergeicmps",
          "--loop-unroll",
          "--loop-instsimplify",
          "--float2int",
          "--constmerge",
          "--mergefunc",
          "--scalarizer",
          "--aggressive-instcombine",
          "--partial-inliner",
          "--div-rem-pairs",
          "--prune-eh",
          "--called-value-propagation",
          "--loop-simplify",
          "--loop-versioning"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--inferattrs",
      "--lower-expect",
      "--hotcoldsplit",
      "--lowerswitch",
      "--loweratomic",
      "--inline",
      "--mergeicmps",
      "--loop-unroll",
      "--loop-instsimplify",
      "--float2int",
      "--constmerge",
      "--mergefunc",
      "--scalarizer",
      "--aggressive-instcombine",
      "--partial-inliner",
      "--div-rem-pairs",
      "--prune-eh",
      "--called-value-propagation",
      "--loop-simplify",
      "--loop-versioning"
    ],
    "performance_vs_Oz": "+0.5%"
  }
}
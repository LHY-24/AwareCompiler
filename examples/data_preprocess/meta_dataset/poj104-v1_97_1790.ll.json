{
  "program_id": "poj104-v1_97_1790.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 0,
    "onePredOneSuc": 0,
    "onePredTwoSuc": 0,
    "oneSuccessor": 0,
    "twoPred": 0,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 0,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 3,
    "BeginPhi": 0,
    "BranchCount": 0,
    "returnInt": 3,
    "CriticalCount": 0,
    "NumEdges": 0,
    "const32Bit": 30,
    "const64Bit": 14,
    "numConstZeroes": 2,
    "numConstOnes": 8,
    "UncondBranches": 0,
    "binaryConstArg": 20,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 8,
    "NumAndInst": 0,
    "BlockMid": 1,
    "BlockLow": 2,
    "NumBitCastInst": 14,
    "NumBrInst": 0,
    "NumCallInst": 19,
    "NumGetElementPtrInst": 0,
    "NumICmpInst": 0,
    "NumLShrInst": 0,
    "NumLoadInst": 25,
    "NumMulInst": 13,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 7,
    "NumSubInst": 13,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 3,
    "TotalInsts": 109,
    "TotalMemInst": 59,
    "TotalFuncs": 10,
    "ArgsPhi": 0,
    "testUnary": 47
  },
  "baseline_oz_instcount": 28,
  "knowledge_base_entry": [
    "--hotcoldsplit",
    "--mergefunc",
    "--flattencfg",
    "--early-cse",
    "--die",
    "--lower-constant-intrinsics",
    "--nary-reassociate",
    "--early-cse",
    "--sccp",
    "--lower-constant-intrinsics",
    "--gvn",
    "--dse",
    "--ipsccp",
    "--instcombine",
    "--sccp",
    "--lower-constant-intrinsics",
    "--gvn",
    "--dse",
    "--ipsccp",
    "--instcombine",
    "--inline",
    "--bdce",
    "--loop-simplifycfg",
    "--sroa",
    "--newgvn",
    "--loop-rotate",
    "--gvn-hoist",
    "--early-cse-memssa",
    "--load-store-vectorizer",
    "--slsr"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--inline",
          "--early-cse-memssa",
          "--functionattrs",
          "--partial-inliner",
          "--strip-debug-declare",
          "--lower-constant-intrinsics",
          "--loop-load-elim",
          "--instcombine",
          "--lowerinvoke",
          "--instnamer",
          "--slp-vectorizer",
          "--reassociate",
          "--flattencfg",
          "--loop-reroll",
          "--canonicalize-aliases",
          "--speculative-execution",
          "--always-inline",
          "--called-value-propagation",
          "--scalarizer",
          "--ee-instrument",
          "--jump-threading",
          "--coro-early",
          "-loop-reduce",
          "--forceattrs",
          "--ipconstprop",
          "--partially-inline-libcalls",
          "--callsite-splitting",
          "--loop-instsimplify",
          "--correlated-propagation",
          "--sancov"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+7.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--inline",
      "--early-cse-memssa",
      "--functionattrs",
      "--partial-inliner",
      "--strip-debug-declare",
      "--lower-constant-intrinsics",
      "--loop-load-elim",
      "--instcombine",
      "--lowerinvoke",
      "--instnamer",
      "--slp-vectorizer",
      "--reassociate",
      "--flattencfg",
      "--loop-reroll",
      "--canonicalize-aliases",
      "--speculative-execution",
      "--always-inline",
      "--called-value-propagation",
      "--scalarizer",
      "--ee-instrument",
      "--jump-threading",
      "--coro-early",
      "-loop-reduce",
      "--forceattrs",
      "--ipconstprop",
      "--partially-inline-libcalls",
      "--callsite-splitting",
      "--loop-instsimplify",
      "--correlated-propagation",
      "--sancov"
    ],
    "performance_vs_Oz": "+7.1%"
  }
}
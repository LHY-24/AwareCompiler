{
  "program_id": "github-v0_34326.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 3,
    "onePredOneSuc": 1,
    "onePredTwoSuc": 1,
    "oneSuccessor": 3,
    "twoPred": 2,
    "twoPredOneSuc": 1,
    "twoEach": 1,
    "twoSuccessor": 2,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 6,
    "BeginPhi": 0,
    "BranchCount": 5,
    "returnInt": 5,
    "CriticalCount": 2,
    "NumEdges": 7,
    "const32Bit": 16,
    "const64Bit": 0,
    "numConstZeroes": 10,
    "numConstOnes": 16,
    "UncondBranches": 3,
    "binaryConstArg": 5,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 5,
    "NumAndInst": 0,
    "BlockMid": 3,
    "BlockLow": 3,
    "NumBitCastInst": 0,
    "NumBrInst": 5,
    "NumCallInst": 19,
    "NumGetElementPtrInst": 0,
    "NumICmpInst": 2,
    "NumLShrInst": 0,
    "NumLoadInst": 18,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 1,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 5,
    "NumSubInst": 4,
    "NumTruncInst": 12,
    "NumXorInst": 0,
    "NumZExtInst": 4,
    "TotalBlocks": 6,
    "TotalInsts": 76,
    "TotalMemInst": 47,
    "TotalFuncs": 11,
    "ArgsPhi": 0,
    "testUnary": 39
  },
  "baseline_oz_instcount": 76,
  "knowledge_base_entry": [
    "--loop-instsimplify",
    "--die",
    "--loop-instsimplify",
    "--mergefunc",
    "--aggressive-instcombine",
    "--loop-simplifycfg",
    "--aggressive-instcombine",
    "--loop-rotate",
    "--instcombine",
    "--early-cse",
    "--lower-expect"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--flattencfg",
          "--functionattrs",
          "--mergeicmps",
          "--loop-simplify",
          "--lowerswitch",
          "--partially-inline-libcalls",
          "--inferattrs",
          "--irce",
          "--sink",
          "--float2int",
          "--consthoist",
          "--die",
          "--licm",
          "--inject-tli-mappings",
          "--aggressive-instcombine"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+10.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--flattencfg",
      "--functionattrs",
      "--mergeicmps",
      "--loop-simplify",
      "--lowerswitch",
      "--partially-inline-libcalls",
      "--inferattrs",
      "--irce",
      "--sink",
      "--float2int",
      "--consthoist",
      "--die",
      "--licm",
      "--inject-tli-mappings",
      "--aggressive-instcombine"
    ],
    "performance_vs_Oz": "+10.5%"
  }
}
{
  "program_id": "github-v0_22312.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 11,
    "onePredOneSuc": 8,
    "onePredTwoSuc": 2,
    "oneSuccessor": 10,
    "twoPred": 4,
    "twoPredOneSuc": 0,
    "twoEach": 2,
    "twoSuccessor": 6,
    "morePreds": 1,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 29,
    "BeginPhi": 1,
    "BranchCount": 16,
    "returnInt": 3,
    "CriticalCount": 3,
    "NumEdges": 22,
    "const32Bit": 311,
    "const64Bit": 14,
    "numConstZeroes": 187,
    "numConstOnes": 126,
    "UncondBranches": 10,
    "binaryConstArg": 5,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 67,
    "NumAndInst": 0,
    "BlockMid": 11,
    "BlockLow": 19,
    "NumBitCastInst": 60,
    "NumBrInst": 16,
    "NumCallInst": 80,
    "NumGetElementPtrInst": 126,
    "NumICmpInst": 4,
    "NumLShrInst": 0,
    "NumLoadInst": 160,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 1,
    "NumRetInst": 14,
    "NumSExtInst": 5,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 97,
    "NumSubInst": 0,
    "NumTruncInst": 1,
    "NumXorInst": 0,
    "NumZExtInst": 1,
    "TotalBlocks": 30,
    "TotalInsts": 688,
    "TotalMemInst": 530,
    "TotalFuncs": 49,
    "ArgsPhi": 2,
    "testUnary": 333
  },
  "baseline_oz_instcount": 684,
  "knowledge_base_entry": [
    "--mergefunc",
    "--ipsccp",
    "--early-cse",
    "--memcpyopt",
    "--sroa",
    "--licm",
    "--instsimplify",
    "--dse",
    "--loop-rotate",
    "--elim-avail-extern",
    "--aggressive-instcombine"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--partially-inline-libcalls",
          "--lower-constant-intrinsics",
          "--ipsccp",
          "--called-value-propagation",
          "--early-cse-memssa",
          "--lowerinvoke",
          "--sink",
          "--flattencfg",
          "--lcssa",
          "--aggressive-instcombine",
          "--lower-expect",
          "--loop-idiom",
          "--reassociate"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--partially-inline-libcalls",
      "--lower-constant-intrinsics",
      "--ipsccp",
      "--called-value-propagation",
      "--early-cse-memssa",
      "--lowerinvoke",
      "--sink",
      "--flattencfg",
      "--lcssa",
      "--aggressive-instcombine",
      "--lower-expect",
      "--loop-idiom",
      "--reassociate"
    ],
    "performance_vs_Oz": "+0.1%"
  }
}
{
  "program_id": "poj104-v1_78_1277.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 34,
    "onePredOneSuc": 21,
    "onePredTwoSuc": 10,
    "oneSuccessor": 30,
    "twoPred": 17,
    "twoPredOneSuc": 6,
    "twoEach": 9,
    "twoSuccessor": 22,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 68,
    "BeginPhi": 0,
    "BranchCount": 52,
    "returnInt": 7,
    "CriticalCount": 13,
    "NumEdges": 74,
    "const32Bit": 70,
    "const64Bit": 117,
    "numConstZeroes": 69,
    "numConstOnes": 56,
    "UncondBranches": 30,
    "binaryConstArg": 12,
    "NumAShrInst": 0,
    "NumAddInst": 16,
    "NumAllocaInst": 28,
    "NumAndInst": 0,
    "BlockMid": 4,
    "BlockLow": 64,
    "NumBitCastInst": 24,
    "NumBrInst": 52,
    "NumCallInst": 53,
    "NumGetElementPtrInst": 63,
    "NumICmpInst": 22,
    "NumLShrInst": 0,
    "NumLoadInst": 101,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 15,
    "NumSExtInst": 10,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 46,
    "NumSubInst": 1,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 1,
    "TotalBlocks": 68,
    "TotalInsts": 434,
    "TotalMemInst": 291,
    "TotalFuncs": 30,
    "ArgsPhi": 0,
    "testUnary": 164
  },
  "baseline_oz_instcount": 236,
  "knowledge_base_entry": [
    "--early-cse-memssa",
    "--mergefunc",
    "--elim-avail-extern",
    "--nary-reassociate",
    "--sroa",
    "--mem2reg",
    "--prune-eh",
    "--gvn",
    "--loop-simplifycfg",
    "--die",
    "--newgvn",
    "--gvn-hoist",
    "--loop-rotate",
    "--aggressive-instcombine",
    "--instsimplify",
    "--aggressive-instcombine",
    "--early-cse-memssa",
    "--die",
    "--mergefunc",
    "--elim-avail-extern",
    "--nary-reassociate",
    "--sroa",
    "--mem2reg",
    "--prune-eh",
    "--gvn",
    "--loop-simplifycfg",
    "--die",
    "--jump-threading",
    "--correlated-propagation",
    "--sroa",
    "--lower-expect",
    "--globalopt",
    "--elim-avail-extern",
    "--inline",
    "--prune-eh",
    "--lower-expect",
    "--lower-constant-intrinsics",
    "--aggressive-instcombine",
    "--newgvn",
    "--loop-instsimplify",
    "--instcombine",
    "--lower-constant-intrinsics",
    "--mldst-motion",
    "--newgvn",
    "--ipsccp",
    "--jump-threading",
    "--dse",
    "--die",
    "--newgvn",
    "--gvn-hoist",
    "--loop-rotate",
    "--aggressive-instcombine",
    "--instsimplify",
    "--aggressive-instcombine",
    "--early-cse-memssa",
    "--die",
    "--mergefunc",
    "--elim-avail-extern",
    "--nary-reassociate",
    "--sroa",
    "--mem2reg",
    "--prune-eh",
    "--gvn",
    "--loop-simplifycfg",
    "--die",
    "--jump-threading",
    "--correlated-propagation",
    "--sroa",
    "--lower-expect",
    "--globalopt",
    "--elim-avail-extern",
    "--inline",
    "--prune-eh",
    "--lower-expect",
    "--lower-constant-intrinsics",
    "--aggressive-instcombine",
    "--newgvn",
    "--loop-instsimplify",
    "--instcombine",
    "--lower-constant-intrinsics",
    "--mldst-motion",
    "--gvn",
    "--loop-simplifycfg",
    "--die",
    "--jump-threading",
    "--correlated-propagation",
    "--sroa",
    "--lower-expect",
    "--globalopt",
    "--globaldce",
    "--ipsccp",
    "--globalopt",
    "--sccp",
    "--jump-threading",
    "--lower-expect",
    "--dce",
    "--simplifycfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--strip-dead-prototypes",
          "--simplifycfg",
          "--loop-vectorize",
          "--loop-rotate",
          "--jump-threading",
          "--simple-loop-unswitch",
          "--newgvn",
          "--slp-vectorizer",
          "--globalsplit",
          "--prune-eh",
          "--called-value-propagation",
          "--callsite-splitting",
          "--lowerinvoke",
          "--loop-simplifycfg",
          "--lower-constant-intrinsics",
          "--div-rem-pairs",
          "--sancov",
          "--elim-avail-extern",
          "--ee-instrument",
          "--redundant-dbg-inst-elim",
          "--add-discriminators",
          "--insert-gcov-profiling",
          "--loop-predication",
          "--deadargelim",
          "--forceattrs",
          "--slsr",
          "--ipconstprop",
          "--mem2reg",
          "--lower-matrix-intrinsics"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+27.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--strip-dead-prototypes",
      "--simplifycfg",
      "--loop-vectorize",
      "--loop-rotate",
      "--jump-threading",
      "--simple-loop-unswitch",
      "--newgvn",
      "--slp-vectorizer",
      "--globalsplit",
      "--prune-eh",
      "--called-value-propagation",
      "--callsite-splitting",
      "--lowerinvoke",
      "--loop-simplifycfg",
      "--lower-constant-intrinsics",
      "--div-rem-pairs",
      "--sancov",
      "--elim-avail-extern",
      "--ee-instrument",
      "--redundant-dbg-inst-elim",
      "--add-discriminators",
      "--insert-gcov-profiling",
      "--loop-predication",
      "--deadargelim",
      "--forceattrs",
      "--slsr",
      "--ipconstprop",
      "--mem2reg",
      "--lower-matrix-intrinsics"
    ],
    "performance_vs_Oz": "+27.5%"
  }
}
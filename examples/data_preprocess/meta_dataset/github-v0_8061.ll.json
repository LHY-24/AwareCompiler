{
  "program_id": "github-v0_8061.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 11,
    "onePredOneSuc": 8,
    "onePredTwoSuc": 1,
    "oneSuccessor": 9,
    "twoPred": 4,
    "twoPredOneSuc": 1,
    "twoEach": 2,
    "twoSuccessor": 5,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 18,
    "BeginPhi": 0,
    "BranchCount": 14,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 19,
    "const32Bit": 37,
    "const64Bit": 59,
    "numConstZeroes": 56,
    "numConstOnes": 23,
    "UncondBranches": 9,
    "binaryConstArg": 15,
    "NumAShrInst": 0,
    "NumAddInst": 4,
    "NumAllocaInst": 12,
    "NumAndInst": 4,
    "BlockMid": 5,
    "BlockLow": 13,
    "NumBitCastInst": 8,
    "NumBrInst": 14,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 36,
    "NumICmpInst": 5,
    "NumLShrInst": 2,
    "NumLoadInst": 34,
    "NumMulInst": 2,
    "NumOrInst": 4,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 22,
    "NumSubInst": 3,
    "NumTruncInst": 4,
    "NumXorInst": 0,
    "NumZExtInst": 3,
    "TotalBlocks": 18,
    "TotalInsts": 173,
    "TotalMemInst": 111,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 64
  },
  "baseline_oz_instcount": 173,
  "knowledge_base_entry": [
    "--break-crit-edges",
    "--gvn",
    "--lower-expect",
    "--instcombine",
    "--instsimplify",
    "--dse",
    "--sccp",
    "--dse",
    "--aggressive-instcombine",
    "--loop-instsimplify",
    "--lower-constant-intrinsics",
    "--licm",
    "--bdce",
    "--elim-avail-extern",
    "--instsimplify",
    "--loop-reroll",
    "--lower-constant-intrinsics",
    "--simplifycfg",
    "--slsr",
    "--slp-vectorizer",
    "--newgvn",
    "--jump-threading",
    "--inline"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--aggressive-instcombine",
          "--loop-distribute",
          "--inject-tli-mappings",
          "--early-cse-memssa",
          "--loop-versioning-licm",
          "--lower-expect",
          "--insert-gcov-profiling",
          "--ipsccp",
          "--indvars",
          "--lowerinvoke"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--aggressive-instcombine",
      "--loop-distribute",
      "--inject-tli-mappings",
      "--early-cse-memssa",
      "--loop-versioning-licm",
      "--lower-expect",
      "--insert-gcov-profiling",
      "--ipsccp",
      "--indvars",
      "--lowerinvoke"
    ],
    "performance_vs_Oz": "+3.5%"
  }
}
{
  "program_id": "tensorflow-v0_319.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 9,
    "onePredOneSuc": 3,
    "onePredTwoSuc": 4,
    "oneSuccessor": 4,
    "twoPred": 4,
    "twoPredOneSuc": 1,
    "twoEach": 1,
    "twoSuccessor": 8,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 21,
    "BeginPhi": 0,
    "BranchCount": 10,
    "returnInt": 0,
    "CriticalCount": 7,
    "NumEdges": 20,
    "const32Bit": 20,
    "const64Bit": 19,
    "numConstZeroes": 26,
    "numConstOnes": 8,
    "UncondBranches": 4,
    "binaryConstArg": 0,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 0,
    "NumAndInst": 0,
    "BlockMid": 1,
    "BlockLow": 20,
    "NumBitCastInst": 12,
    "NumBrInst": 10,
    "NumCallInst": 14,
    "NumGetElementPtrInst": 15,
    "NumICmpInst": 7,
    "NumLShrInst": 0,
    "NumLoadInst": 9,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 7,
    "NumSExtInst": 0,
    "NumSelectInst": 2,
    "NumShlInst": 0,
    "NumStoreInst": 6,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 21,
    "TotalInsts": 90,
    "TotalMemInst": 46,
    "TotalFuncs": 17,
    "ArgsPhi": 0,
    "testUnary": 23
  },
  "baseline_oz_instcount": 90,
  "knowledge_base_entry": [
    "--separate-const-offset-from-gep",
    "--early-cse-memssa",
    "--dse",
    "--globalopt",
    "--aggressive-instcombine",
    "--bdce",
    "--newgvn",
    "--lower-constant-intrinsics",
    "--mergefunc"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--div-rem-pairs",
          "--strip-dead-prototypes",
          "--early-cse",
          "--lowerinvoke",
          "--loop-sink",
          "--lower-constant-intrinsics",
          "--tailcallelim",
          "--separate-const-offset-from-gep",
          "--aggressive-instcombine",
          "--alignment-from-assumptions",
          "--lower-matrix-intrinsics",
          "--functionattrs",
          "--lowerswitch",
          "--insert-gcov-profiling",
          "--loop-unswitch",
          "--dce",
          "--simplifycfg",
          "--consthoist",
          "--loop-unroll",
          "--libcalls-shrinkwrap",
          "--loop-simplify",
          "--adce",
          "--ipconstprop",
          "--loop-guard-widening",
          "--hotcoldsplit",
          "--called-value-propagation",
          "--inject-tli-mappings"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+14.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--div-rem-pairs",
      "--strip-dead-prototypes",
      "--early-cse",
      "--lowerinvoke",
      "--loop-sink",
      "--lower-constant-intrinsics",
      "--tailcallelim",
      "--separate-const-offset-from-gep",
      "--aggressive-instcombine",
      "--alignment-from-assumptions",
      "--lower-matrix-intrinsics",
      "--functionattrs",
      "--lowerswitch",
      "--insert-gcov-profiling",
      "--loop-unswitch",
      "--dce",
      "--simplifycfg",
      "--consthoist",
      "--loop-unroll",
      "--libcalls-shrinkwrap",
      "--loop-simplify",
      "--adce",
      "--ipconstprop",
      "--loop-guard-widening",
      "--hotcoldsplit",
      "--called-value-propagation",
      "--inject-tli-mappings"
    ],
    "performance_vs_Oz": "+14.4%"
  }
}
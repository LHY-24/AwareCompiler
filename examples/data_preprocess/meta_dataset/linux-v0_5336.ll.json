{
  "program_id": "linux-v0_5336.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 48,
    "onePredOneSuc": 40,
    "onePredTwoSuc": 8,
    "oneSuccessor": 46,
    "twoPred": 13,
    "twoPredOneSuc": 4,
    "twoEach": 3,
    "twoSuccessor": 17,
    "morePreds": 2,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 74,
    "BeginPhi": 1,
    "BranchCount": 63,
    "returnInt": 14,
    "CriticalCount": 6,
    "NumEdges": 80,
    "const32Bit": 234,
    "const64Bit": 31,
    "numConstZeroes": 120,
    "numConstOnes": 95,
    "UncondBranches": 46,
    "binaryConstArg": 21,
    "NumAShrInst": 0,
    "NumAddInst": 4,
    "NumAllocaInst": 74,
    "NumAndInst": 7,
    "BlockMid": 15,
    "BlockLow": 60,
    "NumBitCastInst": 12,
    "NumBrInst": 63,
    "NumCallInst": 29,
    "NumGetElementPtrInst": 72,
    "NumICmpInst": 20,
    "NumLShrInst": 4,
    "NumLoadInst": 197,
    "NumMulInst": 0,
    "NumOrInst": 5,
    "NumPHIInst": 1,
    "NumRetInst": 12,
    "NumSExtInst": 7,
    "NumSelectInst": 1,
    "NumShlInst": 3,
    "NumStoreInst": 104,
    "NumSubInst": 0,
    "NumTruncInst": 8,
    "NumXorInst": 4,
    "NumZExtInst": 25,
    "TotalBlocks": 75,
    "TotalInsts": 654,
    "TotalMemInst": 476,
    "TotalFuncs": 23,
    "ArgsPhi": 2,
    "testUnary": 325
  },
  "baseline_oz_instcount": 655,
  "knowledge_base_entry": [
    "--globalopt",
    "--aggressive-instcombine",
    "--adce",
    "--simplifycfg",
    "--early-cse-memssa",
    "--slp-vectorizer"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--add-discriminators",
          "--called-value-propagation",
          "--redundant-dbg-inst-elim",
          "--constprop",
          "--load-store-vectorizer",
          "--globalopt",
          "--pgo-memop-opt",
          "--tailcallelim",
          "--reassociate",
          "--coro-cleanup"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--add-discriminators",
      "--called-value-propagation",
      "--redundant-dbg-inst-elim",
      "--constprop",
      "--load-store-vectorizer",
      "--globalopt",
      "--pgo-memop-opt",
      "--tailcallelim",
      "--reassociate",
      "--coro-cleanup"
    ],
    "performance_vs_Oz": "+0.2%"
  }
}
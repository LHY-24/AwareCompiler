{
  "program_id": "github-v0_45128.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 4,
    "onePred": 48,
    "onePredOneSuc": 26,
    "onePredTwoSuc": 22,
    "oneSuccessor": 45,
    "twoPred": 28,
    "twoPredOneSuc": 16,
    "twoEach": 9,
    "twoSuccessor": 35,
    "morePreds": 5,
    "BB03Phi": 4,
    "BBHiPhi": 0,
    "BBNoPhi": 81,
    "BeginPhi": 4,
    "BranchCount": 79,
    "returnInt": 38,
    "CriticalCount": 29,
    "NumEdges": 120,
    "const32Bit": 91,
    "const64Bit": 8,
    "numConstZeroes": 32,
    "numConstOnes": 41,
    "UncondBranches": 44,
    "binaryConstArg": 8,
    "NumAShrInst": 2,
    "NumAddInst": 1,
    "NumAllocaInst": 28,
    "NumAndInst": 5,
    "BlockMid": 5,
    "BlockLow": 80,
    "NumBitCastInst": 4,
    "NumBrInst": 79,
    "NumCallInst": 50,
    "NumGetElementPtrInst": 5,
    "NumICmpInst": 33,
    "NumLShrInst": 0,
    "NumLoadInst": 130,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 4,
    "NumRetInst": 4,
    "NumSExtInst": 1,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 47,
    "NumSubInst": 3,
    "NumTruncInst": 9,
    "NumXorInst": 0,
    "NumZExtInst": 52,
    "TotalBlocks": 85,
    "TotalInsts": 459,
    "TotalMemInst": 260,
    "TotalFuncs": 22,
    "ArgsPhi": 8,
    "testUnary": 224
  },
  "baseline_oz_instcount": 452,
  "knowledge_base_entry": [
    "--loop-instsimplify",
    "--mergefunc",
    "--globalopt",
    "--loop-simplifycfg",
    "--jump-threading",
    "--bdce",
    "--sroa",
    "--nary-reassociate",
    "--licm",
    "--lower-constant-intrinsics",
    "--lower-expect",
    "--instcombine",
    "--memcpyopt",
    "--jump-threading",
    "--slp-vectorizer",
    "--lower-constant-intrinsics",
    "--adce",
    "--aggressive-instcombine",
    "--mergefunc",
    "--globalopt",
    "--ipsccp"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-load-elim",
          "--float2int",
          "--partially-inline-libcalls",
          "--loweratomic",
          "--slp-vectorizer",
          "--globalopt",
          "--instnamer",
          "--deadargelim",
          "--constprop",
          "--name-anon-globals",
          "--aggressive-instcombine",
          "--coro-elide",
          "--gvn",
          "--loop-vectorize",
          "--redundant-dbg-inst-elim",
          "--prune-eh",
          "--loop-instsimplify",
          "--simple-loop-unswitch",
          "--globalsplit",
          "--flattencfg",
          "--lower-expect",
          "--sccp",
          "--infer-address-spaces",
          "--mergeicmps",
          "--simplifycfg",
          "--cross-dso-cfi",
          "--mergefunc"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-load-elim",
      "--float2int",
      "--partially-inline-libcalls",
      "--loweratomic",
      "--slp-vectorizer",
      "--globalopt",
      "--instnamer",
      "--deadargelim",
      "--constprop",
      "--name-anon-globals",
      "--aggressive-instcombine",
      "--coro-elide",
      "--gvn",
      "--loop-vectorize",
      "--redundant-dbg-inst-elim",
      "--prune-eh",
      "--loop-instsimplify",
      "--simple-loop-unswitch",
      "--globalsplit",
      "--flattencfg",
      "--lower-expect",
      "--sccp",
      "--infer-address-spaces",
      "--mergeicmps",
      "--simplifycfg",
      "--cross-dso-cfi",
      "--mergefunc"
    ],
    "performance_vs_Oz": "+0.7%"
  }
}
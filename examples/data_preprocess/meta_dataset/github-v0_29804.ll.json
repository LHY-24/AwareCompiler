{
  "program_id": "github-v0_29804.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 13,
    "onePredOneSuc": 8,
    "onePredTwoSuc": 2,
    "oneSuccessor": 11,
    "twoPred": 5,
    "twoPredOneSuc": 2,
    "twoEach": 3,
    "twoSuccessor": 6,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 21,
    "BeginPhi": 0,
    "BranchCount": 17,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 23,
    "const32Bit": 32,
    "const64Bit": 44,
    "numConstZeroes": 41,
    "numConstOnes": 25,
    "UncondBranches": 11,
    "binaryConstArg": 7,
    "NumAShrInst": 0,
    "NumAddInst": 8,
    "NumAllocaInst": 14,
    "NumAndInst": 0,
    "BlockMid": 5,
    "BlockLow": 16,
    "NumBitCastInst": 8,
    "NumBrInst": 17,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 32,
    "NumICmpInst": 6,
    "NumLShrInst": 0,
    "NumLoadInst": 39,
    "NumMulInst": 1,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 23,
    "NumSubInst": 0,
    "NumTruncInst": 4,
    "NumXorInst": 0,
    "NumZExtInst": 11,
    "TotalBlocks": 21,
    "TotalInsts": 177,
    "TotalMemInst": 115,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 79
  },
  "baseline_oz_instcount": 177,
  "knowledge_base_entry": [
    "--lower-constant-intrinsics",
    "--aggressive-instcombine",
    "--mem2reg",
    "--gvn-hoist",
    "--dse",
    "--mldst-motion",
    "--instcombine",
    "--slsr",
    "--slp-vectorizer",
    "--instsimplify",
    "--load-store-vectorizer",
    "--memcpyopt",
    "--mem2reg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--lower-widenable-condition",
          "--forceattrs",
          "--insert-gcov-profiling",
          "--correlated-propagation",
          "--ipconstprop",
          "--irce",
          "--strip",
          "--loop-interchange",
          "--dce",
          "--lower-expect",
          "--guard-widening",
          "--loop-versioning",
          "--tailcallelim",
          "--barrier",
          "--aggressive-instcombine",
          "--argpromotion",
          "--slp-vectorizer",
          "--mldst-motion",
          "--loop-load-elim",
          "--add-discriminators",
          "--cross-dso-cfi",
          "--gvn",
          "--loop-rotate",
          "--post-inline-ee-instrument",
          "--sccp",
          "--globalopt",
          "--instnamer",
          "--partial-inliner",
          "--loop-versioning-licm",
          "--dse"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--lower-widenable-condition",
      "--forceattrs",
      "--insert-gcov-profiling",
      "--correlated-propagation",
      "--ipconstprop",
      "--irce",
      "--strip",
      "--loop-interchange",
      "--dce",
      "--lower-expect",
      "--guard-widening",
      "--loop-versioning",
      "--tailcallelim",
      "--barrier",
      "--aggressive-instcombine",
      "--argpromotion",
      "--slp-vectorizer",
      "--mldst-motion",
      "--loop-load-elim",
      "--add-discriminators",
      "--cross-dso-cfi",
      "--gvn",
      "--loop-rotate",
      "--post-inline-ee-instrument",
      "--sccp",
      "--globalopt",
      "--instnamer",
      "--partial-inliner",
      "--loop-versioning-licm",
      "--dse"
    ],
    "performance_vs_Oz": "+3.4%"
  }
}
{
  "program_id": "linux-v0_2537.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 27,
    "onePredOneSuc": 24,
    "onePredTwoSuc": 2,
    "oneSuccessor": 28,
    "twoPred": 5,
    "twoPredOneSuc": 1,
    "twoEach": 0,
    "twoSuccessor": 5,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 45,
    "BeginPhi": 0,
    "BranchCount": 33,
    "returnInt": 8,
    "CriticalCount": 6,
    "NumEdges": 50,
    "const32Bit": 116,
    "const64Bit": 5,
    "numConstZeroes": 40,
    "numConstOnes": 41,
    "UncondBranches": 28,
    "binaryConstArg": 4,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 32,
    "NumAndInst": 1,
    "BlockMid": 8,
    "BlockLow": 37,
    "NumBitCastInst": 6,
    "NumBrInst": 33,
    "NumCallInst": 20,
    "NumGetElementPtrInst": 26,
    "NumICmpInst": 5,
    "NumLShrInst": 0,
    "NumLoadInst": 69,
    "NumMulInst": 2,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 11,
    "NumSExtInst": 0,
    "NumSelectInst": 1,
    "NumShlInst": 2,
    "NumStoreInst": 45,
    "NumSubInst": 0,
    "NumTruncInst": 1,
    "NumXorInst": 1,
    "NumZExtInst": 6,
    "TotalBlocks": 45,
    "TotalInsts": 263,
    "TotalMemInst": 192,
    "TotalFuncs": 34,
    "ArgsPhi": 0,
    "testUnary": 114
  },
  "baseline_oz_instcount": 261,
  "knowledge_base_entry": [
    "--inferattrs",
    "--newgvn",
    "--loop-rotate",
    "--licm",
    "--mergefunc",
    "--flattencfg",
    "--licm",
    "--instsimplify",
    "--globalopt",
    "--flattencfg",
    "--newgvn",
    "--instcombine",
    "--load-store-vectorizer",
    "--early-cse-memssa",
    "--early-cse-memssa",
    "--lower-constant-intrinsics",
    "--aggressive-instcombine",
    "--early-cse-memssa",
    "--bdce",
    "--mergefunc",
    "--correlated-propagation",
    "--simplifycfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--jump-threading",
          "--nary-reassociate",
          "--loop-rotate",
          "--lower-guard-intrinsic",
          "--partially-inline-libcalls",
          "--add-discriminators",
          "--mem2reg",
          "--globalopt",
          "--loop-simplify",
          "--div-rem-pairs",
          "--instcombine",
          "--early-cse-memssa",
          "--globalsplit",
          "--aggressive-instcombine"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--jump-threading",
      "--nary-reassociate",
      "--loop-rotate",
      "--lower-guard-intrinsic",
      "--partially-inline-libcalls",
      "--add-discriminators",
      "--mem2reg",
      "--globalopt",
      "--loop-simplify",
      "--div-rem-pairs",
      "--instcombine",
      "--early-cse-memssa",
      "--globalsplit",
      "--aggressive-instcombine"
    ],
    "performance_vs_Oz": "+0.8%"
  }
}
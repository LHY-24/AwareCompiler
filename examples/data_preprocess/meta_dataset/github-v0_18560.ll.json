{
  "program_id": "github-v0_18560.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 18,
    "onePredOneSuc": 11,
    "onePredTwoSuc": 5,
    "oneSuccessor": 16,
    "twoPred": 8,
    "twoPredOneSuc": 5,
    "twoEach": 2,
    "twoSuccessor": 9,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 29,
    "BeginPhi": 0,
    "BranchCount": 25,
    "returnInt": 4,
    "CriticalCount": 1,
    "NumEdges": 34,
    "const32Bit": 46,
    "const64Bit": 65,
    "numConstZeroes": 70,
    "numConstOnes": 32,
    "UncondBranches": 16,
    "binaryConstArg": 14,
    "NumAShrInst": 4,
    "NumAddInst": 5,
    "NumAllocaInst": 14,
    "NumAndInst": 5,
    "BlockMid": 6,
    "BlockLow": 23,
    "NumBitCastInst": 12,
    "NumBrInst": 25,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 43,
    "NumICmpInst": 9,
    "NumLShrInst": 0,
    "NumLoadInst": 36,
    "NumMulInst": 2,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 24,
    "NumSubInst": 0,
    "NumTruncInst": 5,
    "NumXorInst": 0,
    "NumZExtInst": 13,
    "TotalBlocks": 29,
    "TotalInsts": 211,
    "TotalMemInst": 124,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 83
  },
  "baseline_oz_instcount": 211,
  "knowledge_base_entry": [
    "--irce",
    "--early-cse",
    "--instcombine",
    "--inline",
    "--flattencfg",
    "--aggressive-instcombine",
    "--elim-avail-extern",
    "--reassociate",
    "--newgvn",
    "--simplifycfg",
    "--jump-threading",
    "--adce",
    "--lower-constant-intrinsics",
    "--gvn",
    "--loop-rotate",
    "--lower-constant-intrinsics",
    "--mem2reg",
    "--gvn-hoist",
    "--memcpyopt",
    "--early-cse",
    "--die",
    "--licm",
    "--dce",
    "--newgvn",
    "--sroa",
    "--loop-simplifycfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--hotcoldsplit",
          "--loop-versioning-licm",
          "--inferattrs",
          "--load-store-vectorizer",
          "--functionattrs",
          "--loop-data-prefetch",
          "--strip-nondebug",
          "--barrier",
          "--irce",
          "--strip-dead-prototypes",
          "--loop-predication",
          "--constmerge",
          "--globalsplit",
          "--attributor",
          "--loop-interchange",
          "--instnamer",
          "--aggressive-instcombine",
          "--loop-simplify",
          "--libcalls-shrinkwrap",
          "--simplifycfg",
          "--early-cse",
          "--jump-threading",
          "--loop-reroll",
          "--post-inline-ee-instrument",
          "--mergeicmps",
          "--coro-elide",
          "--correlated-propagation",
          "--loop-sink",
          "--partially-inline-libcalls",
          "--gvn-hoist"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+4.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--hotcoldsplit",
      "--loop-versioning-licm",
      "--inferattrs",
      "--load-store-vectorizer",
      "--functionattrs",
      "--loop-data-prefetch",
      "--strip-nondebug",
      "--barrier",
      "--irce",
      "--strip-dead-prototypes",
      "--loop-predication",
      "--constmerge",
      "--globalsplit",
      "--attributor",
      "--loop-interchange",
      "--instnamer",
      "--aggressive-instcombine",
      "--loop-simplify",
      "--libcalls-shrinkwrap",
      "--simplifycfg",
      "--early-cse",
      "--jump-threading",
      "--loop-reroll",
      "--post-inline-ee-instrument",
      "--mergeicmps",
      "--coro-elide",
      "--correlated-propagation",
      "--loop-sink",
      "--partially-inline-libcalls",
      "--gvn-hoist"
    ],
    "performance_vs_Oz": "+4.7%"
  }
}
{
  "program_id": "linux-v0_4548.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 95,
    "onePredOneSuc": 67,
    "onePredTwoSuc": 25,
    "oneSuccessor": 89,
    "twoPred": 35,
    "twoPredOneSuc": 14,
    "twoEach": 16,
    "twoSuccessor": 45,
    "morePreds": 5,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 163,
    "BeginPhi": 1,
    "BranchCount": 134,
    "returnInt": 19,
    "CriticalCount": 25,
    "NumEdges": 185,
    "const32Bit": 278,
    "const64Bit": 31,
    "numConstZeroes": 121,
    "numConstOnes": 121,
    "UncondBranches": 89,
    "binaryConstArg": 49,
    "NumAShrInst": 0,
    "NumAddInst": 6,
    "NumAllocaInst": 84,
    "NumAndInst": 19,
    "BlockMid": 7,
    "BlockLow": 157,
    "NumBitCastInst": 5,
    "NumBrInst": 134,
    "NumCallInst": 64,
    "NumGetElementPtrInst": 71,
    "NumICmpInst": 49,
    "NumLShrInst": 7,
    "NumLoadInst": 200,
    "NumMulInst": 0,
    "NumOrInst": 5,
    "NumPHIInst": 1,
    "NumRetInst": 29,
    "NumSExtInst": 7,
    "NumSelectInst": 1,
    "NumShlInst": 2,
    "NumStoreInst": 117,
    "NumSubInst": 0,
    "NumTruncInst": 7,
    "NumXorInst": 14,
    "NumZExtInst": 20,
    "TotalBlocks": 164,
    "TotalInsts": 845,
    "TotalMemInst": 536,
    "TotalFuncs": 34,
    "ArgsPhi": 2,
    "testUnary": 325
  },
  "baseline_oz_instcount": 846,
  "knowledge_base_entry": [
    "--deadargelim",
    "--mergefunc",
    "--globaldce",
    "--aggressive-instcombine",
    "--mergefunc",
    "--early-cse-memssa",
    "--nary-reassociate",
    "--gvn-hoist",
    "--ipsccp",
    "--early-cse-memssa",
    "--dce",
    "--slp-vectorizer",
    "--correlated-propagation",
    "--bdce",
    "--reassociate",
    "--instsimplify",
    "--globalopt",
    "--lower-constant-intrinsics",
    "--newgvn",
    "--slsr",
    "--simplifycfg",
    "--dce",
    "--dse",
    "--mergefunc",
    "--globalopt",
    "--lower-expect"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--globalopt",
          "--guard-widening",
          "--lower-matrix-intrinsics",
          "--lower-expect",
          "--mergefunc",
          "--strip",
          "--constprop",
          "--post-inline-ee-instrument",
          "--loop-unroll-and-jam",
          "--mergereturn"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--globalopt",
      "--guard-widening",
      "--lower-matrix-intrinsics",
      "--lower-expect",
      "--mergefunc",
      "--strip",
      "--constprop",
      "--post-inline-ee-instrument",
      "--loop-unroll-and-jam",
      "--mergereturn"
    ],
    "performance_vs_Oz": "+2.1%"
  }
}
{
  "program_id": "linux-v0_7851.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 53,
    "onePredOneSuc": 48,
    "onePredTwoSuc": 4,
    "oneSuccessor": 54,
    "twoPred": 23,
    "twoPredOneSuc": 4,
    "twoEach": 11,
    "twoSuccessor": 21,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 91,
    "BeginPhi": 0,
    "BranchCount": 73,
    "returnInt": 12,
    "CriticalCount": 8,
    "NumEdges": 103,
    "const32Bit": 243,
    "const64Bit": 36,
    "numConstZeroes": 124,
    "numConstOnes": 95,
    "UncondBranches": 54,
    "binaryConstArg": 24,
    "NumAShrInst": 1,
    "NumAddInst": 16,
    "NumAllocaInst": 60,
    "NumAndInst": 8,
    "BlockMid": 12,
    "BlockLow": 79,
    "NumBitCastInst": 11,
    "NumBrInst": 73,
    "NumCallInst": 26,
    "NumGetElementPtrInst": 81,
    "NumICmpInst": 20,
    "NumLShrInst": 1,
    "NumLoadInst": 171,
    "NumMulInst": 0,
    "NumOrInst": 2,
    "NumPHIInst": 0,
    "NumRetInst": 14,
    "NumSExtInst": 17,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 106,
    "NumSubInst": 2,
    "NumTruncInst": 1,
    "NumXorInst": 2,
    "NumZExtInst": 13,
    "TotalBlocks": 91,
    "TotalInsts": 632,
    "TotalMemInst": 444,
    "TotalFuncs": 26,
    "ArgsPhi": 0,
    "testUnary": 275
  },
  "baseline_oz_instcount": 634,
  "knowledge_base_entry": [
    "--sroa",
    "--adce",
    "--die",
    "--newgvn",
    "--mldst-motion",
    "--simplifycfg",
    "--mldst-motion",
    "--load-store-vectorizer",
    "--nary-reassociate",
    "--lower-constant-intrinsics",
    "--loop-reroll",
    "--simplifycfg",
    "--mem2reg",
    "--instsimplify",
    "--licm"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--lower-widenable-condition",
          "-loop-reduce",
          "--aggressive-instcombine",
          "--irce",
          "--div-rem-pairs",
          "--gvn",
          "--loop-unswitch",
          "--always-inline",
          "--simplifycfg",
          "--lower-matrix-intrinsics",
          "--strip-debug-declare",
          "--reassociate",
          "--loop-simplify",
          "--elim-avail-extern",
          "--guard-widening",
          "--pgo-memop-opt",
          "--add-discriminators",
          "--functionattrs",
          "--lower-guard-intrinsic",
          "--mergereturn",
          "--memcpyopt",
          "--lower-constant-intrinsics",
          "--name-anon-globals",
          "--gvn-hoist",
          "--inject-tli-mappings",
          "--simple-loop-unswitch",
          "--alignment-from-assumptions",
          "--partially-inline-libcalls"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--lower-widenable-condition",
      "-loop-reduce",
      "--aggressive-instcombine",
      "--irce",
      "--div-rem-pairs",
      "--gvn",
      "--loop-unswitch",
      "--always-inline",
      "--simplifycfg",
      "--lower-matrix-intrinsics",
      "--strip-debug-declare",
      "--reassociate",
      "--loop-simplify",
      "--elim-avail-extern",
      "--guard-widening",
      "--pgo-memop-opt",
      "--add-discriminators",
      "--functionattrs",
      "--lower-guard-intrinsic",
      "--mergereturn",
      "--memcpyopt",
      "--lower-constant-intrinsics",
      "--name-anon-globals",
      "--gvn-hoist",
      "--inject-tli-mappings",
      "--simple-loop-unswitch",
      "--alignment-from-assumptions",
      "--partially-inline-libcalls"
    ],
    "performance_vs_Oz": "+0.3%"
  }
}
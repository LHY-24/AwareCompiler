{
  "program_id": "github-v0_7609.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 11,
    "onePredOneSuc": 8,
    "onePredTwoSuc": 1,
    "oneSuccessor": 9,
    "twoPred": 4,
    "twoPredOneSuc": 1,
    "twoEach": 2,
    "twoSuccessor": 5,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 18,
    "BeginPhi": 0,
    "BranchCount": 14,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 19,
    "const32Bit": 30,
    "const64Bit": 24,
    "numConstZeroes": 28,
    "numConstOnes": 18,
    "UncondBranches": 9,
    "binaryConstArg": 8,
    "NumAShrInst": 0,
    "NumAddInst": 8,
    "NumAllocaInst": 11,
    "NumAndInst": 1,
    "BlockMid": 3,
    "BlockLow": 15,
    "NumBitCastInst": 0,
    "NumBrInst": 14,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 15,
    "NumICmpInst": 5,
    "NumLShrInst": 0,
    "NumLoadInst": 23,
    "NumMulInst": 1,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 15,
    "NumSubInst": 0,
    "NumTruncInst": 3,
    "NumXorInst": 0,
    "NumZExtInst": 2,
    "TotalBlocks": 18,
    "TotalInsts": 112,
    "TotalMemInst": 71,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 42
  },
  "baseline_oz_instcount": 112,
  "knowledge_base_entry": [
    "--memcpyopt",
    "--early-cse-memssa",
    "--loop-deletion",
    "--early-cse",
    "--aggressive-instcombine",
    "--licm",
    "--early-cse",
    "--simplifycfg",
    "--instcombine",
    "--mergefunc"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--dse",
          "--div-rem-pairs",
          "--strip-dead-prototypes",
          "--partial-inliner",
          "--indvars",
          "--aggressive-instcombine",
          "--mergeicmps",
          "--adce",
          "--inject-tli-mappings",
          "--loop-unroll-and-jam",
          "--lowerinvoke",
          "--constmerge",
          "--loop-rotate",
          "--simplifycfg",
          "--sink",
          "--strip-debug-declare",
          "--sroa",
          "--loop-interchange",
          "--coro-split",
          "--globalsplit",
          "--load-store-vectorizer",
          "--loop-predication",
          "--loop-instsimplify",
          "--loop-data-prefetch",
          "--constprop"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--dse",
      "--div-rem-pairs",
      "--strip-dead-prototypes",
      "--partial-inliner",
      "--indvars",
      "--aggressive-instcombine",
      "--mergeicmps",
      "--adce",
      "--inject-tli-mappings",
      "--loop-unroll-and-jam",
      "--lowerinvoke",
      "--constmerge",
      "--loop-rotate",
      "--simplifycfg",
      "--sink",
      "--strip-debug-declare",
      "--sroa",
      "--loop-interchange",
      "--coro-split",
      "--globalsplit",
      "--load-store-vectorizer",
      "--loop-predication",
      "--loop-instsimplify",
      "--loop-data-prefetch",
      "--constprop"
    ],
    "performance_vs_Oz": "+3.6%"
  }
}
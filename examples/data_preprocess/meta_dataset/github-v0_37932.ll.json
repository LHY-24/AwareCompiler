{
  "program_id": "github-v0_37932.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 123,
    "onePredOneSuc": 81,
    "onePredTwoSuc": 41,
    "oneSuccessor": 104,
    "twoPred": 64,
    "twoPredOneSuc": 20,
    "twoEach": 42,
    "twoSuccessor": 87,
    "morePreds": 5,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 196,
    "BeginPhi": 0,
    "BranchCount": 191,
    "returnInt": 78,
    "CriticalCount": 62,
    "NumEdges": 281,
    "const32Bit": 340,
    "const64Bit": 50,
    "numConstZeroes": 216,
    "numConstOnes": 72,
    "UncondBranches": 104,
    "binaryConstArg": 16,
    "NumAShrInst": 0,
    "NumAddInst": 10,
    "NumAllocaInst": 38,
    "NumAndInst": 4,
    "BlockMid": 6,
    "BlockLow": 190,
    "NumBitCastInst": 9,
    "NumBrInst": 191,
    "NumCallInst": 103,
    "NumGetElementPtrInst": 115,
    "NumICmpInst": 87,
    "NumLShrInst": 4,
    "NumLoadInst": 242,
    "NumMulInst": 4,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 4,
    "NumSExtInst": 21,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 124,
    "NumSubInst": 2,
    "NumTruncInst": 8,
    "NumXorInst": 8,
    "NumZExtInst": 2,
    "TotalBlocks": 196,
    "TotalInsts": 981,
    "TotalMemInst": 622,
    "TotalFuncs": 44,
    "ArgsPhi": 0,
    "testUnary": 320
  },
  "baseline_oz_instcount": 980,
  "knowledge_base_entry": [
    "--mergefunc",
    "--gvn",
    "--early-cse-memssa",
    "--flattencfg",
    "--aggressive-instcombine",
    "--ipsccp",
    "--globaldce",
    "--aggressive-instcombine",
    "--sroa",
    "--elim-avail-extern",
    "--nary-reassociate",
    "--dse",
    "--aggressive-instcombine",
    "--globalopt",
    "--correlated-propagation",
    "--instcombine",
    "--ipsccp",
    "--mergefunc",
    "--gvn",
    "--aggressive-instcombine",
    "--ipsccp"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-deletion",
          "--loop-guard-widening",
          "--name-anon-globals",
          "--loop-load-elim",
          "--loop-idiom",
          "--aggressive-instcombine",
          "--licm",
          "--inferattrs",
          "--tailcallelim",
          "--consthoist",
          "--add-discriminators",
          "--mergereturn",
          "--simplifycfg",
          "--ipsccp",
          "--constprop",
          "--div-rem-pairs",
          "--separate-const-offset-from-gep",
          "--ipconstprop",
          "--loop-interchange",
          "--mergefunc",
          "--post-inline-ee-instrument",
          "--rewrite-statepoints-for-gc",
          "--dce",
          "--guard-widening",
          "--bdce",
          "--slp-vectorizer",
          "--libcalls-shrinkwrap",
          "--early-cse-memssa"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-deletion",
      "--loop-guard-widening",
      "--name-anon-globals",
      "--loop-load-elim",
      "--loop-idiom",
      "--aggressive-instcombine",
      "--licm",
      "--inferattrs",
      "--tailcallelim",
      "--consthoist",
      "--add-discriminators",
      "--mergereturn",
      "--simplifycfg",
      "--ipsccp",
      "--constprop",
      "--div-rem-pairs",
      "--separate-const-offset-from-gep",
      "--ipconstprop",
      "--loop-interchange",
      "--mergefunc",
      "--post-inline-ee-instrument",
      "--rewrite-statepoints-for-gc",
      "--dce",
      "--guard-widening",
      "--bdce",
      "--slp-vectorizer",
      "--libcalls-shrinkwrap",
      "--early-cse-memssa"
    ],
    "performance_vs_Oz": "+0.2%"
  }
}
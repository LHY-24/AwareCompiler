{
  "program_id": "linux-v0_3986.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 17,
    "onePredOneSuc": 10,
    "onePredTwoSuc": 7,
    "oneSuccessor": 15,
    "twoPred": 9,
    "twoPredOneSuc": 5,
    "twoEach": 2,
    "twoSuccessor": 12,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 36,
    "BeginPhi": 0,
    "BranchCount": 27,
    "returnInt": 15,
    "CriticalCount": 7,
    "NumEdges": 39,
    "const32Bit": 83,
    "const64Bit": 7,
    "numConstZeroes": 35,
    "numConstOnes": 38,
    "UncondBranches": 15,
    "binaryConstArg": 15,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 25,
    "NumAndInst": 11,
    "BlockMid": 6,
    "BlockLow": 30,
    "NumBitCastInst": 5,
    "NumBrInst": 27,
    "NumCallInst": 19,
    "NumGetElementPtrInst": 26,
    "NumICmpInst": 12,
    "NumLShrInst": 2,
    "NumLoadInst": 71,
    "NumMulInst": 0,
    "NumOrInst": 3,
    "NumPHIInst": 0,
    "NumRetInst": 9,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 36,
    "NumSubInst": 0,
    "NumTruncInst": 3,
    "NumXorInst": 0,
    "NumZExtInst": 9,
    "TotalBlocks": 36,
    "TotalInsts": 260,
    "TotalMemInst": 177,
    "TotalFuncs": 16,
    "ArgsPhi": 0,
    "testUnary": 113
  },
  "baseline_oz_instcount": 260,
  "knowledge_base_entry": [
    "--bdce",
    "--aggressive-instcombine",
    "--gvn-hoist",
    "--adce",
    "--inline",
    "--early-cse-memssa",
    "--gvn",
    "--dce",
    "--mergefunc",
    "--instcombine",
    "--adce",
    "--inline",
    "--early-cse-memssa",
    "--jump-threading",
    "--prune-eh",
    "--mem2reg",
    "--simplifycfg",
    "--newgvn",
    "--correlated-propagation",
    "--die",
    "--jump-threading",
    "--aggressive-instcombine",
    "--licm",
    "--jump-threading"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--forceattrs",
          "--strip",
          "--tailcallelim",
          "--post-inline-ee-instrument",
          "--deadargelim",
          "--sccp",
          "--aggressive-instcombine",
          "--guard-widening",
          "--rewrite-statepoints-for-gc",
          "--lower-expect",
          "--elim-avail-extern"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--forceattrs",
      "--strip",
      "--tailcallelim",
      "--post-inline-ee-instrument",
      "--deadargelim",
      "--sccp",
      "--aggressive-instcombine",
      "--guard-widening",
      "--rewrite-statepoints-for-gc",
      "--lower-expect",
      "--elim-avail-extern"
    ],
    "performance_vs_Oz": "+0.8%"
  }
}
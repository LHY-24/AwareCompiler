{
  "program_id": "linux-v0_157.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 13,
    "onePredOneSuc": 8,
    "onePredTwoSuc": 3,
    "oneSuccessor": 11,
    "twoPred": 6,
    "twoPredOneSuc": 1,
    "twoEach": 5,
    "twoSuccessor": 9,
    "morePreds": 1,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 22,
    "BeginPhi": 2,
    "BranchCount": 20,
    "returnInt": 3,
    "CriticalCount": 5,
    "NumEdges": 29,
    "const32Bit": 67,
    "const64Bit": 4,
    "numConstZeroes": 26,
    "numConstOnes": 26,
    "UncondBranches": 11,
    "binaryConstArg": 14,
    "NumAShrInst": 3,
    "NumAddInst": 2,
    "NumAllocaInst": 19,
    "NumAndInst": 3,
    "BlockMid": 4,
    "BlockLow": 20,
    "NumBitCastInst": 5,
    "NumBrInst": 20,
    "NumCallInst": 6,
    "NumGetElementPtrInst": 20,
    "NumICmpInst": 9,
    "NumLShrInst": 1,
    "NumLoadInst": 55,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 2,
    "NumRetInst": 4,
    "NumSExtInst": 4,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 29,
    "NumSubInst": 5,
    "NumTruncInst": 7,
    "NumXorInst": 0,
    "NumZExtInst": 17,
    "TotalBlocks": 24,
    "TotalInsts": 215,
    "TotalMemInst": 129,
    "TotalFuncs": 5,
    "ArgsPhi": 4,
    "testUnary": 109
  },
  "baseline_oz_instcount": 215,
  "knowledge_base_entry": [
    "--partially-inline-libcalls",
    "--gvn",
    "--aggressive-instcombine",
    "--newgvn",
    "--loop-simplifycfg",
    "--load-store-vectorizer",
    "--mem2reg",
    "--licm",
    "--prune-eh",
    "--elim-avail-extern",
    "--sroa",
    "--early-cse",
    "--sroa",
    "--loop-simplifycfg",
    "--early-cse-memssa",
    "--mem2reg",
    "--ipsccp",
    "--lower-expect",
    "--loop-instsimplify",
    "--loop-simplifycfg",
    "--correlated-propagation",
    "--jump-threading",
    "--sccp",
    "--gvn",
    "--licm",
    "--prune-eh",
    "--elim-avail-extern",
    "--slp-vectorizer",
    "--instsimplify"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--float2int",
          "--loop-simplify",
          "--aggressive-instcombine",
          "--alignment-from-assumptions",
          "--guard-widening",
          "--gvn-hoist",
          "--pgo-memop-opt",
          "--coro-elide",
          "--instsimplify",
          "--tailcallelim",
          "--argpromotion",
          "--name-anon-globals",
          "--lowerinvoke",
          "--memcpyopt",
          "--lower-guard-intrinsic",
          "--ipconstprop",
          "--loop-predication",
          "--load-store-vectorizer"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--float2int",
      "--loop-simplify",
      "--aggressive-instcombine",
      "--alignment-from-assumptions",
      "--guard-widening",
      "--gvn-hoist",
      "--pgo-memop-opt",
      "--coro-elide",
      "--instsimplify",
      "--tailcallelim",
      "--argpromotion",
      "--name-anon-globals",
      "--lowerinvoke",
      "--memcpyopt",
      "--lower-guard-intrinsic",
      "--ipconstprop",
      "--loop-predication",
      "--load-store-vectorizer"
    ],
    "performance_vs_Oz": "+2.3%"
  }
}
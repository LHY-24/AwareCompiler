{
  "program_id": "github-v0_30508.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 11,
    "onePredOneSuc": 5,
    "onePredTwoSuc": 5,
    "oneSuccessor": 11,
    "twoPred": 10,
    "twoPredOneSuc": 5,
    "twoEach": 4,
    "twoSuccessor": 10,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 24,
    "BeginPhi": 0,
    "BranchCount": 21,
    "returnInt": 0,
    "CriticalCount": 9,
    "NumEdges": 31,
    "const32Bit": 25,
    "const64Bit": 1,
    "numConstZeroes": 4,
    "numConstOnes": 10,
    "UncondBranches": 11,
    "binaryConstArg": 5,
    "NumAShrInst": 0,
    "NumAddInst": 3,
    "NumAllocaInst": 6,
    "NumAndInst": 0,
    "BlockMid": 0,
    "BlockLow": 24,
    "NumBitCastInst": 0,
    "NumBrInst": 21,
    "NumCallInst": 8,
    "NumGetElementPtrInst": 15,
    "NumICmpInst": 10,
    "NumLShrInst": 0,
    "NumLoadInst": 46,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 26,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 7,
    "NumSubInst": 2,
    "NumTruncInst": 4,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 24,
    "TotalInsts": 151,
    "TotalMemInst": 82,
    "TotalFuncs": 4,
    "ArgsPhi": 0,
    "testUnary": 82
  },
  "baseline_oz_instcount": 151,
  "knowledge_base_entry": [
    "--loop-simplify",
    "--newgvn",
    "--jump-threading",
    "--dse",
    "--globalopt",
    "--loweratomic",
    "--aggressive-instcombine",
    "--mergefunc",
    "--loop-reroll",
    "--indvars",
    "--slsr"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--instnamer",
          "--canonicalize-aliases",
          "--forceattrs",
          "--loop-deletion",
          "--strip-nondebug",
          "--elim-avail-extern",
          "--consthoist",
          "--adce",
          "--separate-const-offset-from-gep",
          "--ipsccp",
          "--functionattrs",
          "--strip-dead-prototypes",
          "--simplifycfg",
          "--jump-threading",
          "--dse",
          "--early-cse-memssa",
          "--aggressive-instcombine",
          "--constprop",
          "--redundant-dbg-inst-elim",
          "--float2int",
          "--loop-guard-widening",
          "--lower-guard-intrinsic",
          "--instsimplify",
          "--inline",
          "--loop-unswitch",
          "--simple-loop-unswitch",
          "--libcalls-shrinkwrap",
          "--correlated-propagation",
          "--pgo-memop-opt"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+5.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--instnamer",
      "--canonicalize-aliases",
      "--forceattrs",
      "--loop-deletion",
      "--strip-nondebug",
      "--elim-avail-extern",
      "--consthoist",
      "--adce",
      "--separate-const-offset-from-gep",
      "--ipsccp",
      "--functionattrs",
      "--strip-dead-prototypes",
      "--simplifycfg",
      "--jump-threading",
      "--dse",
      "--early-cse-memssa",
      "--aggressive-instcombine",
      "--constprop",
      "--redundant-dbg-inst-elim",
      "--float2int",
      "--loop-guard-widening",
      "--lower-guard-intrinsic",
      "--instsimplify",
      "--inline",
      "--loop-unswitch",
      "--simple-loop-unswitch",
      "--libcalls-shrinkwrap",
      "--correlated-propagation",
      "--pgo-memop-opt"
    ],
    "performance_vs_Oz": "+5.3%"
  }
}
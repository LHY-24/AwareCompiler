{
  "program_id": "linux-v0_13614.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 45,
    "onePredOneSuc": 33,
    "onePredTwoSuc": 10,
    "oneSuccessor": 39,
    "twoPred": 14,
    "twoPredOneSuc": 2,
    "twoEach": 9,
    "twoSuccessor": 24,
    "morePreds": 4,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 87,
    "BeginPhi": 0,
    "BranchCount": 63,
    "returnInt": 17,
    "CriticalCount": 9,
    "NumEdges": 87,
    "const32Bit": 241,
    "const64Bit": 62,
    "numConstZeroes": 121,
    "numConstOnes": 106,
    "UncondBranches": 39,
    "binaryConstArg": 25,
    "NumAShrInst": 0,
    "NumAddInst": 5,
    "NumAllocaInst": 76,
    "NumAndInst": 5,
    "BlockMid": 8,
    "BlockLow": 79,
    "NumBitCastInst": 10,
    "NumBrInst": 63,
    "NumCallInst": 55,
    "NumGetElementPtrInst": 91,
    "NumICmpInst": 28,
    "NumLShrInst": 0,
    "NumLoadInst": 189,
    "NumMulInst": 5,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 24,
    "NumSExtInst": 1,
    "NumSelectInst": 3,
    "NumShlInst": 7,
    "NumStoreInst": 105,
    "NumSubInst": 0,
    "NumTruncInst": 7,
    "NumXorInst": 4,
    "NumZExtInst": 20,
    "TotalBlocks": 87,
    "TotalInsts": 708,
    "TotalMemInst": 516,
    "TotalFuncs": 36,
    "ArgsPhi": 0,
    "testUnary": 312
  },
  "baseline_oz_instcount": 710,
  "knowledge_base_entry": [
    "--sink",
    "--load-store-vectorizer",
    "--elim-avail-extern",
    "--adce",
    "--inline",
    "--aggressive-instcombine",
    "--lower-expect",
    "--reassociate",
    "--elim-avail-extern",
    "--dse",
    "--aggressive-instcombine",
    "--mergefunc",
    "--elim-avail-extern",
    "--dce",
    "--early-cse-memssa",
    "--aggressive-instcombine",
    "--gvn",
    "--early-cse",
    "--elim-avail-extern",
    "--dce",
    "--elim-avail-extern",
    "--lower-expect",
    "--instcombine",
    "--newgvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--dse",
          "--adce",
          "--gvn-hoist",
          "--correlated-propagation",
          "--lower-constant-intrinsics",
          "--scalarizer",
          "--tailcallelim",
          "--constmerge",
          "--constprop",
          "--rpo-functionattrs",
          "--mergefunc",
          "--load-store-vectorizer",
          "--cross-dso-cfi",
          "--add-discriminators"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--dse",
      "--adce",
      "--gvn-hoist",
      "--correlated-propagation",
      "--lower-constant-intrinsics",
      "--scalarizer",
      "--tailcallelim",
      "--constmerge",
      "--constprop",
      "--rpo-functionattrs",
      "--mergefunc",
      "--load-store-vectorizer",
      "--cross-dso-cfi",
      "--add-discriminators"
    ],
    "performance_vs_Oz": "+0.3%"
  }
}
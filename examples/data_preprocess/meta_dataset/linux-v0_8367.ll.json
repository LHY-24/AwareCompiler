{
  "program_id": "linux-v0_8367.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 55,
    "onePredOneSuc": 33,
    "onePredTwoSuc": 22,
    "oneSuccessor": 49,
    "twoPred": 29,
    "twoPredOneSuc": 16,
    "twoEach": 7,
    "twoSuccessor": 36,
    "morePreds": 1,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 101,
    "BeginPhi": 2,
    "BranchCount": 85,
    "returnInt": 23,
    "CriticalCount": 23,
    "NumEdges": 121,
    "const32Bit": 97,
    "const64Bit": 6,
    "numConstZeroes": 65,
    "numConstOnes": 64,
    "UncondBranches": 49,
    "binaryConstArg": 39,
    "NumAShrInst": 0,
    "NumAddInst": 3,
    "NumAllocaInst": 25,
    "NumAndInst": 16,
    "BlockMid": 3,
    "BlockLow": 100,
    "NumBitCastInst": 0,
    "NumBrInst": 85,
    "NumCallInst": 48,
    "NumGetElementPtrInst": 20,
    "NumICmpInst": 36,
    "NumLShrInst": 5,
    "NumLoadInst": 101,
    "NumMulInst": 0,
    "NumOrInst": 6,
    "NumPHIInst": 2,
    "NumRetInst": 18,
    "NumSExtInst": 12,
    "NumSelectInst": 5,
    "NumShlInst": 1,
    "NumStoreInst": 51,
    "NumSubInst": 0,
    "NumTruncInst": 19,
    "NumXorInst": 10,
    "NumZExtInst": 28,
    "TotalBlocks": 103,
    "TotalInsts": 491,
    "TotalMemInst": 245,
    "TotalFuncs": 26,
    "ArgsPhi": 4,
    "testUnary": 185
  },
  "baseline_oz_instcount": 496,
  "knowledge_base_entry": [
    "--flattencfg",
    "--load-store-vectorizer",
    "--aggressive-instcombine",
    "--reassociate",
    "--ipsccp",
    "--globalopt",
    "--newgvn",
    "--gvn-hoist",
    "--mergefunc",
    "--aggressive-instcombine",
    "--die",
    "--inline",
    "--aggressive-instcombine",
    "--dse",
    "--bdce",
    "--instcombine",
    "--simplifycfg",
    "--ipsccp",
    "--globalopt",
    "--early-cse-memssa",
    "--lower-expect",
    "--load-store-vectorizer",
    "--mergefunc",
    "--correlated-propagation",
    "--jump-threading",
    "--slsr"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--gvn-hoist",
          "--sancov",
          "--separate-const-offset-from-gep",
          "--loop-simplify",
          "--speculative-execution",
          "--loop-idiom",
          "-loop-reduce",
          "--hotcoldsplit",
          "--globalopt",
          "--inline",
          "--tailcallelim",
          "--attributor",
          "--name-anon-globals",
          "--loop-unroll",
          "--lower-constant-intrinsics",
          "--rewrite-statepoints-for-gc",
          "--aggressive-instcombine",
          "--loop-deletion",
          "--globalsplit",
          "--loop-predication",
          "--lower-widenable-condition",
          "--newgvn",
          "--float2int",
          "--sroa"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--gvn-hoist",
      "--sancov",
      "--separate-const-offset-from-gep",
      "--loop-simplify",
      "--speculative-execution",
      "--loop-idiom",
      "-loop-reduce",
      "--hotcoldsplit",
      "--globalopt",
      "--inline",
      "--tailcallelim",
      "--attributor",
      "--name-anon-globals",
      "--loop-unroll",
      "--lower-constant-intrinsics",
      "--rewrite-statepoints-for-gc",
      "--aggressive-instcombine",
      "--loop-deletion",
      "--globalsplit",
      "--loop-predication",
      "--lower-widenable-condition",
      "--newgvn",
      "--float2int",
      "--sroa"
    ],
    "performance_vs_Oz": "+1.8%"
  }
}
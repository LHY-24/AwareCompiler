{
  "program_id": "github-v0_41873.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 42,
    "onePredOneSuc": 32,
    "onePredTwoSuc": 10,
    "oneSuccessor": 35,
    "twoPred": 8,
    "twoPredOneSuc": 1,
    "twoEach": 4,
    "twoSuccessor": 18,
    "morePreds": 3,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 62,
    "BeginPhi": 2,
    "BranchCount": 53,
    "returnInt": 5,
    "CriticalCount": 2,
    "NumEdges": 71,
    "const32Bit": 112,
    "const64Bit": 0,
    "numConstZeroes": 40,
    "numConstOnes": 52,
    "UncondBranches": 35,
    "binaryConstArg": 7,
    "NumAShrInst": 0,
    "NumAddInst": 6,
    "NumAllocaInst": 40,
    "NumAndInst": 3,
    "BlockMid": 4,
    "BlockLow": 60,
    "NumBitCastInst": 0,
    "NumBrInst": 53,
    "NumCallInst": 11,
    "NumGetElementPtrInst": 22,
    "NumICmpInst": 18,
    "NumLShrInst": 0,
    "NumLoadInst": 102,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 2,
    "NumRetInst": 11,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 68,
    "NumSubInst": 4,
    "NumTruncInst": 1,
    "NumXorInst": 0,
    "NumZExtInst": 14,
    "TotalBlocks": 64,
    "TotalInsts": 355,
    "TotalMemInst": 243,
    "TotalFuncs": 11,
    "ArgsPhi": 4,
    "testUnary": 157
  },
  "baseline_oz_instcount": 355,
  "knowledge_base_entry": [
    "--loop-unroll",
    "--early-cse-memssa",
    "--memcpyopt",
    "--mergefunc",
    "--gvn",
    "--adce",
    "--load-store-vectorizer",
    "--lower-constant-intrinsics",
    "--aggressive-instcombine",
    "--early-cse",
    "--load-store-vectorizer",
    "--gvn-hoist",
    "--simplifycfg",
    "--globalopt",
    "--sccp"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--nary-reassociate",
          "--cross-dso-cfi",
          "--functionattrs",
          "--die",
          "--strip-nondebug",
          "--loop-unroll",
          "--loop-vectorize",
          "--strip-debug-declare",
          "--aggressive-instcombine",
          "--early-cse",
          "--separate-const-offset-from-gep",
          "--loop-idiom",
          "--newgvn",
          "--slp-vectorizer",
          "--loop-data-prefetch",
          "--early-cse-memssa",
          "--loop-predication",
          "--libcalls-shrinkwrap",
          "--called-value-propagation",
          "--lowerswitch",
          "--infer-address-spaces",
          "--loop-distribute",
          "--load-store-vectorizer",
          "--globaldce",
          "--jump-threading",
          "--loweratomic",
          "--rewrite-statepoints-for-gc",
          "--lower-guard-intrinsic"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--nary-reassociate",
      "--cross-dso-cfi",
      "--functionattrs",
      "--die",
      "--strip-nondebug",
      "--loop-unroll",
      "--loop-vectorize",
      "--strip-debug-declare",
      "--aggressive-instcombine",
      "--early-cse",
      "--separate-const-offset-from-gep",
      "--loop-idiom",
      "--newgvn",
      "--slp-vectorizer",
      "--loop-data-prefetch",
      "--early-cse-memssa",
      "--loop-predication",
      "--libcalls-shrinkwrap",
      "--called-value-propagation",
      "--lowerswitch",
      "--infer-address-spaces",
      "--loop-distribute",
      "--load-store-vectorizer",
      "--globaldce",
      "--jump-threading",
      "--loweratomic",
      "--rewrite-statepoints-for-gc",
      "--lower-guard-intrinsic"
    ],
    "performance_vs_Oz": "+0.6%"
  }
}
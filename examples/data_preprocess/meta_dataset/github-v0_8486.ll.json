{
  "program_id": "github-v0_8486.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 18,
    "onePredOneSuc": 12,
    "onePredTwoSuc": 6,
    "oneSuccessor": 14,
    "twoPred": 7,
    "twoPredOneSuc": 2,
    "twoEach": 4,
    "twoSuccessor": 12,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 28,
    "BeginPhi": 0,
    "BranchCount": 26,
    "returnInt": 4,
    "CriticalCount": 6,
    "NumEdges": 38,
    "const32Bit": 56,
    "const64Bit": 18,
    "numConstZeroes": 19,
    "numConstOnes": 18,
    "UncondBranches": 14,
    "binaryConstArg": 20,
    "NumAShrInst": 3,
    "NumAddInst": 8,
    "NumAllocaInst": 13,
    "NumAndInst": 6,
    "BlockMid": 3,
    "BlockLow": 25,
    "NumBitCastInst": 0,
    "NumBrInst": 26,
    "NumCallInst": 8,
    "NumGetElementPtrInst": 16,
    "NumICmpInst": 13,
    "NumLShrInst": 0,
    "NumLoadInst": 59,
    "NumMulInst": 0,
    "NumOrInst": 4,
    "NumPHIInst": 0,
    "NumRetInst": 2,
    "NumSExtInst": 5,
    "NumSelectInst": 0,
    "NumShlInst": 3,
    "NumStoreInst": 34,
    "NumSubInst": 1,
    "NumTruncInst": 10,
    "NumXorInst": 0,
    "NumZExtInst": 11,
    "TotalBlocks": 28,
    "TotalInsts": 223,
    "TotalMemInst": 130,
    "TotalFuncs": 8,
    "ArgsPhi": 0,
    "testUnary": 98
  },
  "baseline_oz_instcount": 223,
  "knowledge_base_entry": [
    "--indvars",
    "-loop-reduce",
    "--load-store-vectorizer",
    "-loop-reduce",
    "--early-cse-memssa",
    "--lower-constant-intrinsics",
    "--aggressive-instcombine",
    "--gvn",
    "--prune-eh",
    "--gvn-hoist",
    "--mergefunc",
    "--aggressive-instcombine",
    "--gvn",
    "--aggressive-instcombine",
    "--lower-constant-intrinsics",
    "--early-cse-memssa",
    "--dse",
    "--licm",
    "--sccp",
    "--licm",
    "--load-store-vectorizer",
    "--reassociate",
    "--mem2reg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--ipconstprop",
          "--loop-predication",
          "--correlated-propagation",
          "--sccp",
          "--instnamer",
          "--hotcoldsplit",
          "--lower-expect",
          "--separate-const-offset-from-gep",
          "--strip-dead-prototypes",
          "--lower-guard-intrinsic",
          "--aggressive-instcombine",
          "--loop-guard-widening",
          "--rewrite-statepoints-for-gc",
          "--coro-cleanup",
          "--ipsccp",
          "--loop-unswitch",
          "--lower-widenable-condition",
          "--loop-reroll",
          "--sancov",
          "--nary-reassociate",
          "--irce",
          "--div-rem-pairs",
          "--coro-early"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+4.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--ipconstprop",
      "--loop-predication",
      "--correlated-propagation",
      "--sccp",
      "--instnamer",
      "--hotcoldsplit",
      "--lower-expect",
      "--separate-const-offset-from-gep",
      "--strip-dead-prototypes",
      "--lower-guard-intrinsic",
      "--aggressive-instcombine",
      "--loop-guard-widening",
      "--rewrite-statepoints-for-gc",
      "--coro-cleanup",
      "--ipsccp",
      "--loop-unswitch",
      "--lower-widenable-condition",
      "--loop-reroll",
      "--sancov",
      "--nary-reassociate",
      "--irce",
      "--div-rem-pairs",
      "--coro-early"
    ],
    "performance_vs_Oz": "+4.5%"
  }
}
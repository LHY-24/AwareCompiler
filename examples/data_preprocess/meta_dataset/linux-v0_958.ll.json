{
  "program_id": "linux-v0_958.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 22,
    "onePredOneSuc": 10,
    "onePredTwoSuc": 9,
    "oneSuccessor": 19,
    "twoPred": 9,
    "twoPredOneSuc": 6,
    "twoEach": 2,
    "twoSuccessor": 13,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 42,
    "BeginPhi": 0,
    "BranchCount": 32,
    "returnInt": 6,
    "CriticalCount": 8,
    "NumEdges": 45,
    "const32Bit": 82,
    "const64Bit": 7,
    "numConstZeroes": 39,
    "numConstOnes": 23,
    "UncondBranches": 19,
    "binaryConstArg": 6,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 18,
    "NumAndInst": 2,
    "BlockMid": 3,
    "BlockLow": 39,
    "NumBitCastInst": 8,
    "NumBrInst": 32,
    "NumCallInst": 27,
    "NumGetElementPtrInst": 28,
    "NumICmpInst": 14,
    "NumLShrInst": 0,
    "NumLoadInst": 60,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 10,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 24,
    "NumSubInst": 2,
    "NumTruncInst": 1,
    "NumXorInst": 0,
    "NumZExtInst": 7,
    "TotalBlocks": 42,
    "TotalInsts": 239,
    "TotalMemInst": 157,
    "TotalFuncs": 22,
    "ArgsPhi": 0,
    "testUnary": 96
  },
  "baseline_oz_instcount": 240,
  "knowledge_base_entry": [
    "--dce",
    "--early-cse",
    "--jump-threading",
    "--mldst-motion",
    "--simplifycfg",
    "--dce",
    "--elim-avail-extern",
    "--adce",
    "--mergefunc",
    "--instcombine",
    "--gvn",
    "--inline",
    "--die",
    "--aggressive-instcombine",
    "--ipsccp",
    "--nary-reassociate",
    "--inline",
    "--slp-vectorizer",
    "--mem2reg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--add-discriminators",
          "--consthoist",
          "--inline",
          "--simplifycfg",
          "--load-store-vectorizer",
          "--barrier",
          "--gvn",
          "--redundant-dbg-inst-elim",
          "--forceattrs",
          "--deadargelim",
          "--slp-vectorizer",
          "--float2int",
          "--mergeicmps",
          "--correlated-propagation",
          "--sccp",
          "--coro-split"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--add-discriminators",
      "--consthoist",
      "--inline",
      "--simplifycfg",
      "--load-store-vectorizer",
      "--barrier",
      "--gvn",
      "--redundant-dbg-inst-elim",
      "--forceattrs",
      "--deadargelim",
      "--slp-vectorizer",
      "--float2int",
      "--mergeicmps",
      "--correlated-propagation",
      "--sccp",
      "--coro-split"
    ],
    "performance_vs_Oz": "+0.4%"
  }
}
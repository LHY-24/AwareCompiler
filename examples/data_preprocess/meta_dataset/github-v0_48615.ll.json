{
  "program_id": "github-v0_48615.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 15,
    "onePredOneSuc": 10,
    "onePredTwoSuc": 2,
    "oneSuccessor": 13,
    "twoPred": 6,
    "twoPredOneSuc": 2,
    "twoEach": 4,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 24,
    "BeginPhi": 0,
    "BranchCount": 20,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 27,
    "const32Bit": 32,
    "const64Bit": 73,
    "numConstZeroes": 66,
    "numConstOnes": 33,
    "UncondBranches": 13,
    "binaryConstArg": 8,
    "NumAShrInst": 0,
    "NumAddInst": 7,
    "NumAllocaInst": 15,
    "NumAndInst": 0,
    "BlockMid": 6,
    "BlockLow": 18,
    "NumBitCastInst": 20,
    "NumBrInst": 20,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 55,
    "NumICmpInst": 7,
    "NumLShrInst": 0,
    "NumLoadInst": 53,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 31,
    "NumSubInst": 2,
    "NumTruncInst": 4,
    "NumXorInst": 0,
    "NumZExtInst": 22,
    "TotalBlocks": 24,
    "TotalInsts": 250,
    "TotalMemInst": 161,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 117
  },
  "baseline_oz_instcount": 250,
  "knowledge_base_entry": [
    "--memcpyopt",
    "--early-cse",
    "--licm",
    "--mem2reg",
    "--aggressive-instcombine",
    "--early-cse",
    "--mldst-motion",
    "--dse",
    "--dce",
    "--simplifycfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--callsite-splitting",
          "--coro-elide",
          "--loop-unroll",
          "--deadargelim",
          "--correlated-propagation",
          "--loop-simplifycfg",
          "--ee-instrument",
          "--guard-widening",
          "--loop-rotate",
          "--constmerge",
          "--strip-dead-prototypes",
          "--lower-expect",
          "--sink",
          "--coro-cleanup",
          "--lower-constant-intrinsics",
          "--loop-reroll",
          "--simplifycfg",
          "--loop-unroll-and-jam",
          "--mergeicmps",
          "--dce",
          "--aggressive-instcombine",
          "--rpo-functionattrs",
          "--loop-guard-widening",
          "--insert-gcov-profiling",
          "--loop-versioning-licm",
          "--newgvn",
          "--loweratomic",
          "-loop-reduce",
          "--add-discriminators",
          "--load-store-vectorizer"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--callsite-splitting",
      "--coro-elide",
      "--loop-unroll",
      "--deadargelim",
      "--correlated-propagation",
      "--loop-simplifycfg",
      "--ee-instrument",
      "--guard-widening",
      "--loop-rotate",
      "--constmerge",
      "--strip-dead-prototypes",
      "--lower-expect",
      "--sink",
      "--coro-cleanup",
      "--lower-constant-intrinsics",
      "--loop-reroll",
      "--simplifycfg",
      "--loop-unroll-and-jam",
      "--mergeicmps",
      "--dce",
      "--aggressive-instcombine",
      "--rpo-functionattrs",
      "--loop-guard-widening",
      "--insert-gcov-profiling",
      "--loop-versioning-licm",
      "--newgvn",
      "--loweratomic",
      "-loop-reduce",
      "--add-discriminators",
      "--load-store-vectorizer"
    ],
    "performance_vs_Oz": "+2.8%"
  }
}
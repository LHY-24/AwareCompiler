{
  "program_id": "github-v0_30189.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 22,
    "onePredOneSuc": 11,
    "onePredTwoSuc": 11,
    "oneSuccessor": 15,
    "twoPred": 4,
    "twoPredOneSuc": 2,
    "twoEach": 1,
    "twoSuccessor": 13,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 29,
    "BeginPhi": 0,
    "BranchCount": 28,
    "returnInt": 0,
    "CriticalCount": 4,
    "NumEdges": 41,
    "const32Bit": 36,
    "const64Bit": 3,
    "numConstZeroes": 10,
    "numConstOnes": 16,
    "UncondBranches": 15,
    "binaryConstArg": 6,
    "NumAShrInst": 0,
    "NumAddInst": 4,
    "NumAllocaInst": 12,
    "NumAndInst": 1,
    "BlockMid": 3,
    "BlockLow": 26,
    "NumBitCastInst": 6,
    "NumBrInst": 28,
    "NumCallInst": 1,
    "NumGetElementPtrInst": 11,
    "NumICmpInst": 14,
    "NumLShrInst": 0,
    "NumLoadInst": 54,
    "NumMulInst": 1,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 1,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 23,
    "NumSubInst": 0,
    "NumTruncInst": 3,
    "NumXorInst": 0,
    "NumZExtInst": 13,
    "TotalBlocks": 29,
    "TotalInsts": 183,
    "TotalMemInst": 101,
    "TotalFuncs": 2,
    "ArgsPhi": 0,
    "testUnary": 98
  },
  "baseline_oz_instcount": 184,
  "knowledge_base_entry": [
    "--early-cse",
    "--flattencfg",
    "--gvn-hoist",
    "--adce",
    "--ipsccp",
    "--aggressive-instcombine",
    "--elim-avail-extern",
    "--reassociate",
    "--early-cse-memssa",
    "--prune-eh",
    "--reassociate",
    "--globalopt",
    "--inline",
    "--gvn",
    "--instsimplify",
    "--aggressive-instcombine",
    "--elim-avail-extern",
    "--dse",
    "--lower-expect",
    "--bdce",
    "--mergefunc",
    "--aggressive-instcombine",
    "--inline",
    "--elim-avail-extern",
    "--aggressive-instcombine",
    "--die",
    "--mem2reg",
    "--elim-avail-extern",
    "--mergefunc",
    "--die"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--globalsplit",
          "--always-inline",
          "--sroa",
          "--die",
          "--loop-simplify",
          "--functionattrs",
          "--aggressive-instcombine",
          "--argpromotion",
          "--lowerinvoke",
          "--barrier",
          "--indvars",
          "--lower-expect",
          "--licm",
          "--nary-reassociate",
          "--loop-interchange",
          "--constmerge",
          "--prune-eh"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--globalsplit",
      "--always-inline",
      "--sroa",
      "--die",
      "--loop-simplify",
      "--functionattrs",
      "--aggressive-instcombine",
      "--argpromotion",
      "--lowerinvoke",
      "--barrier",
      "--indvars",
      "--lower-expect",
      "--licm",
      "--nary-reassociate",
      "--loop-interchange",
      "--constmerge",
      "--prune-eh"
    ],
    "performance_vs_Oz": "+1.1%"
  }
}
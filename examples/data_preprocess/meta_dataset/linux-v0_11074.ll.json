{
  "program_id": "linux-v0_11074.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 26,
    "onePredOneSuc": 18,
    "onePredTwoSuc": 8,
    "oneSuccessor": 24,
    "twoPred": 12,
    "twoPredOneSuc": 6,
    "twoEach": 0,
    "twoSuccessor": 16,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 52,
    "BeginPhi": 0,
    "BranchCount": 40,
    "returnInt": 26,
    "CriticalCount": 6,
    "NumEdges": 56,
    "const32Bit": 198,
    "const64Bit": 16,
    "numConstZeroes": 84,
    "numConstOnes": 71,
    "UncondBranches": 24,
    "binaryConstArg": 11,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 50,
    "NumAndInst": 6,
    "BlockMid": 5,
    "BlockLow": 47,
    "NumBitCastInst": 7,
    "NumBrInst": 40,
    "NumCallInst": 47,
    "NumGetElementPtrInst": 50,
    "NumICmpInst": 9,
    "NumLShrInst": 0,
    "NumLoadInst": 114,
    "NumMulInst": 0,
    "NumOrInst": 3,
    "NumPHIInst": 0,
    "NumRetInst": 12,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 72,
    "NumSubInst": 0,
    "NumTruncInst": 10,
    "NumXorInst": 0,
    "NumZExtInst": 23,
    "TotalBlocks": 52,
    "TotalInsts": 447,
    "TotalMemInst": 333,
    "TotalFuncs": 17,
    "ArgsPhi": 0,
    "testUnary": 205
  },
  "baseline_oz_instcount": 447,
  "knowledge_base_entry": [
    "--lowerinvoke",
    "--newgvn",
    "--newgvn",
    "--flattencfg",
    "--instcombine",
    "--load-store-vectorizer",
    "--aggressive-instcombine",
    "--elim-avail-extern",
    "--mergefunc",
    "--loop-reroll",
    "--loop-fusion"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--canonicalize-aliases",
          "--instnamer",
          "--loop-fusion",
          "--licm",
          "--strip-dead-prototypes",
          "--aggressive-instcombine",
          "--mergereturn",
          "--gvn-hoist",
          "--slsr",
          "--add-discriminators",
          "--redundant-dbg-inst-elim",
          "--separate-const-offset-from-gep",
          "--inline",
          "--lower-widenable-condition",
          "--constmerge",
          "--strip-debug-declare",
          "--partially-inline-libcalls",
          "--flattencfg",
          "--constprop",
          "--loop-unroll",
          "--dce",
          "--lcssa",
          "--loop-sink",
          "--correlated-propagation",
          "--loop-simplifycfg",
          "--guard-widening",
          "--adce"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--canonicalize-aliases",
      "--instnamer",
      "--loop-fusion",
      "--licm",
      "--strip-dead-prototypes",
      "--aggressive-instcombine",
      "--mergereturn",
      "--gvn-hoist",
      "--slsr",
      "--add-discriminators",
      "--redundant-dbg-inst-elim",
      "--separate-const-offset-from-gep",
      "--inline",
      "--lower-widenable-condition",
      "--constmerge",
      "--strip-debug-declare",
      "--partially-inline-libcalls",
      "--flattencfg",
      "--constprop",
      "--loop-unroll",
      "--dce",
      "--lcssa",
      "--loop-sink",
      "--correlated-propagation",
      "--loop-simplifycfg",
      "--guard-widening",
      "--adce"
    ],
    "performance_vs_Oz": "+0.9%"
  }
}
{
  "program_id": "github-v0_13937.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 21,
    "onePredOneSuc": 14,
    "onePredTwoSuc": 7,
    "oneSuccessor": 18,
    "twoPred": 7,
    "twoPredOneSuc": 4,
    "twoEach": 2,
    "twoSuccessor": 11,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 31,
    "BeginPhi": 0,
    "BranchCount": 29,
    "returnInt": 0,
    "CriticalCount": 3,
    "NumEdges": 40,
    "const32Bit": 36,
    "const64Bit": 16,
    "numConstZeroes": 5,
    "numConstOnes": 20,
    "UncondBranches": 18,
    "binaryConstArg": 34,
    "NumAShrInst": 0,
    "NumAddInst": 5,
    "NumAllocaInst": 11,
    "NumAndInst": 10,
    "BlockMid": 4,
    "BlockLow": 27,
    "NumBitCastInst": 8,
    "NumBrInst": 29,
    "NumCallInst": 0,
    "NumGetElementPtrInst": 0,
    "NumICmpInst": 11,
    "NumLShrInst": 8,
    "NumLoadInst": 42,
    "NumMulInst": 0,
    "NumOrInst": 5,
    "NumPHIInst": 0,
    "NumRetInst": 2,
    "NumSExtInst": 11,
    "NumSelectInst": 0,
    "NumShlInst": 7,
    "NumStoreInst": 34,
    "NumSubInst": 3,
    "NumTruncInst": 6,
    "NumXorInst": 1,
    "NumZExtInst": 3,
    "TotalBlocks": 31,
    "TotalInsts": 196,
    "TotalMemInst": 87,
    "TotalFuncs": 2,
    "ArgsPhi": 0,
    "testUnary": 81
  },
  "baseline_oz_instcount": 196,
  "knowledge_base_entry": [
    "--hotcoldsplit",
    "--mergefunc",
    "--loop-instsimplify",
    "--early-cse",
    "--lower-constant-intrinsics",
    "--loop-rotate",
    "--gvn",
    "--instcombine",
    "--aggressive-instcombine",
    "--globaldce",
    "--mergefunc",
    "--loop-simplifycfg",
    "--dce",
    "--jump-threading"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--pgo-memop-opt",
          "--loop-guard-widening",
          "--lower-guard-intrinsic",
          "--memcpyopt",
          "--indvars",
          "-loop-reduce",
          "--ipconstprop",
          "--callsite-splitting",
          "--name-anon-globals",
          "--mergefunc",
          "--simplifycfg",
          "--lower-matrix-intrinsics",
          "--instcombine",
          "--bdce",
          "--slsr",
          "--aggressive-instcombine",
          "--infer-address-spaces",
          "--sroa",
          "--strip-dead-prototypes",
          "--constmerge",
          "--slp-vectorizer",
          "--loop-versioning",
          "--mem2reg",
          "--deadargelim",
          "--div-rem-pairs",
          "--early-cse"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.0%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--pgo-memop-opt",
      "--loop-guard-widening",
      "--lower-guard-intrinsic",
      "--memcpyopt",
      "--indvars",
      "-loop-reduce",
      "--ipconstprop",
      "--callsite-splitting",
      "--name-anon-globals",
      "--mergefunc",
      "--simplifycfg",
      "--lower-matrix-intrinsics",
      "--instcombine",
      "--bdce",
      "--slsr",
      "--aggressive-instcombine",
      "--infer-address-spaces",
      "--sroa",
      "--strip-dead-prototypes",
      "--constmerge",
      "--slp-vectorizer",
      "--loop-versioning",
      "--mem2reg",
      "--deadargelim",
      "--div-rem-pairs",
      "--early-cse"
    ],
    "performance_vs_Oz": "+1.0%"
  }
}
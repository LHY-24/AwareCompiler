{
  "program_id": "linux-v0_377.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 3,
    "onePredOneSuc": 2,
    "onePredTwoSuc": 1,
    "oneSuccessor": 3,
    "twoPred": 2,
    "twoPredOneSuc": 1,
    "twoEach": 0,
    "twoSuccessor": 2,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 11,
    "BeginPhi": 0,
    "BranchCount": 5,
    "returnInt": 2,
    "CriticalCount": 1,
    "NumEdges": 7,
    "const32Bit": 18,
    "const64Bit": 0,
    "numConstZeroes": 3,
    "numConstOnes": 10,
    "UncondBranches": 3,
    "binaryConstArg": 1,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 10,
    "NumAndInst": 0,
    "BlockMid": 1,
    "BlockLow": 10,
    "NumBitCastInst": 2,
    "NumBrInst": 5,
    "NumCallInst": 10,
    "NumGetElementPtrInst": 2,
    "NumICmpInst": 2,
    "NumLShrInst": 0,
    "NumLoadInst": 16,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 6,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 13,
    "NumSubInst": 0,
    "NumTruncInst": 1,
    "NumXorInst": 0,
    "NumZExtInst": 1,
    "TotalBlocks": 11,
    "TotalInsts": 69,
    "TotalMemInst": 51,
    "TotalFuncs": 10,
    "ArgsPhi": 0,
    "testUnary": 30
  },
  "baseline_oz_instcount": 69,
  "knowledge_base_entry": [
    "--slsr",
    "--nary-reassociate",
    "--loop-simplifycfg",
    "--early-cse",
    "--slsr",
    "--gvn-hoist",
    "--slp-vectorizer",
    "--lower-expect",
    "--aggressive-instcombine",
    "--flattencfg",
    "--globalopt",
    "--sccp",
    "--lower-constant-intrinsics",
    "--newgvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--gvn-hoist",
          "--canonicalize-aliases",
          "--lower-constant-intrinsics",
          "--strip",
          "--post-inline-ee-instrument",
          "--loop-interchange",
          "--lowerinvoke",
          "--loop-distribute",
          "--barrier",
          "--loop-simplify",
          "--indvars",
          "--gvn",
          "--alignment-from-assumptions",
          "--ipconstprop",
          "--inline",
          "--div-rem-pairs",
          "--elim-avail-extern",
          "--simple-loop-unswitch",
          "--adce",
          "--flattencfg",
          "--aggressive-instcombine",
          "-loop-reduce",
          "--inferattrs"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--gvn-hoist",
      "--canonicalize-aliases",
      "--lower-constant-intrinsics",
      "--strip",
      "--post-inline-ee-instrument",
      "--loop-interchange",
      "--lowerinvoke",
      "--loop-distribute",
      "--barrier",
      "--loop-simplify",
      "--indvars",
      "--gvn",
      "--alignment-from-assumptions",
      "--ipconstprop",
      "--inline",
      "--div-rem-pairs",
      "--elim-avail-extern",
      "--simple-loop-unswitch",
      "--adce",
      "--flattencfg",
      "--aggressive-instcombine",
      "-loop-reduce",
      "--inferattrs"
    ],
    "performance_vs_Oz": "+2.9%"
  }
}
{
  "program_id": "github-v0_11845.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 2,
    "onePredOneSuc": 0,
    "onePredTwoSuc": 1,
    "oneSuccessor": 0,
    "twoPred": 1,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 2,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 6,
    "BeginPhi": 0,
    "BranchCount": 2,
    "returnInt": 0,
    "CriticalCount": 2,
    "NumEdges": 4,
    "const32Bit": 5,
    "const64Bit": 0,
    "numConstZeroes": 2,
    "numConstOnes": 1,
    "UncondBranches": 0,
    "binaryConstArg": 0,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 1,
    "NumAndInst": 0,
    "BlockMid": 0,
    "BlockLow": 6,
    "NumBitCastInst": 0,
    "NumBrInst": 2,
    "NumCallInst": 3,
    "NumGetElementPtrInst": 0,
    "NumICmpInst": 2,
    "NumLShrInst": 0,
    "NumLoadInst": 3,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 2,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 3,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 2,
    "TotalBlocks": 6,
    "TotalInsts": 20,
    "TotalMemInst": 10,
    "TotalFuncs": 4,
    "ArgsPhi": 0,
    "testUnary": 6
  },
  "baseline_oz_instcount": 20,
  "knowledge_base_entry": [
    "--nary-reassociate",
    "--lower-constant-intrinsics",
    "--die",
    "--gvn-hoist",
    "--loop-deletion",
    "--newgvn",
    "--mem2reg",
    "--slp-vectorizer",
    "--dce",
    "--correlated-propagation",
    "--early-cse",
    "--correlated-propagation",
    "--ipsccp",
    "--die",
    "--reassociate",
    "--early-cse",
    "--instsimplify",
    "--early-cse",
    "--early-cse-memssa",
    "--loop-instsimplify",
    "--inline",
    "--die",
    "--sroa",
    "--jump-threading",
    "--ipsccp"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--adce",
          "--barrier",
          "--instcombine",
          "--functionattrs",
          "--lowerinvoke",
          "--ipsccp",
          "--coro-early",
          "--slsr",
          "--reassociate",
          "--strip-nondebug",
          "--inferattrs",
          "--inline",
          "--mergeicmps",
          "--indvars",
          "--hotcoldsplit",
          "--argpromotion",
          "--slp-vectorizer",
          "--loop-versioning-licm",
          "--add-discriminators",
          "--loop-deletion",
          "--sink",
          "--elim-avail-extern",
          "--libcalls-shrinkwrap"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+10.0%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--adce",
      "--barrier",
      "--instcombine",
      "--functionattrs",
      "--lowerinvoke",
      "--ipsccp",
      "--coro-early",
      "--slsr",
      "--reassociate",
      "--strip-nondebug",
      "--inferattrs",
      "--inline",
      "--mergeicmps",
      "--indvars",
      "--hotcoldsplit",
      "--argpromotion",
      "--slp-vectorizer",
      "--loop-versioning-licm",
      "--add-discriminators",
      "--loop-deletion",
      "--sink",
      "--elim-avail-extern",
      "--libcalls-shrinkwrap"
    ],
    "performance_vs_Oz": "+10.0%"
  }
}
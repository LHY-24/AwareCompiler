{
  "program_id": "github-v0_48490.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 14,
    "onePredOneSuc": 12,
    "onePredTwoSuc": 2,
    "oneSuccessor": 14,
    "twoPred": 14,
    "twoPredOneSuc": 2,
    "twoEach": 11,
    "twoSuccessor": 14,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 29,
    "BeginPhi": 0,
    "BranchCount": 28,
    "returnInt": 16,
    "CriticalCount": 14,
    "NumEdges": 42,
    "const32Bit": 73,
    "const64Bit": 3,
    "numConstZeroes": 51,
    "numConstOnes": 5,
    "UncondBranches": 14,
    "binaryConstArg": 14,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 3,
    "NumAndInst": 12,
    "BlockMid": 3,
    "BlockLow": 26,
    "NumBitCastInst": 2,
    "NumBrInst": 28,
    "NumCallInst": 19,
    "NumGetElementPtrInst": 22,
    "NumICmpInst": 14,
    "NumLShrInst": 0,
    "NumLoadInst": 48,
    "NumMulInst": 1,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 1,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 6,
    "NumSubInst": 0,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 6,
    "TotalBlocks": 29,
    "TotalInsts": 172,
    "TotalMemInst": 98,
    "TotalFuncs": 5,
    "ArgsPhi": 0,
    "testUnary": 68
  },
  "baseline_oz_instcount": 172,
  "knowledge_base_entry": [
    "--ipconstprop",
    "--aggressive-instcombine",
    "--flattencfg",
    "--simplifycfg",
    "--globalopt",
    "--newgvn",
    "--licm",
    "--dse",
    "--lower-constant-intrinsics",
    "--memcpyopt",
    "--early-cse-memssa",
    "--loop-fusion"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--prune-eh",
          "--mergefunc",
          "--load-store-vectorizer",
          "--slp-vectorizer",
          "--loop-vectorize",
          "--jump-threading",
          "--sink",
          "--loop-data-prefetch",
          "--loop-versioning-licm",
          "--reassociate",
          "--partially-inline-libcalls",
          "--aggressive-instcombine",
          "--div-rem-pairs",
          "--lower-widenable-condition",
          "--ee-instrument",
          "--deadargelim",
          "--name-anon-globals",
          "--loop-unswitch",
          "--lower-guard-intrinsic",
          "--dse",
          "--rpo-functionattrs",
          "--loop-guard-widening",
          "--ipconstprop",
          "--strip-debug-declare",
          "--speculative-execution",
          "--mldst-motion",
          "--correlated-propagation",
          "--simple-loop-unswitch",
          "--coro-early"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--prune-eh",
      "--mergefunc",
      "--load-store-vectorizer",
      "--slp-vectorizer",
      "--loop-vectorize",
      "--jump-threading",
      "--sink",
      "--loop-data-prefetch",
      "--loop-versioning-licm",
      "--reassociate",
      "--partially-inline-libcalls",
      "--aggressive-instcombine",
      "--div-rem-pairs",
      "--lower-widenable-condition",
      "--ee-instrument",
      "--deadargelim",
      "--name-anon-globals",
      "--loop-unswitch",
      "--lower-guard-intrinsic",
      "--dse",
      "--rpo-functionattrs",
      "--loop-guard-widening",
      "--ipconstprop",
      "--strip-debug-declare",
      "--speculative-execution",
      "--mldst-motion",
      "--correlated-propagation",
      "--simple-loop-unswitch",
      "--coro-early"
    ],
    "performance_vs_Oz": "+1.2%"
  }
}
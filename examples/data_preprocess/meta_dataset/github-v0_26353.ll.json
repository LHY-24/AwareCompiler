{
  "program_id": "github-v0_26353.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 2,
    "onePredOneSuc": 2,
    "onePredTwoSuc": 0,
    "oneSuccessor": 2,
    "twoPred": 1,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 1,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 22,
    "BeginPhi": 0,
    "BranchCount": 3,
    "returnInt": 10,
    "CriticalCount": 0,
    "NumEdges": 4,
    "const32Bit": 38,
    "const64Bit": 0,
    "numConstZeroes": 3,
    "numConstOnes": 35,
    "UncondBranches": 2,
    "binaryConstArg": 0,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 35,
    "NumAndInst": 0,
    "BlockMid": 0,
    "BlockLow": 22,
    "NumBitCastInst": 2,
    "NumBrInst": 3,
    "NumCallInst": 18,
    "NumGetElementPtrInst": 0,
    "NumICmpInst": 1,
    "NumLShrInst": 0,
    "NumLoadInst": 11,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 19,
    "NumSExtInst": 7,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 34,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 22,
    "TotalInsts": 130,
    "TotalMemInst": 98,
    "TotalFuncs": 22,
    "ArgsPhi": 0,
    "testUnary": 55
  },
  "baseline_oz_instcount": 130,
  "knowledge_base_entry": [
    "--hotcoldsplit",
    "--mergefunc",
    "--jump-threading",
    "--die",
    "--early-cse",
    "--prune-eh"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--sroa",
          "--lowerinvoke",
          "--pgo-memop-opt",
          "--scalarizer",
          "--globaldce",
          "--name-anon-globals",
          "--elim-avail-extern",
          "--add-discriminators",
          "--dce",
          "--mergeicmps",
          "--sink",
          "--coro-elide",
          "--loop-rotate",
          "--irce",
          "--always-inline",
          "--insert-gcov-profiling",
          "--flattencfg",
          "--globalopt",
          "--redundant-dbg-inst-elim",
          "--loop-guard-widening",
          "--inject-tli-mappings",
          "--nary-reassociate",
          "--slsr",
          "--loop-versioning",
          "--libcalls-shrinkwrap",
          "--dse",
          "--infer-address-spaces",
          "--ipconstprop",
          "--mergefunc",
          "--alignment-from-assumptions"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+36.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--sroa",
      "--lowerinvoke",
      "--pgo-memop-opt",
      "--scalarizer",
      "--globaldce",
      "--name-anon-globals",
      "--elim-avail-extern",
      "--add-discriminators",
      "--dce",
      "--mergeicmps",
      "--sink",
      "--coro-elide",
      "--loop-rotate",
      "--irce",
      "--always-inline",
      "--insert-gcov-profiling",
      "--flattencfg",
      "--globalopt",
      "--redundant-dbg-inst-elim",
      "--loop-guard-widening",
      "--inject-tli-mappings",
      "--nary-reassociate",
      "--slsr",
      "--loop-versioning",
      "--libcalls-shrinkwrap",
      "--dse",
      "--infer-address-spaces",
      "--ipconstprop",
      "--mergefunc",
      "--alignment-from-assumptions"
    ],
    "performance_vs_Oz": "+36.2%"
  }
}
{
  "program_id": "linux-v0_11435.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 35,
    "onePredOneSuc": 26,
    "onePredTwoSuc": 9,
    "oneSuccessor": 29,
    "twoPred": 11,
    "twoPredOneSuc": 1,
    "twoEach": 3,
    "twoSuccessor": 21,
    "morePreds": 4,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 81,
    "BeginPhi": 1,
    "BranchCount": 50,
    "returnInt": 12,
    "CriticalCount": 11,
    "NumEdges": 71,
    "const32Bit": 274,
    "const64Bit": 20,
    "numConstZeroes": 105,
    "numConstOnes": 134,
    "UncondBranches": 29,
    "binaryConstArg": 15,
    "NumAShrInst": 1,
    "NumAddInst": 0,
    "NumAllocaInst": 111,
    "NumAndInst": 9,
    "BlockMid": 13,
    "BlockLow": 69,
    "NumBitCastInst": 30,
    "NumBrInst": 50,
    "NumCallInst": 57,
    "NumGetElementPtrInst": 65,
    "NumICmpInst": 20,
    "NumLShrInst": 0,
    "NumLoadInst": 167,
    "NumMulInst": 0,
    "NumOrInst": 6,
    "NumPHIInst": 1,
    "NumRetInst": 32,
    "NumSExtInst": 5,
    "NumSelectInst": 1,
    "NumShlInst": 3,
    "NumStoreInst": 143,
    "NumSubInst": 0,
    "NumTruncInst": 3,
    "NumXorInst": 0,
    "NumZExtInst": 3,
    "TotalBlocks": 82,
    "TotalInsts": 717,
    "TotalMemInst": 543,
    "TotalFuncs": 69,
    "ArgsPhi": 4,
    "testUnary": 329
  },
  "baseline_oz_instcount": 708,
  "knowledge_base_entry": [
    "--ipsccp",
    "--mergefunc",
    "--loop-instsimplify",
    "--dse",
    "--correlated-propagation",
    "--simplifycfg",
    "--early-cse",
    "--loop-fusion",
    "--nary-reassociate",
    "--elim-avail-extern",
    "--bdce",
    "--mem2reg",
    "--loop-deletion",
    "--early-cse-memssa"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-predication",
          "--globalopt",
          "--nary-reassociate",
          "--mergereturn",
          "--lower-expect",
          "--slsr",
          "--mergefunc",
          "--coro-cleanup",
          "--aggressive-instcombine",
          "--bdce",
          "--infer-address-spaces",
          "--prune-eh",
          "--sroa",
          "--elim-avail-extern",
          "--constprop",
          "--lower-guard-intrinsic",
          "--memcpyopt",
          "--hotcoldsplit",
          "--always-inline",
          "--deadargelim",
          "--ipconstprop",
          "--simplifycfg",
          "--loop-versioning-licm",
          "--newgvn",
          "--strip-dead-prototypes",
          "--lcssa",
          "--sink",
          "--constmerge"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-predication",
      "--globalopt",
      "--nary-reassociate",
      "--mergereturn",
      "--lower-expect",
      "--slsr",
      "--mergefunc",
      "--coro-cleanup",
      "--aggressive-instcombine",
      "--bdce",
      "--infer-address-spaces",
      "--prune-eh",
      "--sroa",
      "--elim-avail-extern",
      "--constprop",
      "--lower-guard-intrinsic",
      "--memcpyopt",
      "--hotcoldsplit",
      "--always-inline",
      "--deadargelim",
      "--ipconstprop",
      "--simplifycfg",
      "--loop-versioning-licm",
      "--newgvn",
      "--strip-dead-prototypes",
      "--lcssa",
      "--sink",
      "--constmerge"
    ],
    "performance_vs_Oz": "+0.4%"
  }
}
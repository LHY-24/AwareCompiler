{
  "program_id": "github-v0_40524.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 13,
    "onePredOneSuc": 9,
    "onePredTwoSuc": 2,
    "oneSuccessor": 11,
    "twoPred": 5,
    "twoPredOneSuc": 2,
    "twoEach": 2,
    "twoSuccessor": 6,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 21,
    "BeginPhi": 0,
    "BranchCount": 17,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 23,
    "const32Bit": 41,
    "const64Bit": 41,
    "numConstZeroes": 43,
    "numConstOnes": 22,
    "UncondBranches": 11,
    "binaryConstArg": 21,
    "NumAShrInst": 0,
    "NumAddInst": 4,
    "NumAllocaInst": 11,
    "NumAndInst": 7,
    "BlockMid": 4,
    "BlockLow": 17,
    "NumBitCastInst": 0,
    "NumBrInst": 17,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 22,
    "NumICmpInst": 6,
    "NumLShrInst": 3,
    "NumLoadInst": 30,
    "NumMulInst": 2,
    "NumOrInst": 6,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 4,
    "NumStoreInst": 16,
    "NumSubInst": 1,
    "NumTruncInst": 5,
    "NumXorInst": 1,
    "NumZExtInst": 4,
    "TotalBlocks": 21,
    "TotalInsts": 153,
    "TotalMemInst": 86,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 53
  },
  "baseline_oz_instcount": 153,
  "knowledge_base_entry": [
    "--loop-instsimplify",
    "--instcombine",
    "--memcpyopt",
    "--jump-threading",
    "--ipsccp",
    "--aggressive-instcombine",
    "--mergefunc",
    "--inline",
    "--mem2reg",
    "--elim-avail-extern",
    "--inline",
    "--nary-reassociate",
    "--ipsccp",
    "--mem2reg",
    "--globalopt",
    "--newgvn",
    "--gvn",
    "--loop-deletion",
    "--gvn-hoist",
    "--simplifycfg",
    "--reassociate",
    "--gvn-hoist",
    "--early-cse-memssa",
    "--loop-fusion"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-versioning-licm",
          "--speculative-execution",
          "--prune-eh",
          "--loop-sink",
          "--aggressive-instcombine",
          "--mldst-motion",
          "--globalsplit",
          "--deadargelim",
          "--div-rem-pairs",
          "--sink"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-versioning-licm",
      "--speculative-execution",
      "--prune-eh",
      "--loop-sink",
      "--aggressive-instcombine",
      "--mldst-motion",
      "--globalsplit",
      "--deadargelim",
      "--div-rem-pairs",
      "--sink"
    ],
    "performance_vs_Oz": "+3.9%"
  }
}
{
  "program_id": "linux-v0_9692.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 67,
    "onePredOneSuc": 40,
    "onePredTwoSuc": 26,
    "oneSuccessor": 62,
    "twoPred": 33,
    "twoPredOneSuc": 19,
    "twoEach": 13,
    "twoSuccessor": 42,
    "morePreds": 4,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 108,
    "BeginPhi": 2,
    "BranchCount": 104,
    "returnInt": 20,
    "CriticalCount": 27,
    "NumEdges": 146,
    "const32Bit": 87,
    "const64Bit": 62,
    "numConstZeroes": 61,
    "numConstOnes": 76,
    "UncondBranches": 62,
    "binaryConstArg": 22,
    "NumAShrInst": 0,
    "NumAddInst": 18,
    "NumAllocaInst": 59,
    "NumAndInst": 0,
    "BlockMid": 12,
    "BlockLow": 98,
    "NumBitCastInst": 0,
    "NumBrInst": 104,
    "NumCallInst": 24,
    "NumGetElementPtrInst": 21,
    "NumICmpInst": 40,
    "NumLShrInst": 4,
    "NumLoadInst": 174,
    "NumMulInst": 5,
    "NumOrInst": 0,
    "NumPHIInst": 2,
    "NumRetInst": 6,
    "NumSExtInst": 24,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 93,
    "NumSubInst": 10,
    "NumTruncInst": 6,
    "NumXorInst": 0,
    "NumZExtInst": 4,
    "TotalBlocks": 110,
    "TotalInsts": 605,
    "TotalMemInst": 371,
    "TotalFuncs": 10,
    "ArgsPhi": 6,
    "testUnary": 270
  },
  "baseline_oz_instcount": 611,
  "knowledge_base_entry": [
    "--loop-deletion",
    "--loop-simplifycfg",
    "--globalopt",
    "--elim-avail-extern",
    "--dce",
    "--elim-avail-extern",
    "--memcpyopt",
    "--mergefunc",
    "--die",
    "--early-cse",
    "--loop-rotate",
    "--aggressive-instcombine",
    "--loweratomic",
    "--aggressive-instcombine",
    "--flattencfg",
    "--sroa",
    "--instsimplify",
    "--load-store-vectorizer",
    "-loop-reduce",
    "--newgvn",
    "--early-cse-memssa",
    "--lower-expect",
    "--load-store-vectorizer"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--rewrite-statepoints-for-gc",
          "--ipconstprop",
          "--attributor",
          "--correlated-propagation",
          "--globalopt",
          "--alignment-from-assumptions",
          "--inline",
          "--barrier",
          "--simplifycfg",
          "--constprop",
          "--inferattrs",
          "--loop-instsimplify",
          "--sroa",
          "--flattencfg",
          "--tailcallelim",
          "--aggressive-instcombine",
          "--adce",
          "--dse",
          "--coro-cleanup",
          "--loop-rotate",
          "--hotcoldsplit",
          "--strip-nondebug",
          "--scalarizer"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.0%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--rewrite-statepoints-for-gc",
      "--ipconstprop",
      "--attributor",
      "--correlated-propagation",
      "--globalopt",
      "--alignment-from-assumptions",
      "--inline",
      "--barrier",
      "--simplifycfg",
      "--constprop",
      "--inferattrs",
      "--loop-instsimplify",
      "--sroa",
      "--flattencfg",
      "--tailcallelim",
      "--aggressive-instcombine",
      "--adce",
      "--dse",
      "--coro-cleanup",
      "--loop-rotate",
      "--hotcoldsplit",
      "--strip-nondebug",
      "--scalarizer"
    ],
    "performance_vs_Oz": "+2.0%"
  }
}
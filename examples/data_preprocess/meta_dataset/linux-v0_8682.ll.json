{
  "program_id": "linux-v0_8682.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 33,
    "onePredOneSuc": 24,
    "onePredTwoSuc": 7,
    "oneSuccessor": 32,
    "twoPred": 11,
    "twoPredOneSuc": 3,
    "twoEach": 1,
    "twoSuccessor": 13,
    "morePreds": 2,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 59,
    "BeginPhi": 1,
    "BranchCount": 45,
    "returnInt": 14,
    "CriticalCount": 12,
    "NumEdges": 63,
    "const32Bit": 135,
    "const64Bit": 8,
    "numConstZeroes": 44,
    "numConstOnes": 66,
    "UncondBranches": 32,
    "binaryConstArg": 13,
    "NumAShrInst": 0,
    "NumAddInst": 3,
    "NumAllocaInst": 61,
    "NumAndInst": 5,
    "BlockMid": 8,
    "BlockLow": 52,
    "NumBitCastInst": 21,
    "NumBrInst": 45,
    "NumCallInst": 28,
    "NumGetElementPtrInst": 24,
    "NumICmpInst": 12,
    "NumLShrInst": 0,
    "NumLoadInst": 109,
    "NumMulInst": 0,
    "NumOrInst": 2,
    "NumPHIInst": 1,
    "NumRetInst": 14,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 70,
    "NumSubInst": 2,
    "NumTruncInst": 5,
    "NumXorInst": 0,
    "NumZExtInst": 9,
    "TotalBlocks": 60,
    "TotalInsts": 419,
    "TotalMemInst": 292,
    "TotalFuncs": 26,
    "ArgsPhi": 2,
    "testUnary": 209
  },
  "baseline_oz_instcount": 419,
  "knowledge_base_entry": [
    "--slp-vectorizer",
    "--licm",
    "--globalopt",
    "--sroa",
    "--aggressive-instcombine",
    "--bdce",
    "--correlated-propagation",
    "--early-cse-memssa",
    "--gvn",
    "--slsr",
    "-loop-reduce",
    "--gvn",
    "--reassociate",
    "--aggressive-instcombine",
    "--bdce",
    "--correlated-propagation",
    "--die",
    "--slp-vectorizer",
    "--instsimplify",
    "--dce",
    "--loop-instsimplify",
    "--gvn-hoist"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-data-prefetch",
          "--reassociate",
          "--barrier",
          "--add-discriminators",
          "--slsr",
          "--licm",
          "--aggressive-instcombine",
          "--mergereturn",
          "--instcombine",
          "--inferattrs",
          "--post-inline-ee-instrument",
          "--redundant-dbg-inst-elim",
          "--forceattrs",
          "--callsite-splitting"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.0%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-data-prefetch",
      "--reassociate",
      "--barrier",
      "--add-discriminators",
      "--slsr",
      "--licm",
      "--aggressive-instcombine",
      "--mergereturn",
      "--instcombine",
      "--inferattrs",
      "--post-inline-ee-instrument",
      "--redundant-dbg-inst-elim",
      "--forceattrs",
      "--callsite-splitting"
    ],
    "performance_vs_Oz": "+1.0%"
  }
}
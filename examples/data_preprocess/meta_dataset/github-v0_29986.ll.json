{
  "program_id": "github-v0_29986.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 13,
    "onePredOneSuc": 9,
    "onePredTwoSuc": 1,
    "oneSuccessor": 11,
    "twoPred": 5,
    "twoPredOneSuc": 1,
    "twoEach": 4,
    "twoSuccessor": 6,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 21,
    "BeginPhi": 0,
    "BranchCount": 17,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 23,
    "const32Bit": 40,
    "const64Bit": 41,
    "numConstZeroes": 43,
    "numConstOnes": 24,
    "UncondBranches": 11,
    "binaryConstArg": 17,
    "NumAShrInst": 3,
    "NumAddInst": 5,
    "NumAllocaInst": 13,
    "NumAndInst": 2,
    "BlockMid": 6,
    "BlockLow": 15,
    "NumBitCastInst": 4,
    "NumBrInst": 17,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 25,
    "NumICmpInst": 6,
    "NumLShrInst": 0,
    "NumLoadInst": 32,
    "NumMulInst": 0,
    "NumOrInst": 5,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 5,
    "NumStoreInst": 22,
    "NumSubInst": 2,
    "NumTruncInst": 6,
    "NumXorInst": 0,
    "NumZExtInst": 14,
    "TotalBlocks": 21,
    "TotalInsts": 175,
    "TotalMemInst": 99,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 72
  },
  "baseline_oz_instcount": 175,
  "knowledge_base_entry": [
    "--loop-interchange",
    "--early-cse",
    "--dce",
    "--aggressive-instcombine",
    "--loop-rotate",
    "--instcombine",
    "--sccp",
    "--bdce",
    "--reassociate",
    "--dse",
    "--gvn-hoist",
    "--aggressive-instcombine",
    "--lower-expect",
    "--early-cse-memssa"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--float2int",
          "--inject-tli-mappings",
          "--loop-simplifycfg",
          "--lcssa",
          "--post-inline-ee-instrument",
          "--sccp",
          "--loop-guard-widening",
          "--loop-simplify",
          "--mergeicmps",
          "--early-cse",
          "--lower-constant-intrinsics",
          "--slp-vectorizer",
          "--aggressive-instcombine",
          "--canonicalize-aliases",
          "--jump-threading",
          "--partially-inline-libcalls",
          "--slsr",
          "--globalsplit",
          "--inline",
          "--ipsccp",
          "--strip-debug-declare",
          "--dse",
          "--loop-rotate",
          "--loop-vectorize",
          "--lower-guard-intrinsic",
          "--sroa",
          "--loop-versioning-licm"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--float2int",
      "--inject-tli-mappings",
      "--loop-simplifycfg",
      "--lcssa",
      "--post-inline-ee-instrument",
      "--sccp",
      "--loop-guard-widening",
      "--loop-simplify",
      "--mergeicmps",
      "--early-cse",
      "--lower-constant-intrinsics",
      "--slp-vectorizer",
      "--aggressive-instcombine",
      "--canonicalize-aliases",
      "--jump-threading",
      "--partially-inline-libcalls",
      "--slsr",
      "--globalsplit",
      "--inline",
      "--ipsccp",
      "--strip-debug-declare",
      "--dse",
      "--loop-rotate",
      "--loop-vectorize",
      "--lower-guard-intrinsic",
      "--sroa",
      "--loop-versioning-licm"
    ],
    "performance_vs_Oz": "+2.3%"
  }
}
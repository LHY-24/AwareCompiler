{
  "program_id": "github-v0_14128.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 8,
    "onePredOneSuc": 8,
    "onePredTwoSuc": 0,
    "oneSuccessor": 8,
    "twoPred": 4,
    "twoPredOneSuc": 0,
    "twoEach": 1,
    "twoSuccessor": 4,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 21,
    "BeginPhi": 0,
    "BranchCount": 11,
    "returnInt": 3,
    "CriticalCount": 0,
    "NumEdges": 16,
    "const32Bit": 57,
    "const64Bit": 5,
    "numConstZeroes": 22,
    "numConstOnes": 33,
    "UncondBranches": 8,
    "binaryConstArg": 2,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 27,
    "NumAndInst": 0,
    "BlockMid": 4,
    "BlockLow": 17,
    "NumBitCastInst": 0,
    "NumBrInst": 11,
    "NumCallInst": 14,
    "NumGetElementPtrInst": 14,
    "NumICmpInst": 3,
    "NumLShrInst": 0,
    "NumLoadInst": 44,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 9,
    "NumSExtInst": 8,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 34,
    "NumSubInst": 0,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 21,
    "TotalInsts": 169,
    "TotalMemInst": 133,
    "TotalFuncs": 17,
    "ArgsPhi": 0,
    "testUnary": 81
  },
  "baseline_oz_instcount": 170,
  "knowledge_base_entry": [
    "--loop-sink",
    "--gvn-hoist",
    "--ipsccp",
    "--gvn",
    "--sroa",
    "-loop-reduce",
    "--jump-threading",
    "--ipsccp",
    "--gvn",
    "--sroa",
    "-loop-reduce",
    "--jump-threading",
    "--bdce",
    "--die",
    "--licm",
    "--lower-expect",
    "--early-cse-memssa",
    "--ipsccp"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--strip-dead-prototypes",
          "--loop-data-prefetch",
          "--loop-load-elim",
          "--simple-loop-unswitch",
          "--redundant-dbg-inst-elim",
          "--argpromotion",
          "--cross-dso-cfi",
          "--loop-rotate",
          "--coro-split",
          "--loop-reroll",
          "--memcpyopt",
          "--callsite-splitting",
          "--coro-early",
          "--instcombine",
          "--div-rem-pairs",
          "--hotcoldsplit",
          "--strip-debug-declare",
          "--loop-sink",
          "--gvn",
          "--partial-inliner",
          "--mergereturn",
          "--guard-widening",
          "--sccp",
          "--loop-interchange",
          "--bdce",
          "--infer-address-spaces",
          "--strip-nondebug",
          "--loweratomic",
          "--loop-distribute",
          "--flattencfg"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--strip-dead-prototypes",
      "--loop-data-prefetch",
      "--loop-load-elim",
      "--simple-loop-unswitch",
      "--redundant-dbg-inst-elim",
      "--argpromotion",
      "--cross-dso-cfi",
      "--loop-rotate",
      "--coro-split",
      "--loop-reroll",
      "--memcpyopt",
      "--callsite-splitting",
      "--coro-early",
      "--instcombine",
      "--div-rem-pairs",
      "--hotcoldsplit",
      "--strip-debug-declare",
      "--loop-sink",
      "--gvn",
      "--partial-inliner",
      "--mergereturn",
      "--guard-widening",
      "--sccp",
      "--loop-interchange",
      "--bdce",
      "--infer-address-spaces",
      "--strip-nondebug",
      "--loweratomic",
      "--loop-distribute",
      "--flattencfg"
    ],
    "performance_vs_Oz": "+0.6%"
  }
}
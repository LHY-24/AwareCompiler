{
  "program_id": "github-v0_49466.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 26,
    "onePredOneSuc": 23,
    "onePredTwoSuc": 2,
    "oneSuccessor": 26,
    "twoPred": 2,
    "twoPredOneSuc": 2,
    "twoEach": 0,
    "twoSuccessor": 2,
    "morePreds": 4,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 46,
    "BeginPhi": 0,
    "BranchCount": 28,
    "returnInt": 0,
    "CriticalCount": 1,
    "NumEdges": 52,
    "const32Bit": 53,
    "const64Bit": 3,
    "numConstZeroes": 7,
    "numConstOnes": 32,
    "UncondBranches": 26,
    "binaryConstArg": 1,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 27,
    "NumAndInst": 1,
    "BlockMid": 0,
    "BlockLow": 46,
    "NumBitCastInst": 2,
    "NumBrInst": 28,
    "NumCallInst": 0,
    "NumGetElementPtrInst": 1,
    "NumICmpInst": 2,
    "NumLShrInst": 0,
    "NumLoadInst": 19,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 14,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 20,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 1,
    "TotalBlocks": 46,
    "TotalInsts": 119,
    "TotalMemInst": 67,
    "TotalFuncs": 14,
    "ArgsPhi": 0,
    "testUnary": 49
  },
  "baseline_oz_instcount": 119,
  "knowledge_base_entry": [
    "--lowerinvoke",
    "--instcombine",
    "--bdce",
    "--loop-instsimplify",
    "--adce",
    "--slp-vectorizer",
    "--loop-reroll",
    "--load-store-vectorizer",
    "--adce",
    "--reassociate",
    "--slp-vectorizer",
    "--mergefunc",
    "--lower-constant-intrinsics",
    "--instcombine",
    "--sccp",
    "--jump-threading",
    "--gvn-hoist",
    "--loop-rotate",
    "--instcombine",
    "--sccp",
    "--lower-expect",
    "--ipsccp",
    "--jump-threading",
    "--slp-vectorizer",
    "--lower-expect",
    "--aggressive-instcombine"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--strip",
          "--loop-sink",
          "--nary-reassociate",
          "--slp-vectorizer",
          "--canonicalize-aliases",
          "--mergefunc",
          "--callsite-splitting",
          "--ipconstprop",
          "--loop-unroll",
          "--correlated-propagation",
          "--deadargelim"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--strip",
      "--loop-sink",
      "--nary-reassociate",
      "--slp-vectorizer",
      "--canonicalize-aliases",
      "--mergefunc",
      "--callsite-splitting",
      "--ipconstprop",
      "--loop-unroll",
      "--correlated-propagation",
      "--deadargelim"
    ],
    "performance_vs_Oz": "+2.5%"
  }
}
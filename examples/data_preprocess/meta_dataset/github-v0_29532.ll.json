{
  "program_id": "github-v0_29532.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 17,
    "onePredOneSuc": 10,
    "onePredTwoSuc": 4,
    "oneSuccessor": 15,
    "twoPred": 7,
    "twoPredOneSuc": 4,
    "twoEach": 3,
    "twoSuccessor": 8,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 27,
    "BeginPhi": 0,
    "BranchCount": 23,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 31,
    "const32Bit": 31,
    "const64Bit": 31,
    "numConstZeroes": 37,
    "numConstOnes": 19,
    "UncondBranches": 15,
    "binaryConstArg": 6,
    "NumAShrInst": 0,
    "NumAddInst": 8,
    "NumAllocaInst": 12,
    "NumAndInst": 0,
    "BlockMid": 3,
    "BlockLow": 24,
    "NumBitCastInst": 0,
    "NumBrInst": 23,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 23,
    "NumICmpInst": 8,
    "NumLShrInst": 0,
    "NumLoadInst": 41,
    "NumMulInst": 1,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 19,
    "NumSubInst": 1,
    "NumTruncInst": 8,
    "NumXorInst": 0,
    "NumZExtInst": 26,
    "TotalBlocks": 27,
    "TotalInsts": 184,
    "TotalMemInst": 102,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 90
  },
  "baseline_oz_instcount": 184,
  "knowledge_base_entry": [
    "--loop-versioning-licm",
    "--instcombine",
    "--aggressive-instcombine",
    "--simplifycfg",
    "--correlated-propagation",
    "--bdce",
    "--load-store-vectorizer",
    "--loop-fusion",
    "--nary-reassociate",
    "--inline",
    "--adce",
    "--loop-instsimplify",
    "--ipsccp"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--memcpyopt",
          "--lower-matrix-intrinsics",
          "--loop-interchange",
          "--aggressive-instcombine",
          "--sancov",
          "--infer-address-spaces",
          "--rpo-functionattrs",
          "--div-rem-pairs",
          "--loop-vectorize",
          "--rewrite-statepoints-for-gc",
          "--loop-simplifycfg",
          "--coro-elide",
          "--loop-distribute",
          "--add-discriminators",
          "--early-cse-memssa",
          "--tailcallelim",
          "--lowerinvoke",
          "--called-value-propagation",
          "--simple-loop-unswitch",
          "--strip",
          "--coro-early",
          "--lowerswitch",
          "--lower-constant-intrinsics"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+9.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--memcpyopt",
      "--lower-matrix-intrinsics",
      "--loop-interchange",
      "--aggressive-instcombine",
      "--sancov",
      "--infer-address-spaces",
      "--rpo-functionattrs",
      "--div-rem-pairs",
      "--loop-vectorize",
      "--rewrite-statepoints-for-gc",
      "--loop-simplifycfg",
      "--coro-elide",
      "--loop-distribute",
      "--add-discriminators",
      "--early-cse-memssa",
      "--tailcallelim",
      "--lowerinvoke",
      "--called-value-propagation",
      "--simple-loop-unswitch",
      "--strip",
      "--coro-early",
      "--lowerswitch",
      "--lower-constant-intrinsics"
    ],
    "performance_vs_Oz": "+9.8%"
  }
}
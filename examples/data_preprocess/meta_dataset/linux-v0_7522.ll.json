{
  "program_id": "linux-v0_7522.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 52,
    "onePredOneSuc": 41,
    "onePredTwoSuc": 9,
    "oneSuccessor": 46,
    "twoPred": 16,
    "twoPredOneSuc": 3,
    "twoEach": 6,
    "twoSuccessor": 26,
    "morePreds": 4,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 97,
    "BeginPhi": 1,
    "BranchCount": 72,
    "returnInt": 15,
    "CriticalCount": 12,
    "NumEdges": 98,
    "const32Bit": 378,
    "const64Bit": 23,
    "numConstZeroes": 179,
    "numConstOnes": 139,
    "UncondBranches": 46,
    "binaryConstArg": 28,
    "NumAShrInst": 2,
    "NumAddInst": 0,
    "NumAllocaInst": 89,
    "NumAndInst": 12,
    "BlockMid": 14,
    "BlockLow": 84,
    "NumBitCastInst": 32,
    "NumBrInst": 72,
    "NumCallInst": 52,
    "NumGetElementPtrInst": 122,
    "NumICmpInst": 29,
    "NumLShrInst": 1,
    "NumLoadInst": 213,
    "NumMulInst": 0,
    "NumOrInst": 7,
    "NumPHIInst": 1,
    "NumRetInst": 26,
    "NumSExtInst": 6,
    "NumSelectInst": 1,
    "NumShlInst": 4,
    "NumStoreInst": 125,
    "NumSubInst": 0,
    "NumTruncInst": 13,
    "NumXorInst": 6,
    "NumZExtInst": 24,
    "TotalBlocks": 98,
    "TotalInsts": 839,
    "TotalMemInst": 601,
    "TotalFuncs": 35,
    "ArgsPhi": 2,
    "testUnary": 379
  },
  "baseline_oz_instcount": 839,
  "knowledge_base_entry": [
    "--mergefunc",
    "--inline",
    "--dse",
    "--sccp",
    "--die",
    "--loop-instsimplify",
    "--sccp",
    "--inline",
    "--flattencfg",
    "--globalopt",
    "--lower-expect",
    "--dse",
    "--elim-avail-extern",
    "--instsimplify",
    "--nary-reassociate",
    "--dse",
    "--jump-threading",
    "--loop-simplifycfg",
    "--aggressive-instcombine",
    "--inline",
    "--loop-simplifycfg",
    "--dce",
    "--dse",
    "--sccp",
    "--die",
    "--loop-instsimplify",
    "--sccp",
    "--inline",
    "--newgvn",
    "--gvn-hoist"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--alignment-from-assumptions",
          "--loop-instsimplify",
          "--mem2reg",
          "--barrier",
          "--lowerinvoke",
          "--infer-address-spaces",
          "--loop-unroll",
          "--mergefunc",
          "--loop-reroll",
          "--loop-simplify",
          "--add-discriminators",
          "--loop-unswitch",
          "--lowerswitch",
          "--inject-tli-mappings",
          "--aggressive-instcombine",
          "--strip",
          "--jump-threading",
          "--newgvn",
          "--lower-guard-intrinsic",
          "--loop-distribute",
          "--loop-versioning-licm",
          "--lower-constant-intrinsics",
          "--name-anon-globals",
          "--loop-deletion",
          "--called-value-propagation",
          "--hotcoldsplit"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--alignment-from-assumptions",
      "--loop-instsimplify",
      "--mem2reg",
      "--barrier",
      "--lowerinvoke",
      "--infer-address-spaces",
      "--loop-unroll",
      "--mergefunc",
      "--loop-reroll",
      "--loop-simplify",
      "--add-discriminators",
      "--loop-unswitch",
      "--lowerswitch",
      "--inject-tli-mappings",
      "--aggressive-instcombine",
      "--strip",
      "--jump-threading",
      "--newgvn",
      "--lower-guard-intrinsic",
      "--loop-distribute",
      "--loop-versioning-licm",
      "--lower-constant-intrinsics",
      "--name-anon-globals",
      "--loop-deletion",
      "--called-value-propagation",
      "--hotcoldsplit"
    ],
    "performance_vs_Oz": "+3.7%"
  }
}
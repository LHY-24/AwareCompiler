{
  "program_id": "github-v0_7934.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 13,
    "onePredOneSuc": 9,
    "onePredTwoSuc": 1,
    "oneSuccessor": 11,
    "twoPred": 5,
    "twoPredOneSuc": 1,
    "twoEach": 4,
    "twoSuccessor": 6,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 21,
    "BeginPhi": 0,
    "BranchCount": 17,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 23,
    "const32Bit": 30,
    "const64Bit": 22,
    "numConstZeroes": 24,
    "numConstOnes": 22,
    "UncondBranches": 11,
    "binaryConstArg": 9,
    "NumAShrInst": 0,
    "NumAddInst": 10,
    "NumAllocaInst": 13,
    "NumAndInst": 0,
    "BlockMid": 4,
    "BlockLow": 17,
    "NumBitCastInst": 0,
    "NumBrInst": 17,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 13,
    "NumICmpInst": 6,
    "NumLShrInst": 0,
    "NumLoadInst": 25,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 18,
    "NumSubInst": 0,
    "NumTruncInst": 5,
    "NumXorInst": 0,
    "NumZExtInst": 10,
    "TotalBlocks": 21,
    "TotalInsts": 131,
    "TotalMemInst": 76,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 56
  },
  "baseline_oz_instcount": 131,
  "knowledge_base_entry": [
    "--jump-threading",
    "--flattencfg",
    "--load-store-vectorizer",
    "--gvn",
    "--inline",
    "--aggressive-instcombine",
    "--newgvn",
    "--adce",
    "--elim-avail-extern",
    "--instcombine",
    "--bdce",
    "--elim-avail-extern",
    "--early-cse",
    "--prune-eh",
    "--gvn",
    "--indvars",
    "--nary-reassociate",
    "--dse",
    "--early-cse"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-distribute",
          "--globalopt",
          "--dce",
          "--licm",
          "--canonicalize-aliases",
          "--partial-inliner",
          "--mergereturn",
          "--memcpyopt",
          "--speculative-execution",
          "--inferattrs",
          "--prune-eh",
          "--gvn",
          "--coro-cleanup",
          "--deadargelim",
          "--aggressive-instcombine",
          "--load-store-vectorizer",
          "--redundant-dbg-inst-elim",
          "--sink",
          "--early-cse-memssa",
          "--instsimplify",
          "--cross-dso-cfi",
          "--insert-gcov-profiling",
          "--hotcoldsplit",
          "--loop-fusion",
          "--early-cse",
          "--lower-widenable-condition",
          "--strip"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+6.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-distribute",
      "--globalopt",
      "--dce",
      "--licm",
      "--canonicalize-aliases",
      "--partial-inliner",
      "--mergereturn",
      "--memcpyopt",
      "--speculative-execution",
      "--inferattrs",
      "--prune-eh",
      "--gvn",
      "--coro-cleanup",
      "--deadargelim",
      "--aggressive-instcombine",
      "--load-store-vectorizer",
      "--redundant-dbg-inst-elim",
      "--sink",
      "--early-cse-memssa",
      "--instsimplify",
      "--cross-dso-cfi",
      "--insert-gcov-profiling",
      "--hotcoldsplit",
      "--loop-fusion",
      "--early-cse",
      "--lower-widenable-condition",
      "--strip"
    ],
    "performance_vs_Oz": "+6.9%"
  }
}
{
  "program_id": "linux-v0_6478.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 43,
    "onePredOneSuc": 37,
    "onePredTwoSuc": 6,
    "oneSuccessor": 43,
    "twoPred": 10,
    "twoPredOneSuc": 2,
    "twoEach": 3,
    "twoSuccessor": 14,
    "morePreds": 7,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 91,
    "BeginPhi": 1,
    "BranchCount": 57,
    "returnInt": 25,
    "CriticalCount": 8,
    "NumEdges": 93,
    "const32Bit": 274,
    "const64Bit": 34,
    "numConstZeroes": 96,
    "numConstOnes": 94,
    "UncondBranches": 43,
    "binaryConstArg": 25,
    "NumAShrInst": 1,
    "NumAddInst": 3,
    "NumAllocaInst": 77,
    "NumAndInst": 5,
    "BlockMid": 14,
    "BlockLow": 78,
    "NumBitCastInst": 15,
    "NumBrInst": 57,
    "NumCallInst": 73,
    "NumGetElementPtrInst": 80,
    "NumICmpInst": 15,
    "NumLShrInst": 0,
    "NumLoadInst": 201,
    "NumMulInst": 2,
    "NumOrInst": 11,
    "NumPHIInst": 1,
    "NumRetInst": 32,
    "NumSExtInst": 6,
    "NumSelectInst": 1,
    "NumShlInst": 2,
    "NumStoreInst": 129,
    "NumSubInst": 2,
    "NumTruncInst": 11,
    "NumXorInst": 2,
    "NumZExtInst": 12,
    "TotalBlocks": 92,
    "TotalInsts": 745,
    "TotalMemInst": 560,
    "TotalFuncs": 47,
    "ArgsPhi": 2,
    "testUnary": 326
  },
  "baseline_oz_instcount": 745,
  "knowledge_base_entry": [
    "--sink",
    "--gvn",
    "--instcombine",
    "--adce",
    "--ipsccp",
    "--aggressive-instcombine",
    "--flattencfg",
    "--aggressive-instcombine",
    "--gvn-hoist",
    "--mldst-motion",
    "--load-store-vectorizer",
    "--indvars",
    "--load-store-vectorizer",
    "--adce",
    "--correlated-propagation",
    "--jump-threading",
    "--gvn-hoist",
    "--sccp",
    "--instsimplify",
    "--reassociate",
    "--loop-simplifycfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--slsr",
          "--instnamer",
          "--loop-interchange",
          "--add-discriminators",
          "--inject-tli-mappings",
          "--scalarizer",
          "--constprop",
          "--loop-simplify",
          "--loop-predication",
          "--loop-fusion",
          "--pgo-memop-opt",
          "--loop-sink",
          "--callsite-splitting",
          "--strip-dead-prototypes",
          "--aggressive-instcombine",
          "--argpromotion",
          "--loop-data-prefetch",
          "--cross-dso-cfi",
          "--speculative-execution"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--slsr",
      "--instnamer",
      "--loop-interchange",
      "--add-discriminators",
      "--inject-tli-mappings",
      "--scalarizer",
      "--constprop",
      "--loop-simplify",
      "--loop-predication",
      "--loop-fusion",
      "--pgo-memop-opt",
      "--loop-sink",
      "--callsite-splitting",
      "--strip-dead-prototypes",
      "--aggressive-instcombine",
      "--argpromotion",
      "--loop-data-prefetch",
      "--cross-dso-cfi",
      "--speculative-execution"
    ],
    "performance_vs_Oz": "+1.9%"
  }
}
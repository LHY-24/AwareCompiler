{
  "program_id": "tensorflow-v0_1313.ll",
  "autophase_features": {
    "BBNumArgsHi": 1,
    "BBNumArgsLo": 15,
    "onePred": 71,
    "onePredOneSuc": 40,
    "onePredTwoSuc": 24,
    "oneSuccessor": 46,
    "twoPred": 37,
    "twoPredOneSuc": 6,
    "twoEach": 20,
    "twoSuccessor": 62,
    "morePreds": 7,
    "BB03Phi": 16,
    "BBHiPhi": 0,
    "BBNoPhi": 135,
    "BeginPhi": 16,
    "BranchCount": 108,
    "returnInt": 2,
    "CriticalCount": 53,
    "NumEdges": 170,
    "const32Bit": 381,
    "const64Bit": 273,
    "numConstZeroes": 399,
    "numConstOnes": 127,
    "UncondBranches": 46,
    "binaryConstArg": 39,
    "NumAShrInst": 0,
    "NumAddInst": 10,
    "NumAllocaInst": 24,
    "NumAndInst": 13,
    "BlockMid": 19,
    "BlockLow": 132,
    "NumBitCastInst": 98,
    "NumBrInst": 108,
    "NumCallInst": 179,
    "NumGetElementPtrInst": 168,
    "NumICmpInst": 71,
    "NumLShrInst": 7,
    "NumLoadInst": 131,
    "NumMulInst": 2,
    "NumOrInst": 2,
    "NumPHIInst": 24,
    "NumRetInst": 36,
    "NumSExtInst": 2,
    "NumSelectInst": 17,
    "NumShlInst": 2,
    "NumStoreInst": 54,
    "NumSubInst": 7,
    "NumTruncInst": 3,
    "NumXorInst": 1,
    "NumZExtInst": 7,
    "TotalBlocks": 151,
    "TotalInsts": 990,
    "TotalMemInst": 556,
    "TotalFuncs": 73,
    "ArgsPhi": 54,
    "testUnary": 274
  },
  "baseline_oz_instcount": 974,
  "knowledge_base_entry": [
    "--speculative-execution",
    "--early-cse-memssa",
    "--mergefunc",
    "--newgvn",
    "--loop-rotate",
    "--jump-threading",
    "--aggressive-instcombine",
    "--loop-simplifycfg",
    "--lower-constant-intrinsics",
    "--loop-simplifycfg",
    "--slsr",
    "--instcombine",
    "--memcpyopt",
    "--early-cse-memssa",
    "--die",
    "--simplifycfg",
    "--instcombine",
    "--simplifycfg",
    "--instcombine",
    "--sccp",
    "--early-cse",
    "--flattencfg",
    "--mergefunc",
    "--globaldce",
    "--ipsccp",
    "--licm",
    "--ipsccp",
    "--licm",
    "--instcombine",
    "--memcpyopt",
    "--early-cse-memssa",
    "--die",
    "--simplifycfg",
    "--instcombine",
    "--simplifycfg",
    "--instcombine",
    "--sccp",
    "--early-cse",
    "--flattencfg",
    "--mergefunc",
    "--globaldce",
    "--ipsccp",
    "--licm",
    "--ipsccp",
    "--licm",
    "--instcombine",
    "--loop-reroll",
    "--jump-threading",
    "--sccp",
    "--newgvn",
    "--elim-avail-extern",
    "--newgvn",
    "--lower-constant-intrinsics",
    "--instsimplify",
    "--sccp",
    "--gvn",
    "--globalopt",
    "--instsimplify",
    "--mergefunc",
    "--loop-reroll",
    "--early-cse-memssa",
    "--mergefunc",
    "--newgvn",
    "--loop-rotate",
    "--jump-threading",
    "--aggressive-instcombine",
    "--licm",
    "--early-cse",
    "--newgvn",
    "--lower-constant-intrinsics",
    "--prune-eh",
    "--inline",
    "--die",
    "--aggressive-instcombine",
    "--loop-simplifycfg",
    "--lower-constant-intrinsics",
    "--loop-simplifycfg",
    "--slsr",
    "--instcombine",
    "--memcpyopt",
    "--early-cse-memssa",
    "--die",
    "--simplifycfg",
    "--instcombine",
    "--simplifycfg",
    "--instcombine",
    "--sccp",
    "--early-cse",
    "--flattencfg",
    "--mergefunc",
    "--ipsccp"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--mergefunc",
          "--always-inline",
          "--loop-load-elim",
          "--loop-sink",
          "--bdce",
          "--simple-loop-unswitch",
          "--mem2reg",
          "--gvn",
          "--loop-versioning-licm",
          "--loop-interchange",
          "--aggressive-instcombine",
          "--lower-guard-intrinsic",
          "--lowerinvoke",
          "--coro-split",
          "--licm"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--mergefunc",
      "--always-inline",
      "--loop-load-elim",
      "--loop-sink",
      "--bdce",
      "--simple-loop-unswitch",
      "--mem2reg",
      "--gvn",
      "--loop-versioning-licm",
      "--loop-interchange",
      "--aggressive-instcombine",
      "--lower-guard-intrinsic",
      "--lowerinvoke",
      "--coro-split",
      "--licm"
    ],
    "performance_vs_Oz": "+0.1%"
  }
}
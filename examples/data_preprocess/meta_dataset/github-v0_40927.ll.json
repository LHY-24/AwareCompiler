{
  "program_id": "github-v0_40927.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 11,
    "onePredOneSuc": 7,
    "onePredTwoSuc": 1,
    "oneSuccessor": 9,
    "twoPred": 4,
    "twoPredOneSuc": 1,
    "twoEach": 3,
    "twoSuccessor": 5,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 18,
    "BeginPhi": 0,
    "BranchCount": 14,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 19,
    "const32Bit": 30,
    "const64Bit": 42,
    "numConstZeroes": 40,
    "numConstOnes": 24,
    "UncondBranches": 9,
    "binaryConstArg": 8,
    "NumAShrInst": 0,
    "NumAddInst": 9,
    "NumAllocaInst": 13,
    "NumAndInst": 0,
    "BlockMid": 4,
    "BlockLow": 14,
    "NumBitCastInst": 8,
    "NumBrInst": 14,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 28,
    "NumICmpInst": 5,
    "NumLShrInst": 0,
    "NumLoadInst": 30,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 22,
    "NumSubInst": 0,
    "NumTruncInst": 5,
    "NumXorInst": 0,
    "NumZExtInst": 10,
    "TotalBlocks": 18,
    "TotalInsts": 158,
    "TotalMemInst": 100,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 69
  },
  "baseline_oz_instcount": 158,
  "knowledge_base_entry": [
    "--scalarizer",
    "--early-cse-memssa",
    "--sccp",
    "--jump-threading",
    "--mldst-motion",
    "--gvn",
    "--reassociate",
    "--jump-threading",
    "--aggressive-instcombine",
    "--jump-threading",
    "--mldst-motion",
    "--gvn",
    "--reassociate",
    "-loop-reduce",
    "--slsr",
    "--newgvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--callsite-splitting",
          "--bdce",
          "--lowerswitch",
          "-loop-reduce",
          "--cross-dso-cfi",
          "--reg2mem",
          "--loop-guard-widening",
          "--hotcoldsplit",
          "--insert-gcov-profiling",
          "--loop-predication",
          "--guard-widening",
          "--pgo-memop-opt",
          "--infer-address-spaces",
          "--aggressive-instcombine",
          "--libcalls-shrinkwrap",
          "--constmerge",
          "--called-value-propagation",
          "--div-rem-pairs",
          "--slp-vectorizer",
          "--lower-constant-intrinsics",
          "--lower-widenable-condition",
          "--loop-unroll-and-jam",
          "--ee-instrument",
          "--sink",
          "--constprop",
          "--lower-expect",
          "--mem2reg",
          "--nary-reassociate",
          "--loop-load-elim"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+5.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--callsite-splitting",
      "--bdce",
      "--lowerswitch",
      "-loop-reduce",
      "--cross-dso-cfi",
      "--reg2mem",
      "--loop-guard-widening",
      "--hotcoldsplit",
      "--insert-gcov-profiling",
      "--loop-predication",
      "--guard-widening",
      "--pgo-memop-opt",
      "--infer-address-spaces",
      "--aggressive-instcombine",
      "--libcalls-shrinkwrap",
      "--constmerge",
      "--called-value-propagation",
      "--div-rem-pairs",
      "--slp-vectorizer",
      "--lower-constant-intrinsics",
      "--lower-widenable-condition",
      "--loop-unroll-and-jam",
      "--ee-instrument",
      "--sink",
      "--constprop",
      "--lower-expect",
      "--mem2reg",
      "--nary-reassociate",
      "--loop-load-elim"
    ],
    "performance_vs_Oz": "+5.7%"
  }
}
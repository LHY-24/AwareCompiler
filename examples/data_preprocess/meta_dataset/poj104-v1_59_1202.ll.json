{
  "program_id": "poj104-v1_59_1202.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 36,
    "onePredOneSuc": 23,
    "onePredTwoSuc": 8,
    "oneSuccessor": 30,
    "twoPred": 12,
    "twoPredOneSuc": 3,
    "twoEach": 8,
    "twoSuccessor": 18,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 60,
    "BeginPhi": 0,
    "BranchCount": 48,
    "returnInt": 3,
    "CriticalCount": 8,
    "NumEdges": 66,
    "const32Bit": 58,
    "const64Bit": 39,
    "numConstZeroes": 45,
    "numConstOnes": 29,
    "UncondBranches": 30,
    "binaryConstArg": 10,
    "NumAShrInst": 0,
    "NumAddInst": 18,
    "NumAllocaInst": 18,
    "NumAndInst": 0,
    "BlockMid": 4,
    "BlockLow": 56,
    "NumBitCastInst": 19,
    "NumBrInst": 48,
    "NumCallInst": 34,
    "NumGetElementPtrInst": 29,
    "NumICmpInst": 18,
    "NumLShrInst": 0,
    "NumLoadInst": 86,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 11,
    "NumSExtInst": 26,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 39,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 1,
    "TotalBlocks": 60,
    "TotalInsts": 348,
    "TotalMemInst": 206,
    "TotalFuncs": 23,
    "ArgsPhi": 0,
    "testUnary": 150
  },
  "baseline_oz_instcount": 183,
  "knowledge_base_entry": [
    "--dse",
    "--lower-constant-intrinsics",
    "--bdce",
    "--jump-threading",
    "--early-cse-memssa",
    "--mergefunc",
    "--mergefunc",
    "--load-store-vectorizer",
    "--adce",
    "--bdce",
    "--load-store-vectorizer",
    "--early-cse",
    "--mem2reg",
    "--loop-rotate",
    "--lower-expect",
    "--instsimplify",
    "--instcombine",
    "--lower-expect",
    "--dce",
    "--gvn",
    "--instsimplify",
    "--newgvn",
    "--globalopt",
    "--newgvn",
    "--loop-fusion",
    "--simplifycfg",
    "--gvn",
    "--jump-threading",
    "--early-cse-memssa",
    "--mergefunc",
    "--mergefunc",
    "--load-store-vectorizer",
    "--adce",
    "--bdce",
    "--jump-threading",
    "--dse",
    "--aggressive-instcombine",
    "--dce",
    "--loop-instsimplify",
    "--sroa",
    "--elim-avail-extern",
    "--nary-reassociate",
    "--slp-vectorizer",
    "--gvn-hoist",
    "--instsimplify",
    "--correlated-propagation",
    "--early-cse",
    "--load-store-vectorizer",
    "--lower-expect",
    "--prune-eh",
    "--mem2reg",
    "--loop-rotate",
    "--lower-expect",
    "--instsimplify",
    "--instcombine",
    "--lower-expect",
    "--dce",
    "--gvn",
    "--instsimplify",
    "--newgvn",
    "--globalopt",
    "--newgvn",
    "--loop-fusion",
    "--simplifycfg",
    "--gvn",
    "--jump-threading",
    "--early-cse-memssa",
    "--mergefunc",
    "--mergefunc",
    "--load-store-vectorizer",
    "--adce",
    "--bdce",
    "--jump-threading",
    "--dse",
    "--aggressive-instcombine",
    "--dce",
    "--loop-instsimplify",
    "--sroa",
    "--elim-avail-extern",
    "--nary-reassociate",
    "--slp-vectorizer",
    "--slsr",
    "--simplifycfg",
    "--jump-threading",
    "--lower-constant-intrinsics",
    "--memcpyopt",
    "--early-cse-memssa",
    "--nary-reassociate"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--inline",
          "--dce",
          "--partially-inline-libcalls",
          "--adce",
          "--loop-distribute",
          "--callsite-splitting",
          "--insert-gcov-profiling",
          "--sroa",
          "--flattencfg",
          "--mldst-motion",
          "--loop-reroll",
          "--redundant-dbg-inst-elim",
          "--nary-reassociate",
          "--loop-sink",
          "--newgvn",
          "--prune-eh",
          "--elim-avail-extern",
          "--loop-unswitch",
          "--slp-vectorizer",
          "--aggressive-instcombine",
          "--mergereturn",
          "--dse",
          "--pgo-memop-opt"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+13.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--inline",
      "--dce",
      "--partially-inline-libcalls",
      "--adce",
      "--loop-distribute",
      "--callsite-splitting",
      "--insert-gcov-profiling",
      "--sroa",
      "--flattencfg",
      "--mldst-motion",
      "--loop-reroll",
      "--redundant-dbg-inst-elim",
      "--nary-reassociate",
      "--loop-sink",
      "--newgvn",
      "--prune-eh",
      "--elim-avail-extern",
      "--loop-unswitch",
      "--slp-vectorizer",
      "--aggressive-instcombine",
      "--mergereturn",
      "--dse",
      "--pgo-memop-opt"
    ],
    "performance_vs_Oz": "+13.1%"
  }
}
{
  "program_id": "linux-v0_7863.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 62,
    "onePredOneSuc": 50,
    "onePredTwoSuc": 10,
    "oneSuccessor": 56,
    "twoPred": 11,
    "twoPredOneSuc": 3,
    "twoEach": 5,
    "twoSuccessor": 21,
    "morePreds": 7,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 115,
    "BeginPhi": 0,
    "BranchCount": 77,
    "returnInt": 34,
    "CriticalCount": 6,
    "NumEdges": 113,
    "const32Bit": 311,
    "const64Bit": 14,
    "numConstZeroes": 127,
    "numConstOnes": 141,
    "UncondBranches": 56,
    "binaryConstArg": 10,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 124,
    "NumAndInst": 1,
    "BlockMid": 14,
    "BlockLow": 101,
    "NumBitCastInst": 50,
    "NumBrInst": 77,
    "NumCallInst": 84,
    "NumGetElementPtrInst": 67,
    "NumICmpInst": 21,
    "NumLShrInst": 0,
    "NumLoadInst": 252,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 35,
    "NumSExtInst": 9,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 160,
    "NumSubInst": 0,
    "NumTruncInst": 4,
    "NumXorInst": 8,
    "NumZExtInst": 6,
    "TotalBlocks": 115,
    "TotalInsts": 908,
    "TotalMemInst": 687,
    "TotalFuncs": 62,
    "ArgsPhi": 0,
    "testUnary": 450
  },
  "baseline_oz_instcount": 909,
  "knowledge_base_entry": [
    "--separate-const-offset-from-gep",
    "--simplifycfg",
    "--mergefunc",
    "--memcpyopt",
    "--newgvn",
    "--aggressive-instcombine",
    "--adce",
    "--early-cse-memssa",
    "--die",
    "--load-store-vectorizer"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--globaldce",
          "--mergefunc",
          "--always-inline",
          "--memcpyopt",
          "--lower-guard-intrinsic",
          "--cross-dso-cfi",
          "--argpromotion",
          "--div-rem-pairs",
          "--called-value-propagation",
          "--sancov",
          "--mem2reg",
          "--attributor",
          "--coro-cleanup",
          "--ipsccp",
          "-loop-reduce",
          "--loop-sink",
          "--coro-elide",
          "--libcalls-shrinkwrap",
          "--functionattrs",
          "--licm",
          "--tailcallelim",
          "--lower-widenable-condition",
          "--pgo-memop-opt",
          "--reassociate",
          "--slp-vectorizer",
          "--loop-unswitch",
          "--add-discriminators"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--globaldce",
      "--mergefunc",
      "--always-inline",
      "--memcpyopt",
      "--lower-guard-intrinsic",
      "--cross-dso-cfi",
      "--argpromotion",
      "--div-rem-pairs",
      "--called-value-propagation",
      "--sancov",
      "--mem2reg",
      "--attributor",
      "--coro-cleanup",
      "--ipsccp",
      "-loop-reduce",
      "--loop-sink",
      "--coro-elide",
      "--libcalls-shrinkwrap",
      "--functionattrs",
      "--licm",
      "--tailcallelim",
      "--lower-widenable-condition",
      "--pgo-memop-opt",
      "--reassociate",
      "--slp-vectorizer",
      "--loop-unswitch",
      "--add-discriminators"
    ],
    "performance_vs_Oz": "+1.1%"
  }
}
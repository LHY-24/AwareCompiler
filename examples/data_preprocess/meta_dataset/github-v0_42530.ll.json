{
  "program_id": "github-v0_42530.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 0,
    "onePredOneSuc": 0,
    "onePredTwoSuc": 0,
    "oneSuccessor": 0,
    "twoPred": 0,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 0,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 2,
    "BeginPhi": 0,
    "BranchCount": 0,
    "returnInt": 0,
    "CriticalCount": 0,
    "NumEdges": 0,
    "const32Bit": 30,
    "const64Bit": 9,
    "numConstZeroes": 13,
    "numConstOnes": 5,
    "UncondBranches": 0,
    "binaryConstArg": 17,
    "NumAShrInst": 0,
    "NumAddInst": 5,
    "NumAllocaInst": 0,
    "NumAndInst": 2,
    "BlockMid": 2,
    "BlockLow": 0,
    "NumBitCastInst": 0,
    "NumBrInst": 0,
    "NumCallInst": 0,
    "NumGetElementPtrInst": 8,
    "NumICmpInst": 3,
    "NumLShrInst": 4,
    "NumLoadInst": 4,
    "NumMulInst": 3,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 2,
    "NumSExtInst": 0,
    "NumSelectInst": 3,
    "NumShlInst": 3,
    "NumStoreInst": 8,
    "NumSubInst": 0,
    "NumTruncInst": 2,
    "NumXorInst": 8,
    "NumZExtInst": 0,
    "TotalBlocks": 2,
    "TotalInsts": 55,
    "TotalMemInst": 20,
    "TotalFuncs": 2,
    "ArgsPhi": 0,
    "testUnary": 6
  },
  "baseline_oz_instcount": 55,
  "knowledge_base_entry": [
    "--sink",
    "--load-store-vectorizer",
    "--die",
    "--slp-vectorizer",
    "--gvn",
    "--bdce",
    "--instcombine",
    "--sroa",
    "--slp-vectorizer",
    "--load-store-vectorizer",
    "--mem2reg",
    "--flattencfg",
    "--gvn",
    "--lower-constant-intrinsics",
    "--jump-threading",
    "--mem2reg",
    "--simplifycfg",
    "--dse",
    "--mldst-motion"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--inferattrs",
          "--simplifycfg",
          "--loop-reroll",
          "--slsr",
          "--libcalls-shrinkwrap",
          "--irce",
          "--gvn-hoist",
          "--mem2reg",
          "--strip",
          "--die",
          "--lower-constant-intrinsics",
          "--jump-threading",
          "--lower-widenable-condition",
          "--flattencfg",
          "--loop-idiom",
          "--loop-vectorize",
          "--load-store-vectorizer",
          "--instcombine",
          "--early-cse-memssa",
          "--mergefunc",
          "--strip-dead-prototypes",
          "--partially-inline-libcalls",
          "--globaldce",
          "--gvn"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+5.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--inferattrs",
      "--simplifycfg",
      "--loop-reroll",
      "--slsr",
      "--libcalls-shrinkwrap",
      "--irce",
      "--gvn-hoist",
      "--mem2reg",
      "--strip",
      "--die",
      "--lower-constant-intrinsics",
      "--jump-threading",
      "--lower-widenable-condition",
      "--flattencfg",
      "--loop-idiom",
      "--loop-vectorize",
      "--load-store-vectorizer",
      "--instcombine",
      "--early-cse-memssa",
      "--mergefunc",
      "--strip-dead-prototypes",
      "--partially-inline-libcalls",
      "--globaldce",
      "--gvn"
    ],
    "performance_vs_Oz": "+5.5%"
  }
}
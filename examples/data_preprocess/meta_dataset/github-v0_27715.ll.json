{
  "program_id": "github-v0_27715.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 27,
    "onePredOneSuc": 13,
    "onePredTwoSuc": 14,
    "oneSuccessor": 26,
    "twoPred": 15,
    "twoPredOneSuc": 13,
    "twoEach": 2,
    "twoSuccessor": 17,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 44,
    "BeginPhi": 0,
    "BranchCount": 43,
    "returnInt": 0,
    "CriticalCount": 13,
    "NumEdges": 60,
    "const32Bit": 33,
    "const64Bit": 11,
    "numConstZeroes": 9,
    "numConstOnes": 25,
    "UncondBranches": 26,
    "binaryConstArg": 114,
    "NumAShrInst": 0,
    "NumAddInst": 11,
    "NumAllocaInst": 10,
    "NumAndInst": 59,
    "BlockMid": 12,
    "BlockLow": 32,
    "NumBitCastInst": 65,
    "NumBrInst": 43,
    "NumCallInst": 0,
    "NumGetElementPtrInst": 0,
    "NumICmpInst": 15,
    "NumLShrInst": 25,
    "NumLoadInst": 67,
    "NumMulInst": 0,
    "NumOrInst": 17,
    "NumPHIInst": 0,
    "NumRetInst": 1,
    "NumSExtInst": 0,
    "NumSelectInst": 1,
    "NumShlInst": 12,
    "NumStoreInst": 26,
    "NumSubInst": 5,
    "NumTruncInst": 49,
    "NumXorInst": 2,
    "NumZExtInst": 35,
    "TotalBlocks": 44,
    "TotalInsts": 450,
    "TotalMemInst": 103,
    "TotalFuncs": 1,
    "ArgsPhi": 0,
    "testUnary": 227
  },
  "baseline_oz_instcount": 450,
  "knowledge_base_entry": [
    "--loop-interchange",
    "--early-cse-memssa",
    "--newgvn",
    "--mergefunc",
    "--globaldce",
    "--aggressive-instcombine",
    "--simplifycfg",
    "--loop-rotate"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--ipconstprop",
          "--loop-simplifycfg",
          "--slp-vectorizer",
          "--simple-loop-unswitch",
          "--consthoist",
          "--instcombine",
          "--loop-predication",
          "--tailcallelim",
          "--canonicalize-aliases",
          "--loweratomic",
          "--lcssa",
          "--inject-tli-mappings",
          "--mergereturn",
          "--div-rem-pairs",
          "--called-value-propagation",
          "--redundant-dbg-inst-elim",
          "--inline",
          "--aggressive-instcombine",
          "--jump-threading",
          "--float2int",
          "--lower-matrix-intrinsics",
          "--licm",
          "--sccp",
          "--newgvn",
          "--speculative-execution",
          "--partially-inline-libcalls",
          "--gvn",
          "--simplifycfg"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--ipconstprop",
      "--loop-simplifycfg",
      "--slp-vectorizer",
      "--simple-loop-unswitch",
      "--consthoist",
      "--instcombine",
      "--loop-predication",
      "--tailcallelim",
      "--canonicalize-aliases",
      "--loweratomic",
      "--lcssa",
      "--inject-tli-mappings",
      "--mergereturn",
      "--div-rem-pairs",
      "--called-value-propagation",
      "--redundant-dbg-inst-elim",
      "--inline",
      "--aggressive-instcombine",
      "--jump-threading",
      "--float2int",
      "--lower-matrix-intrinsics",
      "--licm",
      "--sccp",
      "--newgvn",
      "--speculative-execution",
      "--partially-inline-libcalls",
      "--gvn",
      "--simplifycfg"
    ],
    "performance_vs_Oz": "+1.3%"
  }
}
{
  "program_id": "github-v0_14113.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 10,
    "onePredOneSuc": 6,
    "onePredTwoSuc": 3,
    "oneSuccessor": 10,
    "twoPred": 6,
    "twoPredOneSuc": 2,
    "twoEach": 3,
    "twoSuccessor": 6,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 19,
    "BeginPhi": 0,
    "BranchCount": 15,
    "returnInt": 6,
    "CriticalCount": 3,
    "NumEdges": 22,
    "const32Bit": 25,
    "const64Bit": 2,
    "numConstZeroes": 10,
    "numConstOnes": 14,
    "UncondBranches": 10,
    "binaryConstArg": 0,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 10,
    "NumAndInst": 0,
    "BlockMid": 0,
    "BlockLow": 19,
    "NumBitCastInst": 0,
    "NumBrInst": 15,
    "NumCallInst": 11,
    "NumGetElementPtrInst": 7,
    "NumICmpInst": 5,
    "NumLShrInst": 0,
    "NumLoadInst": 26,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 2,
    "NumSExtInst": 1,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 12,
    "NumSubInst": 1,
    "NumTruncInst": 1,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 19,
    "TotalInsts": 93,
    "TotalMemInst": 66,
    "TotalFuncs": 8,
    "ArgsPhi": 0,
    "testUnary": 38
  },
  "baseline_oz_instcount": 93,
  "knowledge_base_entry": [
    "--mergereturn",
    "--simplifycfg",
    "--aggressive-instcombine",
    "--gvn",
    "--ipsccp",
    "--jump-threading",
    "--bdce",
    "--correlated-propagation",
    "--die",
    "--gvn-hoist",
    "--sccp",
    "--loop-deletion",
    "--instcombine",
    "--loop-reroll",
    "-loop-reduce",
    "--newgvn",
    "--ipsccp",
    "--adce",
    "--jump-threading",
    "--loop-instsimplify",
    "--inline",
    "--licm",
    "--instsimplify",
    "--reassociate",
    "--dce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--redundant-dbg-inst-elim",
          "--called-value-propagation",
          "--sccp",
          "--libcalls-shrinkwrap",
          "--prune-eh",
          "--float2int",
          "--add-discriminators",
          "--mergefunc",
          "--simple-loop-unswitch",
          "--ipsccp",
          "--loop-unroll-and-jam",
          "--mergereturn",
          "--memcpyopt",
          "--inject-tli-mappings",
          "--mergeicmps",
          "--partially-inline-libcalls",
          "--loop-load-elim",
          "--lower-matrix-intrinsics"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--redundant-dbg-inst-elim",
      "--called-value-propagation",
      "--sccp",
      "--libcalls-shrinkwrap",
      "--prune-eh",
      "--float2int",
      "--add-discriminators",
      "--mergefunc",
      "--simple-loop-unswitch",
      "--ipsccp",
      "--loop-unroll-and-jam",
      "--mergereturn",
      "--memcpyopt",
      "--inject-tli-mappings",
      "--mergeicmps",
      "--partially-inline-libcalls",
      "--loop-load-elim",
      "--lower-matrix-intrinsics"
    ],
    "performance_vs_Oz": "+1.1%"
  }
}
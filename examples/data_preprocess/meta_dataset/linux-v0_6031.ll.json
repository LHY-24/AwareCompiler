{
  "program_id": "linux-v0_6031.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 93,
    "onePredOneSuc": 78,
    "onePredTwoSuc": 11,
    "oneSuccessor": 85,
    "twoPred": 11,
    "twoPredOneSuc": 4,
    "twoEach": 4,
    "twoSuccessor": 24,
    "morePreds": 12,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 131,
    "BeginPhi": 1,
    "BranchCount": 109,
    "returnInt": 11,
    "CriticalCount": 8,
    "NumEdges": 168,
    "const32Bit": 271,
    "const64Bit": 23,
    "numConstZeroes": 77,
    "numConstOnes": 171,
    "UncondBranches": 85,
    "binaryConstArg": 15,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 140,
    "NumAndInst": 0,
    "BlockMid": 15,
    "BlockLow": 117,
    "NumBitCastInst": 81,
    "NumBrInst": 109,
    "NumCallInst": 76,
    "NumGetElementPtrInst": 22,
    "NumICmpInst": 29,
    "NumLShrInst": 0,
    "NumLoadInst": 264,
    "NumMulInst": 2,
    "NumOrInst": 0,
    "NumPHIInst": 1,
    "NumRetInst": 16,
    "NumSExtInst": 17,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 188,
    "NumSubInst": 1,
    "NumTruncInst": 7,
    "NumXorInst": 12,
    "NumZExtInst": 14,
    "TotalBlocks": 132,
    "TotalInsts": 989,
    "TotalMemInst": 690,
    "TotalFuncs": 40,
    "ArgsPhi": 2,
    "testUnary": 525
  },
  "baseline_oz_instcount": 989,
  "knowledge_base_entry": [
    "--ipsccp",
    "--aggressive-instcombine",
    "--dse",
    "--loop-simplifycfg",
    "--dse",
    "--gvn-hoist",
    "--slp-vectorizer",
    "--correlated-propagation",
    "--mergefunc",
    "--adce",
    "--simplifycfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--coro-cleanup",
          "--slsr",
          "--loop-unroll",
          "--called-value-propagation",
          "--partially-inline-libcalls",
          "--lower-matrix-intrinsics",
          "--alignment-from-assumptions",
          "--flattencfg",
          "--aggressive-instcombine",
          "--inline",
          "--separate-const-offset-from-gep",
          "--mergereturn",
          "--mem2reg",
          "--guard-widening",
          "--loop-idiom",
          "--add-discriminators",
          "--sroa",
          "--argpromotion",
          "--loop-distribute",
          "--sccp",
          "--correlated-propagation",
          "--hotcoldsplit",
          "--lower-constant-intrinsics",
          "--early-cse",
          "--mergefunc",
          "--adce"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--coro-cleanup",
      "--slsr",
      "--loop-unroll",
      "--called-value-propagation",
      "--partially-inline-libcalls",
      "--lower-matrix-intrinsics",
      "--alignment-from-assumptions",
      "--flattencfg",
      "--aggressive-instcombine",
      "--inline",
      "--separate-const-offset-from-gep",
      "--mergereturn",
      "--mem2reg",
      "--guard-widening",
      "--loop-idiom",
      "--add-discriminators",
      "--sroa",
      "--argpromotion",
      "--loop-distribute",
      "--sccp",
      "--correlated-propagation",
      "--hotcoldsplit",
      "--lower-constant-intrinsics",
      "--early-cse",
      "--mergefunc",
      "--adce"
    ],
    "performance_vs_Oz": "+0.7%"
  }
}
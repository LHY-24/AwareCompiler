{
  "program_id": "github-v0_49231.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 5,
    "onePred": 48,
    "onePredOneSuc": 27,
    "onePredTwoSuc": 21,
    "oneSuccessor": 42,
    "twoPred": 25,
    "twoPredOneSuc": 13,
    "twoEach": 12,
    "twoSuccessor": 35,
    "morePreds": 4,
    "BB03Phi": 5,
    "BBHiPhi": 0,
    "BBNoPhi": 74,
    "BeginPhi": 5,
    "BranchCount": 77,
    "returnInt": 4,
    "CriticalCount": 24,
    "NumEdges": 112,
    "const32Bit": 68,
    "const64Bit": 17,
    "numConstZeroes": 24,
    "numConstOnes": 27,
    "UncondBranches": 42,
    "binaryConstArg": 13,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 17,
    "NumAndInst": 7,
    "BlockMid": 2,
    "BlockLow": 77,
    "NumBitCastInst": 0,
    "NumBrInst": 77,
    "NumCallInst": 8,
    "NumGetElementPtrInst": 15,
    "NumICmpInst": 35,
    "NumLShrInst": 0,
    "NumLoadInst": 92,
    "NumMulInst": 1,
    "NumOrInst": 0,
    "NumPHIInst": 5,
    "NumRetInst": 2,
    "NumSExtInst": 18,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 42,
    "NumSubInst": 4,
    "NumTruncInst": 3,
    "NumXorInst": 0,
    "NumZExtInst": 14,
    "TotalBlocks": 79,
    "TotalInsts": 346,
    "TotalMemInst": 174,
    "TotalFuncs": 5,
    "ArgsPhi": 10,
    "testUnary": 146
  },
  "baseline_oz_instcount": 347,
  "knowledge_base_entry": [
    "--speculative-execution",
    "--newgvn",
    "--dce",
    "--mergefunc",
    "--globaldce",
    "--aggressive-instcombine",
    "--adce",
    "--sroa",
    "--mergefunc",
    "--globaldce",
    "--aggressive-instcombine",
    "--adce",
    "--lower-constant-intrinsics",
    "--simplifycfg",
    "--instsimplify"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--add-discriminators",
          "--inline",
          "--ipconstprop",
          "--die",
          "--aggressive-instcombine",
          "--mergereturn",
          "--sroa",
          "--lower-widenable-condition",
          "--loop-unroll-and-jam",
          "--strip-dead-prototypes",
          "--memcpyopt"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--add-discriminators",
      "--inline",
      "--ipconstprop",
      "--die",
      "--aggressive-instcombine",
      "--mergereturn",
      "--sroa",
      "--lower-widenable-condition",
      "--loop-unroll-and-jam",
      "--strip-dead-prototypes",
      "--memcpyopt"
    ],
    "performance_vs_Oz": "+0.9%"
  }
}
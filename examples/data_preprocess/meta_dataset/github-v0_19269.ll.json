{
  "program_id": "github-v0_19269.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 55,
    "onePredOneSuc": 35,
    "onePredTwoSuc": 20,
    "oneSuccessor": 54,
    "twoPred": 28,
    "twoPredOneSuc": 17,
    "twoEach": 9,
    "twoSuccessor": 30,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 86,
    "BeginPhi": 0,
    "BranchCount": 84,
    "returnInt": 15,
    "CriticalCount": 10,
    "NumEdges": 114,
    "const32Bit": 60,
    "const64Bit": 7,
    "numConstZeroes": 28,
    "numConstOnes": 25,
    "UncondBranches": 54,
    "binaryConstArg": 7,
    "NumAShrInst": 0,
    "NumAddInst": 5,
    "NumAllocaInst": 14,
    "NumAndInst": 0,
    "BlockMid": 2,
    "BlockLow": 84,
    "NumBitCastInst": 0,
    "NumBrInst": 84,
    "NumCallInst": 16,
    "NumGetElementPtrInst": 10,
    "NumICmpInst": 31,
    "NumLShrInst": 0,
    "NumLoadInst": 64,
    "NumMulInst": 1,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 2,
    "NumSExtInst": 28,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 32,
    "NumSubInst": 1,
    "NumTruncInst": 3,
    "NumXorInst": 1,
    "NumZExtInst": 4,
    "TotalBlocks": 86,
    "TotalInsts": 296,
    "TotalMemInst": 136,
    "TotalFuncs": 5,
    "ArgsPhi": 0,
    "testUnary": 113
  },
  "baseline_oz_instcount": 297,
  "knowledge_base_entry": [
    "--correlated-propagation",
    "--reassociate",
    "--aggressive-instcombine",
    "--reassociate",
    "--prune-eh",
    "--gvn",
    "--dse",
    "--lower-expect",
    "--gvn",
    "--dce",
    "--aggressive-instcombine",
    "--reassociate",
    "--adce",
    "--gvn-hoist",
    "--slsr",
    "--instcombine"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--slsr",
          "--nary-reassociate",
          "--mergefunc",
          "--reassociate",
          "--aggressive-instcombine",
          "--licm",
          "--loop-unroll",
          "--lowerinvoke",
          "--die",
          "--simplifycfg",
          "--loop-versioning-licm",
          "--dce",
          "--lower-expect",
          "--loop-predication"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--slsr",
      "--nary-reassociate",
      "--mergefunc",
      "--reassociate",
      "--aggressive-instcombine",
      "--licm",
      "--loop-unroll",
      "--lowerinvoke",
      "--die",
      "--simplifycfg",
      "--loop-versioning-licm",
      "--dce",
      "--lower-expect",
      "--loop-predication"
    ],
    "performance_vs_Oz": "+1.7%"
  }
}
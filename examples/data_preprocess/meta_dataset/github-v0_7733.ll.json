{
  "program_id": "github-v0_7733.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 13,
    "onePredOneSuc": 9,
    "onePredTwoSuc": 1,
    "oneSuccessor": 11,
    "twoPred": 5,
    "twoPredOneSuc": 1,
    "twoEach": 4,
    "twoSuccessor": 6,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 21,
    "BeginPhi": 0,
    "BranchCount": 17,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 23,
    "const32Bit": 32,
    "const64Bit": 24,
    "numConstZeroes": 30,
    "numConstOnes": 20,
    "UncondBranches": 11,
    "binaryConstArg": 9,
    "NumAShrInst": 0,
    "NumAddInst": 11,
    "NumAllocaInst": 13,
    "NumAndInst": 0,
    "BlockMid": 4,
    "BlockLow": 17,
    "NumBitCastInst": 0,
    "NumBrInst": 17,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 15,
    "NumICmpInst": 6,
    "NumLShrInst": 0,
    "NumLoadInst": 27,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 19,
    "NumSubInst": 0,
    "NumTruncInst": 6,
    "NumXorInst": 0,
    "NumZExtInst": 12,
    "TotalBlocks": 21,
    "TotalInsts": 140,
    "TotalMemInst": 81,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 61
  },
  "baseline_oz_instcount": 140,
  "knowledge_base_entry": [
    "-loop-reduce",
    "--early-cse",
    "--early-cse",
    "--aggressive-instcombine",
    "--globalopt",
    "--mem2reg",
    "--loop-instsimplify",
    "--mem2reg",
    "--elim-avail-extern"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--post-inline-ee-instrument",
          "--simple-loop-unswitch",
          "--loop-vectorize",
          "--globalsplit",
          "--loop-versioning",
          "--forceattrs",
          "--dse",
          "--coro-split",
          "--constprop",
          "--libcalls-shrinkwrap",
          "--rpo-functionattrs",
          "--lower-matrix-intrinsics",
          "--loop-simplifycfg",
          "--licm",
          "--aggressive-instcombine",
          "--alignment-from-assumptions",
          "--always-inline",
          "--mem2reg",
          "--loop-unroll-and-jam",
          "--sink",
          "--ipconstprop",
          "--loop-rotate",
          "--globaldce",
          "--loop-predication",
          "--adce",
          "--reg2mem",
          "--loop-data-prefetch",
          "--float2int",
          "--instcombine",
          "--strip-dead-prototypes"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+8.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--post-inline-ee-instrument",
      "--simple-loop-unswitch",
      "--loop-vectorize",
      "--globalsplit",
      "--loop-versioning",
      "--forceattrs",
      "--dse",
      "--coro-split",
      "--constprop",
      "--libcalls-shrinkwrap",
      "--rpo-functionattrs",
      "--lower-matrix-intrinsics",
      "--loop-simplifycfg",
      "--licm",
      "--aggressive-instcombine",
      "--alignment-from-assumptions",
      "--always-inline",
      "--mem2reg",
      "--loop-unroll-and-jam",
      "--sink",
      "--ipconstprop",
      "--loop-rotate",
      "--globaldce",
      "--loop-predication",
      "--adce",
      "--reg2mem",
      "--loop-data-prefetch",
      "--float2int",
      "--instcombine",
      "--strip-dead-prototypes"
    ],
    "performance_vs_Oz": "+8.6%"
  }
}
{
  "program_id": "linux-v0_12551.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 27,
    "onePredOneSuc": 21,
    "onePredTwoSuc": 6,
    "oneSuccessor": 24,
    "twoPred": 9,
    "twoPredOneSuc": 3,
    "twoEach": 4,
    "twoSuccessor": 15,
    "morePreds": 4,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 61,
    "BeginPhi": 0,
    "BranchCount": 39,
    "returnInt": 23,
    "CriticalCount": 11,
    "NumEdges": 57,
    "const32Bit": 211,
    "const64Bit": 14,
    "numConstZeroes": 96,
    "numConstOnes": 78,
    "UncondBranches": 24,
    "binaryConstArg": 34,
    "NumAShrInst": 1,
    "NumAddInst": 13,
    "NumAllocaInst": 53,
    "NumAndInst": 6,
    "BlockMid": 13,
    "BlockLow": 48,
    "NumBitCastInst": 14,
    "NumBrInst": 39,
    "NumCallInst": 41,
    "NumGetElementPtrInst": 79,
    "NumICmpInst": 19,
    "NumLShrInst": 1,
    "NumLoadInst": 186,
    "NumMulInst": 2,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 21,
    "NumSExtInst": 16,
    "NumSelectInst": 0,
    "NumShlInst": 3,
    "NumStoreInst": 87,
    "NumSubInst": 10,
    "NumTruncInst": 11,
    "NumXorInst": 13,
    "NumZExtInst": 32,
    "TotalBlocks": 61,
    "TotalInsts": 661,
    "TotalMemInst": 446,
    "TotalFuncs": 23,
    "ArgsPhi": 0,
    "testUnary": 322
  },
  "baseline_oz_instcount": 661,
  "knowledge_base_entry": [
    "--loop-rotate",
    "--sroa",
    "--dce",
    "--simplifycfg",
    "--aggressive-instcombine",
    "--load-store-vectorizer",
    "--aggressive-instcombine",
    "--simplifycfg",
    "--newgvn",
    "--lower-constant-intrinsics",
    "--instcombine",
    "--reassociate",
    "--bdce",
    "--sroa",
    "--loop-simplifycfg",
    "--aggressive-instcombine",
    "--instsimplify",
    "--gvn-hoist",
    "--load-store-vectorizer",
    "-loop-reduce",
    "--gvn",
    "--indvars"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--instsimplify",
          "--strip",
          "--globalsplit",
          "--strip-debug-declare",
          "--sccp",
          "--post-inline-ee-instrument",
          "--loop-reroll",
          "--lower-matrix-intrinsics",
          "--constmerge",
          "--coro-elide",
          "--deadargelim",
          "--instcombine",
          "--ipconstprop",
          "--partial-inliner",
          "--loop-idiom",
          "--functionattrs",
          "--loop-distribute",
          "--slp-vectorizer",
          "--partially-inline-libcalls",
          "--aggressive-instcombine",
          "--ipsccp",
          "--slsr",
          "--ee-instrument",
          "--separate-const-offset-from-gep",
          "--tailcallelim",
          "--globaldce",
          "--argpromotion",
          "--hotcoldsplit",
          "--loop-unroll-and-jam"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--instsimplify",
      "--strip",
      "--globalsplit",
      "--strip-debug-declare",
      "--sccp",
      "--post-inline-ee-instrument",
      "--loop-reroll",
      "--lower-matrix-intrinsics",
      "--constmerge",
      "--coro-elide",
      "--deadargelim",
      "--instcombine",
      "--ipconstprop",
      "--partial-inliner",
      "--loop-idiom",
      "--functionattrs",
      "--loop-distribute",
      "--slp-vectorizer",
      "--partially-inline-libcalls",
      "--aggressive-instcombine",
      "--ipsccp",
      "--slsr",
      "--ee-instrument",
      "--separate-const-offset-from-gep",
      "--tailcallelim",
      "--globaldce",
      "--argpromotion",
      "--hotcoldsplit",
      "--loop-unroll-and-jam"
    ],
    "performance_vs_Oz": "+1.2%"
  }
}
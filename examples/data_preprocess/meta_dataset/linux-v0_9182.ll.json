{
  "program_id": "linux-v0_9182.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 47,
    "onePredOneSuc": 17,
    "onePredTwoSuc": 30,
    "oneSuccessor": 23,
    "twoPred": 1,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 31,
    "morePreds": 6,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 67,
    "BeginPhi": 0,
    "BranchCount": 54,
    "returnInt": 43,
    "CriticalCount": 15,
    "NumEdges": 85,
    "const32Bit": 170,
    "const64Bit": 35,
    "numConstZeroes": 91,
    "numConstOnes": 62,
    "UncondBranches": 23,
    "binaryConstArg": 12,
    "NumAShrInst": 0,
    "NumAddInst": 9,
    "NumAllocaInst": 42,
    "NumAndInst": 0,
    "BlockMid": 9,
    "BlockLow": 58,
    "NumBitCastInst": 5,
    "NumBrInst": 54,
    "NumCallInst": 96,
    "NumGetElementPtrInst": 41,
    "NumICmpInst": 32,
    "NumLShrInst": 0,
    "NumLoadInst": 127,
    "NumMulInst": 1,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 13,
    "NumSExtInst": 4,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 77,
    "NumSubInst": 0,
    "NumTruncInst": 4,
    "NumXorInst": 2,
    "NumZExtInst": 20,
    "TotalBlocks": 67,
    "TotalInsts": 535,
    "TotalMemInst": 383,
    "TotalFuncs": 29,
    "ArgsPhi": 0,
    "testUnary": 210
  },
  "baseline_oz_instcount": 535,
  "knowledge_base_entry": [
    "--hotcoldsplit",
    "--mergefunc",
    "--simplifycfg",
    "--gvn-hoist",
    "--sroa",
    "--aggressive-instcombine",
    "--bdce",
    "--mem2reg",
    "--dse",
    "--licm",
    "--licm",
    "--loop-simplifycfg",
    "--loop-reroll",
    "--loop-simplifycfg",
    "--jump-threading",
    "--memcpyopt",
    "--gvn-hoist",
    "--early-cse",
    "--instsimplify",
    "--ipsccp",
    "--jump-threading",
    "--reassociate",
    "--loop-instsimplify",
    "--early-cse",
    "--flattencfg",
    "--mem2reg",
    "--sccp",
    "--instsimplify",
    "--ipsccp",
    "--jump-threading",
    "--reassociate",
    "--loop-instsimplify",
    "--early-cse",
    "--instsimplify",
    "--newgvn",
    "--instcombine",
    "--lower-expect"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--canonicalize-aliases",
          "--ipsccp",
          "--aggressive-instcombine",
          "--partial-inliner",
          "--simple-loop-unswitch",
          "--loop-vectorize",
          "--loop-unswitch",
          "--insert-gcov-profiling",
          "--coro-split",
          "--slsr",
          "--hotcoldsplit",
          "--slp-vectorizer",
          "--callsite-splitting",
          "--die",
          "--indvars",
          "--ee-instrument",
          "--loop-versioning",
          "--lcssa",
          "--instnamer",
          "--attributor",
          "--elim-avail-extern",
          "--forceattrs",
          "--deadargelim",
          "--mem2reg",
          "--memcpyopt",
          "--speculative-execution",
          "--ipconstprop",
          "--flattencfg"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--canonicalize-aliases",
      "--ipsccp",
      "--aggressive-instcombine",
      "--partial-inliner",
      "--simple-loop-unswitch",
      "--loop-vectorize",
      "--loop-unswitch",
      "--insert-gcov-profiling",
      "--coro-split",
      "--slsr",
      "--hotcoldsplit",
      "--slp-vectorizer",
      "--callsite-splitting",
      "--die",
      "--indvars",
      "--ee-instrument",
      "--loop-versioning",
      "--lcssa",
      "--instnamer",
      "--attributor",
      "--elim-avail-extern",
      "--forceattrs",
      "--deadargelim",
      "--mem2reg",
      "--memcpyopt",
      "--speculative-execution",
      "--ipconstprop",
      "--flattencfg"
    ],
    "performance_vs_Oz": "+0.4%"
  }
}
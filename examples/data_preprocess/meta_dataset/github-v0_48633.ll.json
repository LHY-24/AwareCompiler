{
  "program_id": "github-v0_48633.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 11,
    "onePredOneSuc": 8,
    "onePredTwoSuc": 1,
    "oneSuccessor": 9,
    "twoPred": 4,
    "twoPredOneSuc": 1,
    "twoEach": 2,
    "twoSuccessor": 5,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 18,
    "BeginPhi": 0,
    "BranchCount": 14,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 19,
    "const32Bit": 34,
    "const64Bit": 26,
    "numConstZeroes": 32,
    "numConstOnes": 19,
    "UncondBranches": 9,
    "binaryConstArg": 10,
    "NumAShrInst": 1,
    "NumAddInst": 4,
    "NumAllocaInst": 11,
    "NumAndInst": 2,
    "BlockMid": 4,
    "BlockLow": 14,
    "NumBitCastInst": 0,
    "NumBrInst": 14,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 17,
    "NumICmpInst": 5,
    "NumLShrInst": 0,
    "NumLoadInst": 25,
    "NumMulInst": 2,
    "NumOrInst": 2,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 15,
    "NumSubInst": 0,
    "NumTruncInst": 5,
    "NumXorInst": 1,
    "NumZExtInst": 11,
    "TotalBlocks": 18,
    "TotalInsts": 131,
    "TotalMemInst": 75,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 55
  },
  "baseline_oz_instcount": 131,
  "knowledge_base_entry": [
    "--early-cse",
    "--nary-reassociate",
    "--simplifycfg",
    "--sccp",
    "--loop-simplifycfg",
    "--early-cse",
    "--early-cse-memssa",
    "--sccp",
    "--lower-expect",
    "--aggressive-instcombine",
    "--dse",
    "--sccp",
    "--mem2reg",
    "--dse",
    "--instsimplify",
    "--early-cse-memssa",
    "--newgvn",
    "--slsr",
    "--gvn",
    "--early-cse",
    "--sroa",
    "--globalopt"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--always-inline",
          "--irce",
          "--speculative-execution",
          "--coro-cleanup",
          "--ipconstprop",
          "--loop-sink",
          "--cross-dso-cfi",
          "--lowerswitch",
          "--lower-widenable-condition",
          "--flattencfg",
          "--correlated-propagation",
          "--partially-inline-libcalls",
          "--inferattrs",
          "--sroa",
          "--aggressive-instcombine",
          "--globaldce",
          "--coro-elide",
          "--instnamer",
          "--hotcoldsplit",
          "--mem2reg",
          "--forceattrs",
          "--loop-simplifycfg"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--always-inline",
      "--irce",
      "--speculative-execution",
      "--coro-cleanup",
      "--ipconstprop",
      "--loop-sink",
      "--cross-dso-cfi",
      "--lowerswitch",
      "--lower-widenable-condition",
      "--flattencfg",
      "--correlated-propagation",
      "--partially-inline-libcalls",
      "--inferattrs",
      "--sroa",
      "--aggressive-instcombine",
      "--globaldce",
      "--coro-elide",
      "--instnamer",
      "--hotcoldsplit",
      "--mem2reg",
      "--forceattrs",
      "--loop-simplifycfg"
    ],
    "performance_vs_Oz": "+3.8%"
  }
}
{
  "program_id": "github-v0_29327.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 19,
    "onePredOneSuc": 14,
    "onePredTwoSuc": 5,
    "oneSuccessor": 14,
    "twoPred": 1,
    "twoPredOneSuc": 0,
    "twoEach": 1,
    "twoSuccessor": 9,
    "morePreds": 3,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 29,
    "BeginPhi": 0,
    "BranchCount": 23,
    "returnInt": 7,
    "CriticalCount": 0,
    "NumEdges": 32,
    "const32Bit": 111,
    "const64Bit": 35,
    "numConstZeroes": 56,
    "numConstOnes": 55,
    "UncondBranches": 14,
    "binaryConstArg": 12,
    "NumAShrInst": 1,
    "NumAddInst": 3,
    "NumAllocaInst": 35,
    "NumAndInst": 0,
    "BlockMid": 11,
    "BlockLow": 18,
    "NumBitCastInst": 0,
    "NumBrInst": 23,
    "NumCallInst": 24,
    "NumGetElementPtrInst": 38,
    "NumICmpInst": 9,
    "NumLShrInst": 6,
    "NumLoadInst": 94,
    "NumMulInst": 4,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 6,
    "NumSExtInst": 16,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 74,
    "NumSubInst": 1,
    "NumTruncInst": 19,
    "NumXorInst": 0,
    "NumZExtInst": 2,
    "TotalBlocks": 29,
    "TotalInsts": 357,
    "TotalMemInst": 265,
    "TotalFuncs": 10,
    "ArgsPhi": 0,
    "testUnary": 168
  },
  "baseline_oz_instcount": 357,
  "knowledge_base_entry": [
    "--lowerinvoke",
    "--newgvn",
    "--jump-threading",
    "--aggressive-instcombine",
    "--bdce",
    "--sccp",
    "--elim-avail-extern",
    "--licm",
    "--dse",
    "--loop-instsimplify",
    "--licm",
    "--lower-constant-intrinsics",
    "--early-cse-memssa",
    "--simplifycfg",
    "-loop-reduce",
    "--gvn",
    "--slp-vectorizer"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--inline",
          "--licm",
          "--loop-vectorize",
          "--ipconstprop",
          "--loop-sink",
          "--sink",
          "--loop-idiom",
          "--elim-avail-extern",
          "--partial-inliner",
          "--dce",
          "--gvn",
          "--correlated-propagation",
          "--insert-gcov-profiling",
          "--add-discriminators",
          "--simple-loop-unswitch",
          "--lower-expect",
          "-loop-reduce",
          "--ipsccp",
          "--libcalls-shrinkwrap",
          "--rpo-functionattrs",
          "--lower-matrix-intrinsics",
          "--guard-widening",
          "--infer-address-spaces",
          "--constprop",
          "--loop-unroll",
          "--aggressive-instcombine",
          "--instcombine"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--inline",
      "--licm",
      "--loop-vectorize",
      "--ipconstprop",
      "--loop-sink",
      "--sink",
      "--loop-idiom",
      "--elim-avail-extern",
      "--partial-inliner",
      "--dce",
      "--gvn",
      "--correlated-propagation",
      "--insert-gcov-profiling",
      "--add-discriminators",
      "--simple-loop-unswitch",
      "--lower-expect",
      "-loop-reduce",
      "--ipsccp",
      "--libcalls-shrinkwrap",
      "--rpo-functionattrs",
      "--lower-matrix-intrinsics",
      "--guard-widening",
      "--infer-address-spaces",
      "--constprop",
      "--loop-unroll",
      "--aggressive-instcombine",
      "--instcombine"
    ],
    "performance_vs_Oz": "+1.4%"
  }
}
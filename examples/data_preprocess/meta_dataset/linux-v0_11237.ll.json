{
  "program_id": "linux-v0_11237.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 11,
    "onePredOneSuc": 9,
    "onePredTwoSuc": 1,
    "oneSuccessor": 11,
    "twoPred": 4,
    "twoPredOneSuc": 1,
    "twoEach": 1,
    "twoSuccessor": 4,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 25,
    "BeginPhi": 0,
    "BranchCount": 15,
    "returnInt": 10,
    "CriticalCount": 2,
    "NumEdges": 19,
    "const32Bit": 240,
    "const64Bit": 31,
    "numConstZeroes": 69,
    "numConstOnes": 73,
    "UncondBranches": 11,
    "binaryConstArg": 49,
    "NumAShrInst": 0,
    "NumAddInst": 10,
    "NumAllocaInst": 55,
    "NumAndInst": 10,
    "BlockMid": 6,
    "BlockLow": 19,
    "NumBitCastInst": 6,
    "NumBrInst": 15,
    "NumCallInst": 51,
    "NumGetElementPtrInst": 84,
    "NumICmpInst": 5,
    "NumLShrInst": 6,
    "NumLoadInst": 173,
    "NumMulInst": 1,
    "NumOrInst": 14,
    "NumPHIInst": 0,
    "NumRetInst": 10,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 11,
    "NumStoreInst": 71,
    "NumSubInst": 15,
    "NumTruncInst": 1,
    "NumXorInst": 0,
    "NumZExtInst": 4,
    "TotalBlocks": 25,
    "TotalInsts": 543,
    "TotalMemInst": 434,
    "TotalFuncs": 15,
    "ArgsPhi": 0,
    "testUnary": 239
  },
  "baseline_oz_instcount": 543,
  "knowledge_base_entry": [
    "--bdce",
    "--die",
    "--aggressive-instcombine",
    "--dse",
    "--die",
    "--ipsccp",
    "--early-cse",
    "--mem2reg",
    "--flattencfg",
    "--simplifycfg",
    "--loop-deletion",
    "--sccp"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--licm",
          "--newgvn",
          "--functionattrs",
          "--add-discriminators",
          "--canonicalize-aliases",
          "--lower-guard-intrinsic",
          "--constprop",
          "--load-store-vectorizer",
          "--bdce",
          "--early-cse",
          "--loop-idiom",
          "--loop-distribute",
          "--loop-sink",
          "--ipconstprop",
          "--aggressive-instcombine"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--licm",
      "--newgvn",
      "--functionattrs",
      "--add-discriminators",
      "--canonicalize-aliases",
      "--lower-guard-intrinsic",
      "--constprop",
      "--load-store-vectorizer",
      "--bdce",
      "--early-cse",
      "--loop-idiom",
      "--loop-distribute",
      "--loop-sink",
      "--ipconstprop",
      "--aggressive-instcombine"
    ],
    "performance_vs_Oz": "+0.4%"
  }
}
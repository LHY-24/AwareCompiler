{
  "program_id": "linux-v0_13826.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 21,
    "onePredOneSuc": 20,
    "onePredTwoSuc": 0,
    "oneSuccessor": 21,
    "twoPred": 8,
    "twoPredOneSuc": 0,
    "twoEach": 4,
    "twoSuccessor": 8,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 42,
    "BeginPhi": 0,
    "BranchCount": 29,
    "returnInt": 9,
    "CriticalCount": 5,
    "NumEdges": 47,
    "const32Bit": 135,
    "const64Bit": 36,
    "numConstZeroes": 87,
    "numConstOnes": 61,
    "UncondBranches": 21,
    "binaryConstArg": 7,
    "NumAShrInst": 1,
    "NumAddInst": 1,
    "NumAllocaInst": 40,
    "NumAndInst": 2,
    "BlockMid": 5,
    "BlockLow": 37,
    "NumBitCastInst": 27,
    "NumBrInst": 29,
    "NumCallInst": 34,
    "NumGetElementPtrInst": 51,
    "NumICmpInst": 7,
    "NumLShrInst": 0,
    "NumLoadInst": 98,
    "NumMulInst": 0,
    "NumOrInst": 3,
    "NumPHIInst": 0,
    "NumRetInst": 11,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 62,
    "NumSubInst": 0,
    "NumTruncInst": 7,
    "NumXorInst": 0,
    "NumZExtInst": 9,
    "TotalBlocks": 42,
    "TotalInsts": 387,
    "TotalMemInst": 285,
    "TotalFuncs": 15,
    "ArgsPhi": 0,
    "testUnary": 183
  },
  "baseline_oz_instcount": 386,
  "knowledge_base_entry": [
    "--loop-simplify",
    "--gvn-hoist",
    "--jump-threading",
    "--early-cse",
    "-loop-reduce",
    "--instcombine",
    "--ipsccp",
    "--sccp",
    "--dce",
    "--sccp",
    "--elim-avail-extern",
    "--flattencfg",
    "--jump-threading",
    "--mergefunc",
    "--correlated-propagation",
    "--die",
    "--aggressive-instcombine",
    "--adce",
    "--lower-expect"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-versioning-licm",
          "--inline",
          "--gvn",
          "--loop-reroll",
          "--loop-simplifycfg",
          "--sancov",
          "--loop-instsimplify",
          "--simple-loop-unswitch",
          "--canonicalize-aliases",
          "--loweratomic",
          "--loop-unswitch",
          "--instsimplify",
          "--mldst-motion",
          "--memcpyopt",
          "--loop-simplify",
          "--early-cse-memssa",
          "--load-store-vectorizer",
          "--ipsccp",
          "--slp-vectorizer",
          "--loop-versioning",
          "--instnamer",
          "--die",
          "--dce",
          "--aggressive-instcombine",
          "--consthoist",
          "--globalopt",
          "--mergereturn",
          "--loop-fusion"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-versioning-licm",
      "--inline",
      "--gvn",
      "--loop-reroll",
      "--loop-simplifycfg",
      "--sancov",
      "--loop-instsimplify",
      "--simple-loop-unswitch",
      "--canonicalize-aliases",
      "--loweratomic",
      "--loop-unswitch",
      "--instsimplify",
      "--mldst-motion",
      "--memcpyopt",
      "--loop-simplify",
      "--early-cse-memssa",
      "--load-store-vectorizer",
      "--ipsccp",
      "--slp-vectorizer",
      "--loop-versioning",
      "--instnamer",
      "--die",
      "--dce",
      "--aggressive-instcombine",
      "--consthoist",
      "--globalopt",
      "--mergereturn",
      "--loop-fusion"
    ],
    "performance_vs_Oz": "+3.1%"
  }
}
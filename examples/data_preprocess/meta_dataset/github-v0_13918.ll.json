{
  "program_id": "github-v0_13918.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 79,
    "onePredOneSuc": 42,
    "onePredTwoSuc": 37,
    "oneSuccessor": 59,
    "twoPred": 23,
    "twoPredOneSuc": 12,
    "twoEach": 9,
    "twoSuccessor": 50,
    "morePreds": 8,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 115,
    "BeginPhi": 1,
    "BranchCount": 109,
    "returnInt": 3,
    "CriticalCount": 37,
    "NumEdges": 165,
    "const32Bit": 164,
    "const64Bit": 35,
    "numConstZeroes": 87,
    "numConstOnes": 59,
    "UncondBranches": 59,
    "binaryConstArg": 26,
    "NumAShrInst": 0,
    "NumAddInst": 9,
    "NumAllocaInst": 32,
    "NumAndInst": 7,
    "BlockMid": 7,
    "BlockLow": 109,
    "NumBitCastInst": 1,
    "NumBrInst": 109,
    "NumCallInst": 4,
    "NumGetElementPtrInst": 46,
    "NumICmpInst": 51,
    "NumLShrInst": 2,
    "NumLoadInst": 128,
    "NumMulInst": 1,
    "NumOrInst": 7,
    "NumPHIInst": 1,
    "NumRetInst": 6,
    "NumSExtInst": 13,
    "NumSelectInst": 1,
    "NumShlInst": 7,
    "NumStoreInst": 83,
    "NumSubInst": 3,
    "NumTruncInst": 3,
    "NumXorInst": 3,
    "NumZExtInst": 23,
    "TotalBlocks": 116,
    "TotalInsts": 546,
    "TotalMemInst": 293,
    "TotalFuncs": 7,
    "ArgsPhi": 2,
    "testUnary": 202
  },
  "baseline_oz_instcount": 547,
  "knowledge_base_entry": [
    "--adce",
    "--newgvn",
    "--reassociate",
    "--lower-expect",
    "--reassociate",
    "--sccp",
    "--dse",
    "--gvn",
    "--jump-threading",
    "--sccp",
    "--bdce",
    "--early-cse",
    "--dce",
    "--jump-threading",
    "--memcpyopt",
    "--load-store-vectorizer",
    "--gvn",
    "--inline",
    "--instcombine",
    "--die",
    "--load-store-vectorizer",
    "--slp-vectorizer",
    "--mergefunc",
    "--aggressive-instcombine",
    "--reassociate",
    "--instcombine",
    "--sccp",
    "--gvn-hoist",
    "--mem2reg",
    "--flattencfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--newgvn",
          "--loop-sink",
          "--bdce",
          "--partial-inliner",
          "--barrier",
          "--loop-vectorize",
          "--strip-dead-prototypes",
          "--strip-nondebug",
          "--globaldce",
          "--redundant-dbg-inst-elim",
          "--always-inline",
          "--lower-matrix-intrinsics",
          "--aggressive-instcombine",
          "--loop-interchange",
          "--callsite-splitting",
          "--loop-guard-widening",
          "--libcalls-shrinkwrap",
          "--lowerinvoke",
          "--nary-reassociate",
          "--loop-unswitch",
          "--inline",
          "--cross-dso-cfi",
          "--sink",
          "--simple-loop-unswitch",
          "--hotcoldsplit",
          "--loop-rotate",
          "--gvn-hoist",
          "--simplifycfg"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--newgvn",
      "--loop-sink",
      "--bdce",
      "--partial-inliner",
      "--barrier",
      "--loop-vectorize",
      "--strip-dead-prototypes",
      "--strip-nondebug",
      "--globaldce",
      "--redundant-dbg-inst-elim",
      "--always-inline",
      "--lower-matrix-intrinsics",
      "--aggressive-instcombine",
      "--loop-interchange",
      "--callsite-splitting",
      "--loop-guard-widening",
      "--libcalls-shrinkwrap",
      "--lowerinvoke",
      "--nary-reassociate",
      "--loop-unswitch",
      "--inline",
      "--cross-dso-cfi",
      "--sink",
      "--simple-loop-unswitch",
      "--hotcoldsplit",
      "--loop-rotate",
      "--gvn-hoist",
      "--simplifycfg"
    ],
    "performance_vs_Oz": "+0.4%"
  }
}
{
  "program_id": "github-v0_19024.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 11,
    "onePredOneSuc": 7,
    "onePredTwoSuc": 1,
    "oneSuccessor": 9,
    "twoPred": 4,
    "twoPredOneSuc": 1,
    "twoEach": 3,
    "twoSuccessor": 5,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 18,
    "BeginPhi": 0,
    "BranchCount": 14,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 19,
    "const32Bit": 32,
    "const64Bit": 36,
    "numConstZeroes": 38,
    "numConstOnes": 24,
    "UncondBranches": 9,
    "binaryConstArg": 6,
    "NumAShrInst": 1,
    "NumAddInst": 4,
    "NumAllocaInst": 13,
    "NumAndInst": 0,
    "BlockMid": 4,
    "BlockLow": 14,
    "NumBitCastInst": 8,
    "NumBrInst": 14,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 26,
    "NumICmpInst": 5,
    "NumLShrInst": 0,
    "NumLoadInst": 26,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 21,
    "NumSubInst": 0,
    "NumTruncInst": 4,
    "NumXorInst": 1,
    "NumZExtInst": 6,
    "TotalBlocks": 18,
    "TotalInsts": 143,
    "TotalMemInst": 93,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 60
  },
  "baseline_oz_instcount": 143,
  "knowledge_base_entry": [
    "--loweratomic",
    "--ipsccp",
    "--ipsccp",
    "--loop-simplifycfg",
    "--loop-reroll",
    "--instcombine",
    "--inline",
    "--aggressive-instcombine",
    "--simplifycfg",
    "-loop-reduce",
    "--early-cse",
    "--gvn",
    "--mem2reg",
    "--adce",
    "--sccp",
    "--bdce",
    "--reassociate",
    "--mergefunc",
    "--aggressive-instcombine",
    "--instcombine",
    "--instsimplify",
    "--newgvn",
    "--loop-rotate",
    "--elim-avail-extern"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--coro-early",
          "--simple-loop-unswitch",
          "--coro-elide",
          "--lower-widenable-condition",
          "--speculative-execution",
          "--loop-unroll-and-jam",
          "--globalsplit",
          "--lower-constant-intrinsics",
          "--nary-reassociate",
          "--loop-fusion",
          "--loop-interchange",
          "--aggressive-instcombine",
          "--insert-gcov-profiling",
          "--sroa",
          "--strip-nondebug",
          "--early-cse-memssa",
          "--lcssa",
          "--deadargelim",
          "--infer-address-spaces",
          "--prune-eh",
          "--strip-dead-prototypes",
          "--lower-matrix-intrinsics",
          "--loop-instsimplify",
          "--inline",
          "--gvn",
          "--gvn-hoist",
          "--barrier",
          "--bdce",
          "--newgvn",
          "--called-value-propagation"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--coro-early",
      "--simple-loop-unswitch",
      "--coro-elide",
      "--lower-widenable-condition",
      "--speculative-execution",
      "--loop-unroll-and-jam",
      "--globalsplit",
      "--lower-constant-intrinsics",
      "--nary-reassociate",
      "--loop-fusion",
      "--loop-interchange",
      "--aggressive-instcombine",
      "--insert-gcov-profiling",
      "--sroa",
      "--strip-nondebug",
      "--early-cse-memssa",
      "--lcssa",
      "--deadargelim",
      "--infer-address-spaces",
      "--prune-eh",
      "--strip-dead-prototypes",
      "--lower-matrix-intrinsics",
      "--loop-instsimplify",
      "--inline",
      "--gvn",
      "--gvn-hoist",
      "--barrier",
      "--bdce",
      "--newgvn",
      "--called-value-propagation"
    ],
    "performance_vs_Oz": "+2.8%"
  }
}
{
  "program_id": "github-v0_40758.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 13,
    "onePredOneSuc": 8,
    "onePredTwoSuc": 2,
    "oneSuccessor": 11,
    "twoPred": 6,
    "twoPredOneSuc": 2,
    "twoEach": 4,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 22,
    "BeginPhi": 0,
    "BranchCount": 18,
    "returnInt": 4,
    "CriticalCount": 2,
    "NumEdges": 25,
    "const32Bit": 32,
    "const64Bit": 25,
    "numConstZeroes": 30,
    "numConstOnes": 20,
    "UncondBranches": 11,
    "binaryConstArg": 9,
    "NumAShrInst": 0,
    "NumAddInst": 7,
    "NumAllocaInst": 12,
    "NumAndInst": 1,
    "BlockMid": 3,
    "BlockLow": 19,
    "NumBitCastInst": 0,
    "NumBrInst": 18,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 18,
    "NumICmpInst": 7,
    "NumLShrInst": 0,
    "NumLoadInst": 32,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 17,
    "NumSubInst": 0,
    "NumTruncInst": 5,
    "NumXorInst": 1,
    "NumZExtInst": 16,
    "TotalBlocks": 22,
    "TotalInsts": 150,
    "TotalMemInst": 86,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 68
  },
  "baseline_oz_instcount": 150,
  "knowledge_base_entry": [
    "--lower-constant-intrinsics",
    "--ipsccp",
    "--aggressive-instcombine",
    "--prune-eh",
    "--early-cse",
    "--nary-reassociate",
    "--jump-threading",
    "-loop-reduce",
    "--reassociate",
    "--lower-expect",
    "--gvn-hoist",
    "--slsr",
    "--loop-reroll"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--globaldce",
          "--early-cse",
          "--lower-expect",
          "--loop-versioning-licm",
          "--lower-widenable-condition",
          "--add-discriminators",
          "--aggressive-instcombine",
          "--loop-simplifycfg",
          "--pgo-memop-opt",
          "--loop-vectorize",
          "--elim-avail-extern",
          "--reassociate",
          "--mergefunc",
          "--loop-predication",
          "--loop-deletion",
          "--sink",
          "--mergereturn",
          "--deadargelim",
          "--speculative-execution",
          "--loop-distribute",
          "--lowerinvoke",
          "--partially-inline-libcalls",
          "--loop-reroll",
          "--constmerge",
          "--adce"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+4.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--globaldce",
      "--early-cse",
      "--lower-expect",
      "--loop-versioning-licm",
      "--lower-widenable-condition",
      "--add-discriminators",
      "--aggressive-instcombine",
      "--loop-simplifycfg",
      "--pgo-memop-opt",
      "--loop-vectorize",
      "--elim-avail-extern",
      "--reassociate",
      "--mergefunc",
      "--loop-predication",
      "--loop-deletion",
      "--sink",
      "--mergereturn",
      "--deadargelim",
      "--speculative-execution",
      "--loop-distribute",
      "--lowerinvoke",
      "--partially-inline-libcalls",
      "--loop-reroll",
      "--constmerge",
      "--adce"
    ],
    "performance_vs_Oz": "+4.7%"
  }
}
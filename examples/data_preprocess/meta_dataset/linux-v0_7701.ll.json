{
  "program_id": "linux-v0_7701.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 103,
    "onePredOneSuc": 77,
    "onePredTwoSuc": 21,
    "oneSuccessor": 102,
    "twoPred": 29,
    "twoPredOneSuc": 17,
    "twoEach": 8,
    "twoSuccessor": 32,
    "morePreds": 4,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 151,
    "BeginPhi": 0,
    "BranchCount": 134,
    "returnInt": 14,
    "CriticalCount": 16,
    "NumEdges": 174,
    "const32Bit": 402,
    "const64Bit": 14,
    "numConstZeroes": 175,
    "numConstOnes": 104,
    "UncondBranches": 102,
    "binaryConstArg": 36,
    "NumAShrInst": 0,
    "NumAddInst": 14,
    "NumAllocaInst": 68,
    "NumAndInst": 5,
    "BlockMid": 17,
    "BlockLow": 134,
    "NumBitCastInst": 7,
    "NumBrInst": 134,
    "NumCallInst": 49,
    "NumGetElementPtrInst": 131,
    "NumICmpInst": 35,
    "NumLShrInst": 0,
    "NumLoadInst": 280,
    "NumMulInst": 7,
    "NumOrInst": 7,
    "NumPHIInst": 0,
    "NumRetInst": 15,
    "NumSExtInst": 12,
    "NumSelectInst": 3,
    "NumShlInst": 2,
    "NumStoreInst": 112,
    "NumSubInst": 4,
    "NumTruncInst": 19,
    "NumXorInst": 4,
    "NumZExtInst": 20,
    "TotalBlocks": 151,
    "TotalInsts": 934,
    "TotalMemInst": 640,
    "TotalFuncs": 32,
    "ArgsPhi": 0,
    "testUnary": 408
  },
  "baseline_oz_instcount": 931,
  "knowledge_base_entry": [
    "--loop-interchange",
    "--instcombine",
    "--lower-expect",
    "--lower-constant-intrinsics",
    "--ipsccp",
    "--flattencfg",
    "--ipsccp",
    "--flattencfg",
    "--inline",
    "--aggressive-instcombine",
    "--lower-constant-intrinsics",
    "--ipsccp",
    "--flattencfg",
    "--mem2reg",
    "--early-cse",
    "--slsr",
    "--simplifycfg",
    "--lower-expect",
    "--loop-rotate",
    "--instcombine",
    "--lower-expect",
    "--lower-constant-intrinsics",
    "--ipsccp",
    "--flattencfg",
    "--inline",
    "--licm",
    "--mergefunc",
    "--bdce",
    "--gvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--guard-widening",
          "--loop-unroll",
          "--ipsccp",
          "--aggressive-instcombine",
          "--functionattrs",
          "--loop-data-prefetch",
          "--adce",
          "--called-value-propagation",
          "--lower-guard-intrinsic",
          "--loop-vectorize",
          "--die",
          "--inferattrs",
          "--licm",
          "--hotcoldsplit",
          "--argpromotion",
          "--speculative-execution"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--guard-widening",
      "--loop-unroll",
      "--ipsccp",
      "--aggressive-instcombine",
      "--functionattrs",
      "--loop-data-prefetch",
      "--adce",
      "--called-value-propagation",
      "--lower-guard-intrinsic",
      "--loop-vectorize",
      "--die",
      "--inferattrs",
      "--licm",
      "--hotcoldsplit",
      "--argpromotion",
      "--speculative-execution"
    ],
    "performance_vs_Oz": "+1.3%"
  }
}
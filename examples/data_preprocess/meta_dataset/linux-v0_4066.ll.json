{
  "program_id": "linux-v0_4066.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 76,
    "onePredOneSuc": 49,
    "onePredTwoSuc": 22,
    "oneSuccessor": 68,
    "twoPred": 20,
    "twoPredOneSuc": 12,
    "twoEach": 2,
    "twoSuccessor": 32,
    "morePreds": 4,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 125,
    "BeginPhi": 1,
    "BranchCount": 100,
    "returnInt": 16,
    "CriticalCount": 17,
    "NumEdges": 132,
    "const32Bit": 396,
    "const64Bit": 25,
    "numConstZeroes": 236,
    "numConstOnes": 114,
    "UncondBranches": 68,
    "binaryConstArg": 49,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 72,
    "NumAndInst": 19,
    "BlockMid": 11,
    "BlockLow": 115,
    "NumBitCastInst": 23,
    "NumBrInst": 100,
    "NumCallInst": 55,
    "NumGetElementPtrInst": 142,
    "NumICmpInst": 43,
    "NumLShrInst": 9,
    "NumLoadInst": 235,
    "NumMulInst": 0,
    "NumOrInst": 2,
    "NumPHIInst": 1,
    "NumRetInst": 26,
    "NumSExtInst": 11,
    "NumSelectInst": 1,
    "NumShlInst": 0,
    "NumStoreInst": 113,
    "NumSubInst": 0,
    "NumTruncInst": 10,
    "NumXorInst": 19,
    "NumZExtInst": 24,
    "TotalBlocks": 126,
    "TotalInsts": 911,
    "TotalMemInst": 617,
    "TotalFuncs": 48,
    "ArgsPhi": 2,
    "testUnary": 381
  },
  "baseline_oz_instcount": 911,
  "knowledge_base_entry": [
    "--simple-loop-unswitch",
    "--gvn",
    "--mergefunc",
    "--globaldce",
    "--mergefunc",
    "-loop-reduce",
    "--load-store-vectorizer",
    "--loop-reroll",
    "--loop-simplifycfg",
    "--sroa",
    "--instcombine",
    "--sroa",
    "--mem2reg",
    "--aggressive-instcombine",
    "--newgvn",
    "--loop-rotate",
    "--jump-threading",
    "--mergefunc",
    "--globaldce",
    "--mergefunc",
    "-loop-reduce",
    "--newgvn",
    "--early-cse",
    "--mldst-motion",
    "--early-cse-memssa",
    "--sccp",
    "--adce",
    "--lower-constant-intrinsics",
    "--die"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--load-store-vectorizer",
          "--early-cse",
          "--sccp",
          "--dse",
          "--forceattrs",
          "--instnamer",
          "--loop-idiom",
          "--aggressive-instcombine",
          "--slsr",
          "--early-cse-memssa",
          "--memcpyopt",
          "--loop-versioning",
          "--simple-loop-unswitch",
          "--argpromotion",
          "--loop-interchange",
          "--loop-vectorize",
          "--mergefunc"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--load-store-vectorizer",
      "--early-cse",
      "--sccp",
      "--dse",
      "--forceattrs",
      "--instnamer",
      "--loop-idiom",
      "--aggressive-instcombine",
      "--slsr",
      "--early-cse-memssa",
      "--memcpyopt",
      "--loop-versioning",
      "--simple-loop-unswitch",
      "--argpromotion",
      "--loop-interchange",
      "--loop-vectorize",
      "--mergefunc"
    ],
    "performance_vs_Oz": "+1.6%"
  }
}
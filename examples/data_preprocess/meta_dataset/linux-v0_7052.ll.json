{
  "program_id": "linux-v0_7052.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 49,
    "onePredOneSuc": 35,
    "onePredTwoSuc": 14,
    "oneSuccessor": 41,
    "twoPred": 16,
    "twoPredOneSuc": 3,
    "twoEach": 9,
    "twoSuccessor": 28,
    "morePreds": 5,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 107,
    "BeginPhi": 1,
    "BranchCount": 69,
    "returnInt": 28,
    "CriticalCount": 14,
    "NumEdges": 102,
    "const32Bit": 336,
    "const64Bit": 10,
    "numConstZeroes": 142,
    "numConstOnes": 118,
    "UncondBranches": 41,
    "binaryConstArg": 10,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 99,
    "NumAndInst": 0,
    "BlockMid": 15,
    "BlockLow": 93,
    "NumBitCastInst": 25,
    "NumBrInst": 69,
    "NumCallInst": 86,
    "NumGetElementPtrInst": 101,
    "NumICmpInst": 26,
    "NumLShrInst": 0,
    "NumLoadInst": 266,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 1,
    "NumRetInst": 38,
    "NumSExtInst": 8,
    "NumSelectInst": 1,
    "NumShlInst": 0,
    "NumStoreInst": 132,
    "NumSubInst": 0,
    "NumTruncInst": 4,
    "NumXorInst": 8,
    "NumZExtInst": 13,
    "TotalBlocks": 108,
    "TotalInsts": 889,
    "TotalMemInst": 684,
    "TotalFuncs": 59,
    "ArgsPhi": 2,
    "testUnary": 423
  },
  "baseline_oz_instcount": 891,
  "knowledge_base_entry": [
    "--inline",
    "--bdce",
    "--gvn",
    "--mem2reg",
    "--globalopt",
    "--globaldce",
    "--mergefunc",
    "--early-cse-memssa",
    "--newgvn",
    "--inline",
    "--globalopt",
    "--aggressive-instcombine",
    "--inline",
    "--die",
    "--mergefunc",
    "--inline",
    "--jump-threading",
    "--newgvn",
    "--aggressive-instcombine",
    "--gvn",
    "--correlated-propagation"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--correlated-propagation",
          "--dce",
          "--inject-tli-mappings",
          "--slsr",
          "--loop-predication",
          "--instcombine",
          "--strip-debug-declare",
          "--globaldce",
          "--simple-loop-unswitch",
          "--lower-widenable-condition",
          "--nary-reassociate",
          "--loop-interchange",
          "--deadargelim",
          "--add-discriminators",
          "--jump-threading",
          "--irce",
          "--loop-simplify",
          "--slp-vectorizer",
          "--reassociate",
          "--loop-vectorize",
          "--mldst-motion",
          "--loop-sink",
          "--loop-rotate",
          "--adce",
          "--mergefunc",
          "--licm",
          "-loop-reduce"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--correlated-propagation",
      "--dce",
      "--inject-tli-mappings",
      "--slsr",
      "--loop-predication",
      "--instcombine",
      "--strip-debug-declare",
      "--globaldce",
      "--simple-loop-unswitch",
      "--lower-widenable-condition",
      "--nary-reassociate",
      "--loop-interchange",
      "--deadargelim",
      "--add-discriminators",
      "--jump-threading",
      "--irce",
      "--loop-simplify",
      "--slp-vectorizer",
      "--reassociate",
      "--loop-vectorize",
      "--mldst-motion",
      "--loop-sink",
      "--loop-rotate",
      "--adce",
      "--mergefunc",
      "--licm",
      "-loop-reduce"
    ],
    "performance_vs_Oz": "+0.6%"
  }
}
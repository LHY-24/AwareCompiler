{
  "program_id": "github-v0_44430.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 41,
    "onePredOneSuc": 32,
    "onePredTwoSuc": 7,
    "oneSuccessor": 37,
    "twoPred": 4,
    "twoPredOneSuc": 2,
    "twoEach": 2,
    "twoSuccessor": 11,
    "morePreds": 4,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 51,
    "BeginPhi": 0,
    "BranchCount": 48,
    "returnInt": 8,
    "CriticalCount": 3,
    "NumEdges": 77,
    "const32Bit": 101,
    "const64Bit": 6,
    "numConstZeroes": 24,
    "numConstOnes": 31,
    "UncondBranches": 37,
    "binaryConstArg": 20,
    "NumAShrInst": 0,
    "NumAddInst": 4,
    "NumAllocaInst": 15,
    "NumAndInst": 0,
    "BlockMid": 1,
    "BlockLow": 50,
    "NumBitCastInst": 0,
    "NumBrInst": 48,
    "NumCallInst": 16,
    "NumGetElementPtrInst": 23,
    "NumICmpInst": 11,
    "NumLShrInst": 0,
    "NumLoadInst": 64,
    "NumMulInst": 0,
    "NumOrInst": 17,
    "NumPHIInst": 0,
    "NumRetInst": 2,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 40,
    "NumSubInst": 0,
    "NumTruncInst": 1,
    "NumXorInst": 1,
    "NumZExtInst": 2,
    "TotalBlocks": 51,
    "TotalInsts": 247,
    "TotalMemInst": 158,
    "TotalFuncs": 13,
    "ArgsPhi": 0,
    "testUnary": 84
  },
  "baseline_oz_instcount": 248,
  "knowledge_base_entry": [
    "--prune-eh",
    "--gvn",
    "--inline",
    "--adce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--nary-reassociate",
          "--sroa",
          "--barrier",
          "--always-inline",
          "--mldst-motion",
          "--insert-gcov-profiling",
          "--bdce",
          "--loop-vectorize",
          "--guard-widening",
          "--early-cse"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--nary-reassociate",
      "--sroa",
      "--barrier",
      "--always-inline",
      "--mldst-motion",
      "--insert-gcov-profiling",
      "--bdce",
      "--loop-vectorize",
      "--guard-widening",
      "--early-cse"
    ],
    "performance_vs_Oz": "+0.4%"
  }
}
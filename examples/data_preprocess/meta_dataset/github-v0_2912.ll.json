{
  "program_id": "github-v0_2912.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 61,
    "onePredOneSuc": 32,
    "onePredTwoSuc": 25,
    "oneSuccessor": 46,
    "twoPred": 23,
    "twoPredOneSuc": 8,
    "twoEach": 11,
    "twoSuccessor": 39,
    "morePreds": 6,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 93,
    "BeginPhi": 2,
    "BranchCount": 85,
    "returnInt": 4,
    "CriticalCount": 25,
    "NumEdges": 127,
    "const32Bit": 231,
    "const64Bit": 22,
    "numConstZeroes": 122,
    "numConstOnes": 88,
    "UncondBranches": 46,
    "binaryConstArg": 11,
    "NumAShrInst": 0,
    "NumAddInst": 8,
    "NumAllocaInst": 49,
    "NumAndInst": 2,
    "BlockMid": 8,
    "BlockLow": 87,
    "NumBitCastInst": 21,
    "NumBrInst": 85,
    "NumCallInst": 20,
    "NumGetElementPtrInst": 88,
    "NumICmpInst": 40,
    "NumLShrInst": 0,
    "NumLoadInst": 197,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 2,
    "NumRetInst": 5,
    "NumSExtInst": 0,
    "NumSelectInst": 1,
    "NumShlInst": 0,
    "NumStoreInst": 78,
    "NumSubInst": 7,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 17,
    "TotalBlocks": 95,
    "TotalInsts": 632,
    "TotalMemInst": 432,
    "TotalFuncs": 12,
    "ArgsPhi": 4,
    "testUnary": 290
  },
  "baseline_oz_instcount": 635,
  "knowledge_base_entry": [
    "--separate-const-offset-from-gep",
    "--early-cse",
    "--instcombine",
    "--slp-vectorizer",
    "--nary-reassociate",
    "--early-cse",
    "--sccp",
    "--lower-constant-intrinsics",
    "--newgvn",
    "--elim-avail-extern",
    "--memcpyopt"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--constprop",
          "--loop-data-prefetch",
          "--loweratomic",
          "--coro-split",
          "--lower-matrix-intrinsics",
          "--functionattrs",
          "--tailcallelim",
          "--lcssa",
          "--rpo-functionattrs",
          "--loop-versioning"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--constprop",
      "--loop-data-prefetch",
      "--loweratomic",
      "--coro-split",
      "--lower-matrix-intrinsics",
      "--functionattrs",
      "--tailcallelim",
      "--lcssa",
      "--rpo-functionattrs",
      "--loop-versioning"
    ],
    "performance_vs_Oz": "+0.5%"
  }
}
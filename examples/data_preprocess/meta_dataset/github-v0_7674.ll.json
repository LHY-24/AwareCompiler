{
  "program_id": "github-v0_7674.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 13,
    "onePredOneSuc": 9,
    "onePredTwoSuc": 1,
    "oneSuccessor": 11,
    "twoPred": 5,
    "twoPredOneSuc": 1,
    "twoEach": 4,
    "twoSuccessor": 6,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 21,
    "BeginPhi": 0,
    "BranchCount": 17,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 23,
    "const32Bit": 30,
    "const64Bit": 20,
    "numConstZeroes": 23,
    "numConstOnes": 20,
    "UncondBranches": 11,
    "binaryConstArg": 8,
    "NumAShrInst": 0,
    "NumAddInst": 8,
    "NumAllocaInst": 12,
    "NumAndInst": 0,
    "BlockMid": 5,
    "BlockLow": 16,
    "NumBitCastInst": 0,
    "NumBrInst": 17,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 16,
    "NumICmpInst": 6,
    "NumLShrInst": 0,
    "NumLoadInst": 34,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 19,
    "NumSubInst": 2,
    "NumTruncInst": 7,
    "NumXorInst": 0,
    "NumZExtInst": 18,
    "TotalBlocks": 21,
    "TotalInsts": 153,
    "TotalMemInst": 88,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 74
  },
  "baseline_oz_instcount": 153,
  "knowledge_base_entry": [
    "--inferattrs",
    "--dse",
    "--mem2reg",
    "--aggressive-instcombine",
    "--adce",
    "--gvn-hoist",
    "--jump-threading",
    "--gvn",
    "--simplifycfg",
    "--dce",
    "--ipsccp"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--aggressive-instcombine",
          "--loop-predication",
          "--loop-instsimplify",
          "--loop-data-prefetch",
          "--loop-guard-widening",
          "--lower-expect",
          "--loop-rotate",
          "--forceattrs",
          "--loop-vectorize",
          "--partially-inline-libcalls",
          "--rpo-functionattrs",
          "--adce",
          "--mergefunc",
          "--slsr",
          "--callsite-splitting",
          "--load-store-vectorizer"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+9.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--aggressive-instcombine",
      "--loop-predication",
      "--loop-instsimplify",
      "--loop-data-prefetch",
      "--loop-guard-widening",
      "--lower-expect",
      "--loop-rotate",
      "--forceattrs",
      "--loop-vectorize",
      "--partially-inline-libcalls",
      "--rpo-functionattrs",
      "--adce",
      "--mergefunc",
      "--slsr",
      "--callsite-splitting",
      "--load-store-vectorizer"
    ],
    "performance_vs_Oz": "+9.2%"
  }
}
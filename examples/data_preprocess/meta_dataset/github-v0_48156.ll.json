{
  "program_id": "github-v0_48156.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 5,
    "onePred": 39,
    "onePredOneSuc": 29,
    "onePredTwoSuc": 9,
    "oneSuccessor": 38,
    "twoPred": 18,
    "twoPredOneSuc": 6,
    "twoEach": 9,
    "twoSuccessor": 22,
    "morePreds": 4,
    "BB03Phi": 5,
    "BBHiPhi": 0,
    "BBNoPhi": 61,
    "BeginPhi": 5,
    "BranchCount": 60,
    "returnInt": 4,
    "CriticalCount": 11,
    "NumEdges": 88,
    "const32Bit": 127,
    "const64Bit": 10,
    "numConstZeroes": 46,
    "numConstOnes": 59,
    "UncondBranches": 38,
    "binaryConstArg": 8,
    "NumAShrInst": 0,
    "NumAddInst": 6,
    "NumAllocaInst": 38,
    "NumAndInst": 1,
    "BlockMid": 8,
    "BlockLow": 58,
    "NumBitCastInst": 9,
    "NumBrInst": 60,
    "NumCallInst": 33,
    "NumGetElementPtrInst": 43,
    "NumICmpInst": 23,
    "NumLShrInst": 0,
    "NumLoadInst": 168,
    "NumMulInst": 1,
    "NumOrInst": 0,
    "NumPHIInst": 5,
    "NumRetInst": 5,
    "NumSExtInst": 19,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 67,
    "NumSubInst": 1,
    "NumTruncInst": 3,
    "NumXorInst": 0,
    "NumZExtInst": 1,
    "TotalBlocks": 66,
    "TotalInsts": 486,
    "TotalMemInst": 349,
    "TotalFuncs": 9,
    "ArgsPhi": 10,
    "testUnary": 240
  },
  "baseline_oz_instcount": 486,
  "knowledge_base_entry": [
    "--strip",
    "--mergefunc",
    "--memcpyopt",
    "--mem2reg",
    "--mldst-motion",
    "--loop-simplifycfg",
    "--slsr",
    "--jump-threading",
    "--globalopt",
    "--gvn",
    "--instsimplify",
    "--aggressive-instcombine",
    "--lower-constant-intrinsics",
    "--bdce",
    "--lower-expect",
    "--sccp",
    "--loop-deletion",
    "--instcombine",
    "--gvn-hoist",
    "--mergefunc",
    "--instsimplify",
    "--licm",
    "--gvn",
    "--instsimplify",
    "--instcombine",
    "--loop-simplifycfg",
    "--die",
    "--aggressive-instcombine",
    "--bdce",
    "--licm",
    "--adce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--strip-debug-declare",
          "--partial-inliner",
          "--inferattrs",
          "--called-value-propagation",
          "--early-cse-memssa",
          "--aggressive-instcombine",
          "--loop-sink",
          "--lower-widenable-condition",
          "--redundant-dbg-inst-elim",
          "--instnamer"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--strip-debug-declare",
      "--partial-inliner",
      "--inferattrs",
      "--called-value-propagation",
      "--early-cse-memssa",
      "--aggressive-instcombine",
      "--loop-sink",
      "--lower-widenable-condition",
      "--redundant-dbg-inst-elim",
      "--instnamer"
    ],
    "performance_vs_Oz": "+0.4%"
  }
}
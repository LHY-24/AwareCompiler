{
  "program_id": "linux-v0_13094.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 56,
    "onePredOneSuc": 39,
    "onePredTwoSuc": 13,
    "oneSuccessor": 50,
    "twoPred": 17,
    "twoPredOneSuc": 4,
    "twoEach": 9,
    "twoSuccessor": 27,
    "morePreds": 7,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 90,
    "BeginPhi": 0,
    "BranchCount": 77,
    "returnInt": 3,
    "CriticalCount": 19,
    "NumEdges": 121,
    "const32Bit": 304,
    "const64Bit": 54,
    "numConstZeroes": 160,
    "numConstOnes": 66,
    "UncondBranches": 50,
    "binaryConstArg": 37,
    "NumAShrInst": 0,
    "NumAddInst": 16,
    "NumAllocaInst": 39,
    "NumAndInst": 19,
    "BlockMid": 15,
    "BlockLow": 75,
    "NumBitCastInst": 15,
    "NumBrInst": 77,
    "NumCallInst": 10,
    "NumGetElementPtrInst": 118,
    "NumICmpInst": 27,
    "NumLShrInst": 1,
    "NumLoadInst": 196,
    "NumMulInst": 2,
    "NumOrInst": 2,
    "NumPHIInst": 0,
    "NumRetInst": 10,
    "NumSExtInst": 12,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 109,
    "NumSubInst": 3,
    "NumTruncInst": 7,
    "NumXorInst": 1,
    "NumZExtInst": 8,
    "TotalBlocks": 90,
    "TotalInsts": 685,
    "TotalMemInst": 472,
    "TotalFuncs": 12,
    "ArgsPhi": 0,
    "testUnary": 283
  },
  "baseline_oz_instcount": 687,
  "knowledge_base_entry": [
    "--ipsccp",
    "--aggressive-instcombine",
    "--gvn-hoist",
    "--die",
    "--early-cse-memssa",
    "--correlated-propagation",
    "--mergefunc",
    "--load-store-vectorizer",
    "--nary-reassociate"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--load-store-vectorizer",
          "--nary-reassociate",
          "--ipconstprop",
          "--constprop",
          "--sink",
          "--globalsplit",
          "--simplifycfg",
          "--loop-predication",
          "--loop-guard-widening",
          "--aggressive-instcombine",
          "--coro-elide",
          "--insert-gcov-profiling",
          "--instcombine",
          "--strip-debug-declare",
          "--loop-simplifycfg",
          "--hotcoldsplit",
          "--infer-address-spaces",
          "--partially-inline-libcalls",
          "--elim-avail-extern",
          "--inject-tli-mappings",
          "--add-discriminators",
          "--partial-inliner",
          "--lower-expect",
          "--jump-threading",
          "--mergefunc",
          "--sancov"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--load-store-vectorizer",
      "--nary-reassociate",
      "--ipconstprop",
      "--constprop",
      "--sink",
      "--globalsplit",
      "--simplifycfg",
      "--loop-predication",
      "--loop-guard-widening",
      "--aggressive-instcombine",
      "--coro-elide",
      "--insert-gcov-profiling",
      "--instcombine",
      "--strip-debug-declare",
      "--loop-simplifycfg",
      "--hotcoldsplit",
      "--infer-address-spaces",
      "--partially-inline-libcalls",
      "--elim-avail-extern",
      "--inject-tli-mappings",
      "--add-discriminators",
      "--partial-inliner",
      "--lower-expect",
      "--jump-threading",
      "--mergefunc",
      "--sancov"
    ],
    "performance_vs_Oz": "+1.2%"
  }
}
{
  "program_id": "linux-v0_3217.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 10,
    "onePredOneSuc": 5,
    "onePredTwoSuc": 4,
    "oneSuccessor": 8,
    "twoPred": 4,
    "twoPredOneSuc": 2,
    "twoEach": 0,
    "twoSuccessor": 8,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 25,
    "BeginPhi": 0,
    "BranchCount": 16,
    "returnInt": 1,
    "CriticalCount": 8,
    "NumEdges": 24,
    "const32Bit": 77,
    "const64Bit": 25,
    "numConstZeroes": 27,
    "numConstOnes": 39,
    "UncondBranches": 8,
    "binaryConstArg": 12,
    "NumAShrInst": 4,
    "NumAddInst": 0,
    "NumAllocaInst": 33,
    "NumAndInst": 8,
    "BlockMid": 4,
    "BlockLow": 21,
    "NumBitCastInst": 2,
    "NumBrInst": 16,
    "NumCallInst": 24,
    "NumGetElementPtrInst": 26,
    "NumICmpInst": 6,
    "NumLShrInst": 0,
    "NumLoadInst": 60,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 9,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 4,
    "NumStoreInst": 31,
    "NumSubInst": 0,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 2,
    "TotalBlocks": 25,
    "TotalInsts": 227,
    "TotalMemInst": 174,
    "TotalFuncs": 16,
    "ArgsPhi": 0,
    "testUnary": 99
  },
  "baseline_oz_instcount": 207,
  "knowledge_base_entry": [
    "--functionattrs",
    "--ipsccp",
    "--elim-avail-extern",
    "--mem2reg",
    "--early-cse",
    "--instsimplify",
    "--slp-vectorizer",
    "--mergefunc"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--lowerswitch",
          "--gvn",
          "--aggressive-instcombine",
          "--attributor",
          "--adce",
          "--lower-guard-intrinsic",
          "--called-value-propagation",
          "--always-inline",
          "--ee-instrument",
          "--lowerinvoke",
          "--loop-guard-widening",
          "--loop-simplify",
          "--libcalls-shrinkwrap",
          "--simplifycfg",
          "--ipsccp",
          "--slp-vectorizer",
          "--loop-instsimplify",
          "--strip-nondebug",
          "--strip",
          "--loop-reroll",
          "--mldst-motion",
          "--loop-distribute",
          "--inline",
          "--mergefunc",
          "--loop-rotate",
          "--guard-widening",
          "--add-discriminators",
          "--rewrite-statepoints-for-gc"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--lowerswitch",
      "--gvn",
      "--aggressive-instcombine",
      "--attributor",
      "--adce",
      "--lower-guard-intrinsic",
      "--called-value-propagation",
      "--always-inline",
      "--ee-instrument",
      "--lowerinvoke",
      "--loop-guard-widening",
      "--loop-simplify",
      "--libcalls-shrinkwrap",
      "--simplifycfg",
      "--ipsccp",
      "--slp-vectorizer",
      "--loop-instsimplify",
      "--strip-nondebug",
      "--strip",
      "--loop-reroll",
      "--mldst-motion",
      "--loop-distribute",
      "--inline",
      "--mergefunc",
      "--loop-rotate",
      "--guard-widening",
      "--add-discriminators",
      "--rewrite-statepoints-for-gc"
    ],
    "performance_vs_Oz": "+1.9%"
  }
}
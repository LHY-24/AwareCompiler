{
  "program_id": "linux-v0_3866.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 10,
    "onePredOneSuc": 7,
    "onePredTwoSuc": 3,
    "oneSuccessor": 9,
    "twoPred": 6,
    "twoPredOneSuc": 2,
    "twoEach": 4,
    "twoSuccessor": 8,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 24,
    "BeginPhi": 0,
    "BranchCount": 17,
    "returnInt": 2,
    "CriticalCount": 6,
    "NumEdges": 25,
    "const32Bit": 71,
    "const64Bit": 18,
    "numConstZeroes": 50,
    "numConstOnes": 20,
    "UncondBranches": 9,
    "binaryConstArg": 2,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 14,
    "NumAndInst": 0,
    "BlockMid": 2,
    "BlockLow": 22,
    "NumBitCastInst": 4,
    "NumBrInst": 17,
    "NumCallInst": 19,
    "NumGetElementPtrInst": 37,
    "NumICmpInst": 8,
    "NumLShrInst": 1,
    "NumLoadInst": 40,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 7,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 21,
    "NumSubInst": 0,
    "NumTruncInst": 1,
    "NumXorInst": 1,
    "NumZExtInst": 5,
    "TotalBlocks": 24,
    "TotalInsts": 177,
    "TotalMemInst": 131,
    "TotalFuncs": 13,
    "ArgsPhi": 0,
    "testUnary": 66
  },
  "baseline_oz_instcount": 177,
  "knowledge_base_entry": [
    "--bdce",
    "--aggressive-instcombine",
    "--licm",
    "--lower-expect",
    "--loop-rotate",
    "--instsimplify",
    "--gvn-hoist",
    "--adce",
    "--instcombine",
    "--simplifycfg",
    "--ipsccp"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--lower-widenable-condition",
          "--aggressive-instcombine",
          "--prune-eh",
          "--sroa",
          "--coro-split",
          "--canonicalize-aliases",
          "--early-cse-memssa",
          "--memcpyopt",
          "--barrier",
          "--coro-elide",
          "--name-anon-globals",
          "-loop-reduce",
          "--loop-distribute",
          "--gvn-hoist",
          "--always-inline",
          "--globalopt",
          "--cross-dso-cfi",
          "--partially-inline-libcalls",
          "--constmerge",
          "--mem2reg",
          "--inject-tli-mappings",
          "--pgo-memop-opt",
          "--sccp",
          "--bdce",
          "--licm",
          "--inferattrs",
          "--alignment-from-assumptions",
          "--load-store-vectorizer",
          "--coro-cleanup"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--lower-widenable-condition",
      "--aggressive-instcombine",
      "--prune-eh",
      "--sroa",
      "--coro-split",
      "--canonicalize-aliases",
      "--early-cse-memssa",
      "--memcpyopt",
      "--barrier",
      "--coro-elide",
      "--name-anon-globals",
      "-loop-reduce",
      "--loop-distribute",
      "--gvn-hoist",
      "--always-inline",
      "--globalopt",
      "--cross-dso-cfi",
      "--partially-inline-libcalls",
      "--constmerge",
      "--mem2reg",
      "--inject-tli-mappings",
      "--pgo-memop-opt",
      "--sccp",
      "--bdce",
      "--licm",
      "--inferattrs",
      "--alignment-from-assumptions",
      "--load-store-vectorizer",
      "--coro-cleanup"
    ],
    "performance_vs_Oz": "+1.1%"
  }
}
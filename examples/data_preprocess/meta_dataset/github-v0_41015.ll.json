{
  "program_id": "github-v0_41015.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 15,
    "onePredOneSuc": 10,
    "onePredTwoSuc": 2,
    "oneSuccessor": 13,
    "twoPred": 6,
    "twoPredOneSuc": 2,
    "twoEach": 4,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 24,
    "BeginPhi": 0,
    "BranchCount": 20,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 27,
    "const32Bit": 33,
    "const64Bit": 58,
    "numConstZeroes": 53,
    "numConstOnes": 26,
    "UncondBranches": 13,
    "binaryConstArg": 7,
    "NumAShrInst": 0,
    "NumAddInst": 9,
    "NumAllocaInst": 14,
    "NumAndInst": 0,
    "BlockMid": 6,
    "BlockLow": 18,
    "NumBitCastInst": 12,
    "NumBrInst": 20,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 44,
    "NumICmpInst": 7,
    "NumLShrInst": 0,
    "NumLoadInst": 51,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 27,
    "NumSubInst": 1,
    "NumTruncInst": 4,
    "NumXorInst": 0,
    "NumZExtInst": 15,
    "TotalBlocks": 24,
    "TotalInsts": 218,
    "TotalMemInst": 143,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 99
  },
  "baseline_oz_instcount": 218,
  "knowledge_base_entry": [
    "--loop-guard-widening",
    "--gvn-hoist",
    "--early-cse-memssa",
    "--elim-avail-extern",
    "--instcombine",
    "--adce",
    "--sroa",
    "--aggressive-instcombine",
    "--early-cse-memssa",
    "--loop-fusion",
    "--simplifycfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--jump-threading",
          "--called-value-propagation",
          "--mldst-motion",
          "--functionattrs",
          "--loop-rotate",
          "--adce",
          "--inferattrs",
          "--correlated-propagation",
          "-loop-reduce",
          "--simplifycfg",
          "--strip-debug-declare",
          "--redundant-dbg-inst-elim",
          "--mergeicmps",
          "--loop-distribute",
          "--reg2mem",
          "--sancov",
          "--strip",
          "--simple-loop-unswitch",
          "--mergereturn",
          "--aggressive-instcombine",
          "--globaldce",
          "--nary-reassociate",
          "--lower-widenable-condition",
          "--add-discriminators",
          "--lower-expect",
          "--div-rem-pairs",
          "--attributor"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--jump-threading",
      "--called-value-propagation",
      "--mldst-motion",
      "--functionattrs",
      "--loop-rotate",
      "--adce",
      "--inferattrs",
      "--correlated-propagation",
      "-loop-reduce",
      "--simplifycfg",
      "--strip-debug-declare",
      "--redundant-dbg-inst-elim",
      "--mergeicmps",
      "--loop-distribute",
      "--reg2mem",
      "--sancov",
      "--strip",
      "--simple-loop-unswitch",
      "--mergereturn",
      "--aggressive-instcombine",
      "--globaldce",
      "--nary-reassociate",
      "--lower-widenable-condition",
      "--add-discriminators",
      "--lower-expect",
      "--div-rem-pairs",
      "--attributor"
    ],
    "performance_vs_Oz": "+2.8%"
  }
}
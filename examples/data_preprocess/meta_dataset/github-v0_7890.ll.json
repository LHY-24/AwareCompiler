{
  "program_id": "github-v0_7890.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 12,
    "onePredOneSuc": 8,
    "onePredTwoSuc": 2,
    "oneSuccessor": 10,
    "twoPred": 5,
    "twoPredOneSuc": 2,
    "twoEach": 2,
    "twoSuccessor": 6,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 20,
    "BeginPhi": 0,
    "BranchCount": 16,
    "returnInt": 4,
    "CriticalCount": 1,
    "NumEdges": 22,
    "const32Bit": 32,
    "const64Bit": 26,
    "numConstZeroes": 31,
    "numConstOnes": 19,
    "UncondBranches": 10,
    "binaryConstArg": 9,
    "NumAShrInst": 0,
    "NumAddInst": 6,
    "NumAllocaInst": 11,
    "NumAndInst": 2,
    "BlockMid": 3,
    "BlockLow": 17,
    "NumBitCastInst": 0,
    "NumBrInst": 16,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 16,
    "NumICmpInst": 6,
    "NumLShrInst": 0,
    "NumLoadInst": 24,
    "NumMulInst": 3,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 15,
    "NumSubInst": 0,
    "NumTruncInst": 5,
    "NumXorInst": 0,
    "NumZExtInst": 10,
    "TotalBlocks": 20,
    "TotalInsts": 128,
    "TotalMemInst": 73,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 53
  },
  "baseline_oz_instcount": 128,
  "knowledge_base_entry": [
    "--simplifycfg",
    "--instcombine",
    "--elim-avail-extern",
    "--mergefunc",
    "--lower-constant-intrinsics",
    "--mergefunc",
    "--sroa",
    "--dse",
    "--aggressive-instcombine",
    "--adce",
    "--correlated-propagation",
    "--gvn-hoist",
    "--lower-constant-intrinsics"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--simple-loop-unswitch",
          "--inline",
          "--early-cse",
          "--tailcallelim",
          "--add-discriminators",
          "--argpromotion",
          "--loop-predication",
          "--scalarizer",
          "--loop-idiom",
          "--strip-debug-declare",
          "--partially-inline-libcalls",
          "--loop-simplifycfg",
          "--mergereturn",
          "--aggressive-instcombine",
          "--mergeicmps",
          "--coro-split",
          "--mergefunc",
          "--instnamer",
          "--loop-sink",
          "--simplifycfg",
          "--loop-distribute",
          "--early-cse-memssa",
          "--reassociate",
          "--loop-load-elim",
          "--lower-expect",
          "--correlated-propagation",
          "--mem2reg"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+7.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--simple-loop-unswitch",
      "--inline",
      "--early-cse",
      "--tailcallelim",
      "--add-discriminators",
      "--argpromotion",
      "--loop-predication",
      "--scalarizer",
      "--loop-idiom",
      "--strip-debug-declare",
      "--partially-inline-libcalls",
      "--loop-simplifycfg",
      "--mergereturn",
      "--aggressive-instcombine",
      "--mergeicmps",
      "--coro-split",
      "--mergefunc",
      "--instnamer",
      "--loop-sink",
      "--simplifycfg",
      "--loop-distribute",
      "--early-cse-memssa",
      "--reassociate",
      "--loop-load-elim",
      "--lower-expect",
      "--correlated-propagation",
      "--mem2reg"
    ],
    "performance_vs_Oz": "+7.8%"
  }
}
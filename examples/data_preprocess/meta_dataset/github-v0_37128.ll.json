{
  "program_id": "github-v0_37128.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 20,
    "onePred": 85,
    "onePredOneSuc": 61,
    "onePredTwoSuc": 24,
    "oneSuccessor": 80,
    "twoPred": 64,
    "twoPredOneSuc": 18,
    "twoEach": 20,
    "twoSuccessor": 73,
    "morePreds": 4,
    "BB03Phi": 20,
    "BBHiPhi": 0,
    "BBNoPhi": 164,
    "BeginPhi": 20,
    "BranchCount": 153,
    "returnInt": 39,
    "CriticalCount": 61,
    "NumEdges": 226,
    "const32Bit": 293,
    "const64Bit": 0,
    "numConstZeroes": 43,
    "numConstOnes": 82,
    "UncondBranches": 80,
    "binaryConstArg": 75,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 52,
    "NumAndInst": 38,
    "BlockMid": 4,
    "BlockLow": 180,
    "NumBitCastInst": 0,
    "NumBrInst": 153,
    "NumCallInst": 59,
    "NumGetElementPtrInst": 0,
    "NumICmpInst": 93,
    "NumLShrInst": 5,
    "NumLoadInst": 202,
    "NumMulInst": 0,
    "NumOrInst": 34,
    "NumPHIInst": 20,
    "NumRetInst": 31,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 184,
    "NumSubInst": 0,
    "NumTruncInst": 16,
    "NumXorInst": 2,
    "NumZExtInst": 60,
    "TotalBlocks": 184,
    "TotalInsts": 955,
    "TotalMemInst": 497,
    "TotalFuncs": 32,
    "ArgsPhi": 42,
    "testUnary": 334
  },
  "baseline_oz_instcount": 955,
  "knowledge_base_entry": [
    "--tailcallelim",
    "--gvn-hoist",
    "--newgvn",
    "--aggressive-instcombine",
    "--newgvn",
    "--mldst-motion",
    "--gvn",
    "--slp-vectorizer",
    "--loop-simplifycfg",
    "--sccp",
    "--instsimplify",
    "--load-store-vectorizer",
    "--loop-fusion",
    "--loop-reroll",
    "--memcpyopt"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-fusion",
          "--loop-load-elim",
          "--float2int",
          "--simple-loop-unswitch",
          "--loop-vectorize",
          "--loop-unroll",
          "--instnamer",
          "--aggressive-instcombine",
          "--instcombine",
          "--deadargelim",
          "--slsr",
          "--loop-idiom",
          "--flattencfg",
          "--simplifycfg",
          "--lower-expect",
          "--tailcallelim",
          "--lcssa",
          "--lower-widenable-condition",
          "--scalarizer",
          "--speculative-execution",
          "--instsimplify",
          "--alignment-from-assumptions",
          "--barrier",
          "--attributor",
          "--callsite-splitting",
          "--lowerinvoke",
          "--irce",
          "--loop-simplify"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.0%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-fusion",
      "--loop-load-elim",
      "--float2int",
      "--simple-loop-unswitch",
      "--loop-vectorize",
      "--loop-unroll",
      "--instnamer",
      "--aggressive-instcombine",
      "--instcombine",
      "--deadargelim",
      "--slsr",
      "--loop-idiom",
      "--flattencfg",
      "--simplifycfg",
      "--lower-expect",
      "--tailcallelim",
      "--lcssa",
      "--lower-widenable-condition",
      "--scalarizer",
      "--speculative-execution",
      "--instsimplify",
      "--alignment-from-assumptions",
      "--barrier",
      "--attributor",
      "--callsite-splitting",
      "--lowerinvoke",
      "--irce",
      "--loop-simplify"
    ],
    "performance_vs_Oz": "+1.0%"
  }
}
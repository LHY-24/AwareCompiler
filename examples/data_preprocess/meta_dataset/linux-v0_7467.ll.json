{
  "program_id": "linux-v0_7467.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 61,
    "onePredOneSuc": 50,
    "onePredTwoSuc": 11,
    "oneSuccessor": 55,
    "twoPred": 19,
    "twoPredOneSuc": 5,
    "twoEach": 6,
    "twoSuccessor": 28,
    "morePreds": 6,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 115,
    "BeginPhi": 1,
    "BranchCount": 83,
    "returnInt": 35,
    "CriticalCount": 12,
    "NumEdges": 124,
    "const32Bit": 316,
    "const64Bit": 32,
    "numConstZeroes": 136,
    "numConstOnes": 126,
    "UncondBranches": 55,
    "binaryConstArg": 30,
    "NumAShrInst": 2,
    "NumAddInst": 2,
    "NumAllocaInst": 96,
    "NumAndInst": 2,
    "BlockMid": 18,
    "BlockLow": 98,
    "NumBitCastInst": 24,
    "NumBrInst": 83,
    "NumCallInst": 73,
    "NumGetElementPtrInst": 89,
    "NumICmpInst": 27,
    "NumLShrInst": 1,
    "NumLoadInst": 252,
    "NumMulInst": 1,
    "NumOrInst": 8,
    "NumPHIInst": 1,
    "NumRetInst": 30,
    "NumSExtInst": 6,
    "NumSelectInst": 0,
    "NumShlInst": 11,
    "NumStoreInst": 150,
    "NumSubInst": 1,
    "NumTruncInst": 15,
    "NumXorInst": 4,
    "NumZExtInst": 23,
    "TotalBlocks": 116,
    "TotalInsts": 914,
    "TotalMemInst": 660,
    "TotalFuncs": 60,
    "ArgsPhi": 2,
    "testUnary": 423
  },
  "baseline_oz_instcount": 914,
  "knowledge_base_entry": [
    "--strip",
    "--mergefunc",
    "--ipsccp",
    "--adce",
    "--instsimplify",
    "--bdce",
    "--lower-constant-intrinsics",
    "--gvn-hoist",
    "--jump-threading",
    "--aggressive-instcombine",
    "--globaldce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--flattencfg",
          "--alignment-from-assumptions",
          "--tailcallelim",
          "--sccp",
          "--loop-unroll-and-jam",
          "--loop-vectorize",
          "--loop-idiom",
          "--guard-widening",
          "--simplifycfg",
          "--aggressive-instcombine",
          "--loop-versioning-licm",
          "--argpromotion",
          "--prune-eh",
          "--jump-threading",
          "--loop-deletion",
          "--early-cse-memssa",
          "--globalsplit",
          "--adce",
          "--indvars",
          "--ipconstprop",
          "--nary-reassociate",
          "--instnamer",
          "--lower-widenable-condition",
          "--load-store-vectorizer",
          "--strip-nondebug",
          "--ee-instrument",
          "--speculative-execution",
          "--deadargelim"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--flattencfg",
      "--alignment-from-assumptions",
      "--tailcallelim",
      "--sccp",
      "--loop-unroll-and-jam",
      "--loop-vectorize",
      "--loop-idiom",
      "--guard-widening",
      "--simplifycfg",
      "--aggressive-instcombine",
      "--loop-versioning-licm",
      "--argpromotion",
      "--prune-eh",
      "--jump-threading",
      "--loop-deletion",
      "--early-cse-memssa",
      "--globalsplit",
      "--adce",
      "--indvars",
      "--ipconstprop",
      "--nary-reassociate",
      "--instnamer",
      "--lower-widenable-condition",
      "--load-store-vectorizer",
      "--strip-nondebug",
      "--ee-instrument",
      "--speculative-execution",
      "--deadargelim"
    ],
    "performance_vs_Oz": "+0.4%"
  }
}
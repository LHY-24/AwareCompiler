{
  "program_id": "linux-v0_3031.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 2,
    "onePredOneSuc": 2,
    "onePredTwoSuc": 0,
    "oneSuccessor": 2,
    "twoPred": 1,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 1,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 7,
    "BeginPhi": 0,
    "BranchCount": 3,
    "returnInt": 0,
    "CriticalCount": 0,
    "NumEdges": 4,
    "const32Bit": 39,
    "const64Bit": 2,
    "numConstZeroes": 15,
    "numConstOnes": 16,
    "UncondBranches": 2,
    "binaryConstArg": 0,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 14,
    "NumAndInst": 0,
    "BlockMid": 1,
    "BlockLow": 6,
    "NumBitCastInst": 0,
    "NumBrInst": 3,
    "NumCallInst": 3,
    "NumGetElementPtrInst": 10,
    "NumICmpInst": 0,
    "NumLShrInst": 0,
    "NumLoadInst": 13,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 4,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 25,
    "NumSubInst": 0,
    "NumTruncInst": 1,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 7,
    "TotalInsts": 73,
    "TotalMemInst": 65,
    "TotalFuncs": 5,
    "ArgsPhi": 0,
    "testUnary": 28
  },
  "baseline_oz_instcount": 74,
  "knowledge_base_entry": [
    "--sink",
    "--early-cse",
    "--gvn",
    "--newgvn",
    "--slp-vectorizer",
    "--newgvn",
    "--early-cse-memssa",
    "--loop-simplifycfg",
    "--elim-avail-extern",
    "--memcpyopt",
    "--early-cse",
    "--aggressive-instcombine",
    "--simplifycfg",
    "--newgvn",
    "--instsimplify",
    "--globalopt",
    "--dse",
    "--lower-constant-intrinsics",
    "--aggressive-instcombine",
    "--instcombine",
    "--sccp",
    "--elim-avail-extern",
    "--slp-vectorizer",
    "--reassociate",
    "--correlated-propagation"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--consthoist",
          "--loop-vectorize",
          "--loop-unroll-and-jam",
          "--die",
          "--strip-dead-prototypes",
          "--bdce",
          "-loop-reduce",
          "--correlated-propagation",
          "--dce",
          "--canonicalize-aliases",
          "--reg2mem",
          "--instcombine",
          "--argpromotion",
          "--loop-data-prefetch",
          "--globalopt",
          "--scalarizer",
          "--loop-unswitch",
          "--lowerswitch",
          "--loop-predication",
          "--barrier",
          "--aggressive-instcombine",
          "--lower-constant-intrinsics"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--consthoist",
      "--loop-vectorize",
      "--loop-unroll-and-jam",
      "--die",
      "--strip-dead-prototypes",
      "--bdce",
      "-loop-reduce",
      "--correlated-propagation",
      "--dce",
      "--canonicalize-aliases",
      "--reg2mem",
      "--instcombine",
      "--argpromotion",
      "--loop-data-prefetch",
      "--globalopt",
      "--scalarizer",
      "--loop-unswitch",
      "--lowerswitch",
      "--loop-predication",
      "--barrier",
      "--aggressive-instcombine",
      "--lower-constant-intrinsics"
    ],
    "performance_vs_Oz": "+2.7%"
  }
}
{
  "program_id": "github-v0_28617.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 17,
    "onePredOneSuc": 12,
    "onePredTwoSuc": 5,
    "oneSuccessor": 16,
    "twoPred": 7,
    "twoPredOneSuc": 2,
    "twoEach": 3,
    "twoSuccessor": 9,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 32,
    "BeginPhi": 0,
    "BranchCount": 25,
    "returnInt": 7,
    "CriticalCount": 1,
    "NumEdges": 34,
    "const32Bit": 211,
    "const64Bit": 35,
    "numConstZeroes": 164,
    "numConstOnes": 63,
    "UncondBranches": 16,
    "binaryConstArg": 7,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 25,
    "NumAndInst": 2,
    "BlockMid": 10,
    "BlockLow": 22,
    "NumBitCastInst": 12,
    "NumBrInst": 25,
    "NumCallInst": 36,
    "NumGetElementPtrInst": 104,
    "NumICmpInst": 10,
    "NumLShrInst": 0,
    "NumLoadInst": 136,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 7,
    "NumSExtInst": 8,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 59,
    "NumSubInst": 2,
    "NumTruncInst": 2,
    "NumXorInst": 1,
    "NumZExtInst": 9,
    "TotalBlocks": 32,
    "TotalInsts": 443,
    "TotalMemInst": 360,
    "TotalFuncs": 8,
    "ArgsPhi": 0,
    "testUnary": 195
  },
  "baseline_oz_instcount": 443,
  "knowledge_base_entry": [
    "--tailcallelim",
    "--gvn-hoist",
    "--gvn-hoist",
    "--gvn-hoist",
    "--lower-constant-intrinsics",
    "--aggressive-instcombine",
    "--loop-instsimplify",
    "--mem2reg",
    "--sccp",
    "--dse"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--globalopt",
          "-loop-reduce",
          "--globalsplit",
          "--licm",
          "--bdce",
          "--elim-avail-extern",
          "--add-discriminators",
          "--attributor",
          "--instnamer",
          "--strip-nondebug",
          "--lowerswitch",
          "--aggressive-instcombine",
          "--guard-widening",
          "--rpo-functionattrs",
          "--loop-data-prefetch",
          "--pgo-memop-opt",
          "--correlated-propagation",
          "--reassociate",
          "--called-value-propagation",
          "--scalarizer",
          "--prune-eh",
          "--constmerge",
          "--sink",
          "--loop-unroll",
          "--coro-split"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--globalopt",
      "-loop-reduce",
      "--globalsplit",
      "--licm",
      "--bdce",
      "--elim-avail-extern",
      "--add-discriminators",
      "--attributor",
      "--instnamer",
      "--strip-nondebug",
      "--lowerswitch",
      "--aggressive-instcombine",
      "--guard-widening",
      "--rpo-functionattrs",
      "--loop-data-prefetch",
      "--pgo-memop-opt",
      "--correlated-propagation",
      "--reassociate",
      "--called-value-propagation",
      "--scalarizer",
      "--prune-eh",
      "--constmerge",
      "--sink",
      "--loop-unroll",
      "--coro-split"
    ],
    "performance_vs_Oz": "+0.5%"
  }
}
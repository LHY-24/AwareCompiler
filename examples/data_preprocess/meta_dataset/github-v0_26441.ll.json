{
  "program_id": "github-v0_26441.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 12,
    "onePredOneSuc": 10,
    "onePredTwoSuc": 2,
    "oneSuccessor": 11,
    "twoPred": 5,
    "twoPredOneSuc": 1,
    "twoEach": 1,
    "twoSuccessor": 7,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 26,
    "BeginPhi": 0,
    "BranchCount": 18,
    "returnInt": 10,
    "CriticalCount": 2,
    "NumEdges": 25,
    "const32Bit": 60,
    "const64Bit": 3,
    "numConstZeroes": 26,
    "numConstOnes": 35,
    "UncondBranches": 11,
    "binaryConstArg": 0,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 28,
    "NumAndInst": 0,
    "BlockMid": 3,
    "BlockLow": 23,
    "NumBitCastInst": 2,
    "NumBrInst": 18,
    "NumCallInst": 16,
    "NumGetElementPtrInst": 11,
    "NumICmpInst": 6,
    "NumLShrInst": 0,
    "NumLoadInst": 49,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 8,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 37,
    "NumSubInst": 0,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 1,
    "TotalBlocks": 26,
    "TotalInsts": 178,
    "TotalMemInst": 141,
    "TotalFuncs": 20,
    "ArgsPhi": 0,
    "testUnary": 82
  },
  "baseline_oz_instcount": 179,
  "knowledge_base_entry": [
    "--scalarizer",
    "--early-cse-memssa",
    "--jump-threading",
    "--correlated-propagation",
    "--ipsccp",
    "--lower-constant-intrinsics",
    "--gvn",
    "--load-store-vectorizer",
    "--slp-vectorizer",
    "--gvn-hoist",
    "--early-cse",
    "--loop-reroll",
    "--early-cse-memssa",
    "--nary-reassociate",
    "--licm",
    "--gvn-hoist",
    "--globalopt",
    "--loop-deletion",
    "--instcombine",
    "--aggressive-instcombine",
    "--globaldce",
    "--ipsccp",
    "--early-cse-memssa",
    "--sroa",
    "--loop-reroll",
    "--gvn-hoist",
    "--die",
    "--jump-threading",
    "--reassociate",
    "--aggressive-instcombine",
    "--mem2reg",
    "--globalopt",
    "--globaldce",
    "--ipsccp",
    "--globalopt",
    "--loweratomic",
    "--aggressive-instcombine",
    "--mem2reg",
    "--mergefunc",
    "--adce",
    "--slp-vectorizer",
    "--lower-expect",
    "--load-store-vectorizer",
    "--mem2reg",
    "--globalopt",
    "--instsimplify",
    "--ipsccp",
    "--early-cse",
    "--loop-reroll",
    "--memcpyopt",
    "--inline",
    "--loop-instsimplify",
    "--die",
    "--aggressive-instcombine",
    "--early-cse",
    "--reassociate",
    "--slsr",
    "--gvn-hoist",
    "--licm",
    "--inline",
    "--prune-eh",
    "--mem2reg",
    "--mergefunc",
    "--reassociate",
    "--instcombine",
    "--aggressive-instcombine",
    "--inline",
    "--memcpyopt",
    "--licm",
    "--bdce",
    "--slp-vectorizer",
    "--sroa",
    "--instsimplify",
    "--dce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loweratomic",
          "--pgo-memop-opt",
          "--slp-vectorizer",
          "--inline",
          "--loop-simplify",
          "--loop-predication",
          "--globalopt",
          "--gvn",
          "--name-anon-globals",
          "--aggressive-instcombine",
          "--jump-threading",
          "--instcombine",
          "--licm",
          "--coro-early",
          "--loop-reroll"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loweratomic",
      "--pgo-memop-opt",
      "--slp-vectorizer",
      "--inline",
      "--loop-simplify",
      "--loop-predication",
      "--globalopt",
      "--gvn",
      "--name-anon-globals",
      "--aggressive-instcombine",
      "--jump-threading",
      "--instcombine",
      "--licm",
      "--coro-early",
      "--loop-reroll"
    ],
    "performance_vs_Oz": "+1.1%"
  }
}
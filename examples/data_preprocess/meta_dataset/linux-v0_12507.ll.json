{
  "program_id": "linux-v0_12507.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 27,
    "onePredOneSuc": 21,
    "onePredTwoSuc": 6,
    "oneSuccessor": 25,
    "twoPred": 12,
    "twoPredOneSuc": 4,
    "twoEach": 4,
    "twoSuccessor": 15,
    "morePreds": 1,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 56,
    "BeginPhi": 1,
    "BranchCount": 40,
    "returnInt": 17,
    "CriticalCount": 5,
    "NumEdges": 55,
    "const32Bit": 161,
    "const64Bit": 16,
    "numConstZeroes": 75,
    "numConstOnes": 61,
    "UncondBranches": 25,
    "binaryConstArg": 17,
    "NumAShrInst": 2,
    "NumAddInst": 3,
    "NumAllocaInst": 49,
    "NumAndInst": 5,
    "BlockMid": 10,
    "BlockLow": 47,
    "NumBitCastInst": 28,
    "NumBrInst": 40,
    "NumCallInst": 30,
    "NumGetElementPtrInst": 47,
    "NumICmpInst": 12,
    "NumLShrInst": 1,
    "NumLoadInst": 122,
    "NumMulInst": 0,
    "NumOrInst": 2,
    "NumPHIInst": 1,
    "NumRetInst": 17,
    "NumSExtInst": 4,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 68,
    "NumSubInst": 3,
    "NumTruncInst": 4,
    "NumXorInst": 7,
    "NumZExtInst": 23,
    "TotalBlocks": 57,
    "TotalInsts": 471,
    "TotalMemInst": 316,
    "TotalFuncs": 23,
    "ArgsPhi": 2,
    "testUnary": 230
  },
  "baseline_oz_instcount": 472,
  "knowledge_base_entry": [
    "--slp-vectorizer",
    "--die",
    "--slp-vectorizer",
    "--newgvn",
    "--flattencfg",
    "--aggressive-instcombine",
    "--instsimplify",
    "--early-cse",
    "--mldst-motion",
    "--newgvn",
    "--newgvn",
    "--slp-vectorizer",
    "--die",
    "--gvn-hoist",
    "--prune-eh",
    "--mem2reg",
    "--newgvn",
    "--inline",
    "--load-store-vectorizer",
    "--lower-expect",
    "--instcombine"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-versioning",
          "--coro-elide",
          "--strip",
          "--instsimplify",
          "--nary-reassociate",
          "--inline",
          "--aggressive-instcombine",
          "--prune-eh",
          "--sancov",
          "--reassociate",
          "--libcalls-shrinkwrap",
          "--partially-inline-libcalls",
          "--slp-vectorizer",
          "--ipconstprop",
          "--globalsplit"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-versioning",
      "--coro-elide",
      "--strip",
      "--instsimplify",
      "--nary-reassociate",
      "--inline",
      "--aggressive-instcombine",
      "--prune-eh",
      "--sancov",
      "--reassociate",
      "--libcalls-shrinkwrap",
      "--partially-inline-libcalls",
      "--slp-vectorizer",
      "--ipconstprop",
      "--globalsplit"
    ],
    "performance_vs_Oz": "+1.1%"
  }
}
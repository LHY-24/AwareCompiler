{
  "program_id": "linux-v0_7667.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 3,
    "onePred": 28,
    "onePredOneSuc": 25,
    "onePredTwoSuc": 1,
    "oneSuccessor": 27,
    "twoPred": 6,
    "twoPredOneSuc": 0,
    "twoEach": 1,
    "twoSuccessor": 8,
    "morePreds": 3,
    "BB03Phi": 3,
    "BBHiPhi": 0,
    "BBNoPhi": 62,
    "BeginPhi": 3,
    "BranchCount": 35,
    "returnInt": 11,
    "CriticalCount": 1,
    "NumEdges": 53,
    "const32Bit": 164,
    "const64Bit": 13,
    "numConstZeroes": 61,
    "numConstOnes": 92,
    "UncondBranches": 27,
    "binaryConstArg": 8,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 77,
    "NumAndInst": 3,
    "BlockMid": 8,
    "BlockLow": 57,
    "NumBitCastInst": 30,
    "NumBrInst": 35,
    "NumCallInst": 44,
    "NumGetElementPtrInst": 34,
    "NumICmpInst": 9,
    "NumLShrInst": 0,
    "NumLoadInst": 131,
    "NumMulInst": 0,
    "NumOrInst": 2,
    "NumPHIInst": 3,
    "NumRetInst": 28,
    "NumSExtInst": 5,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 94,
    "NumSubInst": 0,
    "NumTruncInst": 7,
    "NumXorInst": 2,
    "NumZExtInst": 6,
    "TotalBlocks": 65,
    "TotalInsts": 517,
    "TotalMemInst": 380,
    "TotalFuncs": 39,
    "ArgsPhi": 6,
    "testUnary": 260
  },
  "baseline_oz_instcount": 516,
  "knowledge_base_entry": [
    "--loweratomic",
    "--ipsccp",
    "--early-cse",
    "--correlated-propagation",
    "--mergefunc",
    "--simplifycfg",
    "--mem2reg",
    "--aggressive-instcombine",
    "--prune-eh",
    "--licm",
    "--lower-expect",
    "--adce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-versioning-licm",
          "--aggressive-instcombine",
          "--load-store-vectorizer",
          "--loop-idiom",
          "--loop-vectorize",
          "--alignment-from-assumptions",
          "--early-cse-memssa",
          "--licm",
          "--ipsccp",
          "--flattencfg",
          "--inline",
          "--loop-distribute",
          "--loop-deletion",
          "--scalarizer",
          "--div-rem-pairs",
          "--coro-elide"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-versioning-licm",
      "--aggressive-instcombine",
      "--load-store-vectorizer",
      "--loop-idiom",
      "--loop-vectorize",
      "--alignment-from-assumptions",
      "--early-cse-memssa",
      "--licm",
      "--ipsccp",
      "--flattencfg",
      "--inline",
      "--loop-distribute",
      "--loop-deletion",
      "--scalarizer",
      "--div-rem-pairs",
      "--coro-elide"
    ],
    "performance_vs_Oz": "+1.2%"
  }
}
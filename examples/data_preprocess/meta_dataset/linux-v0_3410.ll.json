{
  "program_id": "linux-v0_3410.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 94,
    "onePredOneSuc": 63,
    "onePredTwoSuc": 30,
    "oneSuccessor": 81,
    "twoPred": 28,
    "twoPredOneSuc": 12,
    "twoEach": 9,
    "twoSuccessor": 50,
    "morePreds": 10,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 148,
    "BeginPhi": 0,
    "BranchCount": 131,
    "returnInt": 6,
    "CriticalCount": 20,
    "NumEdges": 186,
    "const32Bit": 191,
    "const64Bit": 23,
    "numConstZeroes": 79,
    "numConstOnes": 78,
    "UncondBranches": 81,
    "binaryConstArg": 26,
    "NumAShrInst": 0,
    "NumAddInst": 9,
    "NumAllocaInst": 62,
    "NumAndInst": 9,
    "BlockMid": 4,
    "BlockLow": 144,
    "NumBitCastInst": 0,
    "NumBrInst": 131,
    "NumCallInst": 15,
    "NumGetElementPtrInst": 38,
    "NumICmpInst": 53,
    "NumLShrInst": 0,
    "NumLoadInst": 180,
    "NumMulInst": 2,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 16,
    "NumSExtInst": 17,
    "NumSelectInst": 0,
    "NumShlInst": 5,
    "NumStoreInst": 112,
    "NumSubInst": 1,
    "NumTruncInst": 1,
    "NumXorInst": 2,
    "NumZExtInst": 10,
    "TotalBlocks": 148,
    "TotalInsts": 668,
    "TotalMemInst": 407,
    "TotalFuncs": 19,
    "ArgsPhi": 0,
    "testUnary": 270
  },
  "baseline_oz_instcount": 670,
  "knowledge_base_entry": [
    "--sccp",
    "--lower-constant-intrinsics",
    "--aggressive-instcombine",
    "--load-store-vectorizer",
    "--correlated-propagation",
    "--simplifycfg",
    "--globalopt",
    "--instcombine",
    "--bdce",
    "--lower-expect",
    "--early-cse",
    "--reassociate"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--instsimplify",
          "--correlated-propagation",
          "--coro-split",
          "--sroa",
          "--strip",
          "--load-store-vectorizer",
          "--loop-versioning",
          "--lower-widenable-condition",
          "--aggressive-instcombine",
          "--sccp",
          "--flattencfg",
          "--instcombine"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--instsimplify",
      "--correlated-propagation",
      "--coro-split",
      "--sroa",
      "--strip",
      "--load-store-vectorizer",
      "--loop-versioning",
      "--lower-widenable-condition",
      "--aggressive-instcombine",
      "--sccp",
      "--flattencfg",
      "--instcombine"
    ],
    "performance_vs_Oz": "+0.6%"
  }
}
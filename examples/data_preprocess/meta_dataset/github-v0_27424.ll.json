{
  "program_id": "github-v0_27424.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 46,
    "onePredOneSuc": 40,
    "onePredTwoSuc": 1,
    "oneSuccessor": 46,
    "twoPred": 17,
    "twoPredOneSuc": 1,
    "twoEach": 14,
    "twoSuccessor": 17,
    "morePreds": 0,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 68,
    "BeginPhi": 2,
    "BranchCount": 63,
    "returnInt": 1,
    "CriticalCount": 0,
    "NumEdges": 80,
    "const32Bit": 75,
    "const64Bit": 7,
    "numConstZeroes": 18,
    "numConstOnes": 78,
    "UncondBranches": 46,
    "binaryConstArg": 21,
    "NumAShrInst": 0,
    "NumAddInst": 20,
    "NumAllocaInst": 68,
    "NumAndInst": 0,
    "BlockMid": 14,
    "BlockLow": 56,
    "NumBitCastInst": 9,
    "NumBrInst": 63,
    "NumCallInst": 16,
    "NumGetElementPtrInst": 24,
    "NumICmpInst": 17,
    "NumLShrInst": 0,
    "NumLoadInst": 188,
    "NumMulInst": 23,
    "NumOrInst": 0,
    "NumPHIInst": 2,
    "NumRetInst": 7,
    "NumSExtInst": 14,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 89,
    "NumSubInst": 0,
    "NumTruncInst": 3,
    "NumXorInst": 0,
    "NumZExtInst": 83,
    "TotalBlocks": 70,
    "TotalInsts": 638,
    "TotalMemInst": 385,
    "TotalFuncs": 14,
    "ArgsPhi": 4,
    "testUnary": 366
  },
  "baseline_oz_instcount": 638,
  "knowledge_base_entry": [
    "--bdce",
    "--aggressive-instcombine",
    "--loweratomic",
    "--early-cse",
    "--early-cse-memssa",
    "--indvars",
    "--correlated-propagation",
    "--loop-reroll",
    "-loop-reduce",
    "--slp-vectorizer",
    "--sroa",
    "--loop-instsimplify",
    "--bdce",
    "--lower-expect",
    "--mem2reg",
    "--mergefunc",
    "--early-cse",
    "--aggressive-instcombine",
    "--globalopt",
    "--lower-constant-intrinsics",
    "--mldst-motion",
    "--simplifycfg",
    "--flattencfg",
    "--gvn-hoist",
    "--loop-simplifycfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--simplifycfg",
          "--loop-interchange",
          "--strip-nondebug",
          "--rewrite-statepoints-for-gc",
          "--functionattrs",
          "--globalopt",
          "--inferattrs",
          "--add-discriminators",
          "--instnamer",
          "--ipsccp",
          "--lower-expect",
          "--lower-widenable-condition",
          "--dse",
          "--aggressive-instcombine",
          "--speculative-execution",
          "--memcpyopt",
          "--constmerge",
          "--infer-address-spaces",
          "--cross-dso-cfi",
          "--hotcoldsplit",
          "--die",
          "--sccp",
          "--sancov",
          "--dce",
          "--instcombine",
          "--slp-vectorizer",
          "--loop-simplifycfg"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--simplifycfg",
      "--loop-interchange",
      "--strip-nondebug",
      "--rewrite-statepoints-for-gc",
      "--functionattrs",
      "--globalopt",
      "--inferattrs",
      "--add-discriminators",
      "--instnamer",
      "--ipsccp",
      "--lower-expect",
      "--lower-widenable-condition",
      "--dse",
      "--aggressive-instcombine",
      "--speculative-execution",
      "--memcpyopt",
      "--constmerge",
      "--infer-address-spaces",
      "--cross-dso-cfi",
      "--hotcoldsplit",
      "--die",
      "--sccp",
      "--sancov",
      "--dce",
      "--instcombine",
      "--slp-vectorizer",
      "--loop-simplifycfg"
    ],
    "performance_vs_Oz": "+0.9%"
  }
}
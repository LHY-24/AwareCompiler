{
  "program_id": "github-v0_44423.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 3,
    "onePred": 121,
    "onePredOneSuc": 74,
    "onePredTwoSuc": 43,
    "oneSuccessor": 108,
    "twoPred": 55,
    "twoPredOneSuc": 19,
    "twoEach": 28,
    "twoSuccessor": 77,
    "morePreds": 9,
    "BB03Phi": 3,
    "BBHiPhi": 0,
    "BBNoPhi": 197,
    "BeginPhi": 3,
    "BranchCount": 185,
    "returnInt": 6,
    "CriticalCount": 46,
    "NumEdges": 262,
    "const32Bit": 209,
    "const64Bit": 10,
    "numConstZeroes": 77,
    "numConstOnes": 121,
    "UncondBranches": 108,
    "binaryConstArg": 25,
    "NumAShrInst": 0,
    "NumAddInst": 19,
    "NumAllocaInst": 78,
    "NumAndInst": 0,
    "BlockMid": 5,
    "BlockLow": 195,
    "NumBitCastInst": 0,
    "NumBrInst": 185,
    "NumCallInst": 22,
    "NumGetElementPtrInst": 35,
    "NumICmpInst": 77,
    "NumLShrInst": 0,
    "NumLoadInst": 265,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 3,
    "NumRetInst": 15,
    "NumSExtInst": 61,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 138,
    "NumSubInst": 6,
    "NumTruncInst": 3,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 200,
    "TotalInsts": 907,
    "TotalMemInst": 538,
    "TotalFuncs": 21,
    "ArgsPhi": 6,
    "testUnary": 407
  },
  "baseline_oz_instcount": 910,
  "knowledge_base_entry": [
    "--separate-const-offset-from-gep",
    "--newgvn",
    "--early-cse-memssa",
    "--aggressive-instcombine",
    "--early-cse-memssa",
    "--aggressive-instcombine",
    "--adce",
    "--aggressive-instcombine",
    "--simplifycfg",
    "--sroa",
    "--elim-avail-extern",
    "--load-store-vectorizer",
    "--adce",
    "--dse",
    "--newgvn",
    "--aggressive-instcombine",
    "--flattencfg",
    "--instcombine",
    "--memcpyopt",
    "--mem2reg",
    "--jump-threading",
    "--correlated-propagation",
    "--sroa"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--deadargelim",
          "--inferattrs",
          "--sancov",
          "--forceattrs",
          "--instsimplify",
          "--mldst-motion",
          "--callsite-splitting",
          "--constmerge",
          "--aggressive-instcombine",
          "--strip-nondebug",
          "--load-store-vectorizer",
          "--lower-matrix-intrinsics",
          "--ee-instrument"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--deadargelim",
      "--inferattrs",
      "--sancov",
      "--forceattrs",
      "--instsimplify",
      "--mldst-motion",
      "--callsite-splitting",
      "--constmerge",
      "--aggressive-instcombine",
      "--strip-nondebug",
      "--load-store-vectorizer",
      "--lower-matrix-intrinsics",
      "--ee-instrument"
    ],
    "performance_vs_Oz": "+0.8%"
  }
}
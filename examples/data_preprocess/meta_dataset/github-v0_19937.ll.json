{
  "program_id": "github-v0_19937.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 4,
    "onePredOneSuc": 4,
    "onePredTwoSuc": 0,
    "oneSuccessor": 4,
    "twoPred": 0,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 0,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 25,
    "BeginPhi": 0,
    "BranchCount": 4,
    "returnInt": 0,
    "CriticalCount": 0,
    "NumEdges": 8,
    "const32Bit": 41,
    "const64Bit": 0,
    "numConstZeroes": 1,
    "numConstOnes": 38,
    "UncondBranches": 4,
    "binaryConstArg": 0,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 37,
    "NumAndInst": 0,
    "BlockMid": 0,
    "BlockLow": 25,
    "NumBitCastInst": 3,
    "NumBrInst": 4,
    "NumCallInst": 0,
    "NumGetElementPtrInst": 0,
    "NumICmpInst": 0,
    "NumLShrInst": 0,
    "NumLoadInst": 19,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 20,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 20,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 1,
    "TotalBlocks": 25,
    "TotalInsts": 105,
    "TotalMemInst": 76,
    "TotalFuncs": 20,
    "ArgsPhi": 0,
    "testUnary": 60
  },
  "baseline_oz_instcount": 105,
  "knowledge_base_entry": [
    "--loop-instsimplify",
    "--mergefunc",
    "--lower-constant-intrinsics",
    "--early-cse-memssa",
    "--loop-deletion",
    "--sccp",
    "--bdce",
    "--mergefunc",
    "--bdce",
    "--reassociate"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--mergefunc",
          "--mergeicmps",
          "--loop-simplifycfg",
          "--coro-elide",
          "--sink",
          "--globalsplit",
          "--partial-inliner",
          "--lcssa",
          "--add-discriminators",
          "--aggressive-instcombine",
          "--separate-const-offset-from-gep",
          "--loop-vectorize",
          "--licm",
          "--loop-reroll"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+13.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--mergefunc",
      "--mergeicmps",
      "--loop-simplifycfg",
      "--coro-elide",
      "--sink",
      "--globalsplit",
      "--partial-inliner",
      "--lcssa",
      "--add-discriminators",
      "--aggressive-instcombine",
      "--separate-const-offset-from-gep",
      "--loop-vectorize",
      "--licm",
      "--loop-reroll"
    ],
    "performance_vs_Oz": "+13.3%"
  }
}
{
  "program_id": "linux-v0_1059.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 6,
    "onePredOneSuc": 4,
    "onePredTwoSuc": 2,
    "oneSuccessor": 4,
    "twoPred": 0,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 3,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 24,
    "BeginPhi": 0,
    "BranchCount": 7,
    "returnInt": 8,
    "CriticalCount": 0,
    "NumEdges": 10,
    "const32Bit": 96,
    "const64Bit": 5,
    "numConstZeroes": 41,
    "numConstOnes": 43,
    "UncondBranches": 4,
    "binaryConstArg": 5,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 34,
    "NumAndInst": 1,
    "BlockMid": 4,
    "BlockLow": 20,
    "NumBitCastInst": 7,
    "NumBrInst": 7,
    "NumCallInst": 25,
    "NumGetElementPtrInst": 27,
    "NumICmpInst": 4,
    "NumLShrInst": 0,
    "NumLoadInst": 58,
    "NumMulInst": 0,
    "NumOrInst": 2,
    "NumPHIInst": 0,
    "NumRetInst": 17,
    "NumSExtInst": 1,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 42,
    "NumSubInst": 0,
    "NumTruncInst": 3,
    "NumXorInst": 2,
    "NumZExtInst": 5,
    "TotalBlocks": 24,
    "TotalInsts": 239,
    "TotalMemInst": 186,
    "TotalFuncs": 25,
    "ArgsPhi": 0,
    "testUnary": 112
  },
  "baseline_oz_instcount": 239,
  "knowledge_base_entry": [
    "--globalopt",
    "--globaldce",
    "--aggressive-instcombine",
    "--loweratomic",
    "--early-cse-memssa",
    "--instsimplify",
    "--lower-expect",
    "--bdce",
    "--mergefunc",
    "--aggressive-instcombine",
    "--ipsccp",
    "--instsimplify",
    "--inline",
    "--mem2reg",
    "--reassociate",
    "-loop-reduce",
    "--jump-threading",
    "--correlated-propagation",
    "--dce",
    "--loop-simplifycfg",
    "--slsr",
    "--gvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--canonicalize-aliases",
          "--bdce",
          "--break-crit-edges",
          "--hotcoldsplit",
          "--prune-eh",
          "--globalsplit",
          "--sink",
          "--ipconstprop",
          "--early-cse",
          "--libcalls-shrinkwrap",
          "--loop-unroll",
          "--coro-early",
          "--loop-simplifycfg",
          "--lowerswitch",
          "--coro-split",
          "-loop-reduce",
          "--aggressive-instcombine",
          "--rpo-functionattrs",
          "--partially-inline-libcalls",
          "--reassociate",
          "--load-store-vectorizer",
          "--lower-constant-intrinsics"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--canonicalize-aliases",
      "--bdce",
      "--break-crit-edges",
      "--hotcoldsplit",
      "--prune-eh",
      "--globalsplit",
      "--sink",
      "--ipconstprop",
      "--early-cse",
      "--libcalls-shrinkwrap",
      "--loop-unroll",
      "--coro-early",
      "--loop-simplifycfg",
      "--lowerswitch",
      "--coro-split",
      "-loop-reduce",
      "--aggressive-instcombine",
      "--rpo-functionattrs",
      "--partially-inline-libcalls",
      "--reassociate",
      "--load-store-vectorizer",
      "--lower-constant-intrinsics"
    ],
    "performance_vs_Oz": "+1.7%"
  }
}
{
  "program_id": "github-v0_21122.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 3,
    "onePred": 4,
    "onePredOneSuc": 4,
    "onePredTwoSuc": 0,
    "oneSuccessor": 4,
    "twoPred": 6,
    "twoPredOneSuc": 0,
    "twoEach": 5,
    "twoSuccessor": 6,
    "morePreds": 0,
    "BB03Phi": 3,
    "BBHiPhi": 0,
    "BBNoPhi": 8,
    "BeginPhi": 3,
    "BranchCount": 10,
    "returnInt": 5,
    "CriticalCount": 8,
    "NumEdges": 16,
    "const32Bit": 21,
    "const64Bit": 38,
    "numConstZeroes": 20,
    "numConstOnes": 13,
    "UncondBranches": 4,
    "binaryConstArg": 4,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 0,
    "NumAndInst": 2,
    "BlockMid": 3,
    "BlockLow": 8,
    "NumBitCastInst": 3,
    "NumBrInst": 10,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 10,
    "NumICmpInst": 6,
    "NumLShrInst": 2,
    "NumLoadInst": 11,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 4,
    "NumRetInst": 1,
    "NumSExtInst": 6,
    "NumSelectInst": 24,
    "NumShlInst": 0,
    "NumStoreInst": 3,
    "NumSubInst": 0,
    "NumTruncInst": 4,
    "NumXorInst": 0,
    "NumZExtInst": 2,
    "TotalBlocks": 11,
    "TotalInsts": 162,
    "TotalMemInst": 31,
    "TotalFuncs": 7,
    "ArgsPhi": 8,
    "testUnary": 26
  },
  "baseline_oz_instcount": 160,
  "knowledge_base_entry": [
    "--loop-guard-widening",
    "--early-cse",
    "--slp-vectorizer",
    "--instcombine",
    "--instsimplify",
    "--mem2reg",
    "--lower-expect",
    "--dce",
    "--lower-expect",
    "--globalopt",
    "--ipsccp",
    "--mem2reg",
    "--jump-threading",
    "--loop-rotate",
    "--newgvn",
    "--load-store-vectorizer",
    "--inline",
    "--gvn",
    "--dce",
    "--slp-vectorizer",
    "--nary-reassociate",
    "--instcombine",
    "--sccp",
    "--gvn",
    "--flattencfg",
    "--gvn-hoist",
    "--simplifycfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--slp-vectorizer",
          "--canonicalize-aliases",
          "--lower-constant-intrinsics",
          "--hotcoldsplit",
          "--lower-matrix-intrinsics",
          "--gvn",
          "--aggressive-instcombine",
          "--adce",
          "--mergereturn",
          "--speculative-execution",
          "--loop-reroll",
          "--sroa",
          "--float2int",
          "--globaldce",
          "--inject-tli-mappings",
          "--loweratomic",
          "--early-cse-memssa",
          "--irce",
          "--insert-gcov-profiling",
          "--always-inline",
          "--instcombine"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+6.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--slp-vectorizer",
      "--canonicalize-aliases",
      "--lower-constant-intrinsics",
      "--hotcoldsplit",
      "--lower-matrix-intrinsics",
      "--gvn",
      "--aggressive-instcombine",
      "--adce",
      "--mergereturn",
      "--speculative-execution",
      "--loop-reroll",
      "--sroa",
      "--float2int",
      "--globaldce",
      "--inject-tli-mappings",
      "--loweratomic",
      "--early-cse-memssa",
      "--irce",
      "--insert-gcov-profiling",
      "--always-inline",
      "--instcombine"
    ],
    "performance_vs_Oz": "+6.2%"
  }
}
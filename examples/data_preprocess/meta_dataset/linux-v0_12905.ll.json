{
  "program_id": "linux-v0_12905.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 82,
    "onePredOneSuc": 61,
    "onePredTwoSuc": 16,
    "oneSuccessor": 70,
    "twoPred": 20,
    "twoPredOneSuc": 3,
    "twoEach": 9,
    "twoSuccessor": 33,
    "morePreds": 5,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 131,
    "BeginPhi": 0,
    "BranchCount": 103,
    "returnInt": 32,
    "CriticalCount": 6,
    "NumEdges": 150,
    "const32Bit": 290,
    "const64Bit": 60,
    "numConstZeroes": 139,
    "numConstOnes": 129,
    "UncondBranches": 70,
    "binaryConstArg": 26,
    "NumAShrInst": 0,
    "NumAddInst": 11,
    "NumAllocaInst": 92,
    "NumAndInst": 2,
    "BlockMid": 15,
    "BlockLow": 116,
    "NumBitCastInst": 5,
    "NumBrInst": 103,
    "NumCallInst": 52,
    "NumGetElementPtrInst": 97,
    "NumICmpInst": 34,
    "NumLShrInst": 0,
    "NumLoadInst": 257,
    "NumMulInst": 4,
    "NumOrInst": 4,
    "NumPHIInst": 0,
    "NumRetInst": 24,
    "NumSExtInst": 28,
    "NumSelectInst": 0,
    "NumShlInst": 5,
    "NumStoreInst": 158,
    "NumSubInst": 8,
    "NumTruncInst": 9,
    "NumXorInst": 0,
    "NumZExtInst": 16,
    "TotalBlocks": 131,
    "TotalInsts": 917,
    "TotalMemInst": 656,
    "TotalFuncs": 37,
    "ArgsPhi": 0,
    "testUnary": 407
  },
  "baseline_oz_instcount": 918,
  "knowledge_base_entry": [
    "--strip",
    "--mergefunc",
    "--reassociate",
    "--sroa",
    "--die",
    "--early-cse",
    "--reassociate",
    "--simplifycfg",
    "--reassociate",
    "--slp-vectorizer",
    "--lower-expect",
    "--adce",
    "--dce",
    "--early-cse-memssa",
    "--dce",
    "--mergefunc",
    "--aggressive-instcombine",
    "--jump-threading"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-guard-widening",
          "--loop-fusion",
          "--aggressive-instcombine",
          "--bdce",
          "--nary-reassociate",
          "--constmerge",
          "--mergefunc",
          "--mem2reg",
          "--constprop",
          "--newgvn",
          "--strip-dead-prototypes",
          "--loop-sink",
          "--deadargelim",
          "--loop-instsimplify",
          "--float2int",
          "--correlated-propagation",
          "--lower-matrix-intrinsics",
          "--loop-reroll",
          "--consthoist",
          "--attributor",
          "--loop-simplify",
          "--coro-elide",
          "--indvars",
          "--licm",
          "--partial-inliner",
          "--partially-inline-libcalls",
          "--sink"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-guard-widening",
      "--loop-fusion",
      "--aggressive-instcombine",
      "--bdce",
      "--nary-reassociate",
      "--constmerge",
      "--mergefunc",
      "--mem2reg",
      "--constprop",
      "--newgvn",
      "--strip-dead-prototypes",
      "--loop-sink",
      "--deadargelim",
      "--loop-instsimplify",
      "--float2int",
      "--correlated-propagation",
      "--lower-matrix-intrinsics",
      "--loop-reroll",
      "--consthoist",
      "--attributor",
      "--loop-simplify",
      "--coro-elide",
      "--indvars",
      "--licm",
      "--partial-inliner",
      "--partially-inline-libcalls",
      "--sink"
    ],
    "performance_vs_Oz": "+3.9%"
  }
}
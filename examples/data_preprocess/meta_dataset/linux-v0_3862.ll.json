{
  "program_id": "linux-v0_3862.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 3,
    "onePred": 59,
    "onePredOneSuc": 42,
    "onePredTwoSuc": 16,
    "oneSuccessor": 51,
    "twoPred": 22,
    "twoPredOneSuc": 6,
    "twoEach": 10,
    "twoSuccessor": 33,
    "morePreds": 4,
    "BB03Phi": 3,
    "BBHiPhi": 0,
    "BBNoPhi": 116,
    "BeginPhi": 3,
    "BranchCount": 84,
    "returnInt": 23,
    "CriticalCount": 22,
    "NumEdges": 122,
    "const32Bit": 400,
    "const64Bit": 19,
    "numConstZeroes": 212,
    "numConstOnes": 132,
    "UncondBranches": 51,
    "binaryConstArg": 27,
    "NumAShrInst": 3,
    "NumAddInst": 0,
    "NumAllocaInst": 101,
    "NumAndInst": 12,
    "BlockMid": 8,
    "BlockLow": 111,
    "NumBitCastInst": 42,
    "NumBrInst": 84,
    "NumCallInst": 62,
    "NumGetElementPtrInst": 120,
    "NumICmpInst": 33,
    "NumLShrInst": 2,
    "NumLoadInst": 202,
    "NumMulInst": 0,
    "NumOrInst": 2,
    "NumPHIInst": 3,
    "NumRetInst": 34,
    "NumSExtInst": 8,
    "NumSelectInst": 0,
    "NumShlInst": 4,
    "NumStoreInst": 150,
    "NumSubInst": 0,
    "NumTruncInst": 11,
    "NumXorInst": 6,
    "NumZExtInst": 12,
    "TotalBlocks": 119,
    "TotalInsts": 896,
    "TotalMemInst": 635,
    "TotalFuncs": 78,
    "ArgsPhi": 6,
    "testUnary": 380
  },
  "baseline_oz_instcount": 896,
  "knowledge_base_entry": [
    "--loop-deletion",
    "--newgvn",
    "--lower-expect",
    "--aggressive-instcombine",
    "--mergefunc",
    "--ipsccp",
    "--dce",
    "--ipsccp",
    "--lower-expect",
    "--gvn",
    "--prune-eh",
    "--instsimplify",
    "--loop-simplifycfg",
    "--globalopt",
    "--sroa",
    "--elim-avail-extern",
    "--dse",
    "--elim-avail-extern",
    "--early-cse",
    "--sccp",
    "--loop-instsimplify",
    "--gvn-hoist",
    "--dce",
    "--simplifycfg",
    "--loop-rotate",
    "--instcombine",
    "--loop-simplifycfg",
    "--loop-reroll"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--strip",
          "--loop-predication",
          "--jump-threading",
          "--aggressive-instcombine",
          "--prune-eh",
          "--pgo-memop-opt",
          "--rewrite-statepoints-for-gc",
          "--infer-address-spaces",
          "--mergefunc",
          "--lower-expect",
          "--lcssa",
          "--sccp",
          "--globalsplit",
          "--lower-guard-intrinsic",
          "--reassociate",
          "--loop-versioning"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.0%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--strip",
      "--loop-predication",
      "--jump-threading",
      "--aggressive-instcombine",
      "--prune-eh",
      "--pgo-memop-opt",
      "--rewrite-statepoints-for-gc",
      "--infer-address-spaces",
      "--mergefunc",
      "--lower-expect",
      "--lcssa",
      "--sccp",
      "--globalsplit",
      "--lower-guard-intrinsic",
      "--reassociate",
      "--loop-versioning"
    ],
    "performance_vs_Oz": "+1.0%"
  }
}
{
  "program_id": "linux-v0_5618.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 65,
    "onePredOneSuc": 52,
    "onePredTwoSuc": 12,
    "oneSuccessor": 57,
    "twoPred": 15,
    "twoPredOneSuc": 4,
    "twoEach": 6,
    "twoSuccessor": 25,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 111,
    "BeginPhi": 0,
    "BranchCount": 82,
    "returnInt": 26,
    "CriticalCount": 6,
    "NumEdges": 107,
    "const32Bit": 350,
    "const64Bit": 34,
    "numConstZeroes": 133,
    "numConstOnes": 165,
    "UncondBranches": 57,
    "binaryConstArg": 19,
    "NumAShrInst": 0,
    "NumAddInst": 5,
    "NumAllocaInst": 135,
    "NumAndInst": 5,
    "BlockMid": 16,
    "BlockLow": 95,
    "NumBitCastInst": 33,
    "NumBrInst": 82,
    "NumCallInst": 80,
    "NumGetElementPtrInst": 103,
    "NumICmpInst": 28,
    "NumLShrInst": 0,
    "NumLoadInst": 271,
    "NumMulInst": 0,
    "NumOrInst": 6,
    "NumPHIInst": 0,
    "NumRetInst": 29,
    "NumSExtInst": 8,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 173,
    "NumSubInst": 0,
    "NumTruncInst": 7,
    "NumXorInst": 5,
    "NumZExtInst": 13,
    "TotalBlocks": 111,
    "TotalInsts": 990,
    "TotalMemInst": 762,
    "TotalFuncs": 47,
    "ArgsPhi": 0,
    "testUnary": 474
  },
  "baseline_oz_instcount": 991,
  "knowledge_base_entry": [
    "--scalarizer",
    "--early-cse-memssa",
    "--mem2reg",
    "--instsimplify",
    "--dce",
    "--ipsccp",
    "--lower-constant-intrinsics",
    "--mergefunc",
    "--sroa"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--coro-elide",
          "--adce",
          "--coro-split",
          "--memcpyopt",
          "--loop-vectorize",
          "--argpromotion",
          "--inferattrs",
          "--partially-inline-libcalls",
          "--gvn",
          "--tailcallelim",
          "--coro-cleanup"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--coro-elide",
      "--adce",
      "--coro-split",
      "--memcpyopt",
      "--loop-vectorize",
      "--argpromotion",
      "--inferattrs",
      "--partially-inline-libcalls",
      "--gvn",
      "--tailcallelim",
      "--coro-cleanup"
    ],
    "performance_vs_Oz": "+0.1%"
  }
}
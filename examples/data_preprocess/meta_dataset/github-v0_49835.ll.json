{
  "program_id": "github-v0_49835.ll",
  "autophase_features": {
    "BBNumArgsHi": 1,
    "BBNumArgsLo": 0,
    "onePred": 3,
    "onePredOneSuc": 3,
    "onePredTwoSuc": 0,
    "oneSuccessor": 3,
    "twoPred": 0,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 0,
    "morePreds": 1,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 4,
    "BeginPhi": 1,
    "BranchCount": 3,
    "returnInt": 2,
    "CriticalCount": 0,
    "NumEdges": 6,
    "const32Bit": 4,
    "const64Bit": 3,
    "numConstZeroes": 3,
    "numConstOnes": 1,
    "UncondBranches": 3,
    "binaryConstArg": 3,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 0,
    "NumAndInst": 3,
    "BlockMid": 0,
    "BlockLow": 5,
    "NumBitCastInst": 0,
    "NumBrInst": 3,
    "NumCallInst": 4,
    "NumGetElementPtrInst": 3,
    "NumICmpInst": 0,
    "NumLShrInst": 0,
    "NumLoadInst": 2,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 2,
    "NumRetInst": 1,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 1,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 5,
    "TotalInsts": 24,
    "TotalMemInst": 10,
    "TotalFuncs": 5,
    "ArgsPhi": 6,
    "testUnary": 6
  },
  "baseline_oz_instcount": 24,
  "knowledge_base_entry": [
    "--tailcallelim",
    "--gvn-hoist",
    "--newgvn",
    "--elim-avail-extern",
    "--dce",
    "--lower-constant-intrinsics",
    "--prune-eh",
    "--early-cse-memssa",
    "--memcpyopt",
    "--slp-vectorizer",
    "--jump-threading",
    "--correlated-propagation",
    "--reassociate",
    "--licm",
    "--loop-rotate",
    "--jump-threading",
    "--correlated-propagation",
    "--load-store-vectorizer",
    "--inline",
    "--elim-avail-extern",
    "--gvn",
    "--sroa",
    "--loop-deletion",
    "--gvn-hoist",
    "--instcombine",
    "--aggressive-instcombine",
    "--mem2reg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-data-prefetch",
          "--strip",
          "--flattencfg",
          "--float2int",
          "--gvn-hoist",
          "--post-inline-ee-instrument",
          "--speculative-execution",
          "--loop-predication",
          "--callsite-splitting",
          "--instnamer",
          "--rpo-functionattrs",
          "--early-cse-memssa"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+12.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-data-prefetch",
      "--strip",
      "--flattencfg",
      "--float2int",
      "--gvn-hoist",
      "--post-inline-ee-instrument",
      "--speculative-execution",
      "--loop-predication",
      "--callsite-splitting",
      "--instnamer",
      "--rpo-functionattrs",
      "--early-cse-memssa"
    ],
    "performance_vs_Oz": "+12.5%"
  }
}
{
  "program_id": "github-v0_18736.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 15,
    "onePredOneSuc": 10,
    "onePredTwoSuc": 2,
    "oneSuccessor": 13,
    "twoPred": 6,
    "twoPredOneSuc": 2,
    "twoEach": 4,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 24,
    "BeginPhi": 0,
    "BranchCount": 20,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 27,
    "const32Bit": 31,
    "const64Bit": 25,
    "numConstZeroes": 29,
    "numConstOnes": 22,
    "UncondBranches": 13,
    "binaryConstArg": 8,
    "NumAShrInst": 0,
    "NumAddInst": 10,
    "NumAllocaInst": 13,
    "NumAndInst": 0,
    "BlockMid": 3,
    "BlockLow": 21,
    "NumBitCastInst": 0,
    "NumBrInst": 20,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 16,
    "NumICmpInst": 7,
    "NumLShrInst": 0,
    "NumLoadInst": 31,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 19,
    "NumSubInst": 0,
    "NumTruncInst": 6,
    "NumXorInst": 1,
    "NumZExtInst": 16,
    "TotalBlocks": 24,
    "TotalInsts": 153,
    "TotalMemInst": 86,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 69
  },
  "baseline_oz_instcount": 153,
  "knowledge_base_entry": [
    "--sroa",
    "--newgvn",
    "--load-store-vectorizer",
    "--aggressive-instcombine",
    "--load-store-vectorizer",
    "--reassociate",
    "--mem2reg",
    "--adce",
    "--early-cse",
    "--load-store-vectorizer",
    "--die",
    "--early-cse-memssa",
    "--mergefunc"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-fusion",
          "--globalopt",
          "--slsr",
          "--lower-widenable-condition",
          "--attributor",
          "--argpromotion",
          "--callsite-splitting",
          "--lower-guard-intrinsic",
          "--loop-deletion",
          "--loop-reroll",
          "--mergeicmps",
          "--add-discriminators",
          "--strip-debug-declare",
          "--coro-split",
          "--div-rem-pairs",
          "--loop-distribute",
          "--called-value-propagation",
          "--bdce",
          "--elim-avail-extern",
          "--aggressive-instcombine",
          "--coro-early",
          "--adce",
          "--name-anon-globals",
          "--separate-const-offset-from-gep",
          "--partial-inliner"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+7.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-fusion",
      "--globalopt",
      "--slsr",
      "--lower-widenable-condition",
      "--attributor",
      "--argpromotion",
      "--callsite-splitting",
      "--lower-guard-intrinsic",
      "--loop-deletion",
      "--loop-reroll",
      "--mergeicmps",
      "--add-discriminators",
      "--strip-debug-declare",
      "--coro-split",
      "--div-rem-pairs",
      "--loop-distribute",
      "--called-value-propagation",
      "--bdce",
      "--elim-avail-extern",
      "--aggressive-instcombine",
      "--coro-early",
      "--adce",
      "--name-anon-globals",
      "--separate-const-offset-from-gep",
      "--partial-inliner"
    ],
    "performance_vs_Oz": "+7.8%"
  }
}
{
  "program_id": "linux-v0_2546.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 4,
    "onePredOneSuc": 4,
    "onePredTwoSuc": 0,
    "oneSuccessor": 4,
    "twoPred": 3,
    "twoPredOneSuc": 0,
    "twoEach": 1,
    "twoSuccessor": 3,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 11,
    "BeginPhi": 0,
    "BranchCount": 7,
    "returnInt": 5,
    "CriticalCount": 2,
    "NumEdges": 10,
    "const32Bit": 17,
    "const64Bit": 2,
    "numConstZeroes": 7,
    "numConstOnes": 10,
    "UncondBranches": 4,
    "binaryConstArg": 1,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 9,
    "NumAndInst": 0,
    "BlockMid": 1,
    "BlockLow": 10,
    "NumBitCastInst": 1,
    "NumBrInst": 7,
    "NumCallInst": 8,
    "NumGetElementPtrInst": 3,
    "NumICmpInst": 2,
    "NumLShrInst": 0,
    "NumLoadInst": 15,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 4,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 11,
    "NumSubInst": 0,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 1,
    "TotalBlocks": 11,
    "TotalInsts": 64,
    "TotalMemInst": 46,
    "TotalFuncs": 23,
    "ArgsPhi": 0,
    "testUnary": 28
  },
  "baseline_oz_instcount": 65,
  "knowledge_base_entry": [
    "--functionattrs",
    "--mergefunc",
    "--slp-vectorizer",
    "--adce",
    "--elim-avail-extern",
    "--flattencfg",
    "--globalopt",
    "--newgvn",
    "--licm",
    "--instcombine",
    "--memcpyopt",
    "--load-store-vectorizer",
    "--instsimplify",
    "--elim-avail-extern",
    "--flattencfg",
    "--globalopt",
    "--newgvn",
    "--lower-expect",
    "--load-store-vectorizer",
    "-loop-reduce",
    "--mergefunc",
    "--globalopt",
    "--loweratomic",
    "--aggressive-instcombine",
    "--load-store-vectorizer",
    "--early-cse-memssa",
    "--ipsccp",
    "--globaldce",
    "--ipsccp",
    "--instsimplify",
    "--instcombine",
    "--memcpyopt",
    "--slp-vectorizer",
    "--gvn",
    "--inline",
    "--loop-rotate",
    "--lower-expect",
    "--nary-reassociate",
    "--gvn-hoist",
    "--early-cse-memssa",
    "--loop-deletion",
    "--mem2reg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--lower-constant-intrinsics",
          "--lower-widenable-condition",
          "--sancov",
          "--deadargelim",
          "--die",
          "--loop-unswitch",
          "--bdce",
          "--globalsplit",
          "--lcssa",
          "--coro-elide",
          "--loop-versioning",
          "--globalopt",
          "--tailcallelim",
          "--loop-load-elim",
          "--lowerswitch",
          "--ipsccp",
          "--constprop",
          "--scalarizer",
          "--rpo-functionattrs",
          "--prune-eh",
          "--strip-debug-declare",
          "--always-inline",
          "--infer-address-spaces",
          "--gvn",
          "--loop-data-prefetch",
          "--mergeicmps",
          "--sroa",
          "--aggressive-instcombine"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+6.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--lower-constant-intrinsics",
      "--lower-widenable-condition",
      "--sancov",
      "--deadargelim",
      "--die",
      "--loop-unswitch",
      "--bdce",
      "--globalsplit",
      "--lcssa",
      "--coro-elide",
      "--loop-versioning",
      "--globalopt",
      "--tailcallelim",
      "--loop-load-elim",
      "--lowerswitch",
      "--ipsccp",
      "--constprop",
      "--scalarizer",
      "--rpo-functionattrs",
      "--prune-eh",
      "--strip-debug-declare",
      "--always-inline",
      "--infer-address-spaces",
      "--gvn",
      "--loop-data-prefetch",
      "--mergeicmps",
      "--sroa",
      "--aggressive-instcombine"
    ],
    "performance_vs_Oz": "+6.2%"
  }
}
{
  "program_id": "linux-v0_13431.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 66,
    "onePredOneSuc": 43,
    "onePredTwoSuc": 21,
    "oneSuccessor": 60,
    "twoPred": 37,
    "twoPredOneSuc": 15,
    "twoEach": 22,
    "twoSuccessor": 45,
    "morePreds": 4,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 108,
    "BeginPhi": 1,
    "BranchCount": 105,
    "returnInt": 47,
    "CriticalCount": 34,
    "NumEdges": 158,
    "const32Bit": 154,
    "const64Bit": 99,
    "numConstZeroes": 117,
    "numConstOnes": 49,
    "UncondBranches": 60,
    "binaryConstArg": 53,
    "NumAShrInst": 0,
    "NumAddInst": 6,
    "NumAllocaInst": 25,
    "NumAndInst": 35,
    "BlockMid": 6,
    "BlockLow": 103,
    "NumBitCastInst": 4,
    "NumBrInst": 105,
    "NumCallInst": 50,
    "NumGetElementPtrInst": 64,
    "NumICmpInst": 45,
    "NumLShrInst": 12,
    "NumLoadInst": 189,
    "NumMulInst": 1,
    "NumOrInst": 0,
    "NumPHIInst": 1,
    "NumRetInst": 2,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 29,
    "NumSubInst": 2,
    "NumTruncInst": 14,
    "NumXorInst": 0,
    "NumZExtInst": 49,
    "TotalBlocks": 109,
    "TotalInsts": 639,
    "TotalMemInst": 357,
    "TotalFuncs": 5,
    "ArgsPhi": 2,
    "testUnary": 285
  },
  "baseline_oz_instcount": 639,
  "knowledge_base_entry": [
    "--loop-idiom",
    "--early-cse",
    "--indvars",
    "--jump-threading",
    "--newgvn",
    "--mldst-motion",
    "--loop-simplifycfg",
    "--aggressive-instcombine",
    "--newgvn",
    "--loop-instsimplify",
    "--inline",
    "--early-cse-memssa",
    "--loop-fusion",
    "--load-store-vectorizer",
    "--bdce",
    "--simplifycfg",
    "--sroa",
    "--adce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--aggressive-instcombine",
          "--loop-fusion",
          "--loop-guard-widening",
          "--name-anon-globals",
          "--early-cse",
          "--mergereturn",
          "--reassociate",
          "--called-value-propagation",
          "--loop-vectorize",
          "--partial-inliner"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--aggressive-instcombine",
      "--loop-fusion",
      "--loop-guard-widening",
      "--name-anon-globals",
      "--early-cse",
      "--mergereturn",
      "--reassociate",
      "--called-value-propagation",
      "--loop-vectorize",
      "--partial-inliner"
    ],
    "performance_vs_Oz": "+0.6%"
  }
}
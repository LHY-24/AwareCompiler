{
  "program_id": "linux-v0_2128.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 54,
    "onePredOneSuc": 37,
    "onePredTwoSuc": 12,
    "oneSuccessor": 53,
    "twoPred": 21,
    "twoPredOneSuc": 6,
    "twoEach": 3,
    "twoSuccessor": 23,
    "morePreds": 1,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 104,
    "BeginPhi": 1,
    "BranchCount": 76,
    "returnInt": 16,
    "CriticalCount": 14,
    "NumEdges": 99,
    "const32Bit": 286,
    "const64Bit": 16,
    "numConstZeroes": 110,
    "numConstOnes": 129,
    "UncondBranches": 53,
    "binaryConstArg": 21,
    "NumAShrInst": 0,
    "NumAddInst": 4,
    "NumAllocaInst": 103,
    "NumAndInst": 7,
    "BlockMid": 13,
    "BlockLow": 92,
    "NumBitCastInst": 31,
    "NumBrInst": 76,
    "NumCallInst": 56,
    "NumGetElementPtrInst": 67,
    "NumICmpInst": 29,
    "NumLShrInst": 0,
    "NumLoadInst": 189,
    "NumMulInst": 0,
    "NumOrInst": 11,
    "NumPHIInst": 1,
    "NumRetInst": 29,
    "NumSExtInst": 2,
    "NumSelectInst": 5,
    "NumShlInst": 4,
    "NumStoreInst": 118,
    "NumSubInst": 0,
    "NumTruncInst": 15,
    "NumXorInst": 0,
    "NumZExtInst": 20,
    "TotalBlocks": 105,
    "TotalInsts": 768,
    "TotalMemInst": 533,
    "TotalFuncs": 43,
    "ArgsPhi": 2,
    "testUnary": 361
  },
  "baseline_oz_instcount": 768,
  "knowledge_base_entry": [
    "--elim-avail-extern",
    "--mergefunc",
    "--correlated-propagation",
    "--loop-reroll",
    "--sroa",
    "--die",
    "--licm",
    "--aggressive-instcombine",
    "--bdce",
    "--elim-avail-extern",
    "--ipsccp",
    "--dse",
    "--ipsccp",
    "--adce",
    "--licm",
    "--aggressive-instcombine",
    "--dce",
    "--lower-expect",
    "--bdce",
    "--lower-constant-intrinsics",
    "--mem2reg",
    "--instsimplify",
    "--dse",
    "--loop-rotate",
    "--instsimplify",
    "--gvn-hoist",
    "--die",
    "--jump-threading"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--instnamer",
          "--indvars",
          "--ee-instrument",
          "--loop-unswitch",
          "--gvn-hoist",
          "--consthoist",
          "--mem2reg",
          "--libcalls-shrinkwrap",
          "--mergefunc",
          "--loop-versioning",
          "--dse",
          "--functionattrs",
          "--simplifycfg",
          "--die",
          "--always-inline",
          "--early-cse-memssa",
          "--coro-early",
          "--loop-rotate",
          "--early-cse",
          "--redundant-dbg-inst-elim",
          "--aggressive-instcombine",
          "--attributor",
          "--cross-dso-cfi",
          "--deadargelim",
          "--lower-widenable-condition",
          "--loop-unroll-and-jam"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--instnamer",
      "--indvars",
      "--ee-instrument",
      "--loop-unswitch",
      "--gvn-hoist",
      "--consthoist",
      "--mem2reg",
      "--libcalls-shrinkwrap",
      "--mergefunc",
      "--loop-versioning",
      "--dse",
      "--functionattrs",
      "--simplifycfg",
      "--die",
      "--always-inline",
      "--early-cse-memssa",
      "--coro-early",
      "--loop-rotate",
      "--early-cse",
      "--redundant-dbg-inst-elim",
      "--aggressive-instcombine",
      "--attributor",
      "--cross-dso-cfi",
      "--deadargelim",
      "--lower-widenable-condition",
      "--loop-unroll-and-jam"
    ],
    "performance_vs_Oz": "+0.9%"
  }
}
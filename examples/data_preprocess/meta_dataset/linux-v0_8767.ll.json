{
  "program_id": "linux-v0_8767.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 57,
    "onePredOneSuc": 41,
    "onePredTwoSuc": 14,
    "oneSuccessor": 52,
    "twoPred": 19,
    "twoPredOneSuc": 8,
    "twoEach": 6,
    "twoSuccessor": 27,
    "morePreds": 5,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 98,
    "BeginPhi": 2,
    "BranchCount": 79,
    "returnInt": 11,
    "CriticalCount": 14,
    "NumEdges": 118,
    "const32Bit": 259,
    "const64Bit": 16,
    "numConstZeroes": 96,
    "numConstOnes": 89,
    "UncondBranches": 52,
    "binaryConstArg": 36,
    "NumAShrInst": 1,
    "NumAddInst": 11,
    "NumAllocaInst": 71,
    "NumAndInst": 10,
    "BlockMid": 14,
    "BlockLow": 86,
    "NumBitCastInst": 20,
    "NumBrInst": 79,
    "NumCallInst": 47,
    "NumGetElementPtrInst": 64,
    "NumICmpInst": 34,
    "NumLShrInst": 1,
    "NumLoadInst": 233,
    "NumMulInst": 0,
    "NumOrInst": 2,
    "NumPHIInst": 2,
    "NumRetInst": 19,
    "NumSExtInst": 7,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 112,
    "NumSubInst": 5,
    "NumTruncInst": 10,
    "NumXorInst": 12,
    "NumZExtInst": 37,
    "TotalBlocks": 100,
    "TotalInsts": 784,
    "TotalMemInst": 527,
    "TotalFuncs": 44,
    "ArgsPhi": 4,
    "testUnary": 382
  },
  "baseline_oz_instcount": 784,
  "knowledge_base_entry": [
    "--irce",
    "--gvn",
    "-loop-reduce",
    "--load-store-vectorizer",
    "--indvars",
    "--slp-vectorizer",
    "--elim-avail-extern",
    "--jump-threading",
    "--instsimplify",
    "--jump-threading",
    "--mldst-motion",
    "--inline",
    "--aggressive-instcombine",
    "--mem2reg",
    "--dse",
    "--loop-rotate",
    "--early-cse-memssa",
    "--lower-constant-intrinsics",
    "--lower-expect",
    "--loop-simplifycfg",
    "--loop-instsimplify",
    "--dce",
    "--correlated-propagation",
    "--mergefunc"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-simplify",
          "--coro-early",
          "--partially-inline-libcalls",
          "--libcalls-shrinkwrap",
          "--ee-instrument",
          "--ipsccp",
          "--globaldce",
          "--sccp",
          "--aggressive-instcombine",
          "--lower-widenable-condition"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-simplify",
      "--coro-early",
      "--partially-inline-libcalls",
      "--libcalls-shrinkwrap",
      "--ee-instrument",
      "--ipsccp",
      "--globaldce",
      "--sccp",
      "--aggressive-instcombine",
      "--lower-widenable-condition"
    ],
    "performance_vs_Oz": "+1.3%"
  }
}
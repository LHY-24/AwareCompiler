{
  "program_id": "github-v0_29472.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 15,
    "onePredOneSuc": 10,
    "onePredTwoSuc": 2,
    "oneSuccessor": 13,
    "twoPred": 6,
    "twoPredOneSuc": 2,
    "twoEach": 4,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 24,
    "BeginPhi": 0,
    "BranchCount": 20,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 27,
    "const32Bit": 39,
    "const64Bit": 41,
    "numConstZeroes": 38,
    "numConstOnes": 28,
    "UncondBranches": 13,
    "binaryConstArg": 23,
    "NumAShrInst": 8,
    "NumAddInst": 5,
    "NumAllocaInst": 13,
    "NumAndInst": 6,
    "BlockMid": 6,
    "BlockLow": 18,
    "NumBitCastInst": 0,
    "NumBrInst": 20,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 23,
    "NumICmpInst": 7,
    "NumLShrInst": 0,
    "NumLoadInst": 40,
    "NumMulInst": 0,
    "NumOrInst": 7,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 8,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 21,
    "NumSubInst": 0,
    "NumTruncInst": 13,
    "NumXorInst": 0,
    "NumZExtInst": 25,
    "TotalBlocks": 24,
    "TotalInsts": 209,
    "TotalMemInst": 104,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 99
  },
  "baseline_oz_instcount": 209,
  "knowledge_base_entry": [
    "--dse",
    "--nary-reassociate",
    "--instsimplify",
    "--aggressive-instcombine",
    "--loop-instsimplify",
    "--sccp",
    "--early-cse",
    "--ipsccp",
    "--early-cse",
    "--inline",
    "--instcombine",
    "--gvn-hoist",
    "--prune-eh",
    "--newgvn",
    "--licm",
    "--dse",
    "--nary-reassociate",
    "--simplifycfg",
    "--loop-deletion",
    "--gvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-fusion",
          "--lower-widenable-condition",
          "--mergeicmps",
          "--functionattrs",
          "--cross-dso-cfi",
          "--strip",
          "--forceattrs",
          "--lowerinvoke",
          "--attributor",
          "--mergefunc",
          "--inline",
          "--rpo-functionattrs",
          "--strip-dead-prototypes",
          "--insert-gcov-profiling",
          "--bdce",
          "--instnamer",
          "--aggressive-instcombine",
          "--prune-eh",
          "--instcombine",
          "--slsr",
          "--alignment-from-assumptions",
          "--flattencfg",
          "--memcpyopt",
          "--lowerswitch",
          "--ipsccp",
          "--loop-load-elim"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+7.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-fusion",
      "--lower-widenable-condition",
      "--mergeicmps",
      "--functionattrs",
      "--cross-dso-cfi",
      "--strip",
      "--forceattrs",
      "--lowerinvoke",
      "--attributor",
      "--mergefunc",
      "--inline",
      "--rpo-functionattrs",
      "--strip-dead-prototypes",
      "--insert-gcov-profiling",
      "--bdce",
      "--instnamer",
      "--aggressive-instcombine",
      "--prune-eh",
      "--instcombine",
      "--slsr",
      "--alignment-from-assumptions",
      "--flattencfg",
      "--memcpyopt",
      "--lowerswitch",
      "--ipsccp",
      "--loop-load-elim"
    ],
    "performance_vs_Oz": "+7.2%"
  }
}
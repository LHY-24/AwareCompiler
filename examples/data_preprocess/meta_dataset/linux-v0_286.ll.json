{
  "program_id": "linux-v0_286.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 19,
    "onePredOneSuc": 9,
    "onePredTwoSuc": 10,
    "oneSuccessor": 14,
    "twoPred": 5,
    "twoPredOneSuc": 5,
    "twoEach": 0,
    "twoSuccessor": 12,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 30,
    "BeginPhi": 0,
    "BranchCount": 26,
    "returnInt": 2,
    "CriticalCount": 6,
    "NumEdges": 38,
    "const32Bit": 43,
    "const64Bit": 10,
    "numConstZeroes": 15,
    "numConstOnes": 25,
    "UncondBranches": 14,
    "binaryConstArg": 6,
    "NumAShrInst": 1,
    "NumAddInst": 1,
    "NumAllocaInst": 16,
    "NumAndInst": 2,
    "BlockMid": 3,
    "BlockLow": 27,
    "NumBitCastInst": 0,
    "NumBrInst": 26,
    "NumCallInst": 2,
    "NumGetElementPtrInst": 13,
    "NumICmpInst": 12,
    "NumLShrInst": 0,
    "NumLoadInst": 48,
    "NumMulInst": 2,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 4,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 31,
    "NumSubInst": 0,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 15,
    "TotalBlocks": 30,
    "TotalInsts": 177,
    "TotalMemInst": 110,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 83
  },
  "baseline_oz_instcount": 177,
  "knowledge_base_entry": [
    "--loop-rotate",
    "--dse",
    "--dce",
    "--mergefunc",
    "--reassociate",
    "--mergefunc",
    "--loop-instsimplify",
    "--lower-constant-intrinsics",
    "--die",
    "--sccp",
    "--early-cse-memssa",
    "--aggressive-instcombine",
    "--globalopt"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--always-inline",
          "--reassociate",
          "--add-discriminators",
          "--loop-simplifycfg",
          "--lowerinvoke",
          "--sancov",
          "--lower-expect",
          "--inferattrs",
          "--strip",
          "--lower-matrix-intrinsics",
          "--functionattrs",
          "--consthoist",
          "--argpromotion",
          "--alignment-from-assumptions",
          "--aggressive-instcombine"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--always-inline",
      "--reassociate",
      "--add-discriminators",
      "--loop-simplifycfg",
      "--lowerinvoke",
      "--sancov",
      "--lower-expect",
      "--inferattrs",
      "--strip",
      "--lower-matrix-intrinsics",
      "--functionattrs",
      "--consthoist",
      "--argpromotion",
      "--alignment-from-assumptions",
      "--aggressive-instcombine"
    ],
    "performance_vs_Oz": "+0.6%"
  }
}
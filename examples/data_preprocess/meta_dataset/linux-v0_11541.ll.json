{
  "program_id": "linux-v0_11541.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 57,
    "onePredOneSuc": 39,
    "onePredTwoSuc": 17,
    "oneSuccessor": 48,
    "twoPred": 17,
    "twoPredOneSuc": 8,
    "twoEach": 8,
    "twoSuccessor": 30,
    "morePreds": 6,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 93,
    "BeginPhi": 2,
    "BranchCount": 78,
    "returnInt": 13,
    "CriticalCount": 15,
    "NumEdges": 118,
    "const32Bit": 291,
    "const64Bit": 14,
    "numConstZeroes": 136,
    "numConstOnes": 58,
    "UncondBranches": 48,
    "binaryConstArg": 20,
    "NumAShrInst": 2,
    "NumAddInst": 2,
    "NumAllocaInst": 45,
    "NumAndInst": 9,
    "BlockMid": 7,
    "BlockLow": 88,
    "NumBitCastInst": 14,
    "NumBrInst": 78,
    "NumCallInst": 39,
    "NumGetElementPtrInst": 91,
    "NumICmpInst": 32,
    "NumLShrInst": 3,
    "NumLoadInst": 189,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 2,
    "NumRetInst": 15,
    "NumSExtInst": 9,
    "NumSelectInst": 1,
    "NumShlInst": 1,
    "NumStoreInst": 99,
    "NumSubInst": 1,
    "NumTruncInst": 6,
    "NumXorInst": 2,
    "NumZExtInst": 5,
    "TotalBlocks": 95,
    "TotalInsts": 654,
    "TotalMemInst": 463,
    "TotalFuncs": 39,
    "ArgsPhi": 4,
    "testUnary": 273
  },
  "baseline_oz_instcount": 654,
  "knowledge_base_entry": [
    "--loop-unroll-and-jam",
    "--gvn-hoist",
    "--flattencfg",
    "--mergefunc",
    "--elim-avail-extern",
    "--loop-rotate",
    "--gvn",
    "--reassociate",
    "--die",
    "--early-cse-memssa",
    "--aggressive-instcombine",
    "--flattencfg",
    "--mergefunc",
    "--elim-avail-extern",
    "--sccp",
    "--loop-deletion",
    "--elim-avail-extern",
    "--early-cse",
    "--lower-expect",
    "--early-cse",
    "--indvars",
    "-loop-reduce",
    "--gvn-hoist",
    "--licm",
    "--die",
    "--load-store-vectorizer",
    "--slsr",
    "--simplifycfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-vectorize",
          "--mergefunc",
          "--licm",
          "--sroa",
          "--scalarizer",
          "--lower-matrix-intrinsics",
          "--loop-simplify",
          "--correlated-propagation",
          "--gvn-hoist",
          "--add-discriminators",
          "--lower-widenable-condition",
          "--attributor",
          "--prune-eh",
          "--slp-vectorizer",
          "--jump-threading",
          "--globalopt",
          "--instcombine",
          "--slsr",
          "--sink",
          "--nary-reassociate"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-vectorize",
      "--mergefunc",
      "--licm",
      "--sroa",
      "--scalarizer",
      "--lower-matrix-intrinsics",
      "--loop-simplify",
      "--correlated-propagation",
      "--gvn-hoist",
      "--add-discriminators",
      "--lower-widenable-condition",
      "--attributor",
      "--prune-eh",
      "--slp-vectorizer",
      "--jump-threading",
      "--globalopt",
      "--instcombine",
      "--slsr",
      "--sink",
      "--nary-reassociate"
    ],
    "performance_vs_Oz": "+0.5%"
  }
}
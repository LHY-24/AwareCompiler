{
  "program_id": "github-v0_40929.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 13,
    "onePredOneSuc": 9,
    "onePredTwoSuc": 1,
    "oneSuccessor": 11,
    "twoPred": 5,
    "twoPredOneSuc": 1,
    "twoEach": 4,
    "twoSuccessor": 6,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 21,
    "BeginPhi": 0,
    "BranchCount": 17,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 23,
    "const32Bit": 41,
    "const64Bit": 36,
    "numConstZeroes": 34,
    "numConstOnes": 25,
    "UncondBranches": 11,
    "binaryConstArg": 14,
    "NumAShrInst": 0,
    "NumAddInst": 6,
    "NumAllocaInst": 14,
    "NumAndInst": 2,
    "BlockMid": 5,
    "BlockLow": 16,
    "NumBitCastInst": 8,
    "NumBrInst": 17,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 30,
    "NumICmpInst": 6,
    "NumLShrInst": 2,
    "NumLoadInst": 43,
    "NumMulInst": 1,
    "NumOrInst": 2,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 25,
    "NumSubInst": 0,
    "NumTruncInst": 3,
    "NumXorInst": 1,
    "NumZExtInst": 15,
    "TotalBlocks": 21,
    "TotalInsts": 191,
    "TotalMemInst": 119,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 86
  },
  "baseline_oz_instcount": 191,
  "knowledge_base_entry": [
    "--mergereturn",
    "--simplifycfg",
    "--lower-constant-intrinsics",
    "--jump-threading",
    "--slsr",
    "--nary-reassociate",
    "--gvn",
    "--ipsccp",
    "--dce",
    "--loop-instsimplify",
    "--gvn",
    "--slp-vectorizer",
    "--lower-expect",
    "--die",
    "--sroa",
    "--loop-instsimplify",
    "--adce",
    "--aggressive-instcombine",
    "--bdce",
    "--die",
    "--ipsccp",
    "--elim-avail-extern",
    "--dse",
    "--sccp",
    "--sroa",
    "--dse",
    "--lower-expect",
    "--licm",
    "--mergefunc",
    "-loop-reduce",
    "--reassociate"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--float2int",
          "--partial-inliner",
          "--barrier",
          "--adce",
          "--memcpyopt",
          "--loop-fusion",
          "--globalsplit",
          "--aggressive-instcombine",
          "--mergereturn",
          "--loweratomic",
          "--slsr",
          "--coro-early",
          "--loop-interchange",
          "--loop-rotate"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--float2int",
      "--partial-inliner",
      "--barrier",
      "--adce",
      "--memcpyopt",
      "--loop-fusion",
      "--globalsplit",
      "--aggressive-instcombine",
      "--mergereturn",
      "--loweratomic",
      "--slsr",
      "--coro-early",
      "--loop-interchange",
      "--loop-rotate"
    ],
    "performance_vs_Oz": "+2.1%"
  }
}
{
  "program_id": "linux-v0_53.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 33,
    "onePredOneSuc": 20,
    "onePredTwoSuc": 12,
    "oneSuccessor": 24,
    "twoPred": 2,
    "twoPredOneSuc": 1,
    "twoEach": 0,
    "twoSuccessor": 16,
    "morePreds": 5,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 56,
    "BeginPhi": 0,
    "BranchCount": 40,
    "returnInt": 16,
    "CriticalCount": 1,
    "NumEdges": 56,
    "const32Bit": 106,
    "const64Bit": 7,
    "numConstZeroes": 42,
    "numConstOnes": 53,
    "UncondBranches": 24,
    "binaryConstArg": 7,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 42,
    "NumAndInst": 2,
    "BlockMid": 3,
    "BlockLow": 53,
    "NumBitCastInst": 7,
    "NumBrInst": 40,
    "NumCallInst": 35,
    "NumGetElementPtrInst": 17,
    "NumICmpInst": 17,
    "NumLShrInst": 0,
    "NumLoadInst": 86,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 16,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 69,
    "NumSubInst": 0,
    "NumTruncInst": 4,
    "NumXorInst": 2,
    "NumZExtInst": 5,
    "TotalBlocks": 56,
    "TotalInsts": 353,
    "TotalMemInst": 249,
    "TotalFuncs": 27,
    "ArgsPhi": 0,
    "testUnary": 152
  },
  "baseline_oz_instcount": 353,
  "knowledge_base_entry": [
    "--instsimplify",
    "--slp-vectorizer",
    "--gvn",
    "--mergefunc",
    "--newgvn",
    "--early-cse",
    "--aggressive-instcombine",
    "--bdce",
    "--load-store-vectorizer",
    "--adce",
    "--sccp"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-unroll-and-jam",
          "--inline",
          "--tailcallelim",
          "--reassociate",
          "--infer-address-spaces",
          "--inject-tli-mappings",
          "--deadargelim",
          "--globaldce",
          "--dse",
          "--load-store-vectorizer",
          "--guard-widening",
          "--gvn-hoist",
          "--nary-reassociate",
          "--coro-early",
          "--mergefunc",
          "--ipconstprop",
          "--globalsplit",
          "--loop-rotate",
          "--functionattrs",
          "--partially-inline-libcalls",
          "--instsimplify",
          "--coro-split"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-unroll-and-jam",
      "--inline",
      "--tailcallelim",
      "--reassociate",
      "--infer-address-spaces",
      "--inject-tli-mappings",
      "--deadargelim",
      "--globaldce",
      "--dse",
      "--load-store-vectorizer",
      "--guard-widening",
      "--gvn-hoist",
      "--nary-reassociate",
      "--coro-early",
      "--mergefunc",
      "--ipconstprop",
      "--globalsplit",
      "--loop-rotate",
      "--functionattrs",
      "--partially-inline-libcalls",
      "--instsimplify",
      "--coro-split"
    ],
    "performance_vs_Oz": "+1.7%"
  }
}
{
  "program_id": "linux-v0_819.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 8,
    "onePredOneSuc": 8,
    "onePredTwoSuc": 0,
    "oneSuccessor": 12,
    "twoPred": 5,
    "twoPredOneSuc": 2,
    "twoEach": 1,
    "twoSuccessor": 3,
    "morePreds": 4,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 31,
    "BeginPhi": 0,
    "BranchCount": 15,
    "returnInt": 11,
    "CriticalCount": 15,
    "NumEdges": 35,
    "const32Bit": 205,
    "const64Bit": 18,
    "numConstZeroes": 119,
    "numConstOnes": 33,
    "UncondBranches": 12,
    "binaryConstArg": 10,
    "NumAShrInst": 1,
    "NumAddInst": 0,
    "NumAllocaInst": 23,
    "NumAndInst": 4,
    "BlockMid": 5,
    "BlockLow": 26,
    "NumBitCastInst": 31,
    "NumBrInst": 15,
    "NumCallInst": 19,
    "NumGetElementPtrInst": 85,
    "NumICmpInst": 3,
    "NumLShrInst": 1,
    "NumLoadInst": 100,
    "NumMulInst": 1,
    "NumOrInst": 2,
    "NumPHIInst": 0,
    "NumRetInst": 14,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 54,
    "NumSubInst": 1,
    "NumTruncInst": 10,
    "NumXorInst": 0,
    "NumZExtInst": 15,
    "TotalBlocks": 31,
    "TotalInsts": 384,
    "TotalMemInst": 281,
    "TotalFuncs": 23,
    "ArgsPhi": 0,
    "testUnary": 181
  },
  "baseline_oz_instcount": 384,
  "knowledge_base_entry": [
    "--loop-rotate",
    "--lower-constant-intrinsics",
    "--loop-rotate",
    "--aggressive-instcombine",
    "--licm",
    "--gvn",
    "--jump-threading",
    "--gvn",
    "--prune-eh",
    "--newgvn",
    "--slsr",
    "--loop-simplifycfg",
    "--load-store-vectorizer",
    "--slsr",
    "--early-cse-memssa",
    "--loop-rotate",
    "--licm",
    "--adce",
    "--sroa",
    "--die",
    "--aggressive-instcombine",
    "--loop-rotate",
    "--instcombine",
    "--simplifycfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--hotcoldsplit",
          "--loop-rotate",
          "--consthoist",
          "--insert-gcov-profiling",
          "--loop-simplifycfg",
          "--add-discriminators",
          "--ipconstprop",
          "--instcombine",
          "--prune-eh",
          "--flattencfg",
          "--guard-widening",
          "--sroa",
          "--lower-matrix-intrinsics",
          "--loop-simplify",
          "--inject-tli-mappings",
          "--aggressive-instcombine",
          "--loop-sink",
          "--adce",
          "--loop-guard-widening",
          "--mem2reg",
          "--scalarizer",
          "--loop-unroll-and-jam",
          "--gvn-hoist",
          "--coro-elide",
          "--float2int",
          "--globaldce"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--hotcoldsplit",
      "--loop-rotate",
      "--consthoist",
      "--insert-gcov-profiling",
      "--loop-simplifycfg",
      "--add-discriminators",
      "--ipconstprop",
      "--instcombine",
      "--prune-eh",
      "--flattencfg",
      "--guard-widening",
      "--sroa",
      "--lower-matrix-intrinsics",
      "--loop-simplify",
      "--inject-tli-mappings",
      "--aggressive-instcombine",
      "--loop-sink",
      "--adce",
      "--loop-guard-widening",
      "--mem2reg",
      "--scalarizer",
      "--loop-unroll-and-jam",
      "--gvn-hoist",
      "--coro-elide",
      "--float2int",
      "--globaldce"
    ],
    "performance_vs_Oz": "+3.9%"
  }
}
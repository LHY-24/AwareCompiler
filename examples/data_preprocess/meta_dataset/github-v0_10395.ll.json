{
  "program_id": "github-v0_10395.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 2,
    "onePredOneSuc": 2,
    "onePredTwoSuc": 0,
    "oneSuccessor": 2,
    "twoPred": 3,
    "twoPredOneSuc": 0,
    "twoEach": 2,
    "twoSuccessor": 3,
    "morePreds": 0,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 6,
    "BeginPhi": 1,
    "BranchCount": 5,
    "returnInt": 49,
    "CriticalCount": 4,
    "NumEdges": 8,
    "const32Bit": 64,
    "const64Bit": 21,
    "numConstZeroes": 32,
    "numConstOnes": 26,
    "UncondBranches": 2,
    "binaryConstArg": 12,
    "NumAShrInst": 0,
    "NumAddInst": 20,
    "NumAllocaInst": 0,
    "NumAndInst": 3,
    "BlockMid": 2,
    "BlockLow": 5,
    "NumBitCastInst": 0,
    "NumBrInst": 5,
    "NumCallInst": 51,
    "NumGetElementPtrInst": 12,
    "NumICmpInst": 3,
    "NumLShrInst": 0,
    "NumLoadInst": 5,
    "NumMulInst": 13,
    "NumOrInst": 1,
    "NumPHIInst": 1,
    "NumRetInst": 2,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 8,
    "NumSubInst": 0,
    "NumTruncInst": 3,
    "NumXorInst": 1,
    "NumZExtInst": 7,
    "TotalBlocks": 7,
    "TotalInsts": 135,
    "TotalMemInst": 76,
    "TotalFuncs": 9,
    "ArgsPhi": 2,
    "testUnary": 15
  },
  "baseline_oz_instcount": 128,
  "knowledge_base_entry": [
    "--indvars",
    "--simplifycfg",
    "--sroa",
    "--simplifycfg",
    "--loop-reroll",
    "--instsimplify",
    "--correlated-propagation",
    "--loop-reroll",
    "--instsimplify",
    "--die",
    "--mergefunc",
    "--ipsccp",
    "--correlated-propagation",
    "--loop-reroll",
    "--early-cse-memssa",
    "--dse",
    "--mem2reg",
    "--simplifycfg",
    "--lower-expect",
    "--mem2reg",
    "--jump-threading"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--pgo-memop-opt",
          "--ipconstprop",
          "--lower-matrix-intrinsics",
          "--elim-avail-extern",
          "--loop-simplify",
          "--loop-reroll",
          "--argpromotion",
          "--instnamer",
          "--tailcallelim",
          "--indvars",
          "--mergefunc",
          "--lowerinvoke",
          "--gvn",
          "--ipsccp",
          "--cross-dso-cfi",
          "--mergeicmps",
          "--float2int",
          "--called-value-propagation",
          "--inline",
          "--loop-instsimplify",
          "--lower-expect",
          "--sancov"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+10.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--pgo-memop-opt",
      "--ipconstprop",
      "--lower-matrix-intrinsics",
      "--elim-avail-extern",
      "--loop-simplify",
      "--loop-reroll",
      "--argpromotion",
      "--instnamer",
      "--tailcallelim",
      "--indvars",
      "--mergefunc",
      "--lowerinvoke",
      "--gvn",
      "--ipsccp",
      "--cross-dso-cfi",
      "--mergeicmps",
      "--float2int",
      "--called-value-propagation",
      "--inline",
      "--loop-instsimplify",
      "--lower-expect",
      "--sancov"
    ],
    "performance_vs_Oz": "+10.2%"
  }
}
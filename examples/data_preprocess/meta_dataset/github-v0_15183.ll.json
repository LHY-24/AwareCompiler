{
  "program_id": "github-v0_15183.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 12,
    "onePredOneSuc": 9,
    "onePredTwoSuc": 3,
    "oneSuccessor": 10,
    "twoPred": 5,
    "twoPredOneSuc": 1,
    "twoEach": 2,
    "twoSuccessor": 6,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 18,
    "BeginPhi": 0,
    "BranchCount": 16,
    "returnInt": 7,
    "CriticalCount": 3,
    "NumEdges": 22,
    "const32Bit": 19,
    "const64Bit": 18,
    "numConstZeroes": 11,
    "numConstOnes": 15,
    "UncondBranches": 10,
    "binaryConstArg": 4,
    "NumAShrInst": 0,
    "NumAddInst": 3,
    "NumAllocaInst": 7,
    "NumAndInst": 0,
    "BlockMid": 0,
    "BlockLow": 18,
    "NumBitCastInst": 0,
    "NumBrInst": 16,
    "NumCallInst": 13,
    "NumGetElementPtrInst": 8,
    "NumICmpInst": 6,
    "NumLShrInst": 0,
    "NumLoadInst": 22,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 1,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 14,
    "NumSubInst": 1,
    "NumTruncInst": 1,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 18,
    "TotalInsts": 95,
    "TotalMemInst": 64,
    "TotalFuncs": 11,
    "ArgsPhi": 0,
    "testUnary": 32
  },
  "baseline_oz_instcount": 95,
  "knowledge_base_entry": [
    "--correlated-propagation",
    "--ipsccp",
    "--aggressive-instcombine",
    "--flattencfg",
    "--inline",
    "--loop-instsimplify",
    "--early-cse",
    "--mergefunc",
    "--loop-reroll",
    "--early-cse",
    "--correlated-propagation",
    "--reassociate",
    "--gvn",
    "--bdce",
    "--simplifycfg",
    "--memcpyopt",
    "--mem2reg",
    "--load-store-vectorizer"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "-loop-reduce",
          "--newgvn",
          "--add-discriminators",
          "--partial-inliner",
          "--loop-simplifycfg",
          "--scalarizer",
          "--ipconstprop",
          "--loop-vectorize",
          "--forceattrs",
          "--reassociate",
          "--coro-split",
          "--irce",
          "--loop-predication",
          "--instsimplify",
          "--bdce",
          "--called-value-propagation",
          "--sancov",
          "--barrier",
          "--loop-unswitch",
          "--aggressive-instcombine",
          "--mergefunc",
          "--strip-dead-prototypes",
          "--loop-deletion",
          "--partially-inline-libcalls",
          "--lower-constant-intrinsics",
          "--strip-debug-declare"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "-loop-reduce",
      "--newgvn",
      "--add-discriminators",
      "--partial-inliner",
      "--loop-simplifycfg",
      "--scalarizer",
      "--ipconstprop",
      "--loop-vectorize",
      "--forceattrs",
      "--reassociate",
      "--coro-split",
      "--irce",
      "--loop-predication",
      "--instsimplify",
      "--bdce",
      "--called-value-propagation",
      "--sancov",
      "--barrier",
      "--loop-unswitch",
      "--aggressive-instcombine",
      "--mergefunc",
      "--strip-dead-prototypes",
      "--loop-deletion",
      "--partially-inline-libcalls",
      "--lower-constant-intrinsics",
      "--strip-debug-declare"
    ],
    "performance_vs_Oz": "+2.1%"
  }
}
{
  "program_id": "linux-v0_3218.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 84,
    "onePredOneSuc": 65,
    "onePredTwoSuc": 14,
    "oneSuccessor": 78,
    "twoPred": 16,
    "twoPredOneSuc": 4,
    "twoEach": 4,
    "twoSuccessor": 26,
    "morePreds": 6,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 136,
    "BeginPhi": 1,
    "BranchCount": 104,
    "returnInt": 20,
    "CriticalCount": 8,
    "NumEdges": 138,
    "const32Bit": 327,
    "const64Bit": 26,
    "numConstZeroes": 139,
    "numConstOnes": 171,
    "UncondBranches": 78,
    "binaryConstArg": 20,
    "NumAShrInst": 0,
    "NumAddInst": 3,
    "NumAllocaInst": 108,
    "NumAndInst": 3,
    "BlockMid": 16,
    "BlockLow": 121,
    "NumBitCastInst": 44,
    "NumBrInst": 104,
    "NumCallInst": 84,
    "NumGetElementPtrInst": 97,
    "NumICmpInst": 28,
    "NumLShrInst": 0,
    "NumLoadInst": 245,
    "NumMulInst": 0,
    "NumOrInst": 2,
    "NumPHIInst": 1,
    "NumRetInst": 31,
    "NumSExtInst": 14,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 152,
    "NumSubInst": 0,
    "NumTruncInst": 5,
    "NumXorInst": 12,
    "NumZExtInst": 9,
    "TotalBlocks": 137,
    "TotalInsts": 951,
    "TotalMemInst": 686,
    "TotalFuncs": 65,
    "ArgsPhi": 2,
    "testUnary": 431
  },
  "baseline_oz_instcount": 951,
  "knowledge_base_entry": [
    "--strip-nondebug",
    "--mergefunc",
    "--dse",
    "--inline",
    "--gvn-hoist",
    "--mergefunc",
    "--loop-reroll",
    "--instcombine",
    "--loop-instsimplify",
    "--dce",
    "--gvn-hoist",
    "--mergefunc",
    "--dse",
    "--inline",
    "--reassociate",
    "--inline",
    "--jump-threading",
    "--nary-reassociate",
    "--slsr",
    "--slp-vectorizer",
    "--lower-expect",
    "--gvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-sink",
          "--loop-distribute",
          "--sroa",
          "--mergefunc",
          "--lower-expect",
          "--constmerge",
          "--loop-instsimplify",
          "--loop-vectorize",
          "--infer-address-spaces",
          "--float2int",
          "--functionattrs"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-sink",
      "--loop-distribute",
      "--sroa",
      "--mergefunc",
      "--lower-expect",
      "--constmerge",
      "--loop-instsimplify",
      "--loop-vectorize",
      "--infer-address-spaces",
      "--float2int",
      "--functionattrs"
    ],
    "performance_vs_Oz": "+0.1%"
  }
}
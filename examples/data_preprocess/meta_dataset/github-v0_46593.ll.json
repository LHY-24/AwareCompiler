{
  "program_id": "github-v0_46593.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 55,
    "onePredOneSuc": 45,
    "onePredTwoSuc": 2,
    "oneSuccessor": 55,
    "twoPred": 20,
    "twoPredOneSuc": 2,
    "twoEach": 15,
    "twoSuccessor": 20,
    "morePreds": 0,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 88,
    "BeginPhi": 2,
    "BranchCount": 75,
    "returnInt": 3,
    "CriticalCount": 0,
    "NumEdges": 95,
    "const32Bit": 264,
    "const64Bit": 5,
    "numConstZeroes": 83,
    "numConstOnes": 124,
    "UncondBranches": 55,
    "binaryConstArg": 40,
    "NumAShrInst": 0,
    "NumAddInst": 29,
    "NumAllocaInst": 86,
    "NumAndInst": 0,
    "BlockMid": 18,
    "BlockLow": 72,
    "NumBitCastInst": 18,
    "NumBrInst": 75,
    "NumCallInst": 49,
    "NumGetElementPtrInst": 105,
    "NumICmpInst": 18,
    "NumLShrInst": 0,
    "NumLoadInst": 341,
    "NumMulInst": 2,
    "NumOrInst": 0,
    "NumPHIInst": 2,
    "NumRetInst": 15,
    "NumSExtInst": 38,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 134,
    "NumSubInst": 0,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 2,
    "TotalBlocks": 90,
    "TotalInsts": 958,
    "TotalMemInst": 715,
    "TotalFuncs": 20,
    "ArgsPhi": 4,
    "testUnary": 504
  },
  "baseline_oz_instcount": 958,
  "knowledge_base_entry": [
    "--aggressive-instcombine",
    "--reassociate",
    "--slp-vectorizer",
    "--dse",
    "--loop-simplifycfg",
    "--lower-expect",
    "--licm",
    "--adce",
    "--mergefunc",
    "--early-cse-memssa",
    "--early-cse",
    "--indvars",
    "--correlated-propagation"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--ee-instrument",
          "--loop-simplify",
          "--sroa",
          "--loop-vectorize",
          "--loop-guard-widening",
          "--prune-eh",
          "--loop-data-prefetch",
          "--loop-versioning",
          "--lower-constant-intrinsics",
          "--sccp",
          "--slp-vectorizer",
          "--globaldce",
          "--tailcallelim",
          "--early-cse",
          "--simple-loop-unswitch",
          "--simplifycfg",
          "--newgvn",
          "--separate-const-offset-from-gep",
          "--loop-versioning-licm",
          "--aggressive-instcombine",
          "--dce",
          "--lower-widenable-condition",
          "--slsr",
          "--lower-guard-intrinsic",
          "--mem2reg",
          "--reassociate",
          "--loop-load-elim"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--ee-instrument",
      "--loop-simplify",
      "--sroa",
      "--loop-vectorize",
      "--loop-guard-widening",
      "--prune-eh",
      "--loop-data-prefetch",
      "--loop-versioning",
      "--lower-constant-intrinsics",
      "--sccp",
      "--slp-vectorizer",
      "--globaldce",
      "--tailcallelim",
      "--early-cse",
      "--simple-loop-unswitch",
      "--simplifycfg",
      "--newgvn",
      "--separate-const-offset-from-gep",
      "--loop-versioning-licm",
      "--aggressive-instcombine",
      "--dce",
      "--lower-widenable-condition",
      "--slsr",
      "--lower-guard-intrinsic",
      "--mem2reg",
      "--reassociate",
      "--loop-load-elim"
    ],
    "performance_vs_Oz": "+0.4%"
  }
}
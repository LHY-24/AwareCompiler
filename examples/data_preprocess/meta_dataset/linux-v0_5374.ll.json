{
  "program_id": "linux-v0_5374.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 19,
    "onePredOneSuc": 17,
    "onePredTwoSuc": 2,
    "oneSuccessor": 18,
    "twoPred": 8,
    "twoPredOneSuc": 1,
    "twoEach": 4,
    "twoSuccessor": 10,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 34,
    "BeginPhi": 0,
    "BranchCount": 28,
    "returnInt": 7,
    "CriticalCount": 5,
    "NumEdges": 41,
    "const32Bit": 127,
    "const64Bit": 39,
    "numConstZeroes": 65,
    "numConstOnes": 39,
    "UncondBranches": 18,
    "binaryConstArg": 16,
    "NumAShrInst": 0,
    "NumAddInst": 12,
    "NumAllocaInst": 24,
    "NumAndInst": 3,
    "BlockMid": 8,
    "BlockLow": 26,
    "NumBitCastInst": 6,
    "NumBrInst": 28,
    "NumCallInst": 13,
    "NumGetElementPtrInst": 58,
    "NumICmpInst": 13,
    "NumLShrInst": 0,
    "NumLoadInst": 94,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 5,
    "NumSExtInst": 1,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 54,
    "NumSubInst": 7,
    "NumTruncInst": 5,
    "NumXorInst": 3,
    "NumZExtInst": 24,
    "TotalBlocks": 34,
    "TotalInsts": 355,
    "TotalMemInst": 243,
    "TotalFuncs": 13,
    "ArgsPhi": 0,
    "testUnary": 157
  },
  "baseline_oz_instcount": 356,
  "knowledge_base_entry": [
    "--sink",
    "--ipsccp",
    "--aggressive-instcombine",
    "--early-cse",
    "--memcpyopt",
    "--early-cse",
    "--elim-avail-extern",
    "--early-cse",
    "--gvn",
    "--inline"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--coro-early",
          "--loop-deletion",
          "--lcssa",
          "-loop-reduce",
          "--aggressive-instcombine",
          "--coro-split",
          "--partially-inline-libcalls",
          "--always-inline",
          "--loop-unroll-and-jam",
          "--infer-address-spaces",
          "--elim-avail-extern",
          "--loop-idiom",
          "--dce",
          "--mldst-motion",
          "--slp-vectorizer",
          "--loop-fusion",
          "--name-anon-globals",
          "--tailcallelim",
          "--loop-simplifycfg",
          "--mergereturn",
          "--loop-load-elim",
          "--simplifycfg",
          "--strip-dead-prototypes",
          "--cross-dso-cfi",
          "--gvn-hoist",
          "--deadargelim",
          "--consthoist",
          "--post-inline-ee-instrument"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--coro-early",
      "--loop-deletion",
      "--lcssa",
      "-loop-reduce",
      "--aggressive-instcombine",
      "--coro-split",
      "--partially-inline-libcalls",
      "--always-inline",
      "--loop-unroll-and-jam",
      "--infer-address-spaces",
      "--elim-avail-extern",
      "--loop-idiom",
      "--dce",
      "--mldst-motion",
      "--slp-vectorizer",
      "--loop-fusion",
      "--name-anon-globals",
      "--tailcallelim",
      "--loop-simplifycfg",
      "--mergereturn",
      "--loop-load-elim",
      "--simplifycfg",
      "--strip-dead-prototypes",
      "--cross-dso-cfi",
      "--gvn-hoist",
      "--deadargelim",
      "--consthoist",
      "--post-inline-ee-instrument"
    ],
    "performance_vs_Oz": "+2.8%"
  }
}
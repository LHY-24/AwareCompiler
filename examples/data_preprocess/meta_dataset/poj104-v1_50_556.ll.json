{
  "program_id": "poj104-v1_50_556.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 12,
    "onePredOneSuc": 12,
    "onePredTwoSuc": 0,
    "oneSuccessor": 12,
    "twoPred": 12,
    "twoPredOneSuc": 0,
    "twoEach": 11,
    "twoSuccessor": 12,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 27,
    "BeginPhi": 0,
    "BranchCount": 24,
    "returnInt": 14,
    "CriticalCount": 12,
    "NumEdges": 36,
    "const32Bit": 64,
    "const64Bit": 26,
    "numConstZeroes": 2,
    "numConstOnes": 26,
    "UncondBranches": 12,
    "binaryConstArg": 36,
    "NumAShrInst": 0,
    "NumAddInst": 12,
    "NumAllocaInst": 14,
    "NumAndInst": 0,
    "BlockMid": 2,
    "BlockLow": 25,
    "NumBitCastInst": 26,
    "NumBrInst": 24,
    "NumCallInst": 42,
    "NumGetElementPtrInst": 0,
    "NumICmpInst": 12,
    "NumLShrInst": 0,
    "NumLoadInst": 24,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 13,
    "NumSubInst": 12,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 27,
    "TotalInsts": 194,
    "TotalMemInst": 93,
    "TotalFuncs": 10,
    "ArgsPhi": 0,
    "testUnary": 64
  },
  "baseline_oz_instcount": 104,
  "knowledge_base_entry": [
    "--loop-deletion",
    "--elim-avail-extern",
    "--instsimplify",
    "--correlated-propagation",
    "--instcombine",
    "--sroa",
    "--early-cse",
    "--simplifycfg",
    "--inline",
    "--sroa",
    "--aggressive-instcombine",
    "--lower-constant-intrinsics",
    "--memcpyopt",
    "--mem2reg",
    "--slp-vectorizer",
    "--sroa",
    "--dse",
    "--slp-vectorizer",
    "--inline",
    "--simplifycfg",
    "--slsr",
    "--early-cse",
    "--loop-fusion",
    "--instcombine",
    "--mem2reg",
    "--loop-instsimplify",
    "--nary-reassociate"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--pgo-memop-opt",
          "--loop-load-elim",
          "--early-cse-memssa",
          "--div-rem-pairs",
          "--ee-instrument",
          "--die",
          "--coro-cleanup",
          "--separate-const-offset-from-gep",
          "-loop-reduce",
          "--slp-vectorizer",
          "--early-cse",
          "--sroa",
          "--instcombine",
          "--loop-predication",
          "--barrier",
          "--inline",
          "--scalarizer",
          "--lower-matrix-intrinsics",
          "--loop-guard-widening",
          "--flattencfg"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+10.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--pgo-memop-opt",
      "--loop-load-elim",
      "--early-cse-memssa",
      "--div-rem-pairs",
      "--ee-instrument",
      "--die",
      "--coro-cleanup",
      "--separate-const-offset-from-gep",
      "-loop-reduce",
      "--slp-vectorizer",
      "--early-cse",
      "--sroa",
      "--instcombine",
      "--loop-predication",
      "--barrier",
      "--inline",
      "--scalarizer",
      "--lower-matrix-intrinsics",
      "--loop-guard-widening",
      "--flattencfg"
    ],
    "performance_vs_Oz": "+10.6%"
  }
}
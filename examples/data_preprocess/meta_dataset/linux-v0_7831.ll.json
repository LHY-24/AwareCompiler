{
  "program_id": "linux-v0_7831.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 37,
    "onePredOneSuc": 26,
    "onePredTwoSuc": 9,
    "oneSuccessor": 30,
    "twoPred": 5,
    "twoPredOneSuc": 2,
    "twoEach": 0,
    "twoSuccessor": 12,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 62,
    "BeginPhi": 0,
    "BranchCount": 41,
    "returnInt": 17,
    "CriticalCount": 2,
    "NumEdges": 65,
    "const32Bit": 160,
    "const64Bit": 21,
    "numConstZeroes": 57,
    "numConstOnes": 75,
    "UncondBranches": 30,
    "binaryConstArg": 5,
    "NumAShrInst": 2,
    "NumAddInst": 0,
    "NumAllocaInst": 66,
    "NumAndInst": 2,
    "BlockMid": 12,
    "BlockLow": 50,
    "NumBitCastInst": 12,
    "NumBrInst": 41,
    "NumCallInst": 33,
    "NumGetElementPtrInst": 32,
    "NumICmpInst": 11,
    "NumLShrInst": 0,
    "NumLoadInst": 132,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 18,
    "NumSExtInst": 11,
    "NumSelectInst": 0,
    "NumShlInst": 3,
    "NumStoreInst": 107,
    "NumSubInst": 3,
    "NumTruncInst": 6,
    "NumXorInst": 0,
    "NumZExtInst": 6,
    "TotalBlocks": 62,
    "TotalInsts": 488,
    "TotalMemInst": 370,
    "TotalFuncs": 34,
    "ArgsPhi": 0,
    "testUnary": 233
  },
  "baseline_oz_instcount": 489,
  "knowledge_base_entry": [
    "--memcpyopt",
    "--early-cse",
    "--loop-fusion",
    "--load-store-vectorizer",
    "--reassociate",
    "--instsimplify",
    "--adce",
    "--sroa",
    "--correlated-propagation",
    "--slp-vectorizer",
    "--instsimplify",
    "--instcombine",
    "--prune-eh",
    "--gvn",
    "--mem2reg",
    "--lower-expect",
    "--jump-threading",
    "--dse",
    "--correlated-propagation",
    "--gvn",
    "--load-store-vectorizer",
    "--bdce",
    "--elim-avail-extern",
    "--loop-instsimplify",
    "--loop-simplifycfg",
    "--simplifycfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--hotcoldsplit",
          "--dse",
          "--lower-matrix-intrinsics",
          "--ipconstprop",
          "--sink",
          "--canonicalize-aliases",
          "--globalsplit",
          "--functionattrs",
          "--loop-sink",
          "--indvars",
          "--lower-expect",
          "--loop-interchange",
          "--loop-simplifycfg",
          "--libcalls-shrinkwrap",
          "--early-cse",
          "--name-anon-globals"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--hotcoldsplit",
      "--dse",
      "--lower-matrix-intrinsics",
      "--ipconstprop",
      "--sink",
      "--canonicalize-aliases",
      "--globalsplit",
      "--functionattrs",
      "--loop-sink",
      "--indvars",
      "--lower-expect",
      "--loop-interchange",
      "--loop-simplifycfg",
      "--libcalls-shrinkwrap",
      "--early-cse",
      "--name-anon-globals"
    ],
    "performance_vs_Oz": "+0.2%"
  }
}
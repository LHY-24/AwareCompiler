{
  "program_id": "github-v0_2291.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 6,
    "onePredOneSuc": 5,
    "onePredTwoSuc": 1,
    "oneSuccessor": 6,
    "twoPred": 4,
    "twoPredOneSuc": 1,
    "twoEach": 2,
    "twoSuccessor": 4,
    "morePreds": 0,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 10,
    "BeginPhi": 1,
    "BranchCount": 10,
    "returnInt": 0,
    "CriticalCount": 2,
    "NumEdges": 14,
    "const32Bit": 30,
    "const64Bit": 0,
    "numConstZeroes": 24,
    "numConstOnes": 5,
    "UncondBranches": 6,
    "binaryConstArg": 0,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 1,
    "NumAndInst": 0,
    "BlockMid": 1,
    "BlockLow": 10,
    "NumBitCastInst": 4,
    "NumBrInst": 10,
    "NumCallInst": 13,
    "NumGetElementPtrInst": 13,
    "NumICmpInst": 5,
    "NumLShrInst": 0,
    "NumLoadInst": 34,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 1,
    "NumRetInst": 1,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 2,
    "NumSubInst": 0,
    "NumTruncInst": 1,
    "NumXorInst": 0,
    "NumZExtInst": 2,
    "TotalBlocks": 11,
    "TotalInsts": 87,
    "TotalMemInst": 63,
    "TotalFuncs": 11,
    "ArgsPhi": 2,
    "testUnary": 42
  },
  "baseline_oz_instcount": 87,
  "knowledge_base_entry": [
    "--strip-nondebug",
    "--mergefunc",
    "--licm",
    "--mergefunc",
    "--inline",
    "--aggressive-instcombine",
    "--load-store-vectorizer",
    "--early-cse",
    "--early-cse-memssa",
    "--die",
    "--lower-expect",
    "--globalopt",
    "--instcombine",
    "--slp-vectorizer",
    "--gvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--constprop",
          "--infer-address-spaces",
          "--mem2reg",
          "--aggressive-instcombine",
          "--pgo-memop-opt",
          "--div-rem-pairs",
          "--loop-reroll",
          "--ee-instrument",
          "--callsite-splitting",
          "--irce",
          "--coro-split",
          "--gvn-hoist",
          "--nary-reassociate"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--constprop",
      "--infer-address-spaces",
      "--mem2reg",
      "--aggressive-instcombine",
      "--pgo-memop-opt",
      "--div-rem-pairs",
      "--loop-reroll",
      "--ee-instrument",
      "--callsite-splitting",
      "--irce",
      "--coro-split",
      "--gvn-hoist",
      "--nary-reassociate"
    ],
    "performance_vs_Oz": "+1.1%"
  }
}
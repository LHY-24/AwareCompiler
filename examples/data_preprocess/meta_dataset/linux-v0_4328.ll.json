{
  "program_id": "linux-v0_4328.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 32,
    "onePredOneSuc": 26,
    "onePredTwoSuc": 3,
    "oneSuccessor": 32,
    "twoPred": 11,
    "twoPredOneSuc": 2,
    "twoEach": 2,
    "twoSuccessor": 12,
    "morePreds": 4,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 58,
    "BeginPhi": 0,
    "BranchCount": 44,
    "returnInt": 91,
    "CriticalCount": 8,
    "NumEdges": 70,
    "const32Bit": 191,
    "const64Bit": 1,
    "numConstZeroes": 29,
    "numConstOnes": 43,
    "UncondBranches": 32,
    "binaryConstArg": 23,
    "NumAShrInst": 2,
    "NumAddInst": 0,
    "NumAllocaInst": 35,
    "NumAndInst": 6,
    "BlockMid": 11,
    "BlockLow": 47,
    "NumBitCastInst": 4,
    "NumBrInst": 44,
    "NumCallInst": 99,
    "NumGetElementPtrInst": 22,
    "NumICmpInst": 13,
    "NumLShrInst": 0,
    "NumLoadInst": 180,
    "NumMulInst": 3,
    "NumOrInst": 5,
    "NumPHIInst": 0,
    "NumRetInst": 11,
    "NumSExtInst": 0,
    "NumSelectInst": 1,
    "NumShlInst": 0,
    "NumStoreInst": 48,
    "NumSubInst": 5,
    "NumTruncInst": 16,
    "NumXorInst": 0,
    "NumZExtInst": 11,
    "TotalBlocks": 58,
    "TotalInsts": 510,
    "TotalMemInst": 384,
    "TotalFuncs": 16,
    "ArgsPhi": 0,
    "testUnary": 246
  },
  "baseline_oz_instcount": 510,
  "knowledge_base_entry": [
    "--globaldce",
    "--aggressive-instcombine",
    "--lower-constant-intrinsics",
    "--loop-instsimplify",
    "--licm",
    "--licm",
    "--simplifycfg",
    "--slp-vectorizer",
    "--lower-expect",
    "--dse",
    "--reassociate"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--strip-dead-prototypes",
          "--partial-inliner",
          "--nary-reassociate",
          "--consthoist",
          "--simple-loop-unswitch",
          "--lower-widenable-condition",
          "--die",
          "--add-discriminators",
          "--loop-data-prefetch",
          "--loop-rotate",
          "--loop-instsimplify",
          "--callsite-splitting",
          "--constmerge",
          "--elim-avail-extern",
          "--loop-deletion",
          "--redundant-dbg-inst-elim",
          "--loop-fusion",
          "--flattencfg",
          "--loop-simplify",
          "--dse",
          "--name-anon-globals",
          "--inject-tli-mappings",
          "--canonicalize-aliases",
          "--rpo-functionattrs",
          "--sink",
          "--always-inline",
          "--loop-predication",
          "--instcombine",
          "--aggressive-instcombine",
          "--loop-guard-widening"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--strip-dead-prototypes",
      "--partial-inliner",
      "--nary-reassociate",
      "--consthoist",
      "--simple-loop-unswitch",
      "--lower-widenable-condition",
      "--die",
      "--add-discriminators",
      "--loop-data-prefetch",
      "--loop-rotate",
      "--loop-instsimplify",
      "--callsite-splitting",
      "--constmerge",
      "--elim-avail-extern",
      "--loop-deletion",
      "--redundant-dbg-inst-elim",
      "--loop-fusion",
      "--flattencfg",
      "--loop-simplify",
      "--dse",
      "--name-anon-globals",
      "--inject-tli-mappings",
      "--canonicalize-aliases",
      "--rpo-functionattrs",
      "--sink",
      "--always-inline",
      "--loop-predication",
      "--instcombine",
      "--aggressive-instcombine",
      "--loop-guard-widening"
    ],
    "performance_vs_Oz": "+3.9%"
  }
}
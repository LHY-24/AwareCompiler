{
  "program_id": "linux-v0_1511.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 17,
    "onePredOneSuc": 14,
    "onePredTwoSuc": 3,
    "oneSuccessor": 15,
    "twoPred": 5,
    "twoPredOneSuc": 1,
    "twoEach": 0,
    "twoSuccessor": 8,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 36,
    "BeginPhi": 0,
    "BranchCount": 21,
    "returnInt": 7,
    "CriticalCount": 1,
    "NumEdges": 31,
    "const32Bit": 113,
    "const64Bit": 6,
    "numConstZeroes": 39,
    "numConstOnes": 45,
    "UncondBranches": 15,
    "binaryConstArg": 4,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 40,
    "NumAndInst": 0,
    "BlockMid": 6,
    "BlockLow": 30,
    "NumBitCastInst": 5,
    "NumBrInst": 21,
    "NumCallInst": 19,
    "NumGetElementPtrInst": 26,
    "NumICmpInst": 6,
    "NumLShrInst": 0,
    "NumLoadInst": 75,
    "NumMulInst": 1,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 13,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 63,
    "NumSubInst": 0,
    "NumTruncInst": 1,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 36,
    "TotalInsts": 279,
    "TotalMemInst": 223,
    "TotalFuncs": 26,
    "ArgsPhi": 0,
    "testUnary": 123
  },
  "baseline_oz_instcount": 281,
  "knowledge_base_entry": [
    "--float2int",
    "--early-cse-memssa",
    "--mldst-motion",
    "--instcombine",
    "--mem2reg",
    "--loop-simplifycfg",
    "--load-store-vectorizer",
    "--adce",
    "--instsimplify",
    "--prune-eh",
    "--simplifycfg",
    "--load-store-vectorizer",
    "--slsr",
    "--instcombine",
    "--lower-constant-intrinsics"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--ipconstprop",
          "--strip-debug-declare",
          "--mem2reg",
          "--float2int",
          "--infer-address-spaces",
          "--callsite-splitting",
          "--loop-fusion",
          "-loop-reduce",
          "--inline",
          "--sroa",
          "--memcpyopt",
          "--coro-elide",
          "--globaldce",
          "--coro-split",
          "--constmerge",
          "--constprop",
          "--instcombine",
          "--simplifycfg",
          "--jump-threading",
          "--alignment-from-assumptions",
          "--die",
          "--loop-sink",
          "--add-discriminators",
          "--canonicalize-aliases",
          "--partially-inline-libcalls",
          "--pgo-memop-opt",
          "--loop-predication",
          "--loop-simplify"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--ipconstprop",
      "--strip-debug-declare",
      "--mem2reg",
      "--float2int",
      "--infer-address-spaces",
      "--callsite-splitting",
      "--loop-fusion",
      "-loop-reduce",
      "--inline",
      "--sroa",
      "--memcpyopt",
      "--coro-elide",
      "--globaldce",
      "--coro-split",
      "--constmerge",
      "--constprop",
      "--instcombine",
      "--simplifycfg",
      "--jump-threading",
      "--alignment-from-assumptions",
      "--die",
      "--loop-sink",
      "--add-discriminators",
      "--canonicalize-aliases",
      "--partially-inline-libcalls",
      "--pgo-memop-opt",
      "--loop-predication",
      "--loop-simplify"
    ],
    "performance_vs_Oz": "+0.7%"
  }
}
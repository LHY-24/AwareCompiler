{
  "program_id": "linux-v0_13856.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 3,
    "onePred": 17,
    "onePredOneSuc": 12,
    "onePredTwoSuc": 5,
    "oneSuccessor": 14,
    "twoPred": 5,
    "twoPredOneSuc": 2,
    "twoEach": 1,
    "twoSuccessor": 11,
    "morePreds": 3,
    "BB03Phi": 3,
    "BBHiPhi": 0,
    "BBNoPhi": 29,
    "BeginPhi": 3,
    "BranchCount": 25,
    "returnInt": 9,
    "CriticalCount": 6,
    "NumEdges": 36,
    "const32Bit": 34,
    "const64Bit": 8,
    "numConstZeroes": 21,
    "numConstOnes": 13,
    "UncondBranches": 14,
    "binaryConstArg": 1,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 9,
    "NumAndInst": 0,
    "BlockMid": 1,
    "BlockLow": 31,
    "NumBitCastInst": 0,
    "NumBrInst": 25,
    "NumCallInst": 13,
    "NumGetElementPtrInst": 8,
    "NumICmpInst": 13,
    "NumLShrInst": 0,
    "NumLoadInst": 27,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 3,
    "NumRetInst": 7,
    "NumSExtInst": 5,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 14,
    "NumSubInst": 0,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 11,
    "TotalBlocks": 32,
    "TotalInsts": 138,
    "TotalMemInst": 71,
    "TotalFuncs": 12,
    "ArgsPhi": 8,
    "testUnary": 54
  },
  "baseline_oz_instcount": 139,
  "knowledge_base_entry": [
    "--adce",
    "--instcombine",
    "--instsimplify",
    "--nary-reassociate",
    "--elim-avail-extern",
    "--dse",
    "--slp-vectorizer",
    "--lower-constant-intrinsics",
    "--mergefunc",
    "--flattencfg",
    "--adce",
    "--newgvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--nary-reassociate",
          "--gvn-hoist",
          "--lowerinvoke",
          "--lower-guard-intrinsic",
          "--functionattrs",
          "--loop-unroll-and-jam",
          "--slp-vectorizer",
          "--globaldce",
          "--sccp",
          "--globalsplit"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--nary-reassociate",
      "--gvn-hoist",
      "--lowerinvoke",
      "--lower-guard-intrinsic",
      "--functionattrs",
      "--loop-unroll-and-jam",
      "--slp-vectorizer",
      "--globaldce",
      "--sccp",
      "--globalsplit"
    ],
    "performance_vs_Oz": "+0.7%"
  }
}
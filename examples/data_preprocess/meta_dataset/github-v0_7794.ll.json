{
  "program_id": "github-v0_7794.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 19,
    "onePredOneSuc": 12,
    "onePredTwoSuc": 5,
    "oneSuccessor": 17,
    "twoPred": 8,
    "twoPredOneSuc": 5,
    "twoEach": 2,
    "twoSuccessor": 9,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 30,
    "BeginPhi": 0,
    "BranchCount": 26,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 35,
    "const32Bit": 40,
    "const64Bit": 71,
    "numConstZeroes": 80,
    "numConstOnes": 23,
    "UncondBranches": 17,
    "binaryConstArg": 13,
    "NumAShrInst": 2,
    "NumAddInst": 17,
    "NumAllocaInst": 11,
    "NumAndInst": 5,
    "BlockMid": 9,
    "BlockLow": 21,
    "NumBitCastInst": 0,
    "NumBrInst": 26,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 39,
    "NumICmpInst": 9,
    "NumLShrInst": 0,
    "NumLoadInst": 47,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 25,
    "NumSubInst": 1,
    "NumTruncInst": 15,
    "NumXorInst": 0,
    "NumZExtInst": 33,
    "TotalBlocks": 30,
    "TotalInsts": 244,
    "TotalMemInst": 129,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 109
  },
  "baseline_oz_instcount": 244,
  "knowledge_base_entry": [
    "--mergereturn",
    "--simplifycfg",
    "--loop-simplifycfg",
    "--flattencfg",
    "--gvn-hoist",
    "--loop-simplifycfg",
    "--aggressive-instcombine",
    "--simplifycfg",
    "--mldst-motion",
    "--elim-avail-extern",
    "--instsimplify",
    "--early-cse",
    "--slsr",
    "--loop-simplifycfg",
    "--jump-threading"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--sancov",
          "--loop-data-prefetch",
          "--loop-simplifycfg",
          "--loop-idiom",
          "--loop-sink",
          "--lcssa",
          "--strip",
          "--early-cse-memssa",
          "--loop-load-elim",
          "--coro-split",
          "--sccp",
          "--mergefunc",
          "--newgvn",
          "--aggressive-instcombine",
          "--instcombine",
          "--gvn",
          "--barrier",
          "--bdce",
          "--reg2mem",
          "--separate-const-offset-from-gep",
          "--partially-inline-libcalls",
          "--mergeicmps",
          "--elim-avail-extern",
          "--instsimplify",
          "--strip-dead-prototypes",
          "--always-inline"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+16.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--sancov",
      "--loop-data-prefetch",
      "--loop-simplifycfg",
      "--loop-idiom",
      "--loop-sink",
      "--lcssa",
      "--strip",
      "--early-cse-memssa",
      "--loop-load-elim",
      "--coro-split",
      "--sccp",
      "--mergefunc",
      "--newgvn",
      "--aggressive-instcombine",
      "--instcombine",
      "--gvn",
      "--barrier",
      "--bdce",
      "--reg2mem",
      "--separate-const-offset-from-gep",
      "--partially-inline-libcalls",
      "--mergeicmps",
      "--elim-avail-extern",
      "--instsimplify",
      "--strip-dead-prototypes",
      "--always-inline"
    ],
    "performance_vs_Oz": "+16.4%"
  }
}
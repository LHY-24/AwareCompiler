{
  "program_id": "github-v0_29870.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 15,
    "onePredOneSuc": 10,
    "onePredTwoSuc": 2,
    "oneSuccessor": 13,
    "twoPred": 6,
    "twoPredOneSuc": 2,
    "twoEach": 4,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 24,
    "BeginPhi": 0,
    "BranchCount": 20,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 27,
    "const32Bit": 31,
    "const64Bit": 25,
    "numConstZeroes": 29,
    "numConstOnes": 22,
    "UncondBranches": 13,
    "binaryConstArg": 8,
    "NumAShrInst": 0,
    "NumAddInst": 10,
    "NumAllocaInst": 13,
    "NumAndInst": 0,
    "BlockMid": 3,
    "BlockLow": 21,
    "NumBitCastInst": 0,
    "NumBrInst": 20,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 18,
    "NumICmpInst": 7,
    "NumLShrInst": 0,
    "NumLoadInst": 35,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 19,
    "NumSubInst": 1,
    "NumTruncInst": 6,
    "NumXorInst": 0,
    "NumZExtInst": 18,
    "TotalBlocks": 24,
    "TotalInsts": 161,
    "TotalMemInst": 92,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 75
  },
  "baseline_oz_instcount": 161,
  "knowledge_base_entry": [
    "--globaldce",
    "--aggressive-instcombine",
    "--globaldce",
    "--aggressive-instcombine",
    "--mergefunc",
    "--ipsccp",
    "--lower-constant-intrinsics",
    "--bdce",
    "--loop-instsimplify",
    "--lower-expect",
    "--loop-rotate",
    "--gvn",
    "--early-cse",
    "--licm"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--ee-instrument",
          "--loop-data-prefetch",
          "--strip-nondebug",
          "--consthoist",
          "--loop-load-elim",
          "--load-store-vectorizer",
          "--argpromotion",
          "--lower-matrix-intrinsics",
          "--loop-reroll",
          "--strip",
          "--float2int",
          "--instsimplify",
          "--sccp",
          "--simplifycfg",
          "--infer-address-spaces",
          "--loop-simplify",
          "--mldst-motion",
          "--aggressive-instcombine",
          "--loop-rotate",
          "--elim-avail-extern",
          "--loop-vectorize",
          "--ipconstprop",
          "--add-discriminators",
          "--rewrite-statepoints-for-gc",
          "--loop-unswitch",
          "--constprop",
          "--nary-reassociate"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+7.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--ee-instrument",
      "--loop-data-prefetch",
      "--strip-nondebug",
      "--consthoist",
      "--loop-load-elim",
      "--load-store-vectorizer",
      "--argpromotion",
      "--lower-matrix-intrinsics",
      "--loop-reroll",
      "--strip",
      "--float2int",
      "--instsimplify",
      "--sccp",
      "--simplifycfg",
      "--infer-address-spaces",
      "--loop-simplify",
      "--mldst-motion",
      "--aggressive-instcombine",
      "--loop-rotate",
      "--elim-avail-extern",
      "--loop-vectorize",
      "--ipconstprop",
      "--add-discriminators",
      "--rewrite-statepoints-for-gc",
      "--loop-unswitch",
      "--constprop",
      "--nary-reassociate"
    ],
    "performance_vs_Oz": "+7.5%"
  }
}
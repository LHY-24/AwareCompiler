{
  "program_id": "blas-v0_30.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 1,
    "onePredOneSuc": 1,
    "onePredTwoSuc": 0,
    "oneSuccessor": 1,
    "twoPred": 1,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 1,
    "morePreds": 0,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 2,
    "BeginPhi": 1,
    "BranchCount": 2,
    "returnInt": 0,
    "CriticalCount": 1,
    "NumEdges": 3,
    "const32Bit": 4,
    "const64Bit": 0,
    "numConstZeroes": 1,
    "numConstOnes": 1,
    "UncondBranches": 1,
    "binaryConstArg": 5,
    "NumAShrInst": 0,
    "NumAddInst": 4,
    "NumAllocaInst": 0,
    "NumAndInst": 1,
    "BlockMid": 1,
    "BlockLow": 2,
    "NumBitCastInst": 2,
    "NumBrInst": 2,
    "NumCallInst": 0,
    "NumGetElementPtrInst": 0,
    "NumICmpInst": 5,
    "NumLShrInst": 0,
    "NumLoadInst": 4,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 1,
    "NumRetInst": 1,
    "NumSExtInst": 2,
    "NumSelectInst": 2,
    "NumShlInst": 0,
    "NumStoreInst": 0,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 2,
    "TotalBlocks": 3,
    "TotalInsts": 26,
    "TotalMemInst": 4,
    "TotalFuncs": 1,
    "ArgsPhi": 2,
    "testUnary": 10
  },
  "baseline_oz_instcount": 26,
  "knowledge_base_entry": [
    "--die",
    "--elim-avail-extern",
    "--slp-vectorizer",
    "--dse",
    "--mem2reg",
    "--slp-vectorizer",
    "--dse",
    "--elim-avail-extern",
    "--gvn",
    "--early-cse"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--lower-guard-intrinsic",
          "--slp-vectorizer",
          "--indvars",
          "--instnamer",
          "--mem2reg",
          "--correlated-propagation",
          "--lowerinvoke",
          "--strip",
          "--inline",
          "--add-discriminators",
          "--early-cse",
          "--newgvn",
          "--guard-widening"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--lower-guard-intrinsic",
      "--slp-vectorizer",
      "--indvars",
      "--instnamer",
      "--mem2reg",
      "--correlated-propagation",
      "--lowerinvoke",
      "--strip",
      "--inline",
      "--add-discriminators",
      "--early-cse",
      "--newgvn",
      "--guard-widening"
    ],
    "performance_vs_Oz": "+3.8%"
  }
}
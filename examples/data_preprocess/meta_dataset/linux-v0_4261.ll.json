{
  "program_id": "linux-v0_4261.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 39,
    "onePredOneSuc": 25,
    "onePredTwoSuc": 14,
    "oneSuccessor": 29,
    "twoPred": 7,
    "twoPredOneSuc": 3,
    "twoEach": 4,
    "twoSuccessor": 20,
    "morePreds": 3,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 61,
    "BeginPhi": 0,
    "BranchCount": 49,
    "returnInt": 16,
    "CriticalCount": 3,
    "NumEdges": 69,
    "const32Bit": 198,
    "const64Bit": 15,
    "numConstZeroes": 98,
    "numConstOnes": 61,
    "UncondBranches": 29,
    "binaryConstArg": 12,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 34,
    "NumAndInst": 2,
    "BlockMid": 5,
    "BlockLow": 56,
    "NumBitCastInst": 15,
    "NumBrInst": 49,
    "NumCallInst": 45,
    "NumGetElementPtrInst": 59,
    "NumICmpInst": 24,
    "NumLShrInst": 2,
    "NumLoadInst": 123,
    "NumMulInst": 1,
    "NumOrInst": 2,
    "NumPHIInst": 0,
    "NumRetInst": 12,
    "NumSExtInst": 5,
    "NumSelectInst": 3,
    "NumShlInst": 0,
    "NumStoreInst": 66,
    "NumSubInst": 1,
    "NumTruncInst": 3,
    "NumXorInst": 2,
    "NumZExtInst": 7,
    "TotalBlocks": 61,
    "TotalInsts": 462,
    "TotalMemInst": 327,
    "TotalFuncs": 29,
    "ArgsPhi": 0,
    "testUnary": 192
  },
  "baseline_oz_instcount": 462,
  "knowledge_base_entry": [
    "--loop-unswitch",
    "--gvn",
    "--reassociate",
    "--aggressive-instcombine",
    "--gvn",
    "--instsimplify",
    "--aggressive-instcombine",
    "--globaldce",
    "--aggressive-instcombine"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--jump-threading",
          "--consthoist",
          "--coro-cleanup",
          "--lower-widenable-condition",
          "--constprop",
          "--die",
          "--lower-guard-intrinsic",
          "--aggressive-instcombine",
          "--coro-early",
          "--loop-reroll",
          "--slp-vectorizer",
          "--attributor",
          "--scalarizer",
          "--canonicalize-aliases",
          "--always-inline",
          "--partially-inline-libcalls",
          "--lowerswitch",
          "--licm",
          "--loop-distribute",
          "--simple-loop-unswitch",
          "--guard-widening",
          "--called-value-propagation",
          "--globalsplit",
          "--sancov",
          "--sroa",
          "--libcalls-shrinkwrap",
          "--infer-address-spaces"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--jump-threading",
      "--consthoist",
      "--coro-cleanup",
      "--lower-widenable-condition",
      "--constprop",
      "--die",
      "--lower-guard-intrinsic",
      "--aggressive-instcombine",
      "--coro-early",
      "--loop-reroll",
      "--slp-vectorizer",
      "--attributor",
      "--scalarizer",
      "--canonicalize-aliases",
      "--always-inline",
      "--partially-inline-libcalls",
      "--lowerswitch",
      "--licm",
      "--loop-distribute",
      "--simple-loop-unswitch",
      "--guard-widening",
      "--called-value-propagation",
      "--globalsplit",
      "--sancov",
      "--sroa",
      "--libcalls-shrinkwrap",
      "--infer-address-spaces"
    ],
    "performance_vs_Oz": "+0.4%"
  }
}
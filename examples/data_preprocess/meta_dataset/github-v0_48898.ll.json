{
  "program_id": "github-v0_48898.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 14,
    "onePredOneSuc": 9,
    "onePredTwoSuc": 2,
    "oneSuccessor": 12,
    "twoPred": 6,
    "twoPredOneSuc": 2,
    "twoEach": 4,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 23,
    "BeginPhi": 0,
    "BranchCount": 19,
    "returnInt": 4,
    "CriticalCount": 1,
    "NumEdges": 26,
    "const32Bit": 34,
    "const64Bit": 23,
    "numConstZeroes": 26,
    "numConstOnes": 23,
    "UncondBranches": 12,
    "binaryConstArg": 9,
    "NumAShrInst": 0,
    "NumAddInst": 10,
    "NumAllocaInst": 13,
    "NumAndInst": 0,
    "BlockMid": 3,
    "BlockLow": 20,
    "NumBitCastInst": 0,
    "NumBrInst": 19,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 16,
    "NumICmpInst": 7,
    "NumLShrInst": 0,
    "NumLoadInst": 32,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 18,
    "NumSubInst": 1,
    "NumTruncInst": 3,
    "NumXorInst": 0,
    "NumZExtInst": 3,
    "TotalBlocks": 23,
    "TotalInsts": 136,
    "TotalMemInst": 86,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 54
  },
  "baseline_oz_instcount": 136,
  "knowledge_base_entry": [
    "--loop-instsimplify",
    "--aggressive-instcombine",
    "--gvn-hoist",
    "--inline",
    "--dce",
    "--dse",
    "--globalopt",
    "--jump-threading",
    "--loop-simplifycfg",
    "--sroa",
    "--lower-constant-intrinsics",
    "--dse",
    "--sccp",
    "--simplifycfg",
    "--gvn",
    "--load-store-vectorizer",
    "--slp-vectorizer",
    "--jump-threading",
    "--loop-instsimplify",
    "--aggressive-instcombine",
    "--sroa",
    "--instcombine",
    "--aggressive-instcombine",
    "--sroa",
    "--sccp",
    "--elim-avail-extern",
    "--ipsccp"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--early-cse",
          "--simple-loop-unswitch",
          "--simplifycfg",
          "--correlated-propagation",
          "--aggressive-instcombine",
          "--mem2reg",
          "--always-inline",
          "--scalarizer",
          "--callsite-splitting",
          "--loop-unswitch",
          "--loop-fusion",
          "--coro-split",
          "--loop-idiom",
          "--sroa"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--early-cse",
      "--simple-loop-unswitch",
      "--simplifycfg",
      "--correlated-propagation",
      "--aggressive-instcombine",
      "--mem2reg",
      "--always-inline",
      "--scalarizer",
      "--callsite-splitting",
      "--loop-unswitch",
      "--loop-fusion",
      "--coro-split",
      "--loop-idiom",
      "--sroa"
    ],
    "performance_vs_Oz": "+2.9%"
  }
}
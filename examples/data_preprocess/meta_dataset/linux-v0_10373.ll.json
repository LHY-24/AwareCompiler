{
  "program_id": "linux-v0_10373.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 53,
    "onePredOneSuc": 36,
    "onePredTwoSuc": 15,
    "oneSuccessor": 44,
    "twoPred": 9,
    "twoPredOneSuc": 4,
    "twoEach": 3,
    "twoSuccessor": 23,
    "morePreds": 6,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 90,
    "BeginPhi": 2,
    "BranchCount": 67,
    "returnInt": 23,
    "CriticalCount": 4,
    "NumEdges": 94,
    "const32Bit": 195,
    "const64Bit": 27,
    "numConstZeroes": 84,
    "numConstOnes": 79,
    "UncondBranches": 44,
    "binaryConstArg": 15,
    "NumAShrInst": 3,
    "NumAddInst": 2,
    "NumAllocaInst": 66,
    "NumAndInst": 7,
    "BlockMid": 7,
    "BlockLow": 85,
    "NumBitCastInst": 15,
    "NumBrInst": 67,
    "NumCallInst": 43,
    "NumGetElementPtrInst": 51,
    "NumICmpInst": 24,
    "NumLShrInst": 1,
    "NumLoadInst": 153,
    "NumMulInst": 0,
    "NumOrInst": 3,
    "NumPHIInst": 2,
    "NumRetInst": 24,
    "NumSExtInst": 6,
    "NumSelectInst": 0,
    "NumShlInst": 3,
    "NumStoreInst": 104,
    "NumSubInst": 1,
    "NumTruncInst": 10,
    "NumXorInst": 0,
    "NumZExtInst": 12,
    "TotalBlocks": 92,
    "TotalInsts": 598,
    "TotalMemInst": 417,
    "TotalFuncs": 34,
    "ArgsPhi": 4,
    "testUnary": 262
  },
  "baseline_oz_instcount": 599,
  "knowledge_base_entry": [
    "--mergefunc",
    "--adce",
    "--aggressive-instcombine",
    "--prune-eh",
    "--sroa",
    "--reassociate",
    "--instcombine",
    "--gvn",
    "--aggressive-instcombine",
    "--ipsccp",
    "--inline",
    "--adce",
    "--aggressive-instcombine",
    "--simplifycfg",
    "--slp-vectorizer"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--elim-avail-extern",
          "--inline",
          "--loop-versioning",
          "--partial-inliner",
          "--dce",
          "--lower-widenable-condition",
          "--aggressive-instcombine",
          "--slsr",
          "--deadargelim",
          "--newgvn",
          "--die",
          "--correlated-propagation",
          "--ee-instrument"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--elim-avail-extern",
      "--inline",
      "--loop-versioning",
      "--partial-inliner",
      "--dce",
      "--lower-widenable-condition",
      "--aggressive-instcombine",
      "--slsr",
      "--deadargelim",
      "--newgvn",
      "--die",
      "--correlated-propagation",
      "--ee-instrument"
    ],
    "performance_vs_Oz": "+1.5%"
  }
}
{
  "program_id": "linux-v0_1472.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 45,
    "onePredOneSuc": 35,
    "onePredTwoSuc": 5,
    "oneSuccessor": 46,
    "twoPred": 17,
    "twoPredOneSuc": 8,
    "twoEach": 6,
    "twoSuccessor": 16,
    "morePreds": 4,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 78,
    "BeginPhi": 0,
    "BranchCount": 62,
    "returnInt": 14,
    "CriticalCount": 10,
    "NumEdges": 96,
    "const32Bit": 219,
    "const64Bit": 15,
    "numConstZeroes": 73,
    "numConstOnes": 74,
    "UncondBranches": 46,
    "binaryConstArg": 29,
    "NumAShrInst": 1,
    "NumAddInst": 10,
    "NumAllocaInst": 57,
    "NumAndInst": 8,
    "BlockMid": 11,
    "BlockLow": 67,
    "NumBitCastInst": 5,
    "NumBrInst": 62,
    "NumCallInst": 28,
    "NumGetElementPtrInst": 57,
    "NumICmpInst": 17,
    "NumLShrInst": 1,
    "NumLoadInst": 159,
    "NumMulInst": 0,
    "NumOrInst": 7,
    "NumPHIInst": 0,
    "NumRetInst": 12,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 5,
    "NumStoreInst": 90,
    "NumSubInst": 2,
    "NumTruncInst": 12,
    "NumXorInst": 4,
    "NumZExtInst": 27,
    "TotalBlocks": 78,
    "TotalInsts": 568,
    "TotalMemInst": 391,
    "TotalFuncs": 18,
    "ArgsPhi": 0,
    "testUnary": 260
  },
  "baseline_oz_instcount": 568,
  "knowledge_base_entry": [
    "--gvn-hoist",
    "--simplifycfg",
    "--aggressive-instcombine",
    "--licm",
    "--mergefunc",
    "--gvn",
    "--newgvn",
    "--load-store-vectorizer",
    "--instsimplify",
    "--early-cse",
    "--aggressive-instcombine",
    "--gvn",
    "--early-cse",
    "--loop-rotate",
    "--mem2reg",
    "--gvn-hoist",
    "--lower-expect",
    "--globalopt",
    "--instcombine"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--strip-debug-declare",
          "--coro-cleanup",
          "--lower-expect",
          "--aggressive-instcombine",
          "--barrier",
          "--mergereturn",
          "--coro-early",
          "--lower-widenable-condition",
          "--instsimplify",
          "--newgvn",
          "--scalarizer",
          "--called-value-propagation"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--strip-debug-declare",
      "--coro-cleanup",
      "--lower-expect",
      "--aggressive-instcombine",
      "--barrier",
      "--mergereturn",
      "--coro-early",
      "--lower-widenable-condition",
      "--instsimplify",
      "--newgvn",
      "--scalarizer",
      "--called-value-propagation"
    ],
    "performance_vs_Oz": "+0.9%"
  }
}
{
  "program_id": "linux-v0_12576.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 32,
    "onePredOneSuc": 15,
    "onePredTwoSuc": 17,
    "oneSuccessor": 20,
    "twoPred": 7,
    "twoPredOneSuc": 2,
    "twoEach": 5,
    "twoSuccessor": 25,
    "morePreds": 6,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 64,
    "BeginPhi": 2,
    "BranchCount": 45,
    "returnInt": 34,
    "CriticalCount": 21,
    "NumEdges": 70,
    "const32Bit": 308,
    "const64Bit": 0,
    "numConstZeroes": 199,
    "numConstOnes": 58,
    "UncondBranches": 20,
    "binaryConstArg": 11,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 47,
    "NumAndInst": 10,
    "BlockMid": 7,
    "BlockLow": 59,
    "NumBitCastInst": 6,
    "NumBrInst": 45,
    "NumCallInst": 42,
    "NumGetElementPtrInst": 116,
    "NumICmpInst": 30,
    "NumLShrInst": 0,
    "NumLoadInst": 150,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 2,
    "NumRetInst": 21,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 56,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 6,
    "NumZExtInst": 19,
    "TotalBlocks": 66,
    "TotalInsts": 550,
    "TotalMemInst": 411,
    "TotalFuncs": 25,
    "ArgsPhi": 4,
    "testUnary": 222
  },
  "baseline_oz_instcount": 550,
  "knowledge_base_entry": [
    "--strip",
    "--mergefunc",
    "--flattencfg",
    "--adce",
    "--lower-expect",
    "--gvn-hoist",
    "--mldst-motion",
    "--inline",
    "--loop-simplifycfg",
    "--slsr",
    "--gvn",
    "--die",
    "--sccp",
    "--globalopt",
    "--lower-constant-intrinsics"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--mergefunc",
          "--loop-reroll",
          "--sancov",
          "--bdce",
          "--elim-avail-extern",
          "--strip",
          "--inline",
          "--argpromotion",
          "--canonicalize-aliases",
          "--correlated-propagation",
          "--scalarizer",
          "--strip-nondebug",
          "--slsr",
          "--flattencfg",
          "--loop-simplify",
          "--inject-tli-mappings",
          "--lower-expect",
          "--loop-data-prefetch",
          "--loop-unroll-and-jam",
          "--mldst-motion",
          "-loop-reduce",
          "--adce",
          "--coro-cleanup",
          "--redundant-dbg-inst-elim"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+10.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--mergefunc",
      "--loop-reroll",
      "--sancov",
      "--bdce",
      "--elim-avail-extern",
      "--strip",
      "--inline",
      "--argpromotion",
      "--canonicalize-aliases",
      "--correlated-propagation",
      "--scalarizer",
      "--strip-nondebug",
      "--slsr",
      "--flattencfg",
      "--loop-simplify",
      "--inject-tli-mappings",
      "--lower-expect",
      "--loop-data-prefetch",
      "--loop-unroll-and-jam",
      "--mldst-motion",
      "-loop-reduce",
      "--adce",
      "--coro-cleanup",
      "--redundant-dbg-inst-elim"
    ],
    "performance_vs_Oz": "+10.2%"
  }
}
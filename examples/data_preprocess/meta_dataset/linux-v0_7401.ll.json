{
  "program_id": "linux-v0_7401.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 62,
    "onePredOneSuc": 45,
    "onePredTwoSuc": 13,
    "oneSuccessor": 51,
    "twoPred": 5,
    "twoPredOneSuc": 1,
    "twoEach": 2,
    "twoSuccessor": 21,
    "morePreds": 9,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 88,
    "BeginPhi": 0,
    "BranchCount": 72,
    "returnInt": 17,
    "CriticalCount": 6,
    "NumEdges": 113,
    "const32Bit": 263,
    "const64Bit": 25,
    "numConstZeroes": 102,
    "numConstOnes": 108,
    "UncondBranches": 51,
    "binaryConstArg": 13,
    "NumAShrInst": 0,
    "NumAddInst": 4,
    "NumAllocaInst": 92,
    "NumAndInst": 5,
    "BlockMid": 14,
    "BlockLow": 74,
    "NumBitCastInst": 54,
    "NumBrInst": 72,
    "NumCallInst": 46,
    "NumGetElementPtrInst": 57,
    "NumICmpInst": 20,
    "NumLShrInst": 0,
    "NumLoadInst": 234,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 12,
    "NumSExtInst": 7,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 131,
    "NumSubInst": 1,
    "NumTruncInst": 2,
    "NumXorInst": 3,
    "NumZExtInst": 1,
    "TotalBlocks": 88,
    "TotalInsts": 748,
    "TotalMemInst": 560,
    "TotalFuncs": 29,
    "ArgsPhi": 0,
    "testUnary": 393
  },
  "baseline_oz_instcount": 679,
  "knowledge_base_entry": [
    "--globalopt",
    "--aggressive-instcombine",
    "--adce",
    "--loop-instsimplify",
    "--nary-reassociate",
    "--slsr",
    "--load-store-vectorizer",
    "--loop-simplifycfg",
    "--slp-vectorizer",
    "--newgvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--lower-constant-intrinsics",
          "--strip",
          "--scalarizer",
          "--libcalls-shrinkwrap",
          "--loop-rotate",
          "--lower-widenable-condition",
          "--rpo-functionattrs",
          "--simple-loop-unswitch",
          "--called-value-propagation",
          "--inline",
          "--aggressive-instcombine",
          "--loop-predication",
          "--loop-idiom",
          "--loweratomic",
          "--name-anon-globals",
          "--post-inline-ee-instrument",
          "--loop-sink",
          "--loop-unroll",
          "--loop-instsimplify",
          "--correlated-propagation",
          "--globaldce",
          "--ipsccp",
          "--lcssa",
          "--loop-vectorize",
          "--partially-inline-libcalls",
          "--coro-cleanup"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--lower-constant-intrinsics",
      "--strip",
      "--scalarizer",
      "--libcalls-shrinkwrap",
      "--loop-rotate",
      "--lower-widenable-condition",
      "--rpo-functionattrs",
      "--simple-loop-unswitch",
      "--called-value-propagation",
      "--inline",
      "--aggressive-instcombine",
      "--loop-predication",
      "--loop-idiom",
      "--loweratomic",
      "--name-anon-globals",
      "--post-inline-ee-instrument",
      "--loop-sink",
      "--loop-unroll",
      "--loop-instsimplify",
      "--correlated-propagation",
      "--globaldce",
      "--ipsccp",
      "--lcssa",
      "--loop-vectorize",
      "--partially-inline-libcalls",
      "--coro-cleanup"
    ],
    "performance_vs_Oz": "+0.4%"
  }
}
{
  "program_id": "linux-v0_11483.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 42,
    "onePredOneSuc": 33,
    "onePredTwoSuc": 9,
    "oneSuccessor": 40,
    "twoPred": 14,
    "twoPredOneSuc": 4,
    "twoEach": 6,
    "twoSuccessor": 17,
    "morePreds": 1,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 67,
    "BeginPhi": 1,
    "BranchCount": 57,
    "returnInt": 27,
    "CriticalCount": 6,
    "NumEdges": 74,
    "const32Bit": 270,
    "const64Bit": 45,
    "numConstZeroes": 106,
    "numConstOnes": 111,
    "UncondBranches": 40,
    "binaryConstArg": 40,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 83,
    "NumAndInst": 12,
    "BlockMid": 18,
    "BlockLow": 50,
    "NumBitCastInst": 17,
    "NumBrInst": 57,
    "NumCallInst": 40,
    "NumGetElementPtrInst": 72,
    "NumICmpInst": 25,
    "NumLShrInst": 0,
    "NumLoadInst": 216,
    "NumMulInst": 5,
    "NumOrInst": 22,
    "NumPHIInst": 1,
    "NumRetInst": 11,
    "NumSExtInst": 4,
    "NumSelectInst": 6,
    "NumShlInst": 18,
    "NumStoreInst": 104,
    "NumSubInst": 5,
    "NumTruncInst": 25,
    "NumXorInst": 4,
    "NumZExtInst": 54,
    "TotalBlocks": 68,
    "TotalInsts": 783,
    "TotalMemInst": 515,
    "TotalFuncs": 43,
    "ArgsPhi": 2,
    "testUnary": 399
  },
  "baseline_oz_instcount": 784,
  "knowledge_base_entry": [
    "--loweratomic",
    "--globalopt",
    "--mem2reg",
    "--lower-constant-intrinsics",
    "--aggressive-instcombine",
    "--early-cse",
    "--correlated-propagation",
    "--reassociate",
    "--prune-eh",
    "--jump-threading",
    "--load-store-vectorizer",
    "--bdce",
    "--instcombine",
    "--loop-reroll",
    "--newgvn",
    "--loop-deletion",
    "--sccp",
    "--loop-simplifycfg",
    "--die"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--infer-address-spaces",
          "--speculative-execution",
          "--loop-instsimplify",
          "--licm",
          "--callsite-splitting",
          "--called-value-propagation",
          "--separate-const-offset-from-gep",
          "--float2int",
          "--strip-dead-prototypes",
          "--mergeicmps",
          "--slsr",
          "--dce",
          "--lower-constant-intrinsics",
          "--gvn",
          "--aggressive-instcombine",
          "--sink",
          "-loop-reduce",
          "--loop-unroll-and-jam",
          "--loop-simplify",
          "--lcssa",
          "--strip",
          "--loop-fusion",
          "--add-discriminators",
          "--sroa",
          "--early-cse",
          "--memcpyopt",
          "--mldst-motion",
          "--loop-idiom",
          "--partially-inline-libcalls"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--infer-address-spaces",
      "--speculative-execution",
      "--loop-instsimplify",
      "--licm",
      "--callsite-splitting",
      "--called-value-propagation",
      "--separate-const-offset-from-gep",
      "--float2int",
      "--strip-dead-prototypes",
      "--mergeicmps",
      "--slsr",
      "--dce",
      "--lower-constant-intrinsics",
      "--gvn",
      "--aggressive-instcombine",
      "--sink",
      "-loop-reduce",
      "--loop-unroll-and-jam",
      "--loop-simplify",
      "--lcssa",
      "--strip",
      "--loop-fusion",
      "--add-discriminators",
      "--sroa",
      "--early-cse",
      "--memcpyopt",
      "--mldst-motion",
      "--loop-idiom",
      "--partially-inline-libcalls"
    ],
    "performance_vs_Oz": "+1.4%"
  }
}
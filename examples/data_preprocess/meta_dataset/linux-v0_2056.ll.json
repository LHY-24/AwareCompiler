{
  "program_id": "linux-v0_2056.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 4,
    "onePredOneSuc": 3,
    "onePredTwoSuc": 1,
    "oneSuccessor": 6,
    "twoPred": 3,
    "twoPredOneSuc": 1,
    "twoEach": 0,
    "twoSuccessor": 2,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 16,
    "BeginPhi": 0,
    "BranchCount": 8,
    "returnInt": 24,
    "CriticalCount": 1,
    "NumEdges": 10,
    "const32Bit": 146,
    "const64Bit": 12,
    "numConstZeroes": 57,
    "numConstOnes": 28,
    "UncondBranches": 6,
    "binaryConstArg": 21,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 20,
    "NumAndInst": 7,
    "BlockMid": 5,
    "BlockLow": 11,
    "NumBitCastInst": 0,
    "NumBrInst": 8,
    "NumCallInst": 42,
    "NumGetElementPtrInst": 33,
    "NumICmpInst": 2,
    "NumLShrInst": 1,
    "NumLoadInst": 85,
    "NumMulInst": 0,
    "NumOrInst": 5,
    "NumPHIInst": 0,
    "NumRetInst": 8,
    "NumSExtInst": 4,
    "NumSelectInst": 0,
    "NumShlInst": 6,
    "NumStoreInst": 19,
    "NumSubInst": 3,
    "NumTruncInst": 5,
    "NumXorInst": 0,
    "NumZExtInst": 7,
    "TotalBlocks": 16,
    "TotalInsts": 255,
    "TotalMemInst": 199,
    "TotalFuncs": 23,
    "ArgsPhi": 0,
    "testUnary": 121
  },
  "baseline_oz_instcount": 239,
  "knowledge_base_entry": [
    "--ipsccp",
    "--globaldce",
    "--aggressive-instcombine",
    "--reassociate",
    "--licm",
    "--jump-threading",
    "--gvn",
    "--jump-threading",
    "--loop-reroll",
    "-loop-reduce",
    "--gvn",
    "--aggressive-instcombine",
    "--loweratomic",
    "--aggressive-instcombine",
    "--early-cse-memssa",
    "--slp-vectorizer",
    "--loop-simplifycfg",
    "--mem2reg",
    "--mldst-motion",
    "--newgvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--instnamer",
          "--post-inline-ee-instrument",
          "--partially-inline-libcalls",
          "--loop-interchange",
          "--memcpyopt",
          "--tailcallelim",
          "--loop-predication",
          "--newgvn",
          "--globalsplit",
          "--attributor",
          "--aggressive-instcombine",
          "--mergefunc",
          "--loop-vectorize",
          "--functionattrs",
          "--globalopt",
          "--indvars",
          "--deadargelim",
          "--sancov",
          "--loop-versioning",
          "--guard-widening",
          "--slsr",
          "--div-rem-pairs"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--instnamer",
      "--post-inline-ee-instrument",
      "--partially-inline-libcalls",
      "--loop-interchange",
      "--memcpyopt",
      "--tailcallelim",
      "--loop-predication",
      "--newgvn",
      "--globalsplit",
      "--attributor",
      "--aggressive-instcombine",
      "--mergefunc",
      "--loop-vectorize",
      "--functionattrs",
      "--globalopt",
      "--indvars",
      "--deadargelim",
      "--sancov",
      "--loop-versioning",
      "--guard-widening",
      "--slsr",
      "--div-rem-pairs"
    ],
    "performance_vs_Oz": "+3.8%"
  }
}
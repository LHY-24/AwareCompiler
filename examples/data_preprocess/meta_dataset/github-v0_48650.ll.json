{
  "program_id": "github-v0_48650.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 15,
    "onePredOneSuc": 10,
    "onePredTwoSuc": 2,
    "oneSuccessor": 13,
    "twoPred": 6,
    "twoPredOneSuc": 2,
    "twoEach": 4,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 24,
    "BeginPhi": 0,
    "BranchCount": 20,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 27,
    "const32Bit": 47,
    "const64Bit": 68,
    "numConstZeroes": 63,
    "numConstOnes": 28,
    "UncondBranches": 13,
    "binaryConstArg": 34,
    "NumAShrInst": 6,
    "NumAddInst": 6,
    "NumAllocaInst": 12,
    "NumAndInst": 9,
    "BlockMid": 8,
    "BlockLow": 16,
    "NumBitCastInst": 0,
    "NumBrInst": 20,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 36,
    "NumICmpInst": 7,
    "NumLShrInst": 1,
    "NumLoadInst": 54,
    "NumMulInst": 1,
    "NumOrInst": 14,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 7,
    "NumSelectInst": 0,
    "NumShlInst": 8,
    "NumStoreInst": 23,
    "NumSubInst": 3,
    "NumTruncInst": 15,
    "NumXorInst": 1,
    "NumZExtInst": 39,
    "TotalBlocks": 24,
    "TotalInsts": 273,
    "TotalMemInst": 132,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 127
  },
  "baseline_oz_instcount": 273,
  "knowledge_base_entry": [
    "--aggressive-instcombine",
    "--flattencfg",
    "--loop-simplifycfg",
    "--instsimplify",
    "--elim-avail-extern",
    "--newgvn",
    "--gvn",
    "--die",
    "--dse",
    "--adce",
    "--reassociate"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-reroll",
          "--alignment-from-assumptions",
          "--loop-predication",
          "--mem2reg",
          "--aggressive-instcombine",
          "--loop-simplifycfg",
          "--div-rem-pairs",
          "--partial-inliner",
          "--reassociate",
          "--hotcoldsplit"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+5.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-reroll",
      "--alignment-from-assumptions",
      "--loop-predication",
      "--mem2reg",
      "--aggressive-instcombine",
      "--loop-simplifycfg",
      "--div-rem-pairs",
      "--partial-inliner",
      "--reassociate",
      "--hotcoldsplit"
    ],
    "performance_vs_Oz": "+5.9%"
  }
}
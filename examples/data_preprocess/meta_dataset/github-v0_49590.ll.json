{
  "program_id": "github-v0_49590.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 5,
    "onePredOneSuc": 3,
    "onePredTwoSuc": 2,
    "oneSuccessor": 5,
    "twoPred": 4,
    "twoPredOneSuc": 1,
    "twoEach": 2,
    "twoSuccessor": 4,
    "morePreds": 0,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 12,
    "BeginPhi": 1,
    "BranchCount": 9,
    "returnInt": 0,
    "CriticalCount": 3,
    "NumEdges": 13,
    "const32Bit": 41,
    "const64Bit": 2,
    "numConstZeroes": 24,
    "numConstOnes": 23,
    "UncondBranches": 5,
    "binaryConstArg": 5,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 9,
    "NumAndInst": 0,
    "BlockMid": 3,
    "BlockLow": 10,
    "NumBitCastInst": 0,
    "NumBrInst": 9,
    "NumCallInst": 0,
    "NumGetElementPtrInst": 13,
    "NumICmpInst": 4,
    "NumLShrInst": 0,
    "NumLoadInst": 26,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 1,
    "NumRetInst": 4,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 20,
    "NumSubInst": 0,
    "NumTruncInst": 4,
    "NumXorInst": 2,
    "NumZExtInst": 5,
    "TotalBlocks": 13,
    "TotalInsts": 103,
    "TotalMemInst": 68,
    "TotalFuncs": 4,
    "ArgsPhi": 2,
    "testUnary": 46
  },
  "baseline_oz_instcount": 103,
  "knowledge_base_entry": [
    "--mergefunc",
    "--lower-constant-intrinsics",
    "--aggressive-instcombine",
    "--simplifycfg",
    "--inline",
    "--simplifycfg",
    "--memcpyopt",
    "--early-cse",
    "--mergefunc",
    "--loop-instsimplify",
    "--gvn",
    "--mergefunc",
    "--adce",
    "--loop-instsimplify",
    "--aggressive-instcombine",
    "--ipsccp",
    "--loop-simplifycfg",
    "--jump-threading",
    "--lower-constant-intrinsics",
    "--adce",
    "--loop-simplifycfg",
    "--inline",
    "--slp-vectorizer",
    "--licm"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--insert-gcov-profiling",
          "--coro-early",
          "--attributor",
          "--float2int",
          "--div-rem-pairs",
          "--aggressive-instcombine",
          "--post-inline-ee-instrument",
          "--constmerge",
          "--loop-rotate",
          "--loop-versioning",
          "--early-cse",
          "--load-store-vectorizer",
          "--lower-guard-intrinsic",
          "--irce",
          "--coro-split",
          "--reassociate",
          "--die",
          "--ipconstprop",
          "--functionattrs"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+4.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--insert-gcov-profiling",
      "--coro-early",
      "--attributor",
      "--float2int",
      "--div-rem-pairs",
      "--aggressive-instcombine",
      "--post-inline-ee-instrument",
      "--constmerge",
      "--loop-rotate",
      "--loop-versioning",
      "--early-cse",
      "--load-store-vectorizer",
      "--lower-guard-intrinsic",
      "--irce",
      "--coro-split",
      "--reassociate",
      "--die",
      "--ipconstprop",
      "--functionattrs"
    ],
    "performance_vs_Oz": "+4.9%"
  }
}
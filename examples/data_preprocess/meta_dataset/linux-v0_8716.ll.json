{
  "program_id": "linux-v0_8716.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 4,
    "onePredOneSuc": 3,
    "onePredTwoSuc": 1,
    "oneSuccessor": 4,
    "twoPred": 3,
    "twoPredOneSuc": 1,
    "twoEach": 1,
    "twoSuccessor": 3,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 8,
    "BeginPhi": 0,
    "BranchCount": 7,
    "returnInt": 1,
    "CriticalCount": 2,
    "NumEdges": 10,
    "const32Bit": 32,
    "const64Bit": 1,
    "numConstZeroes": 13,
    "numConstOnes": 7,
    "UncondBranches": 4,
    "binaryConstArg": 7,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 3,
    "NumAndInst": 4,
    "BlockMid": 1,
    "BlockLow": 7,
    "NumBitCastInst": 3,
    "NumBrInst": 7,
    "NumCallInst": 2,
    "NumGetElementPtrInst": 10,
    "NumICmpInst": 3,
    "NumLShrInst": 0,
    "NumLoadInst": 20,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 1,
    "NumSExtInst": 4,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 7,
    "NumSubInst": 1,
    "NumTruncInst": 3,
    "NumXorInst": 0,
    "NumZExtInst": 1,
    "TotalBlocks": 8,
    "TotalInsts": 71,
    "TotalMemInst": 42,
    "TotalFuncs": 3,
    "ArgsPhi": 0,
    "testUnary": 34
  },
  "baseline_oz_instcount": 71,
  "knowledge_base_entry": [
    "--adce",
    "--instcombine",
    "--aggressive-instcombine",
    "--loop-instsimplify",
    "--load-store-vectorizer",
    "--loop-reroll",
    "--mergefunc",
    "-loop-reduce",
    "--nary-reassociate",
    "--mem2reg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--coro-early",
          "--barrier",
          "--loop-unroll",
          "--gvn-hoist",
          "--flattencfg",
          "--scalarizer",
          "--partially-inline-libcalls",
          "--loop-simplifycfg",
          "--aggressive-instcombine",
          "--nary-reassociate",
          "--infer-address-spaces",
          "--inline",
          "--lower-matrix-intrinsics",
          "--instcombine",
          "--callsite-splitting",
          "--licm",
          "--insert-gcov-profiling",
          "--elim-avail-extern"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+8.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--coro-early",
      "--barrier",
      "--loop-unroll",
      "--gvn-hoist",
      "--flattencfg",
      "--scalarizer",
      "--partially-inline-libcalls",
      "--loop-simplifycfg",
      "--aggressive-instcombine",
      "--nary-reassociate",
      "--infer-address-spaces",
      "--inline",
      "--lower-matrix-intrinsics",
      "--instcombine",
      "--callsite-splitting",
      "--licm",
      "--insert-gcov-profiling",
      "--elim-avail-extern"
    ],
    "performance_vs_Oz": "+8.5%"
  }
}
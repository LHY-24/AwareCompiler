{
  "program_id": "linux-v0_121.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 30,
    "onePredOneSuc": 22,
    "onePredTwoSuc": 4,
    "oneSuccessor": 30,
    "twoPred": 12,
    "twoPredOneSuc": 3,
    "twoEach": 1,
    "twoSuccessor": 12,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 83,
    "BeginPhi": 0,
    "BranchCount": 42,
    "returnInt": 38,
    "CriticalCount": 9,
    "NumEdges": 60,
    "const32Bit": 301,
    "const64Bit": 4,
    "numConstZeroes": 130,
    "numConstOnes": 137,
    "UncondBranches": 30,
    "binaryConstArg": 10,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 117,
    "NumAndInst": 9,
    "BlockMid": 13,
    "BlockLow": 70,
    "NumBitCastInst": 9,
    "NumBrInst": 42,
    "NumCallInst": 55,
    "NumGetElementPtrInst": 74,
    "NumICmpInst": 11,
    "NumLShrInst": 0,
    "NumLoadInst": 152,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 39,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 143,
    "NumSubInst": 0,
    "NumTruncInst": 4,
    "NumXorInst": 1,
    "NumZExtInst": 12,
    "TotalBlocks": 83,
    "TotalInsts": 673,
    "TotalMemInst": 541,
    "TotalFuncs": 59,
    "ArgsPhi": 0,
    "testUnary": 296
  },
  "baseline_oz_instcount": 673,
  "knowledge_base_entry": [
    "--mem2reg",
    "--mergefunc",
    "--lower-constant-intrinsics",
    "--newgvn",
    "--loop-fusion",
    "--gvn",
    "--lower-constant-intrinsics",
    "--early-cse",
    "--gvn-hoist",
    "--load-store-vectorizer"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--nary-reassociate",
          "--hotcoldsplit",
          "--lower-matrix-intrinsics",
          "--loop-versioning-licm",
          "--coro-cleanup",
          "--simple-loop-unswitch",
          "--speculative-execution",
          "--scalarizer",
          "--constmerge",
          "--infer-address-spaces",
          "--mergefunc",
          "--gvn",
          "--loop-unswitch",
          "--instnamer",
          "--rpo-functionattrs",
          "--loop-vectorize",
          "--sroa",
          "--slsr",
          "--loop-data-prefetch",
          "--loop-interchange",
          "--called-value-propagation",
          "--loop-unroll-and-jam",
          "--early-cse",
          "--inject-tli-mappings",
          "--loop-distribute",
          "--functionattrs",
          "--add-discriminators",
          "--lower-constant-intrinsics",
          "--canonicalize-aliases",
          "--separate-const-offset-from-gep"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--nary-reassociate",
      "--hotcoldsplit",
      "--lower-matrix-intrinsics",
      "--loop-versioning-licm",
      "--coro-cleanup",
      "--simple-loop-unswitch",
      "--speculative-execution",
      "--scalarizer",
      "--constmerge",
      "--infer-address-spaces",
      "--mergefunc",
      "--gvn",
      "--loop-unswitch",
      "--instnamer",
      "--rpo-functionattrs",
      "--loop-vectorize",
      "--sroa",
      "--slsr",
      "--loop-data-prefetch",
      "--loop-interchange",
      "--called-value-propagation",
      "--loop-unroll-and-jam",
      "--early-cse",
      "--inject-tli-mappings",
      "--loop-distribute",
      "--functionattrs",
      "--add-discriminators",
      "--lower-constant-intrinsics",
      "--canonicalize-aliases",
      "--separate-const-offset-from-gep"
    ],
    "performance_vs_Oz": "+2.1%"
  }
}
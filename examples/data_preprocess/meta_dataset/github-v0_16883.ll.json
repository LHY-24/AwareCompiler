{
  "program_id": "github-v0_16883.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 13,
    "onePredOneSuc": 8,
    "onePredTwoSuc": 4,
    "oneSuccessor": 12,
    "twoPred": 5,
    "twoPredOneSuc": 1,
    "twoEach": 3,
    "twoSuccessor": 7,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 21,
    "BeginPhi": 0,
    "BranchCount": 19,
    "returnInt": 3,
    "CriticalCount": 4,
    "NumEdges": 26,
    "const32Bit": 23,
    "const64Bit": 4,
    "numConstZeroes": 11,
    "numConstOnes": 8,
    "UncondBranches": 12,
    "binaryConstArg": 4,
    "NumAShrInst": 0,
    "NumAddInst": 3,
    "NumAllocaInst": 5,
    "NumAndInst": 0,
    "BlockMid": 0,
    "BlockLow": 21,
    "NumBitCastInst": 0,
    "NumBrInst": 19,
    "NumCallInst": 4,
    "NumGetElementPtrInst": 8,
    "NumICmpInst": 7,
    "NumLShrInst": 0,
    "NumLoadInst": 22,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 2,
    "NumSExtInst": 13,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 9,
    "NumSubInst": 1,
    "NumTruncInst": 1,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 21,
    "TotalInsts": 94,
    "TotalMemInst": 48,
    "TotalFuncs": 4,
    "ArgsPhi": 0,
    "testUnary": 41
  },
  "baseline_oz_instcount": 96,
  "knowledge_base_entry": [
    "--flattencfg",
    "--elim-avail-extern",
    "--flattencfg",
    "--gvn-hoist",
    "--aggressive-instcombine",
    "--ipsccp",
    "--aggressive-instcombine",
    "--dse",
    "--elim-avail-extern",
    "--mldst-motion",
    "--load-store-vectorizer",
    "--mldst-motion",
    "--dse",
    "--elim-avail-extern",
    "--aggressive-instcombine",
    "--ipsccp",
    "--aggressive-instcombine",
    "--dse",
    "--jump-threading",
    "--reassociate",
    "--instcombine",
    "--inline"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--tailcallelim",
          "--loop-unroll-and-jam",
          "--indvars",
          "--reassociate",
          "--constmerge",
          "--barrier",
          "--callsite-splitting",
          "--strip-debug-declare",
          "--loop-deletion",
          "--guard-widening",
          "--functionattrs",
          "--lower-guard-intrinsic",
          "--early-cse-memssa",
          "--coro-split",
          "--loop-versioning-licm",
          "--loop-instsimplify",
          "--ee-instrument",
          "--licm",
          "--jump-threading",
          "--correlated-propagation",
          "--aggressive-instcombine"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--tailcallelim",
      "--loop-unroll-and-jam",
      "--indvars",
      "--reassociate",
      "--constmerge",
      "--barrier",
      "--callsite-splitting",
      "--strip-debug-declare",
      "--loop-deletion",
      "--guard-widening",
      "--functionattrs",
      "--lower-guard-intrinsic",
      "--early-cse-memssa",
      "--coro-split",
      "--loop-versioning-licm",
      "--loop-instsimplify",
      "--ee-instrument",
      "--licm",
      "--jump-threading",
      "--correlated-propagation",
      "--aggressive-instcombine"
    ],
    "performance_vs_Oz": "+2.1%"
  }
}
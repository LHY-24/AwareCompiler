{
  "program_id": "github-v0_32010.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 3,
    "onePred": 3,
    "onePredOneSuc": 2,
    "onePredTwoSuc": 1,
    "oneSuccessor": 3,
    "twoPred": 4,
    "twoPredOneSuc": 1,
    "twoEach": 2,
    "twoSuccessor": 4,
    "morePreds": 0,
    "BB03Phi": 3,
    "BBHiPhi": 0,
    "BBNoPhi": 5,
    "BeginPhi": 3,
    "BranchCount": 7,
    "returnInt": 1,
    "CriticalCount": 5,
    "NumEdges": 11,
    "const32Bit": 14,
    "const64Bit": 4,
    "numConstZeroes": 7,
    "numConstOnes": 6,
    "UncondBranches": 3,
    "binaryConstArg": 6,
    "NumAShrInst": 1,
    "NumAddInst": 1,
    "NumAllocaInst": 1,
    "NumAndInst": 0,
    "BlockMid": 1,
    "BlockLow": 7,
    "NumBitCastInst": 1,
    "NumBrInst": 7,
    "NumCallInst": 6,
    "NumGetElementPtrInst": 2,
    "NumICmpInst": 4,
    "NumLShrInst": 0,
    "NumLoadInst": 3,
    "NumMulInst": 2,
    "NumOrInst": 0,
    "NumPHIInst": 4,
    "NumRetInst": 1,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 1,
    "NumSubInst": 0,
    "NumTruncInst": 1,
    "NumXorInst": 0,
    "NumZExtInst": 1,
    "TotalBlocks": 8,
    "TotalInsts": 54,
    "TotalMemInst": 13,
    "TotalFuncs": 6,
    "ArgsPhi": 8,
    "testUnary": 10
  },
  "baseline_oz_instcount": 55,
  "knowledge_base_entry": [
    "--hotcoldsplit",
    "--mergefunc",
    "--gvn",
    "--mergefunc",
    "--slp-vectorizer",
    "--inline",
    "--dce",
    "--early-cse-memssa",
    "--mem2reg",
    "--mldst-motion",
    "--early-cse",
    "--instcombine",
    "--simplifycfg",
    "--correlated-propagation",
    "--load-store-vectorizer"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--elim-avail-extern",
          "--callsite-splitting",
          "--lower-constant-intrinsics",
          "--loop-instsimplify",
          "--lower-widenable-condition",
          "--ipconstprop",
          "--lowerswitch",
          "--loop-simplify",
          "--barrier",
          "--pgo-memop-opt",
          "--correlated-propagation",
          "--libcalls-shrinkwrap",
          "-loop-reduce",
          "--nary-reassociate",
          "--loop-data-prefetch",
          "--slsr",
          "--cross-dso-cfi",
          "--slp-vectorizer",
          "--infer-address-spaces",
          "--globaldce",
          "--constprop",
          "--guard-widening",
          "--dse",
          "--loop-deletion",
          "--globalsplit",
          "--loop-sink",
          "--jump-threading"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--elim-avail-extern",
      "--callsite-splitting",
      "--lower-constant-intrinsics",
      "--loop-instsimplify",
      "--lower-widenable-condition",
      "--ipconstprop",
      "--lowerswitch",
      "--loop-simplify",
      "--barrier",
      "--pgo-memop-opt",
      "--correlated-propagation",
      "--libcalls-shrinkwrap",
      "-loop-reduce",
      "--nary-reassociate",
      "--loop-data-prefetch",
      "--slsr",
      "--cross-dso-cfi",
      "--slp-vectorizer",
      "--infer-address-spaces",
      "--globaldce",
      "--constprop",
      "--guard-widening",
      "--dse",
      "--loop-deletion",
      "--globalsplit",
      "--loop-sink",
      "--jump-threading"
    ],
    "performance_vs_Oz": "+1.8%"
  }
}
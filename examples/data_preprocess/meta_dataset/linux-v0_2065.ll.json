{
  "program_id": "linux-v0_2065.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 28,
    "onePredOneSuc": 22,
    "onePredTwoSuc": 3,
    "oneSuccessor": 30,
    "twoPred": 11,
    "twoPredOneSuc": 6,
    "twoEach": 2,
    "twoSuccessor": 11,
    "morePreds": 4,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 53,
    "BeginPhi": 0,
    "BranchCount": 41,
    "returnInt": 18,
    "CriticalCount": 16,
    "NumEdges": 72,
    "const32Bit": 217,
    "const64Bit": 5,
    "numConstZeroes": 70,
    "numConstOnes": 49,
    "UncondBranches": 30,
    "binaryConstArg": 38,
    "NumAShrInst": 0,
    "NumAddInst": 16,
    "NumAllocaInst": 39,
    "NumAndInst": 2,
    "BlockMid": 7,
    "BlockLow": 46,
    "NumBitCastInst": 7,
    "NumBrInst": 41,
    "NumCallInst": 28,
    "NumGetElementPtrInst": 46,
    "NumICmpInst": 12,
    "NumLShrInst": 0,
    "NumLoadInst": 131,
    "NumMulInst": 14,
    "NumOrInst": 5,
    "NumPHIInst": 0,
    "NumRetInst": 10,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 3,
    "NumStoreInst": 55,
    "NumSubInst": 3,
    "NumTruncInst": 3,
    "NumXorInst": 0,
    "NumZExtInst": 3,
    "TotalBlocks": 53,
    "TotalInsts": 421,
    "TotalMemInst": 299,
    "TotalFuncs": 26,
    "ArgsPhi": 0,
    "testUnary": 184
  },
  "baseline_oz_instcount": 421,
  "knowledge_base_entry": [
    "--globalopt",
    "--globaldce",
    "--aggressive-instcombine",
    "--gvn",
    "--indvars",
    "--nary-reassociate",
    "--gvn",
    "--adce",
    "--mem2reg",
    "--adce",
    "--aggressive-instcombine",
    "--inline",
    "--elim-avail-extern",
    "--mergefunc",
    "--flattencfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--inline",
          "--scalarizer",
          "--early-cse",
          "--strip-dead-prototypes",
          "--slp-vectorizer",
          "--gvn",
          "--loop-distribute",
          "--loop-simplify",
          "--partially-inline-libcalls",
          "--loop-versioning-licm",
          "--newgvn",
          "--inferattrs",
          "--functionattrs",
          "--loop-guard-widening",
          "--div-rem-pairs",
          "--deadargelim",
          "--simplifycfg",
          "--loop-sink",
          "--lower-constant-intrinsics",
          "--loop-predication",
          "--gvn-hoist",
          "--argpromotion",
          "--aggressive-instcombine",
          "--pgo-memop-opt",
          "--alignment-from-assumptions",
          "--constprop"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--inline",
      "--scalarizer",
      "--early-cse",
      "--strip-dead-prototypes",
      "--slp-vectorizer",
      "--gvn",
      "--loop-distribute",
      "--loop-simplify",
      "--partially-inline-libcalls",
      "--loop-versioning-licm",
      "--newgvn",
      "--inferattrs",
      "--functionattrs",
      "--loop-guard-widening",
      "--div-rem-pairs",
      "--deadargelim",
      "--simplifycfg",
      "--loop-sink",
      "--lower-constant-intrinsics",
      "--loop-predication",
      "--gvn-hoist",
      "--argpromotion",
      "--aggressive-instcombine",
      "--pgo-memop-opt",
      "--alignment-from-assumptions",
      "--constprop"
    ],
    "performance_vs_Oz": "+1.2%"
  }
}
{
  "program_id": "github-v0_15570.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 12,
    "onePred": 115,
    "onePredOneSuc": 72,
    "onePredTwoSuc": 43,
    "oneSuccessor": 111,
    "twoPred": 69,
    "twoPredOneSuc": 34,
    "twoEach": 29,
    "twoSuccessor": 77,
    "morePreds": 6,
    "BB03Phi": 12,
    "BBHiPhi": 0,
    "BBNoPhi": 183,
    "BeginPhi": 12,
    "BranchCount": 188,
    "returnInt": 3,
    "CriticalCount": 63,
    "NumEdges": 279,
    "const32Bit": 323,
    "const64Bit": 1,
    "numConstZeroes": 142,
    "numConstOnes": 72,
    "UncondBranches": 111,
    "binaryConstArg": 38,
    "NumAShrInst": 0,
    "NumAddInst": 22,
    "NumAllocaInst": 37,
    "NumAndInst": 9,
    "BlockMid": 7,
    "BlockLow": 188,
    "NumBitCastInst": 15,
    "NumBrInst": 188,
    "NumCallInst": 21,
    "NumGetElementPtrInst": 96,
    "NumICmpInst": 74,
    "NumLShrInst": 0,
    "NumLoadInst": 258,
    "NumMulInst": 4,
    "NumOrInst": 4,
    "NumPHIInst": 12,
    "NumRetInst": 5,
    "NumSExtInst": 15,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 113,
    "NumSubInst": 5,
    "NumTruncInst": 1,
    "NumXorInst": 0,
    "NumZExtInst": 2,
    "TotalBlocks": 195,
    "TotalInsts": 888,
    "TotalMemInst": 525,
    "TotalFuncs": 7,
    "ArgsPhi": 24,
    "testUnary": 328
  },
  "baseline_oz_instcount": 896,
  "knowledge_base_entry": [
    "--reassociate",
    "--correlated-propagation",
    "--early-cse",
    "--simplifycfg",
    "--flattencfg",
    "--load-store-vectorizer",
    "--dse"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--ipsccp",
          "--tailcallelim",
          "--newgvn",
          "--separate-const-offset-from-gep",
          "--loop-data-prefetch",
          "--sink",
          "--mergefunc",
          "--slsr",
          "--deadargelim",
          "--lower-widenable-condition",
          "--div-rem-pairs",
          "--add-discriminators"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--ipsccp",
      "--tailcallelim",
      "--newgvn",
      "--separate-const-offset-from-gep",
      "--loop-data-prefetch",
      "--sink",
      "--mergefunc",
      "--slsr",
      "--deadargelim",
      "--lower-widenable-condition",
      "--div-rem-pairs",
      "--add-discriminators"
    ],
    "performance_vs_Oz": "+0.9%"
  }
}
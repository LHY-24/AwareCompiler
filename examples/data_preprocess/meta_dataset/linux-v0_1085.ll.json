{
  "program_id": "linux-v0_1085.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 97,
    "onePredOneSuc": 71,
    "onePredTwoSuc": 26,
    "oneSuccessor": 79,
    "twoPred": 31,
    "twoPredOneSuc": 5,
    "twoEach": 25,
    "twoSuccessor": 53,
    "morePreds": 4,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 137,
    "BeginPhi": 0,
    "BranchCount": 132,
    "returnInt": 38,
    "CriticalCount": 24,
    "NumEdges": 185,
    "const32Bit": 213,
    "const64Bit": 22,
    "numConstZeroes": 116,
    "numConstOnes": 92,
    "UncondBranches": 79,
    "binaryConstArg": 42,
    "NumAShrInst": 7,
    "NumAddInst": 4,
    "NumAllocaInst": 77,
    "NumAndInst": 26,
    "BlockMid": 9,
    "BlockLow": 128,
    "NumBitCastInst": 4,
    "NumBrInst": 132,
    "NumCallInst": 41,
    "NumGetElementPtrInst": 30,
    "NumICmpInst": 59,
    "NumLShrInst": 0,
    "NumLoadInst": 183,
    "NumMulInst": 0,
    "NumOrInst": 7,
    "NumPHIInst": 0,
    "NumRetInst": 5,
    "NumSExtInst": 19,
    "NumSelectInst": 2,
    "NumShlInst": 5,
    "NumStoreInst": 109,
    "NumSubInst": 0,
    "NumTruncInst": 12,
    "NumXorInst": 0,
    "NumZExtInst": 72,
    "TotalBlocks": 137,
    "TotalInsts": 794,
    "TotalMemInst": 440,
    "TotalFuncs": 9,
    "ArgsPhi": 0,
    "testUnary": 367
  },
  "baseline_oz_instcount": 798,
  "knowledge_base_entry": [
    "--flattencfg",
    "--aggressive-instcombine",
    "--globaldce",
    "--aggressive-instcombine",
    "--ipsccp",
    "--instcombine",
    "--lower-expect",
    "--adce",
    "--lower-expect",
    "--ipsccp",
    "--sroa",
    "--bdce",
    "--aggressive-instcombine",
    "--globaldce",
    "--mergefunc",
    "--dce",
    "--die",
    "--lower-expect",
    "--adce",
    "--lower-expect",
    "--ipsccp",
    "--sroa",
    "--bdce",
    "--aggressive-instcombine",
    "--globaldce",
    "--aggressive-instcombine",
    "--ipsccp"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--ee-instrument",
          "--div-rem-pairs",
          "--lower-constant-intrinsics",
          "--lowerswitch",
          "--aggressive-instcombine",
          "--loop-interchange",
          "--ipsccp",
          "--partial-inliner",
          "--speculative-execution",
          "--slp-vectorizer"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--ee-instrument",
      "--div-rem-pairs",
      "--lower-constant-intrinsics",
      "--lowerswitch",
      "--aggressive-instcombine",
      "--loop-interchange",
      "--ipsccp",
      "--partial-inliner",
      "--speculative-execution",
      "--slp-vectorizer"
    ],
    "performance_vs_Oz": "+0.5%"
  }
}
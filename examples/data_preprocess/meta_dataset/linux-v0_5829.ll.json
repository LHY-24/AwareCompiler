{
  "program_id": "linux-v0_5829.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 94,
    "onePredOneSuc": 82,
    "onePredTwoSuc": 11,
    "oneSuccessor": 89,
    "twoPred": 8,
    "twoPredOneSuc": 5,
    "twoEach": 0,
    "twoSuccessor": 17,
    "morePreds": 5,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 124,
    "BeginPhi": 0,
    "BranchCount": 106,
    "returnInt": 24,
    "CriticalCount": 11,
    "NumEdges": 127,
    "const32Bit": 280,
    "const64Bit": 16,
    "numConstZeroes": 95,
    "numConstOnes": 130,
    "UncondBranches": 89,
    "binaryConstArg": 36,
    "NumAShrInst": 5,
    "NumAddInst": 7,
    "NumAllocaInst": 94,
    "NumAndInst": 14,
    "BlockMid": 14,
    "BlockLow": 110,
    "NumBitCastInst": 12,
    "NumBrInst": 106,
    "NumCallInst": 56,
    "NumGetElementPtrInst": 86,
    "NumICmpInst": 17,
    "NumLShrInst": 0,
    "NumLoadInst": 233,
    "NumMulInst": 5,
    "NumOrInst": 4,
    "NumPHIInst": 0,
    "NumRetInst": 17,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 5,
    "NumStoreInst": 121,
    "NumSubInst": 1,
    "NumTruncInst": 8,
    "NumXorInst": 0,
    "NumZExtInst": 34,
    "TotalBlocks": 124,
    "TotalInsts": 826,
    "TotalMemInst": 590,
    "TotalFuncs": 23,
    "ArgsPhi": 0,
    "testUnary": 381
  },
  "baseline_oz_instcount": 826,
  "knowledge_base_entry": [
    "--jump-threading",
    "--simplifycfg",
    "--aggressive-instcombine",
    "--ipsccp",
    "--adce",
    "--sroa",
    "--load-store-vectorizer",
    "--adce",
    "--dce",
    "--gvn",
    "--load-store-vectorizer",
    "--early-cse",
    "--flattencfg",
    "--instcombine",
    "--gvn",
    "--gvn-hoist",
    "--loop-simplifycfg",
    "--ipsccp",
    "--licm",
    "--licm",
    "--reassociate",
    "--aggressive-instcombine",
    "--ipsccp",
    "--adce",
    "--mergefunc",
    "-loop-reduce",
    "--early-cse",
    "--jump-threading",
    "--instsimplify",
    "--gvn-hoist",
    "--simplifycfg",
    "--ipsccp",
    "--instcombine"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--gvn-hoist",
          "--loop-interchange",
          "--ipconstprop",
          "--loop-data-prefetch",
          "--inline",
          "--newgvn",
          "--infer-address-spaces",
          "--die",
          "--loop-unswitch",
          "--loop-instsimplify",
          "--lowerinvoke",
          "--globaldce",
          "--loop-guard-widening",
          "--redundant-dbg-inst-elim",
          "--slp-vectorizer",
          "--instsimplify",
          "--adce",
          "--constmerge",
          "--sink",
          "--sccp",
          "--scalarizer",
          "--aggressive-instcombine",
          "--lower-matrix-intrinsics",
          "--sancov",
          "--separate-const-offset-from-gep",
          "--loop-deletion",
          "--canonicalize-aliases",
          "--ipsccp",
          "--callsite-splitting"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--gvn-hoist",
      "--loop-interchange",
      "--ipconstprop",
      "--loop-data-prefetch",
      "--inline",
      "--newgvn",
      "--infer-address-spaces",
      "--die",
      "--loop-unswitch",
      "--loop-instsimplify",
      "--lowerinvoke",
      "--globaldce",
      "--loop-guard-widening",
      "--redundant-dbg-inst-elim",
      "--slp-vectorizer",
      "--instsimplify",
      "--adce",
      "--constmerge",
      "--sink",
      "--sccp",
      "--scalarizer",
      "--aggressive-instcombine",
      "--lower-matrix-intrinsics",
      "--sancov",
      "--separate-const-offset-from-gep",
      "--loop-deletion",
      "--canonicalize-aliases",
      "--ipsccp",
      "--callsite-splitting"
    ],
    "performance_vs_Oz": "+0.5%"
  }
}
{
  "program_id": "linux-v0_12245.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 65,
    "onePredOneSuc": 49,
    "onePredTwoSuc": 12,
    "oneSuccessor": 69,
    "twoPred": 30,
    "twoPredOneSuc": 14,
    "twoEach": 12,
    "twoSuccessor": 29,
    "morePreds": 7,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 137,
    "BeginPhi": 1,
    "BranchCount": 98,
    "returnInt": 27,
    "CriticalCount": 28,
    "NumEdges": 149,
    "const32Bit": 390,
    "const64Bit": 20,
    "numConstZeroes": 153,
    "numConstOnes": 158,
    "UncondBranches": 69,
    "binaryConstArg": 26,
    "NumAShrInst": 0,
    "NumAddInst": 11,
    "NumAllocaInst": 121,
    "NumAndInst": 1,
    "BlockMid": 15,
    "BlockLow": 123,
    "NumBitCastInst": 25,
    "NumBrInst": 98,
    "NumCallInst": 67,
    "NumGetElementPtrInst": 93,
    "NumICmpInst": 30,
    "NumLShrInst": 0,
    "NumLoadInst": 263,
    "NumMulInst": 1,
    "NumOrInst": 6,
    "NumPHIInst": 1,
    "NumRetInst": 36,
    "NumSExtInst": 12,
    "NumSelectInst": 1,
    "NumShlInst": 4,
    "NumStoreInst": 172,
    "NumSubInst": 3,
    "NumTruncInst": 8,
    "NumXorInst": 2,
    "NumZExtInst": 15,
    "TotalBlocks": 138,
    "TotalInsts": 982,
    "TotalMemInst": 716,
    "TotalFuncs": 62,
    "ArgsPhi": 2,
    "testUnary": 450
  },
  "baseline_oz_instcount": 981,
  "knowledge_base_entry": [
    "--deadargelim",
    "--mergefunc",
    "--mergefunc",
    "--gvn-hoist",
    "--aggressive-instcombine",
    "--adce",
    "--load-store-vectorizer",
    "--inline",
    "--mergefunc",
    "--inline",
    "--ipsccp",
    "--aggressive-instcombine",
    "--die",
    "--aggressive-instcombine",
    "--elim-avail-extern",
    "--prune-eh",
    "--lower-constant-intrinsics",
    "--gvn-hoist",
    "--early-cse"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-guard-widening",
          "--lower-widenable-condition",
          "--lcssa",
          "--memcpyopt",
          "--globalopt",
          "--post-inline-ee-instrument",
          "--partially-inline-libcalls",
          "--coro-cleanup",
          "--pgo-memop-opt",
          "--aggressive-instcombine",
          "--coro-early",
          "--sroa",
          "--load-store-vectorizer",
          "--slp-vectorizer",
          "--adce",
          "--early-cse",
          "--div-rem-pairs",
          "--constprop",
          "--separate-const-offset-from-gep",
          "-loop-reduce",
          "--globaldce",
          "--coro-elide",
          "--hotcoldsplit",
          "--licm",
          "--ipsccp",
          "--sink",
          "--guard-widening"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-guard-widening",
      "--lower-widenable-condition",
      "--lcssa",
      "--memcpyopt",
      "--globalopt",
      "--post-inline-ee-instrument",
      "--partially-inline-libcalls",
      "--coro-cleanup",
      "--pgo-memop-opt",
      "--aggressive-instcombine",
      "--coro-early",
      "--sroa",
      "--load-store-vectorizer",
      "--slp-vectorizer",
      "--adce",
      "--early-cse",
      "--div-rem-pairs",
      "--constprop",
      "--separate-const-offset-from-gep",
      "-loop-reduce",
      "--globaldce",
      "--coro-elide",
      "--hotcoldsplit",
      "--licm",
      "--ipsccp",
      "--sink",
      "--guard-widening"
    ],
    "performance_vs_Oz": "+0.6%"
  }
}
{
  "program_id": "github-v0_3666.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 8,
    "onePredOneSuc": 8,
    "onePredTwoSuc": 0,
    "oneSuccessor": 8,
    "twoPred": 4,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 4,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 86,
    "BeginPhi": 0,
    "BranchCount": 12,
    "returnInt": 13,
    "CriticalCount": 0,
    "NumEdges": 16,
    "const32Bit": 118,
    "const64Bit": 126,
    "numConstZeroes": 22,
    "numConstOnes": 37,
    "UncondBranches": 8,
    "binaryConstArg": 5,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 20,
    "NumAndInst": 3,
    "BlockMid": 6,
    "BlockLow": 80,
    "NumBitCastInst": 0,
    "NumBrInst": 12,
    "NumCallInst": 149,
    "NumGetElementPtrInst": 3,
    "NumICmpInst": 4,
    "NumLShrInst": 0,
    "NumLoadInst": 113,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 74,
    "NumSExtInst": 23,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 30,
    "NumSubInst": 0,
    "NumTruncInst": 3,
    "NumXorInst": 0,
    "NumZExtInst": 6,
    "TotalBlocks": 86,
    "TotalInsts": 465,
    "TotalMemInst": 315,
    "TotalFuncs": 95,
    "ArgsPhi": 0,
    "testUnary": 188
  },
  "baseline_oz_instcount": 432,
  "knowledge_base_entry": [
    "--tailcallelim",
    "--jump-threading",
    "--prune-eh",
    "--early-cse-memssa",
    "--jump-threading",
    "--loop-instsimplify",
    "--dce",
    "--aggressive-instcombine",
    "--early-cse-memssa",
    "--ipsccp",
    "--mem2reg",
    "--licm",
    "--dce",
    "--aggressive-instcombine",
    "--globalopt",
    "--mem2reg",
    "--lower-expect",
    "--slp-vectorizer",
    "-loop-reduce",
    "--nary-reassociate",
    "--loop-simplifycfg",
    "--early-cse"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--early-cse",
          "--mem2reg",
          "--loop-predication",
          "--coro-elide",
          "--infer-address-spaces",
          "--loop-guard-widening",
          "--aggressive-instcombine",
          "--lower-guard-intrinsic",
          "--callsite-splitting",
          "--loop-simplify",
          "--reassociate",
          "--slsr",
          "--post-inline-ee-instrument",
          "--gvn",
          "--add-discriminators",
          "--ipsccp",
          "--attributor",
          "--sancov",
          "--instnamer"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--early-cse",
      "--mem2reg",
      "--loop-predication",
      "--coro-elide",
      "--infer-address-spaces",
      "--loop-guard-widening",
      "--aggressive-instcombine",
      "--lower-guard-intrinsic",
      "--callsite-splitting",
      "--loop-simplify",
      "--reassociate",
      "--slsr",
      "--post-inline-ee-instrument",
      "--gvn",
      "--add-discriminators",
      "--ipsccp",
      "--attributor",
      "--sancov",
      "--instnamer"
    ],
    "performance_vs_Oz": "+1.4%"
  }
}
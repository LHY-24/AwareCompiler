{
  "program_id": "github-v0_40498.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 14,
    "onePredOneSuc": 9,
    "onePredTwoSuc": 3,
    "oneSuccessor": 12,
    "twoPred": 6,
    "twoPredOneSuc": 3,
    "twoEach": 2,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 23,
    "BeginPhi": 0,
    "BranchCount": 19,
    "returnInt": 4,
    "CriticalCount": 1,
    "NumEdges": 26,
    "const32Bit": 41,
    "const64Bit": 66,
    "numConstZeroes": 68,
    "numConstOnes": 29,
    "UncondBranches": 12,
    "binaryConstArg": 12,
    "NumAShrInst": 3,
    "NumAddInst": 8,
    "NumAllocaInst": 14,
    "NumAndInst": 3,
    "BlockMid": 6,
    "BlockLow": 17,
    "NumBitCastInst": 12,
    "NumBrInst": 19,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 43,
    "NumICmpInst": 7,
    "NumLShrInst": 0,
    "NumLoadInst": 36,
    "NumMulInst": 1,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 25,
    "NumSubInst": 0,
    "NumTruncInst": 6,
    "NumXorInst": 0,
    "NumZExtInst": 13,
    "TotalBlocks": 23,
    "TotalInsts": 204,
    "TotalMemInst": 125,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 84
  },
  "baseline_oz_instcount": 204,
  "knowledge_base_entry": [
    "--early-cse",
    "--licm",
    "--lower-expect",
    "--early-cse-memssa",
    "--nary-reassociate",
    "--instcombine",
    "--inline",
    "--sccp",
    "--simplifycfg",
    "--aggressive-instcombine",
    "--load-store-vectorizer",
    "--reassociate",
    "--slsr",
    "--slp-vectorizer",
    "--loop-reroll",
    "--instsimplify",
    "--load-store-vectorizer",
    "--jump-threading",
    "--lower-constant-intrinsics"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--jump-threading",
          "--strip",
          "--inferattrs",
          "--dse",
          "--strip-debug-declare",
          "--infer-address-spaces",
          "--loop-deletion",
          "--add-discriminators",
          "--lowerinvoke",
          "--loop-load-elim",
          "--argpromotion",
          "--lcssa",
          "--instsimplify",
          "--loop-unswitch",
          "--aggressive-instcombine",
          "--loop-instsimplify",
          "--loop-idiom",
          "--loop-predication",
          "--called-value-propagation"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+6.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--jump-threading",
      "--strip",
      "--inferattrs",
      "--dse",
      "--strip-debug-declare",
      "--infer-address-spaces",
      "--loop-deletion",
      "--add-discriminators",
      "--lowerinvoke",
      "--loop-load-elim",
      "--argpromotion",
      "--lcssa",
      "--instsimplify",
      "--loop-unswitch",
      "--aggressive-instcombine",
      "--loop-instsimplify",
      "--loop-idiom",
      "--loop-predication",
      "--called-value-propagation"
    ],
    "performance_vs_Oz": "+6.4%"
  }
}
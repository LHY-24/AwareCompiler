{
  "program_id": "linux-v0_10397.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 56,
    "onePredOneSuc": 35,
    "onePredTwoSuc": 20,
    "oneSuccessor": 40,
    "twoPred": 8,
    "twoPredOneSuc": 4,
    "twoEach": 2,
    "twoSuccessor": 26,
    "morePreds": 3,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 95,
    "BeginPhi": 0,
    "BranchCount": 66,
    "returnInt": 34,
    "CriticalCount": 4,
    "NumEdges": 95,
    "const32Bit": 336,
    "const64Bit": 19,
    "numConstZeroes": 158,
    "numConstOnes": 87,
    "UncondBranches": 40,
    "binaryConstArg": 15,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 67,
    "NumAndInst": 5,
    "BlockMid": 11,
    "BlockLow": 84,
    "NumBitCastInst": 25,
    "NumBrInst": 66,
    "NumCallInst": 97,
    "NumGetElementPtrInst": 118,
    "NumICmpInst": 24,
    "NumLShrInst": 2,
    "NumLoadInst": 246,
    "NumMulInst": 0,
    "NumOrInst": 2,
    "NumPHIInst": 0,
    "NumRetInst": 28,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 122,
    "NumSubInst": 2,
    "NumTruncInst": 8,
    "NumXorInst": 4,
    "NumZExtInst": 5,
    "TotalBlocks": 95,
    "TotalInsts": 830,
    "TotalMemInst": 650,
    "TotalFuncs": 59,
    "ArgsPhi": 0,
    "testUnary": 358
  },
  "baseline_oz_instcount": 830,
  "knowledge_base_entry": [
    "--ipsccp",
    "--aggressive-instcombine",
    "--reassociate",
    "--elim-avail-extern",
    "--prune-eh",
    "--licm",
    "--sroa",
    "--simplifycfg",
    "--flattencfg",
    "--load-store-vectorizer"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--lower-expect",
          "--speculative-execution",
          "--mergereturn",
          "--libcalls-shrinkwrap",
          "--instsimplify",
          "--inferattrs",
          "--loop-simplify",
          "--hotcoldsplit",
          "--aggressive-instcombine",
          "--strip-dead-prototypes",
          "--constmerge",
          "--bdce"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--lower-expect",
      "--speculative-execution",
      "--mergereturn",
      "--libcalls-shrinkwrap",
      "--instsimplify",
      "--inferattrs",
      "--loop-simplify",
      "--hotcoldsplit",
      "--aggressive-instcombine",
      "--strip-dead-prototypes",
      "--constmerge",
      "--bdce"
    ],
    "performance_vs_Oz": "+0.2%"
  }
}
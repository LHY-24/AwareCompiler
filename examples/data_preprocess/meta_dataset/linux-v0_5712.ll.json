{
  "program_id": "linux-v0_5712.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 73,
    "onePredOneSuc": 56,
    "onePredTwoSuc": 16,
    "oneSuccessor": 62,
    "twoPred": 15,
    "twoPredOneSuc": 4,
    "twoEach": 6,
    "twoSuccessor": 28,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 108,
    "BeginPhi": 0,
    "BranchCount": 90,
    "returnInt": 56,
    "CriticalCount": 10,
    "NumEdges": 118,
    "const32Bit": 186,
    "const64Bit": 24,
    "numConstZeroes": 70,
    "numConstOnes": 95,
    "UncondBranches": 62,
    "binaryConstArg": 37,
    "NumAShrInst": 0,
    "NumAddInst": 3,
    "NumAllocaInst": 59,
    "NumAndInst": 9,
    "BlockMid": 9,
    "BlockLow": 99,
    "NumBitCastInst": 9,
    "NumBrInst": 90,
    "NumCallInst": 83,
    "NumGetElementPtrInst": 19,
    "NumICmpInst": 42,
    "NumLShrInst": 4,
    "NumLoadInst": 120,
    "NumMulInst": 0,
    "NumOrInst": 6,
    "NumPHIInst": 0,
    "NumRetInst": 18,
    "NumSExtInst": 10,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 88,
    "NumSubInst": 0,
    "NumTruncInst": 13,
    "NumXorInst": 18,
    "NumZExtInst": 27,
    "TotalBlocks": 108,
    "TotalInsts": 620,
    "TotalMemInst": 369,
    "TotalFuncs": 33,
    "ArgsPhi": 0,
    "testUnary": 238
  },
  "baseline_oz_instcount": 624,
  "knowledge_base_entry": [
    "--loweratomic",
    "--aggressive-instcombine",
    "--loop-simplifycfg",
    "--correlated-propagation",
    "--lower-constant-intrinsics",
    "--lower-expect",
    "--sccp",
    "--lower-expect",
    "--early-cse",
    "--slsr",
    "--instcombine",
    "--loop-simplifycfg",
    "--slsr",
    "--early-cse",
    "--early-cse",
    "--mergefunc",
    "--early-cse",
    "--mem2reg",
    "--aggressive-instcombine",
    "--loop-rotate",
    "--sroa",
    "--dse",
    "--loop-instsimplify",
    "--mergefunc",
    "--flattencfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--aggressive-instcombine",
          "--elim-avail-extern",
          "--loop-reroll",
          "--globaldce",
          "--loop-data-prefetch",
          "--slp-vectorizer",
          "--strip-debug-declare",
          "--simple-loop-unswitch",
          "--libcalls-shrinkwrap",
          "--constmerge",
          "--instcombine",
          "--prune-eh",
          "--lower-widenable-condition",
          "--flattencfg"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--aggressive-instcombine",
      "--elim-avail-extern",
      "--loop-reroll",
      "--globaldce",
      "--loop-data-prefetch",
      "--slp-vectorizer",
      "--strip-debug-declare",
      "--simple-loop-unswitch",
      "--libcalls-shrinkwrap",
      "--constmerge",
      "--instcombine",
      "--prune-eh",
      "--lower-widenable-condition",
      "--flattencfg"
    ],
    "performance_vs_Oz": "+2.4%"
  }
}
{
  "program_id": "github-v0_34643.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 10,
    "onePredOneSuc": 8,
    "onePredTwoSuc": 1,
    "oneSuccessor": 10,
    "twoPred": 4,
    "twoPredOneSuc": 1,
    "twoEach": 3,
    "twoSuccessor": 4,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 15,
    "BeginPhi": 0,
    "BranchCount": 14,
    "returnInt": 0,
    "CriticalCount": 1,
    "NumEdges": 18,
    "const32Bit": 39,
    "const64Bit": 18,
    "numConstZeroes": 32,
    "numConstOnes": 16,
    "UncondBranches": 10,
    "binaryConstArg": 6,
    "NumAShrInst": 0,
    "NumAddInst": 6,
    "NumAllocaInst": 9,
    "NumAndInst": 0,
    "BlockMid": 2,
    "BlockLow": 13,
    "NumBitCastInst": 1,
    "NumBrInst": 14,
    "NumCallInst": 6,
    "NumGetElementPtrInst": 22,
    "NumICmpInst": 4,
    "NumLShrInst": 0,
    "NumLoadInst": 30,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 1,
    "NumSExtInst": 1,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 20,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 14,
    "TotalBlocks": 15,
    "TotalInsts": 133,
    "TotalMemInst": 87,
    "TotalFuncs": 5,
    "ArgsPhi": 0,
    "testUnary": 58
  },
  "baseline_oz_instcount": 134,
  "knowledge_base_entry": [
    "--sccp",
    "--bdce",
    "--lower-expect",
    "--adce",
    "--die",
    "--early-cse",
    "--slp-vectorizer"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--prune-eh",
          "--instcombine",
          "--lowerinvoke",
          "--early-cse",
          "--sink",
          "--infer-address-spaces",
          "--forceattrs",
          "--die",
          "--hotcoldsplit",
          "--loop-unroll-and-jam",
          "--load-store-vectorizer"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--prune-eh",
      "--instcombine",
      "--lowerinvoke",
      "--early-cse",
      "--sink",
      "--infer-address-spaces",
      "--forceattrs",
      "--die",
      "--hotcoldsplit",
      "--loop-unroll-and-jam",
      "--load-store-vectorizer"
    ],
    "performance_vs_Oz": "+0.7%"
  }
}
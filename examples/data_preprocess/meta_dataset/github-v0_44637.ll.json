{
  "program_id": "github-v0_44637.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 9,
    "onePredOneSuc": 6,
    "onePredTwoSuc": 3,
    "oneSuccessor": 8,
    "twoPred": 4,
    "twoPredOneSuc": 2,
    "twoEach": 1,
    "twoSuccessor": 6,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 17,
    "BeginPhi": 0,
    "BranchCount": 14,
    "returnInt": 0,
    "CriticalCount": 3,
    "NumEdges": 20,
    "const32Bit": 194,
    "const64Bit": 56,
    "numConstZeroes": 16,
    "numConstOnes": 148,
    "UncondBranches": 8,
    "binaryConstArg": 142,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 125,
    "NumAndInst": 88,
    "BlockMid": 9,
    "BlockLow": 8,
    "NumBitCastInst": 36,
    "NumBrInst": 14,
    "NumCallInst": 12,
    "NumGetElementPtrInst": 1,
    "NumICmpInst": 8,
    "NumLShrInst": 22,
    "NumLoadInst": 208,
    "NumMulInst": 0,
    "NumOrInst": 32,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 0,
    "NumSelectInst": 1,
    "NumShlInst": 21,
    "NumStoreInst": 183,
    "NumSubInst": 0,
    "NumTruncInst": 48,
    "NumXorInst": 0,
    "NumZExtInst": 60,
    "TotalBlocks": 17,
    "TotalInsts": 862,
    "TotalMemInst": 529,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 477
  },
  "baseline_oz_instcount": 862,
  "knowledge_base_entry": [
    "--globaldce",
    "--aggressive-instcombine",
    "--prune-eh",
    "--reassociate",
    "--ipsccp",
    "--instsimplify",
    "--elim-avail-extern",
    "--load-store-vectorizer",
    "--mergefunc",
    "--gvn",
    "--slp-vectorizer",
    "--gvn",
    "--elim-avail-extern",
    "--load-store-vectorizer",
    "--aggressive-instcombine",
    "--mem2reg",
    "--elim-avail-extern",
    "--loop-simplifycfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--attributor",
          "--inject-tli-mappings",
          "--ipsccp",
          "--loop-guard-widening",
          "--aggressive-instcombine",
          "--gvn",
          "--constprop",
          "--strip-dead-prototypes",
          "--loop-unroll",
          "--constmerge",
          "--alignment-from-assumptions",
          "--float2int",
          "--load-store-vectorizer",
          "--memcpyopt",
          "--infer-address-spaces",
          "--argpromotion",
          "--div-rem-pairs",
          "--loop-simplifycfg",
          "--globalopt",
          "--slp-vectorizer",
          "--add-discriminators"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+8.0%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--attributor",
      "--inject-tli-mappings",
      "--ipsccp",
      "--loop-guard-widening",
      "--aggressive-instcombine",
      "--gvn",
      "--constprop",
      "--strip-dead-prototypes",
      "--loop-unroll",
      "--constmerge",
      "--alignment-from-assumptions",
      "--float2int",
      "--load-store-vectorizer",
      "--memcpyopt",
      "--infer-address-spaces",
      "--argpromotion",
      "--div-rem-pairs",
      "--loop-simplifycfg",
      "--globalopt",
      "--slp-vectorizer",
      "--add-discriminators"
    ],
    "performance_vs_Oz": "+8.0%"
  }
}
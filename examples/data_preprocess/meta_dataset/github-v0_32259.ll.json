{
  "program_id": "github-v0_32259.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 3,
    "onePredOneSuc": 3,
    "onePredTwoSuc": 0,
    "oneSuccessor": 3,
    "twoPred": 3,
    "twoPredOneSuc": 0,
    "twoEach": 2,
    "twoSuccessor": 3,
    "morePreds": 0,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 7,
    "BeginPhi": 1,
    "BranchCount": 6,
    "returnInt": 49,
    "CriticalCount": 3,
    "NumEdges": 9,
    "const32Bit": 64,
    "const64Bit": 24,
    "numConstZeroes": 32,
    "numConstOnes": 28,
    "UncondBranches": 3,
    "binaryConstArg": 14,
    "NumAShrInst": 0,
    "NumAddInst": 16,
    "NumAllocaInst": 0,
    "NumAndInst": 3,
    "BlockMid": 3,
    "BlockLow": 5,
    "NumBitCastInst": 0,
    "NumBrInst": 6,
    "NumCallInst": 51,
    "NumGetElementPtrInst": 11,
    "NumICmpInst": 3,
    "NumLShrInst": 0,
    "NumLoadInst": 2,
    "NumMulInst": 13,
    "NumOrInst": 7,
    "NumPHIInst": 1,
    "NumRetInst": 2,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 10,
    "NumSubInst": 0,
    "NumTruncInst": 2,
    "NumXorInst": 1,
    "NumZExtInst": 8,
    "TotalBlocks": 8,
    "TotalInsts": 136,
    "TotalMemInst": 74,
    "TotalFuncs": 9,
    "ArgsPhi": 2,
    "testUnary": 12
  },
  "baseline_oz_instcount": 143,
  "knowledge_base_entry": [
    "--globalopt",
    "--globaldce",
    "--aggressive-instcombine",
    "--mem2reg",
    "--slp-vectorizer",
    "-loop-reduce",
    "--slsr",
    "--simplifycfg",
    "--newgvn",
    "--mldst-motion",
    "--lower-constant-intrinsics",
    "--instsimplify"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--speculative-execution",
          "--coro-cleanup",
          "--callsite-splitting",
          "--hotcoldsplit",
          "-loop-reduce",
          "--slsr",
          "--coro-split",
          "--gvn",
          "--instnamer",
          "--argpromotion",
          "--loop-idiom",
          "--cross-dso-cfi",
          "--slp-vectorizer",
          "--gvn-hoist",
          "--lower-constant-intrinsics",
          "--div-rem-pairs",
          "--constprop",
          "--coro-early",
          "--sccp",
          "--loop-unroll-and-jam",
          "--loop-predication",
          "--ipconstprop",
          "--simplifycfg",
          "--reassociate",
          "--attributor",
          "--lower-expect",
          "--separate-const-offset-from-gep"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+14.0%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--speculative-execution",
      "--coro-cleanup",
      "--callsite-splitting",
      "--hotcoldsplit",
      "-loop-reduce",
      "--slsr",
      "--coro-split",
      "--gvn",
      "--instnamer",
      "--argpromotion",
      "--loop-idiom",
      "--cross-dso-cfi",
      "--slp-vectorizer",
      "--gvn-hoist",
      "--lower-constant-intrinsics",
      "--div-rem-pairs",
      "--constprop",
      "--coro-early",
      "--sccp",
      "--loop-unroll-and-jam",
      "--loop-predication",
      "--ipconstprop",
      "--simplifycfg",
      "--reassociate",
      "--attributor",
      "--lower-expect",
      "--separate-const-offset-from-gep"
    ],
    "performance_vs_Oz": "+14.0%"
  }
}
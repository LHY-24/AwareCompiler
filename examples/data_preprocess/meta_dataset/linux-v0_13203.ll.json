{
  "program_id": "linux-v0_13203.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 40,
    "onePredOneSuc": 25,
    "onePredTwoSuc": 15,
    "oneSuccessor": 34,
    "twoPred": 14,
    "twoPredOneSuc": 8,
    "twoEach": 6,
    "twoSuccessor": 22,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 59,
    "BeginPhi": 0,
    "BranchCount": 56,
    "returnInt": 1,
    "CriticalCount": 14,
    "NumEdges": 78,
    "const32Bit": 185,
    "const64Bit": 27,
    "numConstZeroes": 93,
    "numConstOnes": 54,
    "UncondBranches": 34,
    "binaryConstArg": 34,
    "NumAShrInst": 0,
    "NumAddInst": 5,
    "NumAllocaInst": 32,
    "NumAndInst": 12,
    "BlockMid": 7,
    "BlockLow": 52,
    "NumBitCastInst": 11,
    "NumBrInst": 56,
    "NumCallInst": 16,
    "NumGetElementPtrInst": 73,
    "NumICmpInst": 27,
    "NumLShrInst": 5,
    "NumLoadInst": 144,
    "NumMulInst": 1,
    "NumOrInst": 2,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 12,
    "NumSelectInst": 1,
    "NumShlInst": 0,
    "NumStoreInst": 55,
    "NumSubInst": 2,
    "NumTruncInst": 7,
    "NumXorInst": 8,
    "NumZExtInst": 32,
    "TotalBlocks": 59,
    "TotalInsts": 506,
    "TotalMemInst": 320,
    "TotalFuncs": 12,
    "ArgsPhi": 0,
    "testUnary": 238
  },
  "baseline_oz_instcount": 508,
  "knowledge_base_entry": [
    "--aggressive-instcombine",
    "--inline",
    "--aggressive-instcombine",
    "--globaldce",
    "--mergefunc",
    "--dse",
    "--instcombine",
    "--gvn-hoist",
    "--lower-expect",
    "--aggressive-instcombine",
    "--dce",
    "--lower-constant-intrinsics",
    "--mldst-motion",
    "--simplifycfg",
    "--inline",
    "--ipsccp",
    "--die",
    "--inline",
    "--nary-reassociate",
    "--early-cse",
    "--newgvn",
    "--load-store-vectorizer"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--partially-inline-libcalls",
          "--called-value-propagation",
          "--elim-avail-extern",
          "--cross-dso-cfi",
          "--coro-cleanup",
          "--redundant-dbg-inst-elim",
          "--memcpyopt",
          "--partial-inliner",
          "--float2int",
          "--bdce",
          "--strip",
          "--nary-reassociate",
          "--tailcallelim",
          "--load-store-vectorizer",
          "--globalopt",
          "--simplifycfg",
          "--ipsccp",
          "--sancov",
          "--inferattrs",
          "--aggressive-instcombine",
          "--gvn-hoist",
          "--adce",
          "--loop-fusion"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--partially-inline-libcalls",
      "--called-value-propagation",
      "--elim-avail-extern",
      "--cross-dso-cfi",
      "--coro-cleanup",
      "--redundant-dbg-inst-elim",
      "--memcpyopt",
      "--partial-inliner",
      "--float2int",
      "--bdce",
      "--strip",
      "--nary-reassociate",
      "--tailcallelim",
      "--load-store-vectorizer",
      "--globalopt",
      "--simplifycfg",
      "--ipsccp",
      "--sancov",
      "--inferattrs",
      "--aggressive-instcombine",
      "--gvn-hoist",
      "--adce",
      "--loop-fusion"
    ],
    "performance_vs_Oz": "+0.4%"
  }
}
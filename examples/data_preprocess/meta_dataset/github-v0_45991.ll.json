{
  "program_id": "github-v0_45991.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 6,
    "onePredOneSuc": 6,
    "onePredTwoSuc": 0,
    "oneSuccessor": 6,
    "twoPred": 6,
    "twoPredOneSuc": 0,
    "twoEach": 1,
    "twoSuccessor": 6,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 17,
    "BeginPhi": 0,
    "BranchCount": 12,
    "returnInt": 1,
    "CriticalCount": 6,
    "NumEdges": 18,
    "const32Bit": 13,
    "const64Bit": 1,
    "numConstZeroes": 6,
    "numConstOnes": 10,
    "UncondBranches": 6,
    "binaryConstArg": 3,
    "NumAShrInst": 0,
    "NumAddInst": 4,
    "NumAllocaInst": 9,
    "NumAndInst": 0,
    "BlockMid": 0,
    "BlockLow": 17,
    "NumBitCastInst": 0,
    "NumBrInst": 12,
    "NumCallInst": 8,
    "NumGetElementPtrInst": 1,
    "NumICmpInst": 6,
    "NumLShrInst": 0,
    "NumLoadInst": 29,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 5,
    "NumSExtInst": 1,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 19,
    "NumSubInst": 1,
    "NumTruncInst": 3,
    "NumXorInst": 0,
    "NumZExtInst": 10,
    "TotalBlocks": 17,
    "TotalInsts": 109,
    "TotalMemInst": 66,
    "TotalFuncs": 10,
    "ArgsPhi": 0,
    "testUnary": 52
  },
  "baseline_oz_instcount": 109,
  "knowledge_base_entry": [
    "--die",
    "--aggressive-instcombine",
    "--mergefunc",
    "--flattencfg",
    "--load-store-vectorizer",
    "--loop-simplifycfg",
    "--loop-reroll",
    "--loop-simplifycfg",
    "--loop-reroll",
    "--loop-simplifycfg",
    "--simplifycfg",
    "--licm",
    "--flattencfg",
    "--aggressive-instcombine",
    "--load-store-vectorizer",
    "--gvn-hoist",
    "--globalopt",
    "--instsimplify",
    "--lower-constant-intrinsics",
    "--gvn",
    "--indvars",
    "-loop-reduce",
    "--instcombine",
    "--dse"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--prune-eh",
          "--irce",
          "--loop-rotate",
          "--pgo-memop-opt",
          "--loop-versioning",
          "--barrier",
          "--constmerge",
          "--newgvn",
          "--strip-debug-declare",
          "--load-store-vectorizer",
          "--callsite-splitting",
          "--reassociate",
          "--elim-avail-extern",
          "--mergefunc",
          "--loop-fusion",
          "--aggressive-instcombine",
          "--loop-reroll",
          "--sroa",
          "--slp-vectorizer",
          "--infer-address-spaces",
          "--called-value-propagation",
          "--coro-elide",
          "--strip-dead-prototypes",
          "--loop-unswitch",
          "--early-cse",
          "--partially-inline-libcalls"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--prune-eh",
      "--irce",
      "--loop-rotate",
      "--pgo-memop-opt",
      "--loop-versioning",
      "--barrier",
      "--constmerge",
      "--newgvn",
      "--strip-debug-declare",
      "--load-store-vectorizer",
      "--callsite-splitting",
      "--reassociate",
      "--elim-avail-extern",
      "--mergefunc",
      "--loop-fusion",
      "--aggressive-instcombine",
      "--loop-reroll",
      "--sroa",
      "--slp-vectorizer",
      "--infer-address-spaces",
      "--called-value-propagation",
      "--coro-elide",
      "--strip-dead-prototypes",
      "--loop-unswitch",
      "--early-cse",
      "--partially-inline-libcalls"
    ],
    "performance_vs_Oz": "+2.8%"
  }
}
{
  "program_id": "github-v0_39843.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 0,
    "onePredOneSuc": 0,
    "onePredTwoSuc": 0,
    "oneSuccessor": 0,
    "twoPred": 0,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 0,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 8,
    "BeginPhi": 0,
    "BranchCount": 0,
    "returnInt": 0,
    "CriticalCount": 0,
    "NumEdges": 0,
    "const32Bit": 8,
    "const64Bit": 0,
    "numConstZeroes": 3,
    "numConstOnes": 5,
    "UncondBranches": 0,
    "binaryConstArg": 0,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 5,
    "NumAndInst": 0,
    "BlockMid": 0,
    "BlockLow": 8,
    "NumBitCastInst": 0,
    "NumBrInst": 0,
    "NumCallInst": 5,
    "NumGetElementPtrInst": 0,
    "NumICmpInst": 0,
    "NumLShrInst": 0,
    "NumLoadInst": 5,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 8,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 5,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 8,
    "TotalInsts": 28,
    "TotalMemInst": 20,
    "TotalFuncs": 9,
    "ArgsPhi": 0,
    "testUnary": 10
  },
  "baseline_oz_instcount": 28,
  "knowledge_base_entry": [
    "--lowerswitch",
    "--jump-threading",
    "--loop-reroll",
    "--early-cse-memssa",
    "--aggressive-instcombine",
    "--gvn",
    "--mergefunc",
    "--inline",
    "--die",
    "--elim-avail-extern",
    "--bdce",
    "--slp-vectorizer",
    "--mldst-motion",
    "--gvn",
    "--mergefunc",
    "--elim-avail-extern",
    "--lower-expect",
    "--loop-simplifycfg",
    "--dce",
    "--mem2reg",
    "--gvn-hoist",
    "--prune-eh",
    "--inline"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--strip-nondebug",
          "--lower-constant-intrinsics",
          "--mergefunc",
          "--pgo-memop-opt",
          "--coro-split",
          "--reg2mem",
          "--loop-simplifycfg",
          "--reassociate",
          "--strip-debug-declare",
          "--loop-instsimplify",
          "--called-value-propagation",
          "--post-inline-ee-instrument",
          "--loop-unroll",
          "--libcalls-shrinkwrap",
          "--lowerswitch",
          "--rpo-functionattrs",
          "--argpromotion",
          "--scalarizer",
          "--barrier",
          "--guard-widening",
          "--newgvn",
          "--loop-unroll-and-jam",
          "--infer-address-spaces",
          "--memcpyopt",
          "--loop-fusion",
          "--instsimplify",
          "--sancov"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+21.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--strip-nondebug",
      "--lower-constant-intrinsics",
      "--mergefunc",
      "--pgo-memop-opt",
      "--coro-split",
      "--reg2mem",
      "--loop-simplifycfg",
      "--reassociate",
      "--strip-debug-declare",
      "--loop-instsimplify",
      "--called-value-propagation",
      "--post-inline-ee-instrument",
      "--loop-unroll",
      "--libcalls-shrinkwrap",
      "--lowerswitch",
      "--rpo-functionattrs",
      "--argpromotion",
      "--scalarizer",
      "--barrier",
      "--guard-widening",
      "--newgvn",
      "--loop-unroll-and-jam",
      "--infer-address-spaces",
      "--memcpyopt",
      "--loop-fusion",
      "--instsimplify",
      "--sancov"
    ],
    "performance_vs_Oz": "+21.4%"
  }
}
{
  "program_id": "linux-v0_10392.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 47,
    "onePredOneSuc": 37,
    "onePredTwoSuc": 7,
    "oneSuccessor": 40,
    "twoPred": 8,
    "twoPredOneSuc": 0,
    "twoEach": 3,
    "twoSuccessor": 16,
    "morePreds": 4,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 83,
    "BeginPhi": 0,
    "BranchCount": 56,
    "returnInt": 23,
    "CriticalCount": 3,
    "NumEdges": 85,
    "const32Bit": 300,
    "const64Bit": 15,
    "numConstZeroes": 141,
    "numConstOnes": 100,
    "UncondBranches": 40,
    "binaryConstArg": 21,
    "NumAShrInst": 2,
    "NumAddInst": 6,
    "NumAllocaInst": 73,
    "NumAndInst": 3,
    "BlockMid": 12,
    "BlockLow": 71,
    "NumBitCastInst": 39,
    "NumBrInst": 56,
    "NumCallInst": 60,
    "NumGetElementPtrInst": 98,
    "NumICmpInst": 15,
    "NumLShrInst": 1,
    "NumLoadInst": 229,
    "NumMulInst": 1,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 24,
    "NumSExtInst": 10,
    "NumSelectInst": 0,
    "NumShlInst": 3,
    "NumStoreInst": 125,
    "NumSubInst": 2,
    "NumTruncInst": 9,
    "NumXorInst": 2,
    "NumZExtInst": 8,
    "TotalBlocks": 83,
    "TotalInsts": 776,
    "TotalMemInst": 585,
    "TotalFuncs": 51,
    "ArgsPhi": 0,
    "testUnary": 372
  },
  "baseline_oz_instcount": 775,
  "knowledge_base_entry": [
    "--strip-nondebug",
    "--mergefunc",
    "--aggressive-instcombine",
    "--adce",
    "--mergefunc",
    "--dse",
    "--mldst-motion",
    "--loop-simplifycfg",
    "--early-cse-memssa",
    "--dce",
    "--lower-expect",
    "--ipsccp"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--rewrite-statepoints-for-gc",
          "--aggressive-instcombine",
          "--coro-split",
          "--canonicalize-aliases",
          "--loop-idiom",
          "--barrier",
          "--ipsccp",
          "--infer-address-spaces",
          "--loop-distribute",
          "--constprop",
          "--irce",
          "--loop-versioning",
          "--lower-matrix-intrinsics",
          "--strip",
          "--constmerge",
          "--globalsplit",
          "--mergereturn",
          "--speculative-execution"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--rewrite-statepoints-for-gc",
      "--aggressive-instcombine",
      "--coro-split",
      "--canonicalize-aliases",
      "--loop-idiom",
      "--barrier",
      "--ipsccp",
      "--infer-address-spaces",
      "--loop-distribute",
      "--constprop",
      "--irce",
      "--loop-versioning",
      "--lower-matrix-intrinsics",
      "--strip",
      "--constmerge",
      "--globalsplit",
      "--mergereturn",
      "--speculative-execution"
    ],
    "performance_vs_Oz": "+0.3%"
  }
}
{
  "program_id": "github-v0_345.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 92,
    "onePredOneSuc": 28,
    "onePredTwoSuc": 26,
    "oneSuccessor": 38,
    "twoPred": 16,
    "twoPredOneSuc": 0,
    "twoEach": 14,
    "twoSuccessor": 43,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 122,
    "BeginPhi": 0,
    "BranchCount": 81,
    "returnInt": 73,
    "CriticalCount": 6,
    "NumEdges": 124,
    "const32Bit": 324,
    "const64Bit": 83,
    "numConstZeroes": 238,
    "numConstOnes": 107,
    "UncondBranches": 38,
    "binaryConstArg": 30,
    "NumAShrInst": 0,
    "NumAddInst": 14,
    "NumAllocaInst": 68,
    "NumAndInst": 6,
    "BlockMid": 14,
    "BlockLow": 108,
    "NumBitCastInst": 0,
    "NumBrInst": 81,
    "NumCallInst": 149,
    "NumGetElementPtrInst": 142,
    "NumICmpInst": 44,
    "NumLShrInst": 0,
    "NumLoadInst": 205,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 14,
    "NumSExtInst": 0,
    "NumSelectInst": 1,
    "NumShlInst": 0,
    "NumStoreInst": 83,
    "NumSubInst": 11,
    "NumTruncInst": 6,
    "NumXorInst": 1,
    "NumZExtInst": 46,
    "TotalBlocks": 122,
    "TotalInsts": 899,
    "TotalMemInst": 647,
    "TotalFuncs": 27,
    "ArgsPhi": 0,
    "testUnary": 325
  },
  "baseline_oz_instcount": 899,
  "knowledge_base_entry": [
    "--flattencfg",
    "--gvn-hoist",
    "--loop-rotate",
    "--elim-avail-extern",
    "--aggressive-instcombine",
    "--loop-simplifycfg",
    "--loop-reroll",
    "--newgvn",
    "--flattencfg",
    "--adce",
    "--jump-threading",
    "--early-cse-memssa",
    "--reassociate",
    "--slsr",
    "--indvars"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-fusion",
          "--loop-idiom",
          "--lower-guard-intrinsic",
          "--slp-vectorizer",
          "--sancov",
          "--insert-gcov-profiling",
          "--consthoist",
          "--hotcoldsplit",
          "--coro-early",
          "--dce",
          "--infer-address-spaces",
          "--ipsccp",
          "--deadargelim",
          "--aggressive-instcombine"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-fusion",
      "--loop-idiom",
      "--lower-guard-intrinsic",
      "--slp-vectorizer",
      "--sancov",
      "--insert-gcov-profiling",
      "--consthoist",
      "--hotcoldsplit",
      "--coro-early",
      "--dce",
      "--infer-address-spaces",
      "--ipsccp",
      "--deadargelim",
      "--aggressive-instcombine"
    ],
    "performance_vs_Oz": "+0.3%"
  }
}
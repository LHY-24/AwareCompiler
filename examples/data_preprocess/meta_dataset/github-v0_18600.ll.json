{
  "program_id": "github-v0_18600.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 14,
    "onePredOneSuc": 9,
    "onePredTwoSuc": 3,
    "oneSuccessor": 12,
    "twoPred": 6,
    "twoPredOneSuc": 3,
    "twoEach": 2,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 23,
    "BeginPhi": 0,
    "BranchCount": 19,
    "returnInt": 4,
    "CriticalCount": 1,
    "NumEdges": 26,
    "const32Bit": 34,
    "const64Bit": 31,
    "numConstZeroes": 38,
    "numConstOnes": 20,
    "UncondBranches": 12,
    "binaryConstArg": 9,
    "NumAShrInst": 0,
    "NumAddInst": 7,
    "NumAllocaInst": 11,
    "NumAndInst": 3,
    "BlockMid": 3,
    "BlockLow": 20,
    "NumBitCastInst": 0,
    "NumBrInst": 19,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 19,
    "NumICmpInst": 7,
    "NumLShrInst": 0,
    "NumLoadInst": 27,
    "NumMulInst": 2,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 16,
    "NumSubInst": 0,
    "NumTruncInst": 3,
    "NumXorInst": 0,
    "NumZExtInst": 2,
    "TotalBlocks": 23,
    "TotalInsts": 130,
    "TotalMemInst": 80,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 46
  },
  "baseline_oz_instcount": 130,
  "knowledge_base_entry": [
    "--mem2reg",
    "--aggressive-instcombine",
    "--bdce",
    "--newgvn",
    "--loop-fusion",
    "--nary-reassociate",
    "--inline",
    "--prune-eh",
    "--jump-threading",
    "--slp-vectorizer",
    "--lower-expect"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--coro-elide",
          "--instsimplify",
          "--partial-inliner",
          "--scalarizer",
          "-loop-reduce",
          "--adce",
          "--mldst-motion",
          "--post-inline-ee-instrument",
          "--licm",
          "--loop-fusion",
          "--infer-address-spaces",
          "--functionattrs",
          "--bdce",
          "--rewrite-statepoints-for-gc",
          "--lower-constant-intrinsics",
          "--loop-unroll",
          "--gvn-hoist",
          "--loop-interchange",
          "--mergefunc",
          "--aggressive-instcombine",
          "--argpromotion",
          "--inferattrs",
          "--gvn",
          "--strip-nondebug",
          "--simplifycfg",
          "--instcombine",
          "--inline",
          "--always-inline",
          "--tailcallelim",
          "--loop-versioning-licm"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--coro-elide",
      "--instsimplify",
      "--partial-inliner",
      "--scalarizer",
      "-loop-reduce",
      "--adce",
      "--mldst-motion",
      "--post-inline-ee-instrument",
      "--licm",
      "--loop-fusion",
      "--infer-address-spaces",
      "--functionattrs",
      "--bdce",
      "--rewrite-statepoints-for-gc",
      "--lower-constant-intrinsics",
      "--loop-unroll",
      "--gvn-hoist",
      "--loop-interchange",
      "--mergefunc",
      "--aggressive-instcombine",
      "--argpromotion",
      "--inferattrs",
      "--gvn",
      "--strip-nondebug",
      "--simplifycfg",
      "--instcombine",
      "--inline",
      "--always-inline",
      "--tailcallelim",
      "--loop-versioning-licm"
    ],
    "performance_vs_Oz": "+3.1%"
  }
}
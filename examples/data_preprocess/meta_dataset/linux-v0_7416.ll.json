{
  "program_id": "linux-v0_7416.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 52,
    "onePredOneSuc": 41,
    "onePredTwoSuc": 8,
    "oneSuccessor": 46,
    "twoPred": 11,
    "twoPredOneSuc": 2,
    "twoEach": 4,
    "twoSuccessor": 18,
    "morePreds": 4,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 92,
    "BeginPhi": 1,
    "BranchCount": 64,
    "returnInt": 23,
    "CriticalCount": 2,
    "NumEdges": 95,
    "const32Bit": 295,
    "const64Bit": 25,
    "numConstZeroes": 143,
    "numConstOnes": 108,
    "UncondBranches": 46,
    "binaryConstArg": 17,
    "NumAShrInst": 1,
    "NumAddInst": 4,
    "NumAllocaInst": 77,
    "NumAndInst": 3,
    "BlockMid": 12,
    "BlockLow": 81,
    "NumBitCastInst": 40,
    "NumBrInst": 64,
    "NumCallInst": 60,
    "NumGetElementPtrInst": 96,
    "NumICmpInst": 16,
    "NumLShrInst": 0,
    "NumLoadInst": 218,
    "NumMulInst": 1,
    "NumOrInst": 1,
    "NumPHIInst": 1,
    "NumRetInst": 26,
    "NumSExtInst": 4,
    "NumSelectInst": 0,
    "NumShlInst": 3,
    "NumStoreInst": 131,
    "NumSubInst": 1,
    "NumTruncInst": 15,
    "NumXorInst": 2,
    "NumZExtInst": 15,
    "TotalBlocks": 93,
    "TotalInsts": 788,
    "TotalMemInst": 582,
    "TotalFuncs": 49,
    "ArgsPhi": 2,
    "testUnary": 373
  },
  "baseline_oz_instcount": 787,
  "knowledge_base_entry": [
    "--slp-vectorizer",
    "--gvn",
    "--aggressive-instcombine",
    "--gvn",
    "--newgvn",
    "--ipsccp",
    "--flattencfg",
    "--load-store-vectorizer",
    "--loop-instsimplify",
    "--mergefunc"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--instsimplify",
          "--lower-guard-intrinsic",
          "--dse",
          "--loop-versioning",
          "--ipconstprop",
          "--loop-load-elim",
          "--loop-idiom",
          "--jump-threading",
          "--aggressive-instcombine",
          "--partial-inliner",
          "--sancov",
          "--die",
          "--pgo-memop-opt",
          "--infer-address-spaces",
          "--post-inline-ee-instrument",
          "--consthoist",
          "--ipsccp",
          "--always-inline",
          "--strip-dead-prototypes",
          "--tailcallelim",
          "--instnamer",
          "--loweratomic",
          "--callsite-splitting",
          "--inject-tli-mappings",
          "--adce"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--instsimplify",
      "--lower-guard-intrinsic",
      "--dse",
      "--loop-versioning",
      "--ipconstprop",
      "--loop-load-elim",
      "--loop-idiom",
      "--jump-threading",
      "--aggressive-instcombine",
      "--partial-inliner",
      "--sancov",
      "--die",
      "--pgo-memop-opt",
      "--infer-address-spaces",
      "--post-inline-ee-instrument",
      "--consthoist",
      "--ipsccp",
      "--always-inline",
      "--strip-dead-prototypes",
      "--tailcallelim",
      "--instnamer",
      "--loweratomic",
      "--callsite-splitting",
      "--inject-tli-mappings",
      "--adce"
    ],
    "performance_vs_Oz": "+0.9%"
  }
}
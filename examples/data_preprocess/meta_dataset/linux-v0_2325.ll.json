{
  "program_id": "linux-v0_2325.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 38,
    "onePredOneSuc": 27,
    "onePredTwoSuc": 11,
    "oneSuccessor": 34,
    "twoPred": 17,
    "twoPredOneSuc": 6,
    "twoEach": 4,
    "twoSuccessor": 24,
    "morePreds": 3,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 77,
    "BeginPhi": 1,
    "BranchCount": 58,
    "returnInt": 16,
    "CriticalCount": 16,
    "NumEdges": 82,
    "const32Bit": 166,
    "const64Bit": 30,
    "numConstZeroes": 56,
    "numConstOnes": 113,
    "UncondBranches": 34,
    "binaryConstArg": 27,
    "NumAShrInst": 2,
    "NumAddInst": 2,
    "NumAllocaInst": 78,
    "NumAndInst": 9,
    "BlockMid": 13,
    "BlockLow": 65,
    "NumBitCastInst": 3,
    "NumBrInst": 58,
    "NumCallInst": 46,
    "NumGetElementPtrInst": 36,
    "NumICmpInst": 22,
    "NumLShrInst": 1,
    "NumLoadInst": 150,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 1,
    "NumRetInst": 20,
    "NumSExtInst": 9,
    "NumSelectInst": 1,
    "NumShlInst": 2,
    "NumStoreInst": 103,
    "NumSubInst": 0,
    "NumTruncInst": 15,
    "NumXorInst": 15,
    "NumZExtInst": 11,
    "TotalBlocks": 78,
    "TotalInsts": 603,
    "TotalMemInst": 413,
    "TotalFuncs": 30,
    "ArgsPhi": 2,
    "testUnary": 284
  },
  "baseline_oz_instcount": 589,
  "knowledge_base_entry": [
    "--inferattrs",
    "--gvn",
    "--memcpyopt",
    "--early-cse-memssa",
    "--dse",
    "--elim-avail-extern",
    "--reassociate",
    "--bdce",
    "--aggressive-instcombine",
    "--simplifycfg",
    "--load-store-vectorizer",
    "--early-cse-memssa",
    "--loop-instsimplify",
    "--globalopt",
    "--aggressive-instcombine",
    "--globaldce",
    "--mergefunc",
    "--early-cse"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--lcssa",
          "--loweratomic",
          "-loop-reduce",
          "--rpo-functionattrs",
          "--ipsccp",
          "--loop-data-prefetch",
          "--loop-unswitch",
          "--alignment-from-assumptions",
          "--globaldce",
          "--inline"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--lcssa",
      "--loweratomic",
      "-loop-reduce",
      "--rpo-functionattrs",
      "--ipsccp",
      "--loop-data-prefetch",
      "--loop-unswitch",
      "--alignment-from-assumptions",
      "--globaldce",
      "--inline"
    ],
    "performance_vs_Oz": "+0.8%"
  }
}
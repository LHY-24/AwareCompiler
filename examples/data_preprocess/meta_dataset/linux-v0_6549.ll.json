{
  "program_id": "linux-v0_6549.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 53,
    "onePredOneSuc": 37,
    "onePredTwoSuc": 14,
    "oneSuccessor": 47,
    "twoPred": 12,
    "twoPredOneSuc": 5,
    "twoEach": 4,
    "twoSuccessor": 22,
    "morePreds": 7,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 89,
    "BeginPhi": 1,
    "BranchCount": 69,
    "returnInt": 41,
    "CriticalCount": 8,
    "NumEdges": 105,
    "const32Bit": 255,
    "const64Bit": 56,
    "numConstZeroes": 147,
    "numConstOnes": 95,
    "UncondBranches": 47,
    "binaryConstArg": 19,
    "NumAShrInst": 0,
    "NumAddInst": 7,
    "NumAllocaInst": 65,
    "NumAndInst": 5,
    "BlockMid": 14,
    "BlockLow": 76,
    "NumBitCastInst": 30,
    "NumBrInst": 69,
    "NumCallInst": 65,
    "NumGetElementPtrInst": 91,
    "NumICmpInst": 24,
    "NumLShrInst": 1,
    "NumLoadInst": 199,
    "NumMulInst": 8,
    "NumOrInst": 0,
    "NumPHIInst": 1,
    "NumRetInst": 18,
    "NumSExtInst": 19,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 90,
    "NumSubInst": 2,
    "NumTruncInst": 2,
    "NumXorInst": 4,
    "NumZExtInst": 4,
    "TotalBlocks": 90,
    "TotalInsts": 709,
    "TotalMemInst": 510,
    "TotalFuncs": 26,
    "ArgsPhi": 2,
    "testUnary": 320
  },
  "baseline_oz_instcount": 709,
  "knowledge_base_entry": [
    "--loop-deletion",
    "--early-cse-memssa",
    "--aggressive-instcombine",
    "--flattencfg",
    "--mergefunc",
    "--sroa",
    "--loop-instsimplify",
    "--gvn",
    "--dce",
    "--sccp"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--functionattrs",
          "--instnamer",
          "--strip",
          "--inline",
          "--mergereturn",
          "--inferattrs",
          "--post-inline-ee-instrument",
          "--inject-tli-mappings",
          "--insert-gcov-profiling",
          "--loop-versioning-licm",
          "--adce",
          "--loop-load-elim",
          "--loweratomic",
          "--ipsccp",
          "--strip-nondebug",
          "--loop-distribute",
          "--called-value-propagation",
          "--sancov",
          "--loop-idiom",
          "--coro-split",
          "--lcssa",
          "--load-store-vectorizer",
          "--cross-dso-cfi",
          "--mergefunc",
          "--consthoist",
          "--simple-loop-unswitch",
          "--loop-simplifycfg",
          "--canonicalize-aliases",
          "--simplifycfg"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--functionattrs",
      "--instnamer",
      "--strip",
      "--inline",
      "--mergereturn",
      "--inferattrs",
      "--post-inline-ee-instrument",
      "--inject-tli-mappings",
      "--insert-gcov-profiling",
      "--loop-versioning-licm",
      "--adce",
      "--loop-load-elim",
      "--loweratomic",
      "--ipsccp",
      "--strip-nondebug",
      "--loop-distribute",
      "--called-value-propagation",
      "--sancov",
      "--loop-idiom",
      "--coro-split",
      "--lcssa",
      "--load-store-vectorizer",
      "--cross-dso-cfi",
      "--mergefunc",
      "--consthoist",
      "--simple-loop-unswitch",
      "--loop-simplifycfg",
      "--canonicalize-aliases",
      "--simplifycfg"
    ],
    "performance_vs_Oz": "+0.7%"
  }
}
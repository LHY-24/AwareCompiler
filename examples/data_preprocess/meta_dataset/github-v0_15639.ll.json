{
  "program_id": "github-v0_15639.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 44,
    "onePredOneSuc": 30,
    "onePredTwoSuc": 14,
    "oneSuccessor": 35,
    "twoPred": 11,
    "twoPredOneSuc": 3,
    "twoEach": 3,
    "twoSuccessor": 23,
    "morePreds": 4,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 69,
    "BeginPhi": 0,
    "BranchCount": 58,
    "returnInt": 56,
    "CriticalCount": 7,
    "NumEdges": 81,
    "const32Bit": 86,
    "const64Bit": 10,
    "numConstZeroes": 30,
    "numConstOnes": 43,
    "UncondBranches": 35,
    "binaryConstArg": 3,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 32,
    "NumAndInst": 0,
    "BlockMid": 6,
    "BlockLow": 63,
    "NumBitCastInst": 0,
    "NumBrInst": 58,
    "NumCallInst": 94,
    "NumGetElementPtrInst": 2,
    "NumICmpInst": 23,
    "NumLShrInst": 0,
    "NumLoadInst": 129,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 10,
    "NumSExtInst": 5,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 43,
    "NumSubInst": 1,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 69,
    "TotalInsts": 402,
    "TotalMemInst": 300,
    "TotalFuncs": 54,
    "ArgsPhi": 0,
    "testUnary": 168
  },
  "baseline_oz_instcount": 404,
  "knowledge_base_entry": [
    "--loop-vectorize",
    "--early-cse-memssa",
    "--instcombine",
    "--load-store-vectorizer",
    "--reassociate",
    "--loop-instsimplify",
    "--sccp",
    "--lower-constant-intrinsics",
    "--loop-reroll",
    "--gvn",
    "--prune-eh",
    "--aggressive-instcombine"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-instsimplify",
          "--loop-sink",
          "-loop-reduce",
          "--instcombine",
          "--lowerinvoke",
          "--deadargelim",
          "--ee-instrument",
          "--coro-split",
          "--irce",
          "--coro-elide",
          "--loop-load-elim",
          "--nary-reassociate",
          "--add-discriminators",
          "--canonicalize-aliases",
          "--functionattrs",
          "--gvn",
          "--globalsplit",
          "--loop-data-prefetch",
          "--partial-inliner",
          "--called-value-propagation",
          "--float2int",
          "--memcpyopt",
          "--loop-simplifycfg",
          "--separate-const-offset-from-gep",
          "--lower-expect",
          "--inline",
          "--lowerswitch"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-instsimplify",
      "--loop-sink",
      "-loop-reduce",
      "--instcombine",
      "--lowerinvoke",
      "--deadargelim",
      "--ee-instrument",
      "--coro-split",
      "--irce",
      "--coro-elide",
      "--loop-load-elim",
      "--nary-reassociate",
      "--add-discriminators",
      "--canonicalize-aliases",
      "--functionattrs",
      "--gvn",
      "--globalsplit",
      "--loop-data-prefetch",
      "--partial-inliner",
      "--called-value-propagation",
      "--float2int",
      "--memcpyopt",
      "--loop-simplifycfg",
      "--separate-const-offset-from-gep",
      "--lower-expect",
      "--inline",
      "--lowerswitch"
    ],
    "performance_vs_Oz": "+0.5%"
  }
}
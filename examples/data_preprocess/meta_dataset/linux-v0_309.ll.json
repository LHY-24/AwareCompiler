{
  "program_id": "linux-v0_309.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 40,
    "onePredOneSuc": 28,
    "onePredTwoSuc": 10,
    "oneSuccessor": 40,
    "twoPred": 29,
    "twoPredOneSuc": 10,
    "twoEach": 6,
    "twoSuccessor": 29,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 87,
    "BeginPhi": 0,
    "BranchCount": 69,
    "returnInt": 12,
    "CriticalCount": 19,
    "NumEdges": 98,
    "const32Bit": 220,
    "const64Bit": 73,
    "numConstZeroes": 136,
    "numConstOnes": 77,
    "UncondBranches": 40,
    "binaryConstArg": 21,
    "NumAShrInst": 0,
    "NumAddInst": 7,
    "NumAllocaInst": 66,
    "NumAndInst": 7,
    "BlockMid": 20,
    "BlockLow": 67,
    "NumBitCastInst": 3,
    "NumBrInst": 69,
    "NumCallInst": 53,
    "NumGetElementPtrInst": 98,
    "NumICmpInst": 29,
    "NumLShrInst": 0,
    "NumLoadInst": 196,
    "NumMulInst": 3,
    "NumOrInst": 7,
    "NumPHIInst": 0,
    "NumRetInst": 18,
    "NumSExtInst": 6,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 99,
    "NumSubInst": 3,
    "NumTruncInst": 22,
    "NumXorInst": 0,
    "NumZExtInst": 23,
    "TotalBlocks": 87,
    "TotalInsts": 714,
    "TotalMemInst": 512,
    "TotalFuncs": 19,
    "ArgsPhi": 0,
    "testUnary": 319
  },
  "baseline_oz_instcount": 714,
  "knowledge_base_entry": [
    "--instsimplify",
    "--instcombine",
    "--gvn",
    "--correlated-propagation",
    "--gvn-hoist",
    "--aggressive-instcombine",
    "--flattencfg",
    "--loop-simplifycfg",
    "--dse",
    "--dse",
    "--load-store-vectorizer",
    "--loop-reroll",
    "--mergefunc",
    "--lower-expect"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--div-rem-pairs",
          "--aggressive-instcombine",
          "--dse",
          "--sccp",
          "--coro-elide",
          "--sancov",
          "--infer-address-spaces",
          "--mldst-motion",
          "--loop-data-prefetch",
          "--instsimplify",
          "--called-value-propagation"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--div-rem-pairs",
      "--aggressive-instcombine",
      "--dse",
      "--sccp",
      "--coro-elide",
      "--sancov",
      "--infer-address-spaces",
      "--mldst-motion",
      "--loop-data-prefetch",
      "--instsimplify",
      "--called-value-propagation"
    ],
    "performance_vs_Oz": "+2.5%"
  }
}
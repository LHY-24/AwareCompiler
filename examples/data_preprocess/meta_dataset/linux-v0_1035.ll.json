{
  "program_id": "linux-v0_1035.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 4,
    "onePred": 81,
    "onePredOneSuc": 58,
    "onePredTwoSuc": 21,
    "oneSuccessor": 73,
    "twoPred": 29,
    "twoPredOneSuc": 12,
    "twoEach": 13,
    "twoSuccessor": 41,
    "morePreds": 5,
    "BB03Phi": 4,
    "BBHiPhi": 0,
    "BBNoPhi": 131,
    "BeginPhi": 4,
    "BranchCount": 114,
    "returnInt": 21,
    "CriticalCount": 20,
    "NumEdges": 158,
    "const32Bit": 334,
    "const64Bit": 29,
    "numConstZeroes": 194,
    "numConstOnes": 113,
    "UncondBranches": 73,
    "binaryConstArg": 21,
    "NumAShrInst": 0,
    "NumAddInst": 5,
    "NumAllocaInst": 71,
    "NumAndInst": 6,
    "BlockMid": 12,
    "BlockLow": 123,
    "NumBitCastInst": 25,
    "NumBrInst": 114,
    "NumCallInst": 60,
    "NumGetElementPtrInst": 117,
    "NumICmpInst": 39,
    "NumLShrInst": 0,
    "NumLoadInst": 213,
    "NumMulInst": 0,
    "NumOrInst": 3,
    "NumPHIInst": 4,
    "NumRetInst": 18,
    "NumSExtInst": 26,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 104,
    "NumSubInst": 2,
    "NumTruncInst": 7,
    "NumXorInst": 8,
    "NumZExtInst": 12,
    "TotalBlocks": 135,
    "TotalInsts": 846,
    "TotalMemInst": 565,
    "TotalFuncs": 36,
    "ArgsPhi": 10,
    "testUnary": 363
  },
  "baseline_oz_instcount": 839,
  "knowledge_base_entry": [
    "--lower-constant-intrinsics",
    "--dse",
    "--die",
    "--aggressive-instcombine",
    "--elim-avail-extern",
    "--lower-expect",
    "--aggressive-instcombine",
    "--sroa",
    "--gvn",
    "--ipsccp",
    "--instsimplify",
    "--slp-vectorizer",
    "--instcombine",
    "--early-cse-memssa",
    "--inline",
    "--reassociate",
    "--sroa",
    "--loop-rotate",
    "--instcombine",
    "--newgvn",
    "--reassociate",
    "--lower-expect"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--coro-split",
          "--ee-instrument",
          "--name-anon-globals",
          "--prune-eh",
          "--instsimplify",
          "--loop-data-prefetch",
          "--globalsplit",
          "--die",
          "--loop-deletion",
          "--aggressive-instcombine",
          "--early-cse-memssa",
          "--libcalls-shrinkwrap",
          "--constmerge",
          "--infer-address-spaces",
          "--loop-unroll-and-jam",
          "--lowerinvoke",
          "--inline",
          "--indvars",
          "--tailcallelim",
          "--gvn",
          "--flattencfg",
          "--globalopt",
          "--loop-distribute",
          "--mergefunc"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--coro-split",
      "--ee-instrument",
      "--name-anon-globals",
      "--prune-eh",
      "--instsimplify",
      "--loop-data-prefetch",
      "--globalsplit",
      "--die",
      "--loop-deletion",
      "--aggressive-instcombine",
      "--early-cse-memssa",
      "--libcalls-shrinkwrap",
      "--constmerge",
      "--infer-address-spaces",
      "--loop-unroll-and-jam",
      "--lowerinvoke",
      "--inline",
      "--indvars",
      "--tailcallelim",
      "--gvn",
      "--flattencfg",
      "--globalopt",
      "--loop-distribute",
      "--mergefunc"
    ],
    "performance_vs_Oz": "+0.2%"
  }
}
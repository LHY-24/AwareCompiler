{
  "program_id": "github-v0_18626.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 17,
    "onePredOneSuc": 11,
    "onePredTwoSuc": 4,
    "oneSuccessor": 15,
    "twoPred": 7,
    "twoPredOneSuc": 4,
    "twoEach": 2,
    "twoSuccessor": 8,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 27,
    "BeginPhi": 0,
    "BranchCount": 23,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 31,
    "const32Bit": 48,
    "const64Bit": 151,
    "numConstZeroes": 139,
    "numConstOnes": 40,
    "UncondBranches": 15,
    "binaryConstArg": 13,
    "NumAShrInst": 0,
    "NumAddInst": 7,
    "NumAllocaInst": 18,
    "NumAndInst": 4,
    "BlockMid": 8,
    "BlockLow": 19,
    "NumBitCastInst": 40,
    "NumBrInst": 23,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 100,
    "NumICmpInst": 8,
    "NumLShrInst": 4,
    "NumLoadInst": 58,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 46,
    "NumSubInst": 1,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 1,
    "TotalBlocks": 27,
    "TotalInsts": 326,
    "TotalMemInst": 229,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 122
  },
  "baseline_oz_instcount": 326,
  "knowledge_base_entry": [
    "--inline",
    "--early-cse-memssa",
    "--slp-vectorizer",
    "--mem2reg",
    "--aggressive-instcombine",
    "--inline",
    "--newgvn",
    "--nary-reassociate",
    "--indvars",
    "--slsr",
    "--load-store-vectorizer",
    "--licm",
    "--ipsccp",
    "--globalopt",
    "--lower-expect"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--guard-widening",
          "--irce",
          "--globalsplit",
          "--adce",
          "--loop-fusion",
          "--slp-vectorizer",
          "--sancov",
          "--loop-simplify",
          "--slsr",
          "--coro-cleanup",
          "--aggressive-instcombine",
          "--argpromotion",
          "--dce",
          "--constmerge",
          "--loop-unroll",
          "--inline",
          "--loop-guard-widening",
          "--ipsccp",
          "--partially-inline-libcalls",
          "--coro-elide",
          "--loop-instsimplify",
          "--loop-idiom",
          "--gvn",
          "--constprop",
          "--indvars",
          "--break-crit-edges",
          "--strip-dead-prototypes",
          "--alignment-from-assumptions",
          "--mem2reg"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--guard-widening",
      "--irce",
      "--globalsplit",
      "--adce",
      "--loop-fusion",
      "--slp-vectorizer",
      "--sancov",
      "--loop-simplify",
      "--slsr",
      "--coro-cleanup",
      "--aggressive-instcombine",
      "--argpromotion",
      "--dce",
      "--constmerge",
      "--loop-unroll",
      "--inline",
      "--loop-guard-widening",
      "--ipsccp",
      "--partially-inline-libcalls",
      "--coro-elide",
      "--loop-instsimplify",
      "--loop-idiom",
      "--gvn",
      "--constprop",
      "--indvars",
      "--break-crit-edges",
      "--strip-dead-prototypes",
      "--alignment-from-assumptions",
      "--mem2reg"
    ],
    "performance_vs_Oz": "+0.6%"
  }
}
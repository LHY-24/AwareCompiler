{
  "program_id": "linux-v0_13515.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 41,
    "onePredOneSuc": 28,
    "onePredTwoSuc": 13,
    "oneSuccessor": 36,
    "twoPred": 11,
    "twoPredOneSuc": 6,
    "twoEach": 1,
    "twoSuccessor": 18,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 72,
    "BeginPhi": 0,
    "BranchCount": 54,
    "returnInt": 27,
    "CriticalCount": 6,
    "NumEdges": 72,
    "const32Bit": 238,
    "const64Bit": 86,
    "numConstZeroes": 148,
    "numConstOnes": 90,
    "UncondBranches": 36,
    "binaryConstArg": 38,
    "NumAShrInst": 0,
    "NumAddInst": 5,
    "NumAllocaInst": 54,
    "NumAndInst": 17,
    "BlockMid": 9,
    "BlockLow": 63,
    "NumBitCastInst": 8,
    "NumBrInst": 54,
    "NumCallInst": 43,
    "NumGetElementPtrInst": 102,
    "NumICmpInst": 23,
    "NumLShrInst": 3,
    "NumLoadInst": 173,
    "NumMulInst": 0,
    "NumOrInst": 4,
    "NumPHIInst": 0,
    "NumRetInst": 18,
    "NumSExtInst": 6,
    "NumSelectInst": 1,
    "NumShlInst": 0,
    "NumStoreInst": 94,
    "NumSubInst": 1,
    "NumTruncInst": 18,
    "NumXorInst": 8,
    "NumZExtInst": 34,
    "TotalBlocks": 72,
    "TotalInsts": 671,
    "TotalMemInst": 466,
    "TotalFuncs": 30,
    "ArgsPhi": 0,
    "testUnary": 297
  },
  "baseline_oz_instcount": 671,
  "knowledge_base_entry": [
    "--aggressive-instcombine",
    "--gvn-hoist",
    "--nary-reassociate",
    "--loop-simplifycfg",
    "--slsr",
    "--loop-reroll",
    "--instsimplify",
    "--bdce",
    "--mem2reg",
    "--slp-vectorizer",
    "--lower-expect",
    "--globalopt",
    "--inline",
    "--gvn-hoist",
    "--simplifycfg",
    "--aggressive-instcombine",
    "--prune-eh",
    "--loop-simplifycfg",
    "--nary-reassociate",
    "--indvars",
    "--nary-reassociate"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--licm",
          "--barrier",
          "--lowerinvoke",
          "--instcombine",
          "--loop-vectorize",
          "--loop-unroll-and-jam",
          "--lcssa",
          "--aggressive-instcombine",
          "--loop-guard-widening",
          "--name-anon-globals",
          "--coro-early",
          "--loop-versioning-licm",
          "--ipsccp",
          "--instnamer",
          "--lower-expect",
          "--rpo-functionattrs",
          "--partially-inline-libcalls",
          "--sroa",
          "--constmerge",
          "--lower-widenable-condition",
          "--prune-eh",
          "--inferattrs",
          "--irce",
          "--newgvn",
          "--mergefunc",
          "--alignment-from-assumptions"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--licm",
      "--barrier",
      "--lowerinvoke",
      "--instcombine",
      "--loop-vectorize",
      "--loop-unroll-and-jam",
      "--lcssa",
      "--aggressive-instcombine",
      "--loop-guard-widening",
      "--name-anon-globals",
      "--coro-early",
      "--loop-versioning-licm",
      "--ipsccp",
      "--instnamer",
      "--lower-expect",
      "--rpo-functionattrs",
      "--partially-inline-libcalls",
      "--sroa",
      "--constmerge",
      "--lower-widenable-condition",
      "--prune-eh",
      "--inferattrs",
      "--irce",
      "--newgvn",
      "--mergefunc",
      "--alignment-from-assumptions"
    ],
    "performance_vs_Oz": "+3.9%"
  }
}
{
  "program_id": "github-v0_32397.ll",
  "autophase_features": {
    "BBNumArgsHi": 11,
    "BBNumArgsLo": 12,
    "onePred": 30,
    "onePredOneSuc": 18,
    "onePredTwoSuc": 10,
    "oneSuccessor": 24,
    "twoPred": 20,
    "twoPredOneSuc": 4,
    "twoEach": 16,
    "twoSuccessor": 31,
    "morePreds": 5,
    "BB03Phi": 15,
    "BBHiPhi": 8,
    "BBNoPhi": 34,
    "BeginPhi": 23,
    "BranchCount": 55,
    "returnInt": 4,
    "CriticalCount": 32,
    "NumEdges": 86,
    "const32Bit": 185,
    "const64Bit": 40,
    "numConstZeroes": 94,
    "numConstOnes": 52,
    "UncondBranches": 24,
    "binaryConstArg": 103,
    "NumAShrInst": 2,
    "NumAddInst": 48,
    "NumAllocaInst": 3,
    "NumAndInst": 40,
    "BlockMid": 13,
    "BlockLow": 44,
    "NumBitCastInst": 3,
    "NumBrInst": 55,
    "NumCallInst": 10,
    "NumGetElementPtrInst": 49,
    "NumICmpInst": 56,
    "NumLShrInst": 13,
    "NumLoadInst": 38,
    "NumMulInst": 5,
    "NumOrInst": 49,
    "NumPHIInst": 77,
    "NumRetInst": 2,
    "NumSExtInst": 23,
    "NumSelectInst": 21,
    "NumShlInst": 21,
    "NumStoreInst": 16,
    "NumSubInst": 20,
    "NumTruncInst": 2,
    "NumXorInst": 17,
    "NumZExtInst": 15,
    "TotalBlocks": 57,
    "TotalInsts": 586,
    "TotalMemInst": 116,
    "TotalFuncs": 6,
    "ArgsPhi": 177,
    "testUnary": 84
  },
  "baseline_oz_instcount": 583,
  "knowledge_base_entry": [
    "--instsimplify",
    "--bdce",
    "--inline",
    "--nary-reassociate",
    "--dse",
    "--simplifycfg",
    "--flattencfg",
    "--loop-simplifycfg",
    "--slsr",
    "--instcombine",
    "--bdce",
    "--loop-instsimplify",
    "--instcombine",
    "--sroa",
    "--simplifycfg",
    "--gvn-hoist",
    "--mem2reg",
    "--loop-simplifycfg",
    "--nary-reassociate",
    "--loop-fusion",
    "--early-cse-memssa",
    "--early-cse-memssa",
    "--early-cse",
    "--mem2reg",
    "--mldst-motion",
    "--jump-threading",
    "--elim-avail-extern",
    "--inline",
    "--load-store-vectorizer",
    "--gvn",
    "--mldst-motion",
    "--licm",
    "--bdce",
    "--dse",
    "--instcombine",
    "--simplifycfg",
    "--memcpyopt",
    "--gvn-hoist",
    "--early-cse-memssa",
    "--aggressive-instcombine",
    "--adce",
    "--load-store-vectorizer",
    "--adce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--inline",
          "--canonicalize-aliases",
          "--memcpyopt",
          "--strip-dead-prototypes",
          "--argpromotion",
          "--constmerge",
          "--div-rem-pairs",
          "--load-store-vectorizer",
          "--sancov",
          "--newgvn",
          "--redundant-dbg-inst-elim",
          "--adce",
          "--mergeicmps",
          "--bdce",
          "--alignment-from-assumptions",
          "--simplifycfg",
          "--inject-tli-mappings",
          "--lower-expect",
          "--jump-threading",
          "--ipsccp"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--inline",
      "--canonicalize-aliases",
      "--memcpyopt",
      "--strip-dead-prototypes",
      "--argpromotion",
      "--constmerge",
      "--div-rem-pairs",
      "--load-store-vectorizer",
      "--sancov",
      "--newgvn",
      "--redundant-dbg-inst-elim",
      "--adce",
      "--mergeicmps",
      "--bdce",
      "--alignment-from-assumptions",
      "--simplifycfg",
      "--inject-tli-mappings",
      "--lower-expect",
      "--jump-threading",
      "--ipsccp"
    ],
    "performance_vs_Oz": "+1.2%"
  }
}
{
  "program_id": "github-v0_36384.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 35,
    "onePredOneSuc": 27,
    "onePredTwoSuc": 7,
    "oneSuccessor": 34,
    "twoPred": 14,
    "twoPredOneSuc": 4,
    "twoEach": 6,
    "twoSuccessor": 16,
    "morePreds": 3,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 61,
    "BeginPhi": 0,
    "BranchCount": 50,
    "returnInt": 43,
    "CriticalCount": 8,
    "NumEdges": 74,
    "const32Bit": 118,
    "const64Bit": 34,
    "numConstZeroes": 70,
    "numConstOnes": 64,
    "UncondBranches": 34,
    "binaryConstArg": 10,
    "NumAShrInst": 0,
    "NumAddInst": 6,
    "NumAllocaInst": 35,
    "NumAndInst": 0,
    "BlockMid": 4,
    "BlockLow": 57,
    "NumBitCastInst": 4,
    "NumBrInst": 50,
    "NumCallInst": 60,
    "NumGetElementPtrInst": 34,
    "NumICmpInst": 16,
    "NumLShrInst": 0,
    "NumLoadInst": 77,
    "NumMulInst": 3,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 9,
    "NumSExtInst": 9,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 46,
    "NumSubInst": 6,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 61,
    "TotalInsts": 363,
    "TotalMemInst": 252,
    "TotalFuncs": 24,
    "ArgsPhi": 0,
    "testUnary": 129
  },
  "baseline_oz_instcount": 365,
  "knowledge_base_entry": [
    "--lower-expect",
    "--dse"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--insert-gcov-profiling",
          "--lower-matrix-intrinsics",
          "--add-discriminators",
          "--dce",
          "--slsr",
          "--prune-eh",
          "--load-store-vectorizer",
          "--constmerge",
          "--jump-threading",
          "--mergereturn",
          "--ipsccp",
          "--coro-split",
          "--tailcallelim",
          "--lower-guard-intrinsic"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--insert-gcov-profiling",
      "--lower-matrix-intrinsics",
      "--add-discriminators",
      "--dce",
      "--slsr",
      "--prune-eh",
      "--load-store-vectorizer",
      "--constmerge",
      "--jump-threading",
      "--mergereturn",
      "--ipsccp",
      "--coro-split",
      "--tailcallelim",
      "--lower-guard-intrinsic"
    ],
    "performance_vs_Oz": "+0.5%"
  }
}
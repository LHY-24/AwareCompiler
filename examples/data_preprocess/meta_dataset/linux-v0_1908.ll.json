{
  "program_id": "linux-v0_1908.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 63,
    "onePredOneSuc": 38,
    "onePredTwoSuc": 24,
    "oneSuccessor": 55,
    "twoPred": 20,
    "twoPredOneSuc": 15,
    "twoEach": 4,
    "twoSuccessor": 32,
    "morePreds": 5,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 100,
    "BeginPhi": 0,
    "BranchCount": 87,
    "returnInt": 16,
    "CriticalCount": 16,
    "NumEdges": 123,
    "const32Bit": 256,
    "const64Bit": 39,
    "numConstZeroes": 149,
    "numConstOnes": 72,
    "UncondBranches": 55,
    "binaryConstArg": 31,
    "NumAShrInst": 1,
    "NumAddInst": 3,
    "NumAllocaInst": 50,
    "NumAndInst": 9,
    "BlockMid": 11,
    "BlockLow": 89,
    "NumBitCastInst": 8,
    "NumBrInst": 87,
    "NumCallInst": 41,
    "NumGetElementPtrInst": 87,
    "NumICmpInst": 32,
    "NumLShrInst": 3,
    "NumLoadInst": 211,
    "NumMulInst": 1,
    "NumOrInst": 6,
    "NumPHIInst": 0,
    "NumRetInst": 12,
    "NumSExtInst": 9,
    "NumSelectInst": 0,
    "NumShlInst": 3,
    "NumStoreInst": 89,
    "NumSubInst": 2,
    "NumTruncInst": 11,
    "NumXorInst": 7,
    "NumZExtInst": 28,
    "TotalBlocks": 100,
    "TotalInsts": 703,
    "TotalMemInst": 478,
    "TotalFuncs": 24,
    "ArgsPhi": 0,
    "testUnary": 317
  },
  "baseline_oz_instcount": 703,
  "knowledge_base_entry": [
    "--instcombine",
    "--elim-avail-extern",
    "--aggressive-instcombine",
    "--gvn",
    "--adce",
    "--newgvn",
    "--lower-expect",
    "--mergefunc",
    "--memcpyopt",
    "--simplifycfg",
    "--sroa",
    "--sccp",
    "--mem2reg",
    "--dce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--partially-inline-libcalls",
          "--loop-versioning-licm",
          "--bdce",
          "--indvars",
          "--consthoist",
          "--aggressive-instcombine",
          "--jump-threading",
          "--deadargelim",
          "--loop-unroll-and-jam",
          "--ipconstprop",
          "--instsimplify",
          "--add-discriminators",
          "--ee-instrument",
          "--lower-matrix-intrinsics",
          "--called-value-propagation",
          "--loop-rotate"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.0%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--partially-inline-libcalls",
      "--loop-versioning-licm",
      "--bdce",
      "--indvars",
      "--consthoist",
      "--aggressive-instcombine",
      "--jump-threading",
      "--deadargelim",
      "--loop-unroll-and-jam",
      "--ipconstprop",
      "--instsimplify",
      "--add-discriminators",
      "--ee-instrument",
      "--lower-matrix-intrinsics",
      "--called-value-propagation",
      "--loop-rotate"
    ],
    "performance_vs_Oz": "+1.0%"
  }
}
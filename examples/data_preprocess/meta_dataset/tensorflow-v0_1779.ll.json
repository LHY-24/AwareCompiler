{
  "program_id": "tensorflow-v0_1779.ll",
  "autophase_features": {
    "BBNumArgsHi": 4,
    "BBNumArgsLo": 19,
    "onePred": 65,
    "onePredOneSuc": 37,
    "onePredTwoSuc": 27,
    "oneSuccessor": 46,
    "twoPred": 34,
    "twoPredOneSuc": 7,
    "twoEach": 24,
    "twoSuccessor": 55,
    "morePreds": 6,
    "BB03Phi": 23,
    "BBHiPhi": 0,
    "BBNoPhi": 85,
    "BeginPhi": 23,
    "BranchCount": 89,
    "returnInt": 3,
    "CriticalCount": 45,
    "NumEdges": 156,
    "const32Bit": 119,
    "const64Bit": 183,
    "numConstZeroes": 147,
    "numConstOnes": 58,
    "UncondBranches": 46,
    "binaryConstArg": 52,
    "NumAShrInst": 1,
    "NumAddInst": 24,
    "NumAllocaInst": 11,
    "NumAndInst": 23,
    "BlockMid": 9,
    "BlockLow": 99,
    "NumBitCastInst": 99,
    "NumBrInst": 89,
    "NumCallInst": 50,
    "NumGetElementPtrInst": 124,
    "NumICmpInst": 46,
    "NumLShrInst": 6,
    "NumLoadInst": 74,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 32,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 4,
    "NumShlInst": 3,
    "NumStoreInst": 52,
    "NumSubInst": 11,
    "NumTruncInst": 3,
    "NumXorInst": 0,
    "NumZExtInst": 4,
    "TotalBlocks": 108,
    "TotalInsts": 707,
    "TotalMemInst": 323,
    "TotalFuncs": 21,
    "ArgsPhi": 77,
    "testUnary": 212
  },
  "baseline_oz_instcount": 674,
  "knowledge_base_entry": [
    "--gvn",
    "--slsr",
    "--jump-threading",
    "--loop-deletion",
    "--newgvn",
    "--lower-expect",
    "--die",
    "--gvn",
    "--aggressive-instcombine",
    "--licm",
    "--reassociate",
    "--gvn-hoist",
    "--memcpyopt",
    "--early-cse-memssa",
    "--instcombine",
    "--early-cse-memssa",
    "--elim-avail-extern",
    "--instsimplify",
    "--aggressive-instcombine",
    "--mem2reg",
    "--aggressive-instcombine",
    "--newgvn",
    "--dse",
    "--mergefunc",
    "--loop-reroll",
    "--jump-threading",
    "--licm",
    "--simplifycfg",
    "--mergefunc"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--constprop",
          "--coro-early",
          "--slsr",
          "--lowerinvoke",
          "--canonicalize-aliases",
          "--ipsccp",
          "--strip-nondebug",
          "--redundant-dbg-inst-elim",
          "--bdce",
          "--functionattrs",
          "--strip",
          "--loop-rotate",
          "--coro-split"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.0%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--constprop",
      "--coro-early",
      "--slsr",
      "--lowerinvoke",
      "--canonicalize-aliases",
      "--ipsccp",
      "--strip-nondebug",
      "--redundant-dbg-inst-elim",
      "--bdce",
      "--functionattrs",
      "--strip",
      "--loop-rotate",
      "--coro-split"
    ],
    "performance_vs_Oz": "+1.0%"
  }
}
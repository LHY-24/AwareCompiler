{
  "program_id": "linux-v0_866.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 4,
    "onePred": 63,
    "onePredOneSuc": 48,
    "onePredTwoSuc": 13,
    "oneSuccessor": 58,
    "twoPred": 20,
    "twoPredOneSuc": 6,
    "twoEach": 8,
    "twoSuccessor": 28,
    "morePreds": 5,
    "BB03Phi": 4,
    "BBHiPhi": 0,
    "BBNoPhi": 102,
    "BeginPhi": 4,
    "BranchCount": 86,
    "returnInt": 5,
    "CriticalCount": 15,
    "NumEdges": 124,
    "const32Bit": 257,
    "const64Bit": 6,
    "numConstZeroes": 145,
    "numConstOnes": 103,
    "UncondBranches": 58,
    "binaryConstArg": 3,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 83,
    "NumAndInst": 1,
    "BlockMid": 11,
    "BlockLow": 95,
    "NumBitCastInst": 47,
    "NumBrInst": 86,
    "NumCallInst": 49,
    "NumGetElementPtrInst": 76,
    "NumICmpInst": 30,
    "NumLShrInst": 0,
    "NumLoadInst": 206,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 4,
    "NumRetInst": 18,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 118,
    "NumSubInst": 1,
    "NumTruncInst": 0,
    "NumXorInst": 1,
    "NumZExtInst": 1,
    "TotalBlocks": 106,
    "TotalInsts": 727,
    "TotalMemInst": 532,
    "TotalFuncs": 30,
    "ArgsPhi": 8,
    "testUnary": 340
  },
  "baseline_oz_instcount": 729,
  "knowledge_base_entry": [
    "--strip-nondebug",
    "--mergefunc",
    "--globaldce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--lower-expect",
          "--float2int",
          "--lower-matrix-intrinsics",
          "--sancov",
          "--early-cse-memssa",
          "--mergeicmps",
          "--loop-vectorize",
          "--always-inline",
          "--constprop",
          "--load-store-vectorizer",
          "--called-value-propagation",
          "--scalarizer"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--lower-expect",
      "--float2int",
      "--lower-matrix-intrinsics",
      "--sancov",
      "--early-cse-memssa",
      "--mergeicmps",
      "--loop-vectorize",
      "--always-inline",
      "--constprop",
      "--load-store-vectorizer",
      "--called-value-propagation",
      "--scalarizer"
    ],
    "performance_vs_Oz": "+0.3%"
  }
}
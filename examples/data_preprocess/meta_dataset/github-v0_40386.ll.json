{
  "program_id": "github-v0_40386.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 15,
    "onePredOneSuc": 9,
    "onePredTwoSuc": 3,
    "oneSuccessor": 13,
    "twoPred": 6,
    "twoPredOneSuc": 3,
    "twoEach": 3,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 24,
    "BeginPhi": 0,
    "BranchCount": 20,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 27,
    "const32Bit": 38,
    "const64Bit": 48,
    "numConstZeroes": 48,
    "numConstOnes": 25,
    "UncondBranches": 13,
    "binaryConstArg": 12,
    "NumAShrInst": 0,
    "NumAddInst": 6,
    "NumAllocaInst": 14,
    "NumAndInst": 1,
    "BlockMid": 5,
    "BlockLow": 19,
    "NumBitCastInst": 8,
    "NumBrInst": 20,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 37,
    "NumICmpInst": 7,
    "NumLShrInst": 3,
    "NumLoadInst": 49,
    "NumMulInst": 0,
    "NumOrInst": 3,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 24,
    "NumSubInst": 1,
    "NumTruncInst": 3,
    "NumXorInst": 1,
    "NumZExtInst": 15,
    "TotalBlocks": 24,
    "TotalInsts": 207,
    "TotalMemInst": 131,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 92
  },
  "baseline_oz_instcount": 207,
  "knowledge_base_entry": [
    "--simplifycfg",
    "--globalopt",
    "--aggressive-instcombine",
    "--instsimplify",
    "--sroa",
    "--simplifycfg",
    "--globalopt",
    "--aggressive-instcombine",
    "--loop-rotate",
    "--licm",
    "--jump-threading",
    "--loop-simplifycfg",
    "--nary-reassociate",
    "--elim-avail-extern",
    "--gvn-hoist",
    "--dce",
    "--sroa",
    "--simplifycfg",
    "--globalopt",
    "--aggressive-instcombine",
    "--instsimplify",
    "--sroa",
    "--licm",
    "--bdce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--sink",
          "--consthoist",
          "--indvars",
          "--always-inline",
          "--jump-threading",
          "--loop-simplifycfg",
          "--mergefunc",
          "--sccp",
          "--ipconstprop",
          "--aggressive-instcombine",
          "--tailcallelim",
          "--loop-versioning-licm",
          "--lower-matrix-intrinsics",
          "--ipsccp",
          "--loop-unroll",
          "--elim-avail-extern",
          "--callsite-splitting",
          "--lower-guard-intrinsic",
          "--mergereturn",
          "--inject-tli-mappings",
          "--coro-early",
          "--loop-sink",
          "--loop-versioning",
          "--lower-constant-intrinsics",
          "--loop-simplify",
          "--irce",
          "--gvn-hoist",
          "--sroa",
          "--load-store-vectorizer",
          "--simplifycfg"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--sink",
      "--consthoist",
      "--indvars",
      "--always-inline",
      "--jump-threading",
      "--loop-simplifycfg",
      "--mergefunc",
      "--sccp",
      "--ipconstprop",
      "--aggressive-instcombine",
      "--tailcallelim",
      "--loop-versioning-licm",
      "--lower-matrix-intrinsics",
      "--ipsccp",
      "--loop-unroll",
      "--elim-avail-extern",
      "--callsite-splitting",
      "--lower-guard-intrinsic",
      "--mergereturn",
      "--inject-tli-mappings",
      "--coro-early",
      "--loop-sink",
      "--loop-versioning",
      "--lower-constant-intrinsics",
      "--loop-simplify",
      "--irce",
      "--gvn-hoist",
      "--sroa",
      "--load-store-vectorizer",
      "--simplifycfg"
    ],
    "performance_vs_Oz": "+1.9%"
  }
}
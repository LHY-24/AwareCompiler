{
  "program_id": "linux-v0_4631.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 5,
    "onePred": 64,
    "onePredOneSuc": 36,
    "onePredTwoSuc": 28,
    "oneSuccessor": 40,
    "twoPred": 17,
    "twoPredOneSuc": 4,
    "twoEach": 11,
    "twoSuccessor": 44,
    "morePreds": 3,
    "BB03Phi": 5,
    "BBHiPhi": 0,
    "BBNoPhi": 92,
    "BeginPhi": 5,
    "BranchCount": 84,
    "returnInt": 15,
    "CriticalCount": 24,
    "NumEdges": 128,
    "const32Bit": 259,
    "const64Bit": 4,
    "numConstZeroes": 118,
    "numConstOnes": 90,
    "UncondBranches": 40,
    "binaryConstArg": 21,
    "NumAShrInst": 0,
    "NumAddInst": 16,
    "NumAllocaInst": 47,
    "NumAndInst": 1,
    "BlockMid": 16,
    "BlockLow": 81,
    "NumBitCastInst": 13,
    "NumBrInst": 84,
    "NumCallInst": 15,
    "NumGetElementPtrInst": 74,
    "NumICmpInst": 59,
    "NumLShrInst": 0,
    "NumLoadInst": 236,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 5,
    "NumRetInst": 13,
    "NumSExtInst": 6,
    "NumSelectInst": 16,
    "NumShlInst": 0,
    "NumStoreInst": 84,
    "NumSubInst": 3,
    "NumTruncInst": 21,
    "NumXorInst": 1,
    "NumZExtInst": 107,
    "TotalBlocks": 97,
    "TotalInsts": 801,
    "TotalMemInst": 456,
    "TotalFuncs": 13,
    "ArgsPhi": 10,
    "testUnary": 430
  },
  "baseline_oz_instcount": 801,
  "knowledge_base_entry": [
    "--sroa",
    "--gvn",
    "--load-store-vectorizer",
    "--aggressive-instcombine",
    "--adce",
    "--mergefunc",
    "--mergefunc",
    "--inline",
    "--slp-vectorizer",
    "--inline",
    "--globalopt",
    "--sroa",
    "--correlated-propagation",
    "--globalopt",
    "--aggressive-instcombine",
    "--flattencfg",
    "--licm",
    "--early-cse",
    "--sroa",
    "--globalopt",
    "--newgvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--always-inline",
          "--sccp",
          "--inferattrs",
          "--strip",
          "--licm",
          "--mem2reg",
          "--adce",
          "--lower-guard-intrinsic",
          "--dse",
          "--float2int",
          "--dce",
          "--guard-widening",
          "--globaldce",
          "--loop-simplify",
          "--jump-threading",
          "--early-cse-memssa",
          "--cross-dso-cfi",
          "--consthoist",
          "--flattencfg",
          "--loop-instsimplify",
          "--loop-predication",
          "--aggressive-instcombine",
          "--name-anon-globals",
          "--ipconstprop",
          "--loop-idiom",
          "--correlated-propagation"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--always-inline",
      "--sccp",
      "--inferattrs",
      "--strip",
      "--licm",
      "--mem2reg",
      "--adce",
      "--lower-guard-intrinsic",
      "--dse",
      "--float2int",
      "--dce",
      "--guard-widening",
      "--globaldce",
      "--loop-simplify",
      "--jump-threading",
      "--early-cse-memssa",
      "--cross-dso-cfi",
      "--consthoist",
      "--flattencfg",
      "--loop-instsimplify",
      "--loop-predication",
      "--aggressive-instcombine",
      "--name-anon-globals",
      "--ipconstprop",
      "--loop-idiom",
      "--correlated-propagation"
    ],
    "performance_vs_Oz": "+0.1%"
  }
}
{
  "program_id": "linux-v0_1183.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 4,
    "onePred": 58,
    "onePredOneSuc": 40,
    "onePredTwoSuc": 15,
    "oneSuccessor": 55,
    "twoPred": 18,
    "twoPredOneSuc": 9,
    "twoEach": 6,
    "twoSuccessor": 23,
    "morePreds": 2,
    "BB03Phi": 4,
    "BBHiPhi": 0,
    "BBNoPhi": 87,
    "BeginPhi": 4,
    "BranchCount": 78,
    "returnInt": 6,
    "CriticalCount": 20,
    "NumEdges": 101,
    "const32Bit": 272,
    "const64Bit": 33,
    "numConstZeroes": 113,
    "numConstOnes": 117,
    "UncondBranches": 55,
    "binaryConstArg": 25,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 85,
    "NumAndInst": 9,
    "BlockMid": 14,
    "BlockLow": 77,
    "NumBitCastInst": 22,
    "NumBrInst": 78,
    "NumCallInst": 33,
    "NumGetElementPtrInst": 86,
    "NumICmpInst": 25,
    "NumLShrInst": 1,
    "NumLoadInst": 190,
    "NumMulInst": 4,
    "NumOrInst": 2,
    "NumPHIInst": 4,
    "NumRetInst": 13,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 5,
    "NumStoreInst": 118,
    "NumSubInst": 3,
    "NumTruncInst": 5,
    "NumXorInst": 8,
    "NumZExtInst": 37,
    "TotalBlocks": 91,
    "TotalInsts": 736,
    "TotalMemInst": 512,
    "TotalFuncs": 20,
    "ArgsPhi": 8,
    "testUnary": 347
  },
  "baseline_oz_instcount": 728,
  "knowledge_base_entry": [
    "--die",
    "--ipsccp",
    "--correlated-propagation",
    "--early-cse-memssa",
    "--loop-rotate",
    "--lower-expect",
    "--mergefunc",
    "--gvn",
    "--loop-reroll",
    "--loop-simplifycfg",
    "--aggressive-instcombine",
    "--bdce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--coro-elide",
          "--aggressive-instcombine",
          "--indvars",
          "--dce",
          "--instsimplify",
          "--ipsccp",
          "--slp-vectorizer",
          "--prune-eh",
          "--infer-address-spaces",
          "--loop-sink",
          "--consthoist"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--coro-elide",
      "--aggressive-instcombine",
      "--indvars",
      "--dce",
      "--instsimplify",
      "--ipsccp",
      "--slp-vectorizer",
      "--prune-eh",
      "--infer-address-spaces",
      "--loop-sink",
      "--consthoist"
    ],
    "performance_vs_Oz": "+0.5%"
  }
}
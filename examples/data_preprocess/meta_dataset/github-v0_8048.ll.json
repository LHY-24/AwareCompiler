{
  "program_id": "github-v0_8048.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 13,
    "onePredOneSuc": 9,
    "onePredTwoSuc": 1,
    "oneSuccessor": 11,
    "twoPred": 5,
    "twoPredOneSuc": 1,
    "twoEach": 4,
    "twoSuccessor": 6,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 21,
    "BeginPhi": 0,
    "BranchCount": 17,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 23,
    "const32Bit": 34,
    "const64Bit": 46,
    "numConstZeroes": 46,
    "numConstOnes": 26,
    "UncondBranches": 11,
    "binaryConstArg": 8,
    "NumAShrInst": 0,
    "NumAddInst": 7,
    "NumAllocaInst": 13,
    "NumAndInst": 0,
    "BlockMid": 5,
    "BlockLow": 16,
    "NumBitCastInst": 8,
    "NumBrInst": 17,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 31,
    "NumICmpInst": 6,
    "NumLShrInst": 0,
    "NumLoadInst": 35,
    "NumMulInst": 2,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 25,
    "NumSubInst": 1,
    "NumTruncInst": 3,
    "NumXorInst": 0,
    "NumZExtInst": 7,
    "TotalBlocks": 21,
    "TotalInsts": 169,
    "TotalMemInst": 111,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 69
  },
  "baseline_oz_instcount": 169,
  "knowledge_base_entry": [
    "--dce",
    "--lower-expect",
    "--newgvn",
    "--aggressive-instcombine",
    "--bdce",
    "--gvn-hoist",
    "--instcombine",
    "--ipsccp",
    "--reassociate"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-fusion",
          "--instsimplify",
          "--loop-unroll-and-jam",
          "--loop-unroll",
          "--always-inline",
          "--called-value-propagation",
          "--globalsplit",
          "--tailcallelim",
          "--loop-reroll",
          "--aggressive-instcombine",
          "--sink",
          "--alignment-from-assumptions",
          "--forceattrs",
          "--lowerswitch",
          "--attributor",
          "--loop-unswitch",
          "--slp-vectorizer",
          "--loop-vectorize",
          "--post-inline-ee-instrument",
          "--loop-data-prefetch",
          "--loop-deletion",
          "--libcalls-shrinkwrap",
          "--loop-simplifycfg",
          "--slsr",
          "--mergeicmps",
          "--lowerinvoke",
          "--adce",
          "--loop-distribute"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-fusion",
      "--instsimplify",
      "--loop-unroll-and-jam",
      "--loop-unroll",
      "--always-inline",
      "--called-value-propagation",
      "--globalsplit",
      "--tailcallelim",
      "--loop-reroll",
      "--aggressive-instcombine",
      "--sink",
      "--alignment-from-assumptions",
      "--forceattrs",
      "--lowerswitch",
      "--attributor",
      "--loop-unswitch",
      "--slp-vectorizer",
      "--loop-vectorize",
      "--post-inline-ee-instrument",
      "--loop-data-prefetch",
      "--loop-deletion",
      "--libcalls-shrinkwrap",
      "--loop-simplifycfg",
      "--slsr",
      "--mergeicmps",
      "--lowerinvoke",
      "--adce",
      "--loop-distribute"
    ],
    "performance_vs_Oz": "+2.4%"
  }
}
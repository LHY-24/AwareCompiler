{
  "program_id": "github-v0_31532.ll",
  "autophase_features": {
    "BBNumArgsHi": 2,
    "BBNumArgsLo": 1,
    "onePred": 3,
    "onePredOneSuc": 2,
    "onePredTwoSuc": 1,
    "oneSuccessor": 2,
    "twoPred": 2,
    "twoPredOneSuc": 0,
    "twoEach": 2,
    "twoSuccessor": 4,
    "morePreds": 1,
    "BB03Phi": 3,
    "BBHiPhi": 0,
    "BBNoPhi": 4,
    "BeginPhi": 3,
    "BranchCount": 6,
    "returnInt": 1,
    "CriticalCount": 5,
    "NumEdges": 10,
    "const32Bit": 11,
    "const64Bit": 1,
    "numConstZeroes": 6,
    "numConstOnes": 3,
    "UncondBranches": 2,
    "binaryConstArg": 5,
    "NumAShrInst": 0,
    "NumAddInst": 5,
    "NumAllocaInst": 0,
    "NumAndInst": 2,
    "BlockMid": 1,
    "BlockLow": 6,
    "NumBitCastInst": 0,
    "NumBrInst": 6,
    "NumCallInst": 4,
    "NumGetElementPtrInst": 7,
    "NumICmpInst": 4,
    "NumLShrInst": 0,
    "NumLoadInst": 6,
    "NumMulInst": 1,
    "NumOrInst": 1,
    "NumPHIInst": 7,
    "NumRetInst": 1,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 1,
    "NumSubInst": 1,
    "NumTruncInst": 1,
    "NumXorInst": 0,
    "NumZExtInst": 6,
    "TotalBlocks": 7,
    "TotalInsts": 53,
    "TotalMemInst": 18,
    "TotalFuncs": 3,
    "ArgsPhi": 15,
    "testUnary": 13
  },
  "baseline_oz_instcount": 53,
  "knowledge_base_entry": [
    "--inline",
    "--jump-threading",
    "--simplifycfg",
    "--early-cse-memssa",
    "-loop-reduce",
    "--slp-vectorizer",
    "--lower-constant-intrinsics",
    "--sccp",
    "--early-cse",
    "--globalopt",
    "--instcombine",
    "--adce",
    "--sroa",
    "--lower-expect",
    "--slp-vectorizer",
    "--lower-constant-intrinsics",
    "--sccp",
    "--bdce",
    "--dse",
    "--inline",
    "--jump-threading",
    "--simplifycfg",
    "--early-cse-memssa",
    "-loop-reduce",
    "--newgvn",
    "--globalopt",
    "--gvn",
    "--die",
    "--mergefunc",
    "--early-cse-memssa",
    "--gvn",
    "--nary-reassociate",
    "--simplifycfg",
    "--gvn",
    "--dce",
    "--mergefunc",
    "--instcombine",
    "--loop-rotate",
    "--gvn-hoist",
    "--instsimplify",
    "--lower-expect",
    "--gvn-hoist",
    "--loop-deletion",
    "--jump-threading",
    "--sccp",
    "--early-cse",
    "--globalopt",
    "--instcombine",
    "--adce",
    "--sroa",
    "--lower-expect",
    "--gvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-interchange",
          "--loop-sink",
          "--tailcallelim",
          "--memcpyopt",
          "--scalarizer",
          "--attributor",
          "--alignment-from-assumptions",
          "--strip-debug-declare",
          "--coro-elide",
          "--lowerinvoke",
          "--speculative-execution",
          "--barrier",
          "--bdce",
          "--loop-vectorize",
          "--partially-inline-libcalls",
          "--gvn",
          "--globaldce",
          "-loop-reduce",
          "--aggressive-instcombine",
          "--strip",
          "--sink",
          "--loop-load-elim",
          "--early-cse",
          "--div-rem-pairs",
          "--simplifycfg"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+5.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-interchange",
      "--loop-sink",
      "--tailcallelim",
      "--memcpyopt",
      "--scalarizer",
      "--attributor",
      "--alignment-from-assumptions",
      "--strip-debug-declare",
      "--coro-elide",
      "--lowerinvoke",
      "--speculative-execution",
      "--barrier",
      "--bdce",
      "--loop-vectorize",
      "--partially-inline-libcalls",
      "--gvn",
      "--globaldce",
      "-loop-reduce",
      "--aggressive-instcombine",
      "--strip",
      "--sink",
      "--loop-load-elim",
      "--early-cse",
      "--div-rem-pairs",
      "--simplifycfg"
    ],
    "performance_vs_Oz": "+5.7%"
  }
}
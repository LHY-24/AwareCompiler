{
  "program_id": "github-v0_5023.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 4,
    "onePredOneSuc": 0,
    "onePredTwoSuc": 1,
    "oneSuccessor": 0,
    "twoPred": 0,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 2,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 7,
    "BeginPhi": 0,
    "BranchCount": 2,
    "returnInt": 2,
    "CriticalCount": 0,
    "NumEdges": 4,
    "const32Bit": 35,
    "const64Bit": 1,
    "numConstZeroes": 16,
    "numConstOnes": 14,
    "UncondBranches": 0,
    "binaryConstArg": 0,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 8,
    "NumAndInst": 0,
    "BlockMid": 2,
    "BlockLow": 5,
    "NumBitCastInst": 3,
    "NumBrInst": 2,
    "NumCallInst": 14,
    "NumGetElementPtrInst": 12,
    "NumICmpInst": 3,
    "NumLShrInst": 0,
    "NumLoadInst": 20,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 12,
    "NumSubInst": 0,
    "NumTruncInst": 1,
    "NumXorInst": 0,
    "NumZExtInst": 1,
    "TotalBlocks": 7,
    "TotalInsts": 87,
    "TotalMemInst": 66,
    "TotalFuncs": 15,
    "ArgsPhi": 0,
    "testUnary": 39
  },
  "baseline_oz_instcount": 70,
  "knowledge_base_entry": [
    "--aggressive-instcombine",
    "--globaldce",
    "--mergefunc",
    "--gvn-hoist",
    "--lower-expect",
    "--die",
    "--load-store-vectorizer",
    "--mldst-motion",
    "--slp-vectorizer",
    "--loop-reroll",
    "--indvars",
    "--early-cse-memssa",
    "--ipsccp",
    "--dce",
    "--correlated-propagation",
    "--lower-constant-intrinsics"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--sancov",
          "--instsimplify",
          "--tailcallelim",
          "--loop-instsimplify",
          "--globaldce",
          "--aggressive-instcombine",
          "--load-store-vectorizer",
          "--adce",
          "--gvn-hoist",
          "--licm",
          "--canonicalize-aliases",
          "--callsite-splitting",
          "--loop-deletion",
          "--flattencfg",
          "--strip",
          "--gvn",
          "--die",
          "--lower-expect",
          "--coro-split",
          "--loop-versioning",
          "--slp-vectorizer",
          "--loop-data-prefetch",
          "--loop-unroll-and-jam",
          "--mem2reg",
          "--called-value-propagation",
          "--loop-rotate",
          "--irce",
          "--loop-guard-widening",
          "--guard-widening",
          "--loop-versioning-licm"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--sancov",
      "--instsimplify",
      "--tailcallelim",
      "--loop-instsimplify",
      "--globaldce",
      "--aggressive-instcombine",
      "--load-store-vectorizer",
      "--adce",
      "--gvn-hoist",
      "--licm",
      "--canonicalize-aliases",
      "--callsite-splitting",
      "--loop-deletion",
      "--flattencfg",
      "--strip",
      "--gvn",
      "--die",
      "--lower-expect",
      "--coro-split",
      "--loop-versioning",
      "--slp-vectorizer",
      "--loop-data-prefetch",
      "--loop-unroll-and-jam",
      "--mem2reg",
      "--called-value-propagation",
      "--loop-rotate",
      "--irce",
      "--loop-guard-widening",
      "--guard-widening",
      "--loop-versioning-licm"
    ],
    "performance_vs_Oz": "+1.4%"
  }
}
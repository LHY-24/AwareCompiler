{
  "program_id": "github-v0_21903.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 37,
    "onePredOneSuc": 15,
    "onePredTwoSuc": 16,
    "oneSuccessor": 37,
    "twoPred": 38,
    "twoPredOneSuc": 15,
    "twoEach": 19,
    "twoSuccessor": 38,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 89,
    "BeginPhi": 0,
    "BranchCount": 75,
    "returnInt": 2,
    "CriticalCount": 43,
    "NumEdges": 113,
    "const32Bit": 77,
    "const64Bit": 12,
    "numConstZeroes": 13,
    "numConstOnes": 40,
    "UncondBranches": 37,
    "binaryConstArg": 9,
    "NumAShrInst": 0,
    "NumAddInst": 7,
    "NumAllocaInst": 21,
    "NumAndInst": 0,
    "BlockMid": 0,
    "BlockLow": 89,
    "NumBitCastInst": 0,
    "NumBrInst": 75,
    "NumCallInst": 49,
    "NumGetElementPtrInst": 3,
    "NumICmpInst": 38,
    "NumLShrInst": 0,
    "NumLoadInst": 72,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 14,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 33,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 89,
    "TotalInsts": 317,
    "TotalMemInst": 178,
    "TotalFuncs": 17,
    "ArgsPhi": 0,
    "testUnary": 96
  },
  "baseline_oz_instcount": 317,
  "knowledge_base_entry": [
    "-loop-reduce",
    "--sroa",
    "--mldst-motion",
    "--dse",
    "--mergefunc",
    "--flattencfg",
    "--gvn",
    "--adce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-idiom",
          "--functionattrs",
          "--mergereturn",
          "--speculative-execution",
          "--mergefunc",
          "--loop-unswitch",
          "--add-discriminators",
          "--rpo-functionattrs",
          "--ipsccp",
          "--ipconstprop"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+10.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-idiom",
      "--functionattrs",
      "--mergereturn",
      "--speculative-execution",
      "--mergefunc",
      "--loop-unswitch",
      "--add-discriminators",
      "--rpo-functionattrs",
      "--ipsccp",
      "--ipconstprop"
    ],
    "performance_vs_Oz": "+10.1%"
  }
}
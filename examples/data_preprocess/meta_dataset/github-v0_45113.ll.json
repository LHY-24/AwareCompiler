{
  "program_id": "github-v0_45113.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 24,
    "onePredOneSuc": 18,
    "onePredTwoSuc": 3,
    "oneSuccessor": 24,
    "twoPred": 11,
    "twoPredOneSuc": 3,
    "twoEach": 6,
    "twoSuccessor": 11,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 45,
    "BeginPhi": 0,
    "BranchCount": 35,
    "returnInt": 6,
    "CriticalCount": 4,
    "NumEdges": 46,
    "const32Bit": 74,
    "const64Bit": 9,
    "numConstZeroes": 24,
    "numConstOnes": 35,
    "UncondBranches": 24,
    "binaryConstArg": 24,
    "NumAShrInst": 0,
    "NumAddInst": 7,
    "NumAllocaInst": 25,
    "NumAndInst": 7,
    "BlockMid": 4,
    "BlockLow": 41,
    "NumBitCastInst": 1,
    "NumBrInst": 35,
    "NumCallInst": 22,
    "NumGetElementPtrInst": 6,
    "NumICmpInst": 11,
    "NumLShrInst": 7,
    "NumLoadInst": 53,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 10,
    "NumSExtInst": 5,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 35,
    "NumSubInst": 0,
    "NumTruncInst": 5,
    "NumXorInst": 6,
    "NumZExtInst": 4,
    "TotalBlocks": 45,
    "TotalInsts": 239,
    "TotalMemInst": 141,
    "TotalFuncs": 12,
    "ArgsPhi": 0,
    "testUnary": 93
  },
  "baseline_oz_instcount": 239,
  "knowledge_base_entry": [
    "--speculative-execution",
    "--gvn-hoist",
    "--aggressive-instcombine",
    "--instsimplify",
    "--loop-reroll",
    "--indvars",
    "--jump-threading",
    "--mldst-motion",
    "--elim-avail-extern",
    "--simplifycfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--rpo-functionattrs",
          "--canonicalize-aliases",
          "--die",
          "--newgvn",
          "--ipconstprop",
          "--deadargelim",
          "--inferattrs",
          "--loop-unswitch",
          "--loop-data-prefetch",
          "--lower-widenable-condition",
          "--lower-matrix-intrinsics",
          "--pgo-memop-opt",
          "--partial-inliner",
          "--callsite-splitting",
          "--aggressive-instcombine",
          "--barrier",
          "--loop-idiom",
          "--called-value-propagation",
          "--lowerinvoke",
          "--post-inline-ee-instrument",
          "--div-rem-pairs",
          "--strip-debug-declare",
          "--early-cse-memssa",
          "--loop-deletion",
          "--consthoist",
          "--coro-early",
          "--coro-split"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--rpo-functionattrs",
      "--canonicalize-aliases",
      "--die",
      "--newgvn",
      "--ipconstprop",
      "--deadargelim",
      "--inferattrs",
      "--loop-unswitch",
      "--loop-data-prefetch",
      "--lower-widenable-condition",
      "--lower-matrix-intrinsics",
      "--pgo-memop-opt",
      "--partial-inliner",
      "--callsite-splitting",
      "--aggressive-instcombine",
      "--barrier",
      "--loop-idiom",
      "--called-value-propagation",
      "--lowerinvoke",
      "--post-inline-ee-instrument",
      "--div-rem-pairs",
      "--strip-debug-declare",
      "--early-cse-memssa",
      "--loop-deletion",
      "--consthoist",
      "--coro-early",
      "--coro-split"
    ],
    "performance_vs_Oz": "+0.8%"
  }
}
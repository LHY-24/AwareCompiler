{
  "program_id": "opencv-v0_328.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 11,
    "onePredOneSuc": 1,
    "onePredTwoSuc": 7,
    "oneSuccessor": 2,
    "twoPred": 2,
    "twoPredOneSuc": 1,
    "twoEach": 0,
    "twoSuccessor": 11,
    "morePreds": 2,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 21,
    "BeginPhi": 1,
    "BranchCount": 7,
    "returnInt": 0,
    "CriticalCount": 11,
    "NumEdges": 24,
    "const32Bit": 21,
    "const64Bit": 8,
    "numConstZeroes": 21,
    "numConstOnes": 8,
    "UncondBranches": 2,
    "binaryConstArg": 4,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 2,
    "NumAndInst": 3,
    "BlockMid": 0,
    "BlockLow": 22,
    "NumBitCastInst": 3,
    "NumBrInst": 7,
    "NumCallInst": 9,
    "NumGetElementPtrInst": 4,
    "NumICmpInst": 4,
    "NumLShrInst": 0,
    "NumLoadInst": 5,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 1,
    "NumRetInst": 5,
    "NumSExtInst": 0,
    "NumSelectInst": 1,
    "NumShlInst": 0,
    "NumStoreInst": 1,
    "NumSubInst": 0,
    "NumTruncInst": 1,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 22,
    "TotalInsts": 60,
    "TotalMemInst": 27,
    "TotalFuncs": 19,
    "ArgsPhi": 4,
    "testUnary": 12
  },
  "baseline_oz_instcount": 60,
  "knowledge_base_entry": [
    "--lowerinvoke",
    "--simplifycfg",
    "--globalopt",
    "--lower-constant-intrinsics",
    "--loop-instsimplify",
    "--adce",
    "--correlated-propagation",
    "--load-store-vectorizer",
    "--early-cse-memssa",
    "--gvn-hoist"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--constprop",
          "--loop-rotate",
          "--ee-instrument",
          "--loop-fusion",
          "--indvars",
          "--nary-reassociate",
          "--coro-split",
          "--loop-idiom",
          "--instsimplify",
          "--loop-simplifycfg",
          "--loop-versioning",
          "--always-inline",
          "--rpo-functionattrs",
          "--lowerswitch",
          "--lowerinvoke",
          "--loop-unroll",
          "--irce",
          "--callsite-splitting",
          "--simplifycfg",
          "--loop-predication",
          "--redundant-dbg-inst-elim",
          "--inline",
          "--hotcoldsplit",
          "--consthoist",
          "--strip",
          "--strip-dead-prototypes",
          "--aggressive-instcombine",
          "--coro-cleanup",
          "--correlated-propagation"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+16.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--constprop",
      "--loop-rotate",
      "--ee-instrument",
      "--loop-fusion",
      "--indvars",
      "--nary-reassociate",
      "--coro-split",
      "--loop-idiom",
      "--instsimplify",
      "--loop-simplifycfg",
      "--loop-versioning",
      "--always-inline",
      "--rpo-functionattrs",
      "--lowerswitch",
      "--lowerinvoke",
      "--loop-unroll",
      "--irce",
      "--callsite-splitting",
      "--simplifycfg",
      "--loop-predication",
      "--redundant-dbg-inst-elim",
      "--inline",
      "--hotcoldsplit",
      "--consthoist",
      "--strip",
      "--strip-dead-prototypes",
      "--aggressive-instcombine",
      "--coro-cleanup",
      "--correlated-propagation"
    ],
    "performance_vs_Oz": "+16.7%"
  }
}
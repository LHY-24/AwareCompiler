{
  "program_id": "linux-v0_8201.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 3,
    "onePred": 76,
    "onePredOneSuc": 59,
    "onePredTwoSuc": 15,
    "oneSuccessor": 67,
    "twoPred": 18,
    "twoPredOneSuc": 4,
    "twoEach": 6,
    "twoSuccessor": 34,
    "morePreds": 9,
    "BB03Phi": 3,
    "BBHiPhi": 0,
    "BBNoPhi": 128,
    "BeginPhi": 3,
    "BranchCount": 101,
    "returnInt": 21,
    "CriticalCount": 11,
    "NumEdges": 145,
    "const32Bit": 275,
    "const64Bit": 17,
    "numConstZeroes": 122,
    "numConstOnes": 117,
    "UncondBranches": 67,
    "binaryConstArg": 9,
    "NumAShrInst": 2,
    "NumAddInst": 0,
    "NumAllocaInst": 94,
    "NumAndInst": 3,
    "BlockMid": 13,
    "BlockLow": 118,
    "NumBitCastInst": 36,
    "NumBrInst": 101,
    "NumCallInst": 73,
    "NumGetElementPtrInst": 70,
    "NumICmpInst": 32,
    "NumLShrInst": 0,
    "NumLoadInst": 227,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 3,
    "NumRetInst": 28,
    "NumSExtInst": 5,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 155,
    "NumSubInst": 3,
    "NumTruncInst": 3,
    "NumXorInst": 1,
    "NumZExtInst": 9,
    "TotalBlocks": 131,
    "TotalInsts": 854,
    "TotalMemInst": 619,
    "TotalFuncs": 50,
    "ArgsPhi": 6,
    "testUnary": 378
  },
  "baseline_oz_instcount": 853,
  "knowledge_base_entry": [
    "--globalopt",
    "--correlated-propagation",
    "--dce",
    "--elim-avail-extern",
    "--globalopt",
    "--aggressive-instcombine",
    "--flattencfg",
    "--ipsccp",
    "--instcombine",
    "--gvn",
    "--dce",
    "--gvn",
    "--newgvn",
    "--newgvn",
    "--dce",
    "--lower-expect",
    "--aggressive-instcombine",
    "--bdce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--add-discriminators",
          "--strip-dead-prototypes",
          "--slsr",
          "--nary-reassociate",
          "--argpromotion",
          "--consthoist",
          "--loop-vectorize",
          "--correlated-propagation",
          "--sink",
          "--bdce",
          "--flattencfg",
          "--loop-unswitch",
          "--coro-elide",
          "--inject-tli-mappings",
          "--libcalls-shrinkwrap",
          "--functionattrs",
          "--loop-guard-widening",
          "--scalarizer",
          "--aggressive-instcombine",
          "--licm",
          "--mergefunc",
          "--ipsccp",
          "--div-rem-pairs",
          "--loop-rotate",
          "--always-inline",
          "--pgo-memop-opt",
          "--loop-distribute",
          "--mldst-motion",
          "--loop-predication"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--add-discriminators",
      "--strip-dead-prototypes",
      "--slsr",
      "--nary-reassociate",
      "--argpromotion",
      "--consthoist",
      "--loop-vectorize",
      "--correlated-propagation",
      "--sink",
      "--bdce",
      "--flattencfg",
      "--loop-unswitch",
      "--coro-elide",
      "--inject-tli-mappings",
      "--libcalls-shrinkwrap",
      "--functionattrs",
      "--loop-guard-widening",
      "--scalarizer",
      "--aggressive-instcombine",
      "--licm",
      "--mergefunc",
      "--ipsccp",
      "--div-rem-pairs",
      "--loop-rotate",
      "--always-inline",
      "--pgo-memop-opt",
      "--loop-distribute",
      "--mldst-motion",
      "--loop-predication"
    ],
    "performance_vs_Oz": "+0.2%"
  }
}
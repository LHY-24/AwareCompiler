{
  "program_id": "linux-v0_9212.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 74,
    "onePredOneSuc": 65,
    "onePredTwoSuc": 3,
    "oneSuccessor": 73,
    "twoPred": 8,
    "twoPredOneSuc": 2,
    "twoEach": 2,
    "twoSuccessor": 10,
    "morePreds": 6,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 113,
    "BeginPhi": 1,
    "BranchCount": 83,
    "returnInt": 9,
    "CriticalCount": 4,
    "NumEdges": 118,
    "const32Bit": 200,
    "const64Bit": 9,
    "numConstZeroes": 85,
    "numConstOnes": 120,
    "UncondBranches": 73,
    "binaryConstArg": 17,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 84,
    "NumAndInst": 0,
    "BlockMid": 12,
    "BlockLow": 102,
    "NumBitCastInst": 61,
    "NumBrInst": 83,
    "NumCallInst": 55,
    "NumGetElementPtrInst": 39,
    "NumICmpInst": 15,
    "NumLShrInst": 0,
    "NumLoadInst": 189,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 1,
    "NumRetInst": 26,
    "NumSExtInst": 11,
    "NumSelectInst": 1,
    "NumShlInst": 0,
    "NumStoreInst": 112,
    "NumSubInst": 0,
    "NumTruncInst": 3,
    "NumXorInst": 17,
    "NumZExtInst": 11,
    "TotalBlocks": 114,
    "TotalInsts": 716,
    "TotalMemInst": 479,
    "TotalFuncs": 33,
    "ArgsPhi": 2,
    "testUnary": 362
  },
  "baseline_oz_instcount": 715,
  "knowledge_base_entry": [
    "--elim-avail-extern",
    "--ipsccp",
    "--gvn",
    "--globalopt",
    "--aggressive-instcombine",
    "--gvn-hoist",
    "--gvn",
    "--ipsccp",
    "--mergefunc",
    "--simplifycfg",
    "--globalopt",
    "--aggressive-instcombine",
    "--early-cse-memssa",
    "--prune-eh"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--mem2reg",
          "--dse",
          "--always-inline",
          "--prune-eh",
          "--loop-versioning-licm",
          "--canonicalize-aliases",
          "--called-value-propagation",
          "--loop-load-elim",
          "--slp-vectorizer",
          "--load-store-vectorizer",
          "--inject-tli-mappings",
          "--mergefunc",
          "--alignment-from-assumptions",
          "--libcalls-shrinkwrap",
          "--lcssa",
          "--sancov",
          "--coro-cleanup",
          "--coro-elide",
          "--strip-nondebug",
          "--scalarizer",
          "--loop-unroll-and-jam",
          "--lower-expect",
          "--separate-const-offset-from-gep",
          "--pgo-memop-opt",
          "--rpo-functionattrs",
          "--ipsccp",
          "--loop-guard-widening",
          "--inline",
          "--infer-address-spaces",
          "--add-discriminators"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--mem2reg",
      "--dse",
      "--always-inline",
      "--prune-eh",
      "--loop-versioning-licm",
      "--canonicalize-aliases",
      "--called-value-propagation",
      "--loop-load-elim",
      "--slp-vectorizer",
      "--load-store-vectorizer",
      "--inject-tli-mappings",
      "--mergefunc",
      "--alignment-from-assumptions",
      "--libcalls-shrinkwrap",
      "--lcssa",
      "--sancov",
      "--coro-cleanup",
      "--coro-elide",
      "--strip-nondebug",
      "--scalarizer",
      "--loop-unroll-and-jam",
      "--lower-expect",
      "--separate-const-offset-from-gep",
      "--pgo-memop-opt",
      "--rpo-functionattrs",
      "--ipsccp",
      "--loop-guard-widening",
      "--inline",
      "--infer-address-spaces",
      "--add-discriminators"
    ],
    "performance_vs_Oz": "+0.3%"
  }
}
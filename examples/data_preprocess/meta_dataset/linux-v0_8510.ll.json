{
  "program_id": "linux-v0_8510.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 54,
    "onePredOneSuc": 38,
    "onePredTwoSuc": 14,
    "oneSuccessor": 46,
    "twoPred": 13,
    "twoPredOneSuc": 4,
    "twoEach": 6,
    "twoSuccessor": 26,
    "morePreds": 5,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 97,
    "BeginPhi": 2,
    "BranchCount": 72,
    "returnInt": 22,
    "CriticalCount": 3,
    "NumEdges": 98,
    "const32Bit": 371,
    "const64Bit": 27,
    "numConstZeroes": 178,
    "numConstOnes": 113,
    "UncondBranches": 46,
    "binaryConstArg": 14,
    "NumAShrInst": 0,
    "NumAddInst": 6,
    "NumAllocaInst": 91,
    "NumAndInst": 0,
    "BlockMid": 18,
    "BlockLow": 81,
    "NumBitCastInst": 14,
    "NumBrInst": 72,
    "NumCallInst": 62,
    "NumGetElementPtrInst": 139,
    "NumICmpInst": 29,
    "NumLShrInst": 0,
    "NumLoadInst": 247,
    "NumMulInst": 1,
    "NumOrInst": 2,
    "NumPHIInst": 2,
    "NumRetInst": 27,
    "NumSExtInst": 28,
    "NumSelectInst": 1,
    "NumShlInst": 0,
    "NumStoreInst": 138,
    "NumSubInst": 2,
    "NumTruncInst": 3,
    "NumXorInst": 4,
    "NumZExtInst": 10,
    "TotalBlocks": 99,
    "TotalInsts": 884,
    "TotalMemInst": 677,
    "TotalFuncs": 52,
    "ArgsPhi": 4,
    "testUnary": 399
  },
  "baseline_oz_instcount": 884,
  "knowledge_base_entry": [
    "--strip-nondebug",
    "--mergefunc",
    "--lower-constant-intrinsics",
    "--loop-instsimplify",
    "--mem2reg",
    "--globalopt",
    "--sccp",
    "--die",
    "--mergefunc",
    "--gvn",
    "--nary-reassociate",
    "--load-store-vectorizer",
    "--sroa",
    "--mem2reg",
    "--aggressive-instcombine",
    "--lower-constant-intrinsics",
    "--loop-reroll",
    "--newgvn",
    "--bdce",
    "--dse",
    "--slp-vectorizer",
    "--dce",
    "--load-store-vectorizer"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loweratomic",
          "--loop-versioning-licm",
          "--instsimplify",
          "--coro-elide",
          "--mergefunc",
          "--tailcallelim",
          "--lower-guard-intrinsic",
          "--lower-matrix-intrinsics",
          "--reassociate",
          "--gvn",
          "--alignment-from-assumptions",
          "--ipsccp",
          "--simplifycfg"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loweratomic",
      "--loop-versioning-licm",
      "--instsimplify",
      "--coro-elide",
      "--mergefunc",
      "--tailcallelim",
      "--lower-guard-intrinsic",
      "--lower-matrix-intrinsics",
      "--reassociate",
      "--gvn",
      "--alignment-from-assumptions",
      "--ipsccp",
      "--simplifycfg"
    ],
    "performance_vs_Oz": "+0.8%"
  }
}
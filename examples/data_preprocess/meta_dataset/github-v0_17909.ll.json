{
  "program_id": "github-v0_17909.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 9,
    "onePredOneSuc": 7,
    "onePredTwoSuc": 0,
    "oneSuccessor": 9,
    "twoPred": 3,
    "twoPredOneSuc": 0,
    "twoEach": 3,
    "twoSuccessor": 3,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 14,
    "BeginPhi": 0,
    "BranchCount": 12,
    "returnInt": 2,
    "CriticalCount": 0,
    "NumEdges": 15,
    "const32Bit": 34,
    "const64Bit": 10,
    "numConstZeroes": 17,
    "numConstOnes": 14,
    "UncondBranches": 9,
    "binaryConstArg": 15,
    "NumAShrInst": 2,
    "NumAddInst": 6,
    "NumAllocaInst": 9,
    "NumAndInst": 0,
    "BlockMid": 1,
    "BlockLow": 13,
    "NumBitCastInst": 0,
    "NumBrInst": 12,
    "NumCallInst": 3,
    "NumGetElementPtrInst": 13,
    "NumICmpInst": 3,
    "NumLShrInst": 0,
    "NumLoadInst": 35,
    "NumMulInst": 0,
    "NumOrInst": 2,
    "NumPHIInst": 0,
    "NumRetInst": 2,
    "NumSExtInst": 10,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 18,
    "NumSubInst": 0,
    "NumTruncInst": 5,
    "NumXorInst": 2,
    "NumZExtInst": 10,
    "TotalBlocks": 14,
    "TotalInsts": 140,
    "TotalMemInst": 78,
    "TotalFuncs": 3,
    "ArgsPhi": 0,
    "testUnary": 69
  },
  "baseline_oz_instcount": 140,
  "knowledge_base_entry": [
    "--mem2reg",
    "--loop-instsimplify",
    "--gvn-hoist",
    "--aggressive-instcombine",
    "--dse",
    "--licm",
    "--adce",
    "--gvn",
    "--jump-threading",
    "--newgvn",
    "--instsimplify"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--functionattrs",
          "--loop-predication",
          "--rpo-functionattrs",
          "--memcpyopt",
          "--aggressive-instcombine",
          "--insert-gcov-profiling",
          "--coro-elide",
          "--loop-rotate",
          "--loop-interchange",
          "--argpromotion",
          "--mergefunc",
          "--slp-vectorizer",
          "--ipsccp",
          "--infer-address-spaces",
          "--lower-matrix-intrinsics",
          "--licm",
          "--pgo-memop-opt",
          "--loop-unroll-and-jam",
          "--lowerswitch"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+4.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--functionattrs",
      "--loop-predication",
      "--rpo-functionattrs",
      "--memcpyopt",
      "--aggressive-instcombine",
      "--insert-gcov-profiling",
      "--coro-elide",
      "--loop-rotate",
      "--loop-interchange",
      "--argpromotion",
      "--mergefunc",
      "--slp-vectorizer",
      "--ipsccp",
      "--infer-address-spaces",
      "--lower-matrix-intrinsics",
      "--licm",
      "--pgo-memop-opt",
      "--loop-unroll-and-jam",
      "--lowerswitch"
    ],
    "performance_vs_Oz": "+4.3%"
  }
}
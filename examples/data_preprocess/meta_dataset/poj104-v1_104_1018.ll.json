{
  "program_id": "poj104-v1_104_1018.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 4,
    "onePredOneSuc": 3,
    "onePredTwoSuc": 1,
    "oneSuccessor": 3,
    "twoPred": 0,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 2,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 9,
    "BeginPhi": 0,
    "BranchCount": 5,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 7,
    "const32Bit": 10,
    "const64Bit": 4,
    "numConstZeroes": 2,
    "numConstOnes": 6,
    "UncondBranches": 3,
    "binaryConstArg": 2,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 6,
    "NumAndInst": 0,
    "BlockMid": 1,
    "BlockLow": 8,
    "NumBitCastInst": 4,
    "NumBrInst": 5,
    "NumCallInst": 13,
    "NumGetElementPtrInst": 0,
    "NumICmpInst": 2,
    "NumLShrInst": 0,
    "NumLoadInst": 12,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 4,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 6,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 9,
    "TotalInsts": 54,
    "TotalMemInst": 37,
    "TotalFuncs": 11,
    "ArgsPhi": 0,
    "testUnary": 22
  },
  "baseline_oz_instcount": 44,
  "knowledge_base_entry": [
    "--loop-idiom",
    "--instcombine",
    "--nary-reassociate",
    "--lower-expect",
    "--dse",
    "--lower-expect",
    "--instsimplify",
    "--early-cse-memssa",
    "--mem2reg",
    "--loop-instsimplify",
    "--early-cse-memssa",
    "--slp-vectorizer",
    "--die",
    "--lower-expect",
    "--instcombine",
    "--memcpyopt",
    "--newgvn",
    "--mem2reg",
    "--inline",
    "--licm",
    "--inline",
    "--reassociate",
    "--loop-instsimplify",
    "--instcombine",
    "--simplifycfg",
    "--loop-instsimplify",
    "--adce",
    "--dse",
    "--globalopt"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-unswitch",
          "--die",
          "--loop-idiom",
          "--inline",
          "--sroa",
          "--slp-vectorizer",
          "--newgvn",
          "--adce",
          "--add-discriminators",
          "--instnamer",
          "--early-cse-memssa",
          "--scalarizer",
          "--constmerge",
          "--loop-data-prefetch",
          "--flattencfg",
          "--barrier",
          "--slsr",
          "--simplifycfg",
          "--loop-guard-widening",
          "--loop-reroll",
          "--redundant-dbg-inst-elim"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+31.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-unswitch",
      "--die",
      "--loop-idiom",
      "--inline",
      "--sroa",
      "--slp-vectorizer",
      "--newgvn",
      "--adce",
      "--add-discriminators",
      "--instnamer",
      "--early-cse-memssa",
      "--scalarizer",
      "--constmerge",
      "--loop-data-prefetch",
      "--flattencfg",
      "--barrier",
      "--slsr",
      "--simplifycfg",
      "--loop-guard-widening",
      "--loop-reroll",
      "--redundant-dbg-inst-elim"
    ],
    "performance_vs_Oz": "+31.8%"
  }
}
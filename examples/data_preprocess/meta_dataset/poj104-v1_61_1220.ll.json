{
  "program_id": "poj104-v1_61_1220.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 13,
    "onePredOneSuc": 8,
    "onePredTwoSuc": 2,
    "oneSuccessor": 11,
    "twoPred": 6,
    "twoPredOneSuc": 2,
    "twoEach": 1,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 34,
    "BeginPhi": 0,
    "BranchCount": 18,
    "returnInt": 10,
    "CriticalCount": 2,
    "NumEdges": 25,
    "const32Bit": 44,
    "const64Bit": 12,
    "numConstZeroes": 9,
    "numConstOnes": 30,
    "UncondBranches": 11,
    "binaryConstArg": 3,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 24,
    "NumAndInst": 0,
    "BlockMid": 1,
    "BlockLow": 33,
    "NumBitCastInst": 18,
    "NumBrInst": 18,
    "NumCallInst": 36,
    "NumGetElementPtrInst": 10,
    "NumICmpInst": 7,
    "NumLShrInst": 0,
    "NumLoadInst": 45,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 15,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 26,
    "NumSubInst": 2,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 1,
    "TotalBlocks": 34,
    "TotalInsts": 206,
    "TotalMemInst": 141,
    "TotalFuncs": 29,
    "ArgsPhi": 0,
    "testUnary": 88
  },
  "baseline_oz_instcount": 49,
  "knowledge_base_entry": [
    "--aggressive-instcombine",
    "--sroa",
    "--slp-vectorizer",
    "--nary-reassociate",
    "--lower-expect",
    "--sccp",
    "--die",
    "--loop-instsimplify",
    "--ipsccp",
    "--instcombine",
    "--licm",
    "--aggressive-instcombine",
    "--elim-avail-extern",
    "--bdce",
    "--inline",
    "--instsimplify",
    "--load-store-vectorizer",
    "--bdce",
    "--early-cse",
    "--slp-vectorizer",
    "--dse",
    "--lower-constant-intrinsics",
    "--mldst-motion",
    "--mem2reg",
    "--dce",
    "--sccp",
    "--inline",
    "--jump-threading",
    "--reassociate",
    "--adce",
    "--dce",
    "--simplifycfg",
    "--jump-threading",
    "--memcpyopt",
    "--lower-constant-intrinsics",
    "--nary-reassociate",
    "--loop-simplifycfg",
    "--lower-expect",
    "--loop-instsimplify",
    "--lower-constant-intrinsics",
    "--simplifycfg",
    "--loop-simplifycfg",
    "--lower-constant-intrinsics",
    "--early-cse",
    "--lower-expect",
    "--ipsccp",
    "--instcombine",
    "--licm",
    "--aggressive-instcombine",
    "--sroa",
    "--slp-vectorizer",
    "--nary-reassociate",
    "--lower-expect",
    "--newgvn",
    "--indvars",
    "--slp-vectorizer",
    "--lower-constant-intrinsics",
    "--elim-avail-extern",
    "--bdce",
    "--inline",
    "--instsimplify",
    "--load-store-vectorizer",
    "--bdce",
    "--early-cse",
    "--adce",
    "--dce",
    "--simplifycfg",
    "--jump-threading",
    "--adce",
    "--instcombine",
    "-loop-reduce",
    "--instcombine",
    "--globalopt",
    "--lower-expect",
    "--sccp",
    "--die",
    "--loop-instsimplify",
    "--ipsccp",
    "--instcombine",
    "--licm",
    "--aggressive-instcombine",
    "--elim-avail-extern",
    "--loop-deletion",
    "--early-cse",
    "--slp-vectorizer",
    "--instcombine"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--alignment-from-assumptions",
          "--flattencfg",
          "--float2int",
          "--constprop",
          "--cross-dso-cfi",
          "--partially-inline-libcalls",
          "--tailcallelim",
          "--sroa",
          "--infer-address-spaces",
          "--constmerge",
          "--deadargelim",
          "--hotcoldsplit",
          "--elim-avail-extern",
          "--loop-idiom",
          "--early-cse-memssa",
          "--inline",
          "--lowerinvoke",
          "--strip-nondebug",
          "--called-value-propagation",
          "--loop-interchange"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+8.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--alignment-from-assumptions",
      "--flattencfg",
      "--float2int",
      "--constprop",
      "--cross-dso-cfi",
      "--partially-inline-libcalls",
      "--tailcallelim",
      "--sroa",
      "--infer-address-spaces",
      "--constmerge",
      "--deadargelim",
      "--hotcoldsplit",
      "--elim-avail-extern",
      "--loop-idiom",
      "--early-cse-memssa",
      "--inline",
      "--lowerinvoke",
      "--strip-nondebug",
      "--called-value-propagation",
      "--loop-interchange"
    ],
    "performance_vs_Oz": "+8.2%"
  }
}
{
  "program_id": "linux-v0_283.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 7,
    "onePredOneSuc": 5,
    "onePredTwoSuc": 2,
    "oneSuccessor": 6,
    "twoPred": 2,
    "twoPredOneSuc": 1,
    "twoEach": 0,
    "twoSuccessor": 4,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 14,
    "BeginPhi": 0,
    "BranchCount": 10,
    "returnInt": 2,
    "CriticalCount": 2,
    "NumEdges": 14,
    "const32Bit": 22,
    "const64Bit": 3,
    "numConstZeroes": 6,
    "numConstOnes": 13,
    "UncondBranches": 6,
    "binaryConstArg": 3,
    "NumAShrInst": 1,
    "NumAddInst": 0,
    "NumAllocaInst": 11,
    "NumAndInst": 2,
    "BlockMid": 2,
    "BlockLow": 12,
    "NumBitCastInst": 0,
    "NumBrInst": 10,
    "NumCallInst": 2,
    "NumGetElementPtrInst": 5,
    "NumICmpInst": 4,
    "NumLShrInst": 0,
    "NumLoadInst": 21,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 4,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 16,
    "NumSubInst": 0,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 8,
    "TotalBlocks": 14,
    "TotalInsts": 86,
    "TotalMemInst": 55,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 42
  },
  "baseline_oz_instcount": 86,
  "knowledge_base_entry": [
    "--bdce",
    "--load-store-vectorizer",
    "--lower-constant-intrinsics",
    "--die",
    "--aggressive-instcombine",
    "--loweratomic",
    "--globalopt",
    "--loop-instsimplify",
    "--early-cse-memssa",
    "--globalopt",
    "--ipsccp",
    "--globaldce",
    "--aggressive-instcombine",
    "--gvn-hoist",
    "--slp-vectorizer",
    "--indvars",
    "--instcombine",
    "--slsr",
    "--nary-reassociate"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--inline",
          "--sroa",
          "--loop-reroll",
          "--coro-cleanup",
          "--strip-dead-prototypes",
          "--name-anon-globals",
          "--mergereturn",
          "--correlated-propagation",
          "--mergefunc",
          "--float2int",
          "--strip-debug-declare",
          "--cross-dso-cfi",
          "--libcalls-shrinkwrap",
          "--loop-interchange",
          "--loop-unroll-and-jam",
          "--aggressive-instcombine",
          "--partial-inliner",
          "--loop-simplify",
          "--scalarizer",
          "--div-rem-pairs",
          "--coro-split",
          "--rpo-functionattrs",
          "--add-discriminators",
          "--alignment-from-assumptions",
          "--lowerinvoke",
          "--nary-reassociate",
          "--rewrite-statepoints-for-gc",
          "--strip",
          "--loop-fusion"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--inline",
      "--sroa",
      "--loop-reroll",
      "--coro-cleanup",
      "--strip-dead-prototypes",
      "--name-anon-globals",
      "--mergereturn",
      "--correlated-propagation",
      "--mergefunc",
      "--float2int",
      "--strip-debug-declare",
      "--cross-dso-cfi",
      "--libcalls-shrinkwrap",
      "--loop-interchange",
      "--loop-unroll-and-jam",
      "--aggressive-instcombine",
      "--partial-inliner",
      "--loop-simplify",
      "--scalarizer",
      "--div-rem-pairs",
      "--coro-split",
      "--rpo-functionattrs",
      "--add-discriminators",
      "--alignment-from-assumptions",
      "--lowerinvoke",
      "--nary-reassociate",
      "--rewrite-statepoints-for-gc",
      "--strip",
      "--loop-fusion"
    ],
    "performance_vs_Oz": "+1.2%"
  }
}
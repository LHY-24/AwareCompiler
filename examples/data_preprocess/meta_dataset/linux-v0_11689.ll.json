{
  "program_id": "linux-v0_11689.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 102,
    "onePredOneSuc": 83,
    "onePredTwoSuc": 18,
    "oneSuccessor": 95,
    "twoPred": 16,
    "twoPredOneSuc": 7,
    "twoEach": 5,
    "twoSuccessor": 27,
    "morePreds": 4,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 136,
    "BeginPhi": 2,
    "BranchCount": 122,
    "returnInt": 17,
    "CriticalCount": 12,
    "NumEdges": 149,
    "const32Bit": 319,
    "const64Bit": 41,
    "numConstZeroes": 127,
    "numConstOnes": 133,
    "UncondBranches": 95,
    "binaryConstArg": 38,
    "NumAShrInst": 1,
    "NumAddInst": 13,
    "NumAllocaInst": 103,
    "NumAndInst": 11,
    "BlockMid": 15,
    "BlockLow": 123,
    "NumBitCastInst": 13,
    "NumBrInst": 122,
    "NumCallInst": 47,
    "NumGetElementPtrInst": 86,
    "NumICmpInst": 23,
    "NumLShrInst": 3,
    "NumLoadInst": 223,
    "NumMulInst": 1,
    "NumOrInst": 6,
    "NumPHIInst": 2,
    "NumRetInst": 16,
    "NumSExtInst": 7,
    "NumSelectInst": 0,
    "NumShlInst": 8,
    "NumStoreInst": 130,
    "NumSubInst": 3,
    "NumTruncInst": 7,
    "NumXorInst": 0,
    "NumZExtInst": 10,
    "TotalBlocks": 138,
    "TotalInsts": 841,
    "TotalMemInst": 589,
    "TotalFuncs": 39,
    "ArgsPhi": 6,
    "testUnary": 367
  },
  "baseline_oz_instcount": 832,
  "knowledge_base_entry": [
    "--globalopt",
    "--instsimplify",
    "--die",
    "--jump-threading",
    "--die",
    "--reassociate",
    "--globalopt",
    "--mem2reg",
    "--prune-eh",
    "--simplifycfg",
    "--elim-avail-extern",
    "--gvn",
    "--jump-threading",
    "--sccp",
    "--early-cse-memssa",
    "--instcombine",
    "--nary-reassociate",
    "--simplifycfg",
    "--elim-avail-extern",
    "--bdce",
    "--lower-constant-intrinsics",
    "--sroa",
    "--correlated-propagation",
    "--jump-threading",
    "--instsimplify",
    "--die",
    "--lower-expect"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--simplifycfg",
          "--sink",
          "--loop-unroll-and-jam",
          "--ipconstprop",
          "--constprop",
          "--constmerge",
          "--ipsccp",
          "--libcalls-shrinkwrap",
          "--instsimplify",
          "--called-value-propagation",
          "--attributor"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--simplifycfg",
      "--sink",
      "--loop-unroll-and-jam",
      "--ipconstprop",
      "--constprop",
      "--constmerge",
      "--ipsccp",
      "--libcalls-shrinkwrap",
      "--instsimplify",
      "--called-value-propagation",
      "--attributor"
    ],
    "performance_vs_Oz": "+0.1%"
  }
}
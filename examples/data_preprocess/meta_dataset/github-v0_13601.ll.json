{
  "program_id": "github-v0_13601.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 5,
    "onePredOneSuc": 4,
    "onePredTwoSuc": 0,
    "oneSuccessor": 5,
    "twoPred": 2,
    "twoPredOneSuc": 0,
    "twoEach": 1,
    "twoSuccessor": 2,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 11,
    "BeginPhi": 0,
    "BranchCount": 7,
    "returnInt": 3,
    "CriticalCount": 0,
    "NumEdges": 9,
    "const32Bit": 12,
    "const64Bit": 0,
    "numConstZeroes": 3,
    "numConstOnes": 8,
    "UncondBranches": 5,
    "binaryConstArg": 3,
    "NumAShrInst": 1,
    "NumAddInst": 0,
    "NumAllocaInst": 6,
    "NumAndInst": 2,
    "BlockMid": 1,
    "BlockLow": 10,
    "NumBitCastInst": 0,
    "NumBrInst": 7,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 0,
    "NumICmpInst": 3,
    "NumLShrInst": 0,
    "NumLoadInst": 12,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 4,
    "NumSExtInst": 6,
    "NumSelectInst": 1,
    "NumShlInst": 1,
    "NumStoreInst": 10,
    "NumSubInst": 0,
    "NumTruncInst": 3,
    "NumXorInst": 1,
    "NumZExtInst": 1,
    "TotalBlocks": 11,
    "TotalInsts": 66,
    "TotalMemInst": 35,
    "TotalFuncs": 8,
    "ArgsPhi": 0,
    "testUnary": 28
  },
  "baseline_oz_instcount": 66,
  "knowledge_base_entry": [
    "--instcombine",
    "--jump-threading",
    "--gvn",
    "--flattencfg",
    "--aggressive-instcombine",
    "--jump-threading",
    "--prune-eh",
    "--licm",
    "--newgvn",
    "--early-cse-memssa",
    "--indvars",
    "-loop-reduce",
    "--newgvn",
    "--loop-rotate",
    "--sroa",
    "--memcpyopt",
    "--lower-constant-intrinsics",
    "--correlated-propagation",
    "--dse",
    "--simplifycfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--scalarizer",
          "--loop-rotate",
          "--slp-vectorizer",
          "--licm",
          "--lower-expect",
          "--float2int",
          "--sroa",
          "--aggressive-instcombine",
          "--functionattrs",
          "--jump-threading",
          "--coro-early",
          "--coro-split",
          "--strip-dead-prototypes",
          "--loop-instsimplify",
          "--early-cse-memssa",
          "--gvn",
          "--loop-unroll"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+9.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--scalarizer",
      "--loop-rotate",
      "--slp-vectorizer",
      "--licm",
      "--lower-expect",
      "--float2int",
      "--sroa",
      "--aggressive-instcombine",
      "--functionattrs",
      "--jump-threading",
      "--coro-early",
      "--coro-split",
      "--strip-dead-prototypes",
      "--loop-instsimplify",
      "--early-cse-memssa",
      "--gvn",
      "--loop-unroll"
    ],
    "performance_vs_Oz": "+9.1%"
  }
}
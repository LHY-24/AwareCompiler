{
  "program_id": "linux-v0_5162.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 66,
    "onePredOneSuc": 46,
    "onePredTwoSuc": 19,
    "oneSuccessor": 56,
    "twoPred": 14,
    "twoPredOneSuc": 5,
    "twoEach": 6,
    "twoSuccessor": 31,
    "morePreds": 7,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 124,
    "BeginPhi": 0,
    "BranchCount": 87,
    "returnInt": 28,
    "CriticalCount": 12,
    "NumEdges": 118,
    "const32Bit": 344,
    "const64Bit": 17,
    "numConstZeroes": 128,
    "numConstOnes": 143,
    "UncondBranches": 56,
    "binaryConstArg": 9,
    "NumAShrInst": 0,
    "NumAddInst": 3,
    "NumAllocaInst": 118,
    "NumAndInst": 1,
    "BlockMid": 17,
    "BlockLow": 107,
    "NumBitCastInst": 30,
    "NumBrInst": 87,
    "NumCallInst": 89,
    "NumGetElementPtrInst": 98,
    "NumICmpInst": 34,
    "NumLShrInst": 0,
    "NumLoadInst": 272,
    "NumMulInst": 0,
    "NumOrInst": 12,
    "NumPHIInst": 0,
    "NumRetInst": 37,
    "NumSExtInst": 2,
    "NumSelectInst": 3,
    "NumShlInst": 0,
    "NumStoreInst": 168,
    "NumSubInst": 0,
    "NumTruncInst": 1,
    "NumXorInst": 2,
    "NumZExtInst": 8,
    "TotalBlocks": 124,
    "TotalInsts": 971,
    "TotalMemInst": 745,
    "TotalFuncs": 76,
    "ArgsPhi": 0,
    "testUnary": 437
  },
  "baseline_oz_instcount": 972,
  "knowledge_base_entry": [
    "--mem2reg",
    "--globalopt",
    "--gvn-hoist",
    "--slsr",
    "--early-cse-memssa",
    "--slp-vectorizer",
    "--correlated-propagation",
    "--mergefunc",
    "--bdce",
    "--reassociate",
    "--elim-avail-extern",
    "--jump-threading",
    "--memcpyopt",
    "--instsimplify"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--memcpyopt",
          "--hotcoldsplit",
          "--forceattrs",
          "--add-discriminators",
          "--mergefunc",
          "--slp-vectorizer",
          "--consthoist",
          "--lower-widenable-condition",
          "--correlated-propagation",
          "--loop-reroll",
          "--coro-cleanup",
          "--adce",
          "--tailcallelim",
          "--name-anon-globals",
          "--coro-split",
          "--loop-vectorize",
          "--div-rem-pairs",
          "--aggressive-instcombine",
          "--dce",
          "--lower-expect",
          "--die",
          "--lowerinvoke",
          "--lower-constant-intrinsics",
          "--deadargelim",
          "--loop-rotate",
          "--mem2reg"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--memcpyopt",
      "--hotcoldsplit",
      "--forceattrs",
      "--add-discriminators",
      "--mergefunc",
      "--slp-vectorizer",
      "--consthoist",
      "--lower-widenable-condition",
      "--correlated-propagation",
      "--loop-reroll",
      "--coro-cleanup",
      "--adce",
      "--tailcallelim",
      "--name-anon-globals",
      "--coro-split",
      "--loop-vectorize",
      "--div-rem-pairs",
      "--aggressive-instcombine",
      "--dce",
      "--lower-expect",
      "--die",
      "--lowerinvoke",
      "--lower-constant-intrinsics",
      "--deadargelim",
      "--loop-rotate",
      "--mem2reg"
    ],
    "performance_vs_Oz": "+0.3%"
  }
}
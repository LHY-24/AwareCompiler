{
  "program_id": "linux-v0_9612.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 75,
    "onePredOneSuc": 64,
    "onePredTwoSuc": 4,
    "oneSuccessor": 74,
    "twoPred": 12,
    "twoPredOneSuc": 2,
    "twoEach": 1,
    "twoSuccessor": 14,
    "morePreds": 5,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 123,
    "BeginPhi": 2,
    "BranchCount": 88,
    "returnInt": 23,
    "CriticalCount": 7,
    "NumEdges": 122,
    "const32Bit": 346,
    "const64Bit": 17,
    "numConstZeroes": 142,
    "numConstOnes": 208,
    "UncondBranches": 74,
    "binaryConstArg": 11,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 151,
    "NumAndInst": 3,
    "BlockMid": 20,
    "BlockLow": 105,
    "NumBitCastInst": 48,
    "NumBrInst": 88,
    "NumCallInst": 81,
    "NumGetElementPtrInst": 75,
    "NumICmpInst": 26,
    "NumLShrInst": 1,
    "NumLoadInst": 249,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 2,
    "NumRetInst": 33,
    "NumSExtInst": 12,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 169,
    "NumSubInst": 1,
    "NumTruncInst": 4,
    "NumXorInst": 7,
    "NumZExtInst": 15,
    "TotalBlocks": 125,
    "TotalInsts": 974,
    "TotalMemInst": 725,
    "TotalFuncs": 41,
    "ArgsPhi": 4,
    "testUnary": 484
  },
  "baseline_oz_instcount": 973,
  "knowledge_base_entry": [
    "--globalopt",
    "--loweratomic",
    "--globalopt",
    "--reassociate",
    "--slp-vectorizer",
    "--early-cse",
    "--mergefunc",
    "--globaldce",
    "--aggressive-instcombine",
    "--mem2reg",
    "--sccp",
    "--instsimplify",
    "--dce",
    "--simplifycfg",
    "--lower-expect",
    "--sroa",
    "--ipsccp",
    "--newgvn",
    "--dce",
    "--inline",
    "--instcombine",
    "--load-store-vectorizer",
    "--aggressive-instcombine",
    "--globaldce",
    "--ipsccp",
    "--elim-avail-extern",
    "--mldst-motion"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "-loop-reduce",
          "--strip",
          "--aggressive-instcombine",
          "--libcalls-shrinkwrap",
          "--instsimplify",
          "--inline",
          "--loop-simplify",
          "--name-anon-globals",
          "--loop-load-elim",
          "--memcpyopt",
          "--dse",
          "--insert-gcov-profiling",
          "--coro-cleanup",
          "--redundant-dbg-inst-elim",
          "--sccp",
          "--lcssa",
          "--ipconstprop",
          "--load-store-vectorizer",
          "--simple-loop-unswitch",
          "--loop-vectorize",
          "--loop-interchange",
          "--instnamer",
          "--mem2reg",
          "--globalopt",
          "--alignment-from-assumptions",
          "--nary-reassociate",
          "--adce",
          "--indvars",
          "--add-discriminators",
          "--loop-rotate"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "-loop-reduce",
      "--strip",
      "--aggressive-instcombine",
      "--libcalls-shrinkwrap",
      "--instsimplify",
      "--inline",
      "--loop-simplify",
      "--name-anon-globals",
      "--loop-load-elim",
      "--memcpyopt",
      "--dse",
      "--insert-gcov-profiling",
      "--coro-cleanup",
      "--redundant-dbg-inst-elim",
      "--sccp",
      "--lcssa",
      "--ipconstprop",
      "--load-store-vectorizer",
      "--simple-loop-unswitch",
      "--loop-vectorize",
      "--loop-interchange",
      "--instnamer",
      "--mem2reg",
      "--globalopt",
      "--alignment-from-assumptions",
      "--nary-reassociate",
      "--adce",
      "--indvars",
      "--add-discriminators",
      "--loop-rotate"
    ],
    "performance_vs_Oz": "+0.4%"
  }
}
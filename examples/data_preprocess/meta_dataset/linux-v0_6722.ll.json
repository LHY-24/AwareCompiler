{
  "program_id": "linux-v0_6722.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 35,
    "onePredOneSuc": 25,
    "onePredTwoSuc": 6,
    "oneSuccessor": 32,
    "twoPred": 18,
    "twoPredOneSuc": 3,
    "twoEach": 15,
    "twoSuccessor": 21,
    "morePreds": 3,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 58,
    "BeginPhi": 2,
    "BranchCount": 53,
    "returnInt": 23,
    "CriticalCount": 17,
    "NumEdges": 81,
    "const32Bit": 154,
    "const64Bit": 19,
    "numConstZeroes": 73,
    "numConstOnes": 56,
    "UncondBranches": 32,
    "binaryConstArg": 2,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 31,
    "NumAndInst": 1,
    "BlockMid": 6,
    "BlockLow": 54,
    "NumBitCastInst": 17,
    "NumBrInst": 53,
    "NumCallInst": 58,
    "NumGetElementPtrInst": 34,
    "NumICmpInst": 21,
    "NumLShrInst": 0,
    "NumLoadInst": 78,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 2,
    "NumRetInst": 3,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 44,
    "NumSubInst": 1,
    "NumTruncInst": 4,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 60,
    "TotalInsts": 355,
    "TotalMemInst": 245,
    "TotalFuncs": 30,
    "ArgsPhi": 4,
    "testUnary": 134
  },
  "baseline_oz_instcount": 359,
  "knowledge_base_entry": [
    "--simplifycfg",
    "--die",
    "--ipsccp",
    "--loop-simplifycfg",
    "--dse",
    "--loop-rotate",
    "--aggressive-instcombine",
    "--gvn-hoist",
    "--slsr",
    "--instcombine",
    "--slp-vectorizer",
    "--mldst-motion",
    "--instcombine",
    "--mem2reg",
    "--elim-avail-extern",
    "--sroa",
    "--simplifycfg",
    "--gvn",
    "--ipsccp",
    "--early-cse",
    "--early-cse-memssa",
    "--loop-rotate",
    "--licm",
    "--loop-rotate",
    "--loop-simplifycfg",
    "--early-cse-memssa"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--sroa",
          "--add-discriminators",
          "--loweratomic",
          "--insert-gcov-profiling",
          "--slp-vectorizer",
          "--loop-predication",
          "--ipsccp",
          "--loop-rotate",
          "--always-inline",
          "--reassociate",
          "--elim-avail-extern",
          "--post-inline-ee-instrument",
          "--inline"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--sroa",
      "--add-discriminators",
      "--loweratomic",
      "--insert-gcov-profiling",
      "--slp-vectorizer",
      "--loop-predication",
      "--ipsccp",
      "--loop-rotate",
      "--always-inline",
      "--reassociate",
      "--elim-avail-extern",
      "--post-inline-ee-instrument",
      "--inline"
    ],
    "performance_vs_Oz": "+1.7%"
  }
}
{
  "program_id": "github-v0_29842.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 15,
    "onePredOneSuc": 9,
    "onePredTwoSuc": 3,
    "oneSuccessor": 13,
    "twoPred": 6,
    "twoPredOneSuc": 3,
    "twoEach": 3,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 24,
    "BeginPhi": 0,
    "BranchCount": 20,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 27,
    "const32Bit": 41,
    "const64Bit": 59,
    "numConstZeroes": 56,
    "numConstOnes": 28,
    "UncondBranches": 13,
    "binaryConstArg": 12,
    "NumAShrInst": 0,
    "NumAddInst": 4,
    "NumAllocaInst": 15,
    "NumAndInst": 2,
    "BlockMid": 6,
    "BlockLow": 18,
    "NumBitCastInst": 12,
    "NumBrInst": 20,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 45,
    "NumICmpInst": 7,
    "NumLShrInst": 1,
    "NumLoadInst": 53,
    "NumMulInst": 2,
    "NumOrInst": 3,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 3,
    "NumStoreInst": 27,
    "NumSubInst": 3,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 12,
    "TotalBlocks": 24,
    "TotalInsts": 225,
    "TotalMemInst": 147,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 97
  },
  "baseline_oz_instcount": 225,
  "knowledge_base_entry": [
    "--partially-inline-libcalls",
    "--gvn",
    "--early-cse",
    "--gvn-hoist",
    "--early-cse",
    "--simplifycfg",
    "--prune-eh",
    "--inline",
    "--mergefunc",
    "--aggressive-instcombine",
    "--jump-threading",
    "--slsr",
    "--loop-simplifycfg",
    "--ipsccp",
    "--globaldce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--strip-nondebug",
          "--coro-early",
          "--constmerge",
          "--functionattrs",
          "--loop-interchange",
          "--redundant-dbg-inst-elim",
          "--loop-distribute",
          "--flattencfg",
          "--dse",
          "--speculative-execution",
          "--instsimplify",
          "--loop-predication",
          "--barrier",
          "--lower-expect",
          "--argpromotion",
          "--loop-unroll",
          "--loweratomic",
          "--instnamer",
          "--deadargelim",
          "--loop-instsimplify",
          "--indvars",
          "--partial-inliner",
          "--loop-deletion",
          "--instcombine",
          "--licm",
          "--aggressive-instcombine"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--strip-nondebug",
      "--coro-early",
      "--constmerge",
      "--functionattrs",
      "--loop-interchange",
      "--redundant-dbg-inst-elim",
      "--loop-distribute",
      "--flattencfg",
      "--dse",
      "--speculative-execution",
      "--instsimplify",
      "--loop-predication",
      "--barrier",
      "--lower-expect",
      "--argpromotion",
      "--loop-unroll",
      "--loweratomic",
      "--instnamer",
      "--deadargelim",
      "--loop-instsimplify",
      "--indvars",
      "--partial-inliner",
      "--loop-deletion",
      "--instcombine",
      "--licm",
      "--aggressive-instcombine"
    ],
    "performance_vs_Oz": "+0.9%"
  }
}
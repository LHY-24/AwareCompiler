{
  "program_id": "linux-v0_8565.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 54,
    "onePredOneSuc": 36,
    "onePredTwoSuc": 18,
    "oneSuccessor": 43,
    "twoPred": 13,
    "twoPredOneSuc": 5,
    "twoEach": 3,
    "twoSuccessor": 27,
    "morePreds": 3,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 94,
    "BeginPhi": 0,
    "BranchCount": 70,
    "returnInt": 13,
    "CriticalCount": 7,
    "NumEdges": 97,
    "const32Bit": 354,
    "const64Bit": 14,
    "numConstZeroes": 181,
    "numConstOnes": 101,
    "UncondBranches": 43,
    "binaryConstArg": 29,
    "NumAShrInst": 0,
    "NumAddInst": 6,
    "NumAllocaInst": 70,
    "NumAndInst": 5,
    "BlockMid": 14,
    "BlockLow": 80,
    "NumBitCastInst": 18,
    "NumBrInst": 70,
    "NumCallInst": 50,
    "NumGetElementPtrInst": 133,
    "NumICmpInst": 31,
    "NumLShrInst": 2,
    "NumLoadInst": 252,
    "NumMulInst": 3,
    "NumOrInst": 2,
    "NumPHIInst": 0,
    "NumRetInst": 24,
    "NumSExtInst": 20,
    "NumSelectInst": 0,
    "NumShlInst": 3,
    "NumStoreInst": 112,
    "NumSubInst": 2,
    "NumTruncInst": 4,
    "NumXorInst": 8,
    "NumZExtInst": 7,
    "TotalBlocks": 94,
    "TotalInsts": 829,
    "TotalMemInst": 617,
    "TotalFuncs": 41,
    "ArgsPhi": 0,
    "testUnary": 377
  },
  "baseline_oz_instcount": 830,
  "knowledge_base_entry": [
    "--tailcallelim",
    "--gvn-hoist",
    "--memcpyopt",
    "--early-cse-memssa",
    "--jump-threading",
    "--sroa",
    "--gvn",
    "--slp-vectorizer",
    "--mldst-motion",
    "--jump-threading",
    "--early-cse",
    "--bdce",
    "--jump-threading"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--mergereturn",
          "--div-rem-pairs",
          "--scalarizer",
          "--lower-matrix-intrinsics",
          "--hotcoldsplit",
          "--coro-cleanup",
          "--forceattrs",
          "--load-store-vectorizer",
          "--constprop",
          "--sccp"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--mergereturn",
      "--div-rem-pairs",
      "--scalarizer",
      "--lower-matrix-intrinsics",
      "--hotcoldsplit",
      "--coro-cleanup",
      "--forceattrs",
      "--load-store-vectorizer",
      "--constprop",
      "--sccp"
    ],
    "performance_vs_Oz": "+0.1%"
  }
}
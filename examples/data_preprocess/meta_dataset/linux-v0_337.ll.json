{
  "program_id": "linux-v0_337.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 36,
    "onePredOneSuc": 24,
    "onePredTwoSuc": 11,
    "oneSuccessor": 29,
    "twoPred": 9,
    "twoPredOneSuc": 3,
    "twoEach": 3,
    "twoSuccessor": 19,
    "morePreds": 3,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 69,
    "BeginPhi": 0,
    "BranchCount": 48,
    "returnInt": 27,
    "CriticalCount": 6,
    "NumEdges": 67,
    "const32Bit": 187,
    "const64Bit": 13,
    "numConstZeroes": 64,
    "numConstOnes": 76,
    "UncondBranches": 29,
    "binaryConstArg": 17,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 59,
    "NumAndInst": 7,
    "BlockMid": 8,
    "BlockLow": 61,
    "NumBitCastInst": 12,
    "NumBrInst": 48,
    "NumCallInst": 61,
    "NumGetElementPtrInst": 37,
    "NumICmpInst": 19,
    "NumLShrInst": 1,
    "NumLoadInst": 172,
    "NumMulInst": 0,
    "NumOrInst": 6,
    "NumPHIInst": 0,
    "NumRetInst": 21,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 98,
    "NumSubInst": 0,
    "NumTruncInst": 5,
    "NumXorInst": 4,
    "NumZExtInst": 5,
    "TotalBlocks": 69,
    "TotalInsts": 562,
    "TotalMemInst": 427,
    "TotalFuncs": 38,
    "ArgsPhi": 0,
    "testUnary": 260
  },
  "baseline_oz_instcount": 562,
  "knowledge_base_entry": [
    "--strip",
    "--mergefunc",
    "-loop-reduce",
    "--gvn-hoist",
    "--lower-expect",
    "--aggressive-instcombine",
    "--newgvn",
    "--mem2reg",
    "--bdce",
    "--sroa",
    "--gvn",
    "--early-cse",
    "--jump-threading",
    "--loop-reroll",
    "--instcombine",
    "--prune-eh",
    "--early-cse-memssa",
    "--early-cse-memssa",
    "--lower-constant-intrinsics",
    "--memcpyopt",
    "--loop-simplifycfg",
    "--loop-rotate",
    "--elim-avail-extern",
    "--memcpyopt",
    "--simplifycfg",
    "--mergefunc"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--constmerge",
          "--nary-reassociate",
          "--called-value-propagation",
          "--loop-simplifycfg",
          "--aggressive-instcombine",
          "--hotcoldsplit",
          "--attributor",
          "--coro-early",
          "--loop-unswitch",
          "--inject-tli-mappings",
          "--early-cse-memssa",
          "--globalopt",
          "--inline",
          "--loop-versioning-licm",
          "--loop-reroll",
          "--guard-widening",
          "--load-store-vectorizer"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--constmerge",
      "--nary-reassociate",
      "--called-value-propagation",
      "--loop-simplifycfg",
      "--aggressive-instcombine",
      "--hotcoldsplit",
      "--attributor",
      "--coro-early",
      "--loop-unswitch",
      "--inject-tli-mappings",
      "--early-cse-memssa",
      "--globalopt",
      "--inline",
      "--loop-versioning-licm",
      "--loop-reroll",
      "--guard-widening",
      "--load-store-vectorizer"
    ],
    "performance_vs_Oz": "+1.1%"
  }
}
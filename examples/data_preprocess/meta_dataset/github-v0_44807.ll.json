{
  "program_id": "github-v0_44807.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 80,
    "onePredOneSuc": 48,
    "onePredTwoSuc": 32,
    "oneSuccessor": 75,
    "twoPred": 54,
    "twoPredOneSuc": 22,
    "twoEach": 24,
    "twoSuccessor": 66,
    "morePreds": 9,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 152,
    "BeginPhi": 1,
    "BranchCount": 141,
    "returnInt": 10,
    "CriticalCount": 66,
    "NumEdges": 218,
    "const32Bit": 280,
    "const64Bit": 15,
    "numConstZeroes": 91,
    "numConstOnes": 53,
    "UncondBranches": 75,
    "binaryConstArg": 124,
    "NumAShrInst": 5,
    "NumAddInst": 13,
    "NumAllocaInst": 36,
    "NumAndInst": 81,
    "BlockMid": 9,
    "BlockLow": 144,
    "NumBitCastInst": 1,
    "NumBrInst": 141,
    "NumCallInst": 28,
    "NumGetElementPtrInst": 23,
    "NumICmpInst": 68,
    "NumLShrInst": 1,
    "NumLoadInst": 200,
    "NumMulInst": 5,
    "NumOrInst": 26,
    "NumPHIInst": 1,
    "NumRetInst": 10,
    "NumSExtInst": 4,
    "NumSelectInst": 2,
    "NumShlInst": 4,
    "NumStoreInst": 114,
    "NumSubInst": 3,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 8,
    "TotalBlocks": 153,
    "TotalInsts": 803,
    "TotalMemInst": 401,
    "TotalFuncs": 19,
    "ArgsPhi": 2,
    "testUnary": 267
  },
  "baseline_oz_instcount": 804,
  "knowledge_base_entry": [
    "--prune-eh",
    "--instcombine",
    "--aggressive-instcombine",
    "--elim-avail-extern",
    "--nary-reassociate",
    "--elim-avail-extern",
    "--bdce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-instsimplify",
          "--lower-expect",
          "--loop-guard-widening",
          "--ipconstprop",
          "--inline",
          "--redundant-dbg-inst-elim",
          "--nary-reassociate",
          "--aggressive-instcombine",
          "--loop-load-elim",
          "--called-value-propagation",
          "--sroa",
          "--partial-inliner",
          "--loop-vectorize",
          "--lower-guard-intrinsic",
          "--loop-fusion",
          "--coro-elide"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-instsimplify",
      "--lower-expect",
      "--loop-guard-widening",
      "--ipconstprop",
      "--inline",
      "--redundant-dbg-inst-elim",
      "--nary-reassociate",
      "--aggressive-instcombine",
      "--loop-load-elim",
      "--called-value-propagation",
      "--sroa",
      "--partial-inliner",
      "--loop-vectorize",
      "--lower-guard-intrinsic",
      "--loop-fusion",
      "--coro-elide"
    ],
    "performance_vs_Oz": "+0.5%"
  }
}
{
  "program_id": "linux-v0_2556.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 108,
    "onePredOneSuc": 83,
    "onePredTwoSuc": 24,
    "oneSuccessor": 112,
    "twoPred": 24,
    "twoPredOneSuc": 18,
    "twoEach": 5,
    "twoSuccessor": 31,
    "morePreds": 19,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 167,
    "BeginPhi": 0,
    "BranchCount": 143,
    "returnInt": 26,
    "CriticalCount": 60,
    "NumEdges": 275,
    "const32Bit": 406,
    "const64Bit": 7,
    "numConstZeroes": 149,
    "numConstOnes": 73,
    "UncondBranches": 112,
    "binaryConstArg": 38,
    "NumAShrInst": 0,
    "NumAddInst": 5,
    "NumAllocaInst": 45,
    "NumAndInst": 16,
    "BlockMid": 9,
    "BlockLow": 158,
    "NumBitCastInst": 15,
    "NumBrInst": 143,
    "NumCallInst": 41,
    "NumGetElementPtrInst": 104,
    "NumICmpInst": 32,
    "NumLShrInst": 10,
    "NumLoadInst": 221,
    "NumMulInst": 3,
    "NumOrInst": 3,
    "NumPHIInst": 0,
    "NumRetInst": 16,
    "NumSExtInst": 7,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 141,
    "NumSubInst": 1,
    "NumTruncInst": 15,
    "NumXorInst": 4,
    "NumZExtInst": 37,
    "TotalBlocks": 167,
    "TotalInsts": 869,
    "TotalMemInst": 552,
    "TotalFuncs": 26,
    "ArgsPhi": 0,
    "testUnary": 341
  },
  "baseline_oz_instcount": 869,
  "knowledge_base_entry": [
    "--prune-eh",
    "--aggressive-instcombine",
    "--mergefunc",
    "--lower-constant-intrinsics",
    "--gvn",
    "--slp-vectorizer",
    "--dce",
    "--reassociate",
    "--lower-constant-intrinsics",
    "--mergefunc",
    "--aggressive-instcombine",
    "--dse",
    "--licm",
    "--flattencfg",
    "--load-store-vectorizer",
    "--die",
    "--aggressive-instcombine",
    "--loop-rotate",
    "--gvn",
    "--licm"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loweratomic",
          "--inject-tli-mappings",
          "--simplifycfg",
          "--lowerinvoke",
          "--lower-widenable-condition",
          "--elim-avail-extern",
          "--loop-idiom",
          "--coro-early",
          "--jump-threading",
          "--loop-load-elim",
          "--partial-inliner",
          "--strip-debug-declare",
          "--libcalls-shrinkwrap",
          "--constprop",
          "--loop-unroll-and-jam",
          "--loop-instsimplify",
          "--loop-unroll",
          "--div-rem-pairs",
          "--inferattrs",
          "--mergefunc",
          "--strip-dead-prototypes",
          "--loop-data-prefetch",
          "--simple-loop-unswitch",
          "--barrier",
          "--aggressive-instcombine",
          "--loop-predication",
          "--cross-dso-cfi",
          "--deadargelim"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loweratomic",
      "--inject-tli-mappings",
      "--simplifycfg",
      "--lowerinvoke",
      "--lower-widenable-condition",
      "--elim-avail-extern",
      "--loop-idiom",
      "--coro-early",
      "--jump-threading",
      "--loop-load-elim",
      "--partial-inliner",
      "--strip-debug-declare",
      "--libcalls-shrinkwrap",
      "--constprop",
      "--loop-unroll-and-jam",
      "--loop-instsimplify",
      "--loop-unroll",
      "--div-rem-pairs",
      "--inferattrs",
      "--mergefunc",
      "--strip-dead-prototypes",
      "--loop-data-prefetch",
      "--simple-loop-unswitch",
      "--barrier",
      "--aggressive-instcombine",
      "--loop-predication",
      "--cross-dso-cfi",
      "--deadargelim"
    ],
    "performance_vs_Oz": "+1.3%"
  }
}
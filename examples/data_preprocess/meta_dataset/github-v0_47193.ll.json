{
  "program_id": "github-v0_47193.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 0,
    "onePredOneSuc": 0,
    "onePredTwoSuc": 0,
    "oneSuccessor": 0,
    "twoPred": 0,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 0,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 3,
    "BeginPhi": 0,
    "BranchCount": 0,
    "returnInt": 3,
    "CriticalCount": 0,
    "NumEdges": 0,
    "const32Bit": 32,
    "const64Bit": 2,
    "numConstZeroes": 15,
    "numConstOnes": 11,
    "UncondBranches": 0,
    "binaryConstArg": 2,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 8,
    "NumAndInst": 0,
    "BlockMid": 2,
    "BlockLow": 1,
    "NumBitCastInst": 2,
    "NumBrInst": 0,
    "NumCallInst": 6,
    "NumGetElementPtrInst": 10,
    "NumICmpInst": 1,
    "NumLShrInst": 0,
    "NumLoadInst": 21,
    "NumMulInst": 1,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 12,
    "NumSubInst": 0,
    "NumTruncInst": 2,
    "NumXorInst": 1,
    "NumZExtInst": 4,
    "TotalBlocks": 3,
    "TotalInsts": 73,
    "TotalMemInst": 57,
    "TotalFuncs": 7,
    "ArgsPhi": 0,
    "testUnary": 37
  },
  "baseline_oz_instcount": 73,
  "knowledge_base_entry": [
    "--dce",
    "--loop-simplifycfg",
    "--loop-instsimplify",
    "--aggressive-instcombine",
    "--gvn",
    "--slp-vectorizer"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--callsite-splitting",
          "--instsimplify",
          "--dce",
          "--loop-rotate",
          "--called-value-propagation",
          "--scalarizer",
          "--sink",
          "--globaldce",
          "--attributor",
          "--coro-cleanup",
          "-loop-reduce",
          "--loop-vectorize",
          "--coro-early",
          "--coro-split",
          "--sroa",
          "--aggressive-instcombine",
          "--deadargelim",
          "--float2int",
          "--forceattrs",
          "--slp-vectorizer",
          "--partially-inline-libcalls",
          "--strip-dead-prototypes",
          "--gvn",
          "--loop-fusion",
          "--strip-debug-declare",
          "--globalsplit",
          "--adce",
          "--globalopt",
          "--partial-inliner"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--callsite-splitting",
      "--instsimplify",
      "--dce",
      "--loop-rotate",
      "--called-value-propagation",
      "--scalarizer",
      "--sink",
      "--globaldce",
      "--attributor",
      "--coro-cleanup",
      "-loop-reduce",
      "--loop-vectorize",
      "--coro-early",
      "--coro-split",
      "--sroa",
      "--aggressive-instcombine",
      "--deadargelim",
      "--float2int",
      "--forceattrs",
      "--slp-vectorizer",
      "--partially-inline-libcalls",
      "--strip-dead-prototypes",
      "--gvn",
      "--loop-fusion",
      "--strip-debug-declare",
      "--globalsplit",
      "--adce",
      "--globalopt",
      "--partial-inliner"
    ],
    "performance_vs_Oz": "+1.4%"
  }
}
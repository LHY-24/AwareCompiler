{
  "program_id": "github-v0_15354.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 10,
    "onePredOneSuc": 7,
    "onePredTwoSuc": 1,
    "oneSuccessor": 10,
    "twoPred": 4,
    "twoPredOneSuc": 1,
    "twoEach": 3,
    "twoSuccessor": 4,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 18,
    "BeginPhi": 0,
    "BranchCount": 14,
    "returnInt": 9,
    "CriticalCount": 1,
    "NumEdges": 18,
    "const32Bit": 58,
    "const64Bit": 8,
    "numConstZeroes": 12,
    "numConstOnes": 43,
    "UncondBranches": 10,
    "binaryConstArg": 8,
    "NumAShrInst": 0,
    "NumAddInst": 5,
    "NumAllocaInst": 34,
    "NumAndInst": 0,
    "BlockMid": 5,
    "BlockLow": 13,
    "NumBitCastInst": 17,
    "NumBrInst": 14,
    "NumCallInst": 37,
    "NumGetElementPtrInst": 3,
    "NumICmpInst": 3,
    "NumLShrInst": 0,
    "NumLoadInst": 111,
    "NumMulInst": 8,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 4,
    "NumSExtInst": 13,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 39,
    "NumSubInst": 0,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 18,
    "TotalInsts": 298,
    "TotalMemInst": 224,
    "TotalFuncs": 14,
    "ArgsPhi": 0,
    "testUnary": 181
  },
  "baseline_oz_instcount": 298,
  "knowledge_base_entry": [
    "--dce",
    "--gvn-hoist",
    "-loop-reduce",
    "--sroa",
    "--licm",
    "--bdce",
    "--lower-expect",
    "--prune-eh",
    "--simplifycfg",
    "--aggressive-instcombine",
    "--licm",
    "--early-cse",
    "--prune-eh",
    "--elim-avail-extern",
    "--ipsccp",
    "--early-cse-memssa",
    "--loop-fusion",
    "--simplifycfg",
    "--die",
    "--dse",
    "--instcombine"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--aggressive-instcombine",
          "--elim-avail-extern",
          "--jump-threading",
          "--scalarizer",
          "--reassociate",
          "--lower-expect",
          "--globalsplit",
          "--loop-instsimplify",
          "--gvn",
          "--deadargelim",
          "--ipconstprop",
          "--separate-const-offset-from-gep"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--aggressive-instcombine",
      "--elim-avail-extern",
      "--jump-threading",
      "--scalarizer",
      "--reassociate",
      "--lower-expect",
      "--globalsplit",
      "--loop-instsimplify",
      "--gvn",
      "--deadargelim",
      "--ipconstprop",
      "--separate-const-offset-from-gep"
    ],
    "performance_vs_Oz": "+1.3%"
  }
}
{
  "program_id": "github-v0_3357.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 5,
    "onePred": 55,
    "onePredOneSuc": 38,
    "onePredTwoSuc": 17,
    "oneSuccessor": 50,
    "twoPred": 21,
    "twoPredOneSuc": 11,
    "twoEach": 10,
    "twoSuccessor": 29,
    "morePreds": 3,
    "BB03Phi": 5,
    "BBHiPhi": 0,
    "BBNoPhi": 76,
    "BeginPhi": 5,
    "BranchCount": 79,
    "returnInt": 1,
    "CriticalCount": 6,
    "NumEdges": 108,
    "const32Bit": 29,
    "const64Bit": 45,
    "numConstZeroes": 22,
    "numConstOnes": 49,
    "UncondBranches": 50,
    "binaryConstArg": 21,
    "NumAShrInst": 0,
    "NumAddInst": 28,
    "NumAllocaInst": 18,
    "NumAndInst": 0,
    "BlockMid": 1,
    "BlockLow": 80,
    "NumBitCastInst": 0,
    "NumBrInst": 79,
    "NumCallInst": 4,
    "NumGetElementPtrInst": 25,
    "NumICmpInst": 29,
    "NumLShrInst": 0,
    "NumLoadInst": 154,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 5,
    "NumRetInst": 2,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 64,
    "NumSubInst": 12,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 81,
    "TotalInsts": 427,
    "TotalMemInst": 265,
    "TotalFuncs": 5,
    "ArgsPhi": 10,
    "testUnary": 176
  },
  "baseline_oz_instcount": 428,
  "knowledge_base_entry": [
    "--memcpyopt",
    "--simplifycfg",
    "--slp-vectorizer",
    "--mldst-motion",
    "--load-store-vectorizer"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--mem2reg",
          "--coro-elide",
          "--loop-distribute",
          "--lower-widenable-condition",
          "--lcssa",
          "--add-discriminators",
          "--div-rem-pairs",
          "--called-value-propagation",
          "--ee-instrument",
          "--libcalls-shrinkwrap"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--mem2reg",
      "--coro-elide",
      "--loop-distribute",
      "--lower-widenable-condition",
      "--lcssa",
      "--add-discriminators",
      "--div-rem-pairs",
      "--called-value-propagation",
      "--ee-instrument",
      "--libcalls-shrinkwrap"
    ],
    "performance_vs_Oz": "+0.2%"
  }
}
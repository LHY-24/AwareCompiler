{
  "program_id": "tensorflow-v0_1582.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 5,
    "onePredOneSuc": 2,
    "onePredTwoSuc": 2,
    "oneSuccessor": 3,
    "twoPred": 4,
    "twoPredOneSuc": 1,
    "twoEach": 1,
    "twoSuccessor": 5,
    "morePreds": 0,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 25,
    "BeginPhi": 2,
    "BranchCount": 8,
    "returnInt": 3,
    "CriticalCount": 5,
    "NumEdges": 13,
    "const32Bit": 42,
    "const64Bit": 30,
    "numConstZeroes": 52,
    "numConstOnes": 15,
    "UncondBranches": 3,
    "binaryConstArg": 6,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 2,
    "NumAndInst": 2,
    "BlockMid": 2,
    "BlockLow": 25,
    "NumBitCastInst": 20,
    "NumBrInst": 8,
    "NumCallInst": 22,
    "NumGetElementPtrInst": 22,
    "NumICmpInst": 6,
    "NumLShrInst": 2,
    "NumLoadInst": 28,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 3,
    "NumRetInst": 18,
    "NumSExtInst": 0,
    "NumSelectInst": 4,
    "NumShlInst": 0,
    "NumStoreInst": 2,
    "NumSubInst": 1,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 2,
    "TotalBlocks": 27,
    "TotalInsts": 145,
    "TotalMemInst": 76,
    "TotalFuncs": 35,
    "ArgsPhi": 6,
    "testUnary": 52
  },
  "baseline_oz_instcount": 143,
  "knowledge_base_entry": [
    "--correlated-propagation",
    "--sroa",
    "--bdce",
    "--lower-constant-intrinsics",
    "--early-cse",
    "--reassociate",
    "--gvn",
    "--correlated-propagation",
    "--die",
    "--jump-threading",
    "--early-cse",
    "--slsr",
    "--loop-reroll",
    "--mergefunc",
    "--loop-instsimplify",
    "--dse",
    "--adce",
    "--inline",
    "--early-cse-memssa",
    "--early-cse-memssa",
    "--mergefunc",
    "--loop-instsimplify",
    "--simplifycfg",
    "--gvn",
    "--nary-reassociate",
    "--correlated-propagation",
    "--simplifycfg",
    "--lower-expect",
    "--bdce",
    "--newgvn",
    "--gvn-hoist",
    "--jump-threading",
    "--instcombine",
    "--mergefunc",
    "--gvn-hoist",
    "--jump-threading",
    "--instcombine",
    "--loop-instsimplify",
    "--simplifycfg",
    "--flattencfg",
    "--aggressive-instcombine",
    "--mem2reg",
    "--elim-avail-extern",
    "--instcombine",
    "--slsr",
    "--indvars",
    "--early-cse-memssa",
    "--correlated-propagation",
    "--loop-reroll",
    "--newgvn",
    "--slsr",
    "--indvars",
    "--newgvn",
    "--lower-constant-intrinsics",
    "--correlated-propagation",
    "--simplifycfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--reassociate",
          "--inline",
          "--scalarizer",
          "--newgvn",
          "--loop-reroll",
          "--lowerinvoke",
          "--gvn",
          "--loop-guard-widening",
          "--loop-simplifycfg",
          "--globalopt",
          "--loweratomic",
          "--separate-const-offset-from-gep",
          "--instnamer",
          "--loop-versioning",
          "--float2int",
          "--sink",
          "--lower-matrix-intrinsics",
          "--globalsplit",
          "--mergefunc",
          "--mldst-motion"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--reassociate",
      "--inline",
      "--scalarizer",
      "--newgvn",
      "--loop-reroll",
      "--lowerinvoke",
      "--gvn",
      "--loop-guard-widening",
      "--loop-simplifycfg",
      "--globalopt",
      "--loweratomic",
      "--separate-const-offset-from-gep",
      "--instnamer",
      "--loop-versioning",
      "--float2int",
      "--sink",
      "--lower-matrix-intrinsics",
      "--globalsplit",
      "--mergefunc",
      "--mldst-motion"
    ],
    "performance_vs_Oz": "+2.1%"
  }
}
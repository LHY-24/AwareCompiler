{
  "program_id": "github-v0_29423.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 13,
    "onePredOneSuc": 8,
    "onePredTwoSuc": 2,
    "oneSuccessor": 11,
    "twoPred": 5,
    "twoPredOneSuc": 2,
    "twoEach": 3,
    "twoSuccessor": 6,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 21,
    "BeginPhi": 0,
    "BranchCount": 17,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 23,
    "const32Bit": 33,
    "const64Bit": 47,
    "numConstZeroes": 45,
    "numConstOnes": 28,
    "UncondBranches": 11,
    "binaryConstArg": 7,
    "NumAShrInst": 0,
    "NumAddInst": 7,
    "NumAllocaInst": 14,
    "NumAndInst": 0,
    "BlockMid": 5,
    "BlockLow": 16,
    "NumBitCastInst": 16,
    "NumBrInst": 17,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 43,
    "NumICmpInst": 6,
    "NumLShrInst": 0,
    "NumLoadInst": 50,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 27,
    "NumSubInst": 0,
    "NumTruncInst": 4,
    "NumXorInst": 0,
    "NumZExtInst": 24,
    "TotalBlocks": 21,
    "TotalInsts": 222,
    "TotalMemInst": 141,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 111
  },
  "baseline_oz_instcount": 222,
  "knowledge_base_entry": [
    "--aggressive-instcombine",
    "--early-cse-memssa",
    "--sccp",
    "--adce",
    "--dce",
    "--loop-instsimplify",
    "--ipsccp",
    "--loweratomic",
    "--aggressive-instcombine",
    "--flattencfg",
    "--simplifycfg",
    "--die",
    "--sroa",
    "--loop-reroll",
    "--sroa",
    "--adce",
    "--dce",
    "--loop-instsimplify",
    "--ipsccp",
    "--loweratomic",
    "--aggressive-instcombine",
    "--flattencfg",
    "--simplifycfg",
    "--die",
    "--sroa",
    "--loop-reroll",
    "--sroa",
    "--adce",
    "--slp-vectorizer",
    "--newgvn",
    "-loop-reduce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-versioning-licm",
          "--loweratomic",
          "--instnamer",
          "--forceattrs",
          "--globalopt",
          "--early-cse-memssa",
          "--lowerinvoke",
          "--loop-unroll",
          "--slp-vectorizer",
          "--bdce",
          "--lower-guard-intrinsic",
          "--ipsccp",
          "--post-inline-ee-instrument",
          "--gvn",
          "--pgo-memop-opt",
          "--coro-early",
          "--mergereturn",
          "--sancov",
          "--loop-deletion",
          "--strip-dead-prototypes",
          "-loop-reduce",
          "--load-store-vectorizer",
          "--globaldce",
          "--aggressive-instcombine",
          "--loop-predication",
          "--constprop"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-versioning-licm",
      "--loweratomic",
      "--instnamer",
      "--forceattrs",
      "--globalopt",
      "--early-cse-memssa",
      "--lowerinvoke",
      "--loop-unroll",
      "--slp-vectorizer",
      "--bdce",
      "--lower-guard-intrinsic",
      "--ipsccp",
      "--post-inline-ee-instrument",
      "--gvn",
      "--pgo-memop-opt",
      "--coro-early",
      "--mergereturn",
      "--sancov",
      "--loop-deletion",
      "--strip-dead-prototypes",
      "-loop-reduce",
      "--load-store-vectorizer",
      "--globaldce",
      "--aggressive-instcombine",
      "--loop-predication",
      "--constprop"
    ],
    "performance_vs_Oz": "+2.7%"
  }
}
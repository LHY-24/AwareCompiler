{
  "program_id": "github-v0_28406.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 36,
    "onePredOneSuc": 24,
    "onePredTwoSuc": 9,
    "oneSuccessor": 32,
    "twoPred": 17,
    "twoPredOneSuc": 8,
    "twoEach": 9,
    "twoSuccessor": 19,
    "morePreds": 0,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 53,
    "BeginPhi": 2,
    "BranchCount": 51,
    "returnInt": 4,
    "CriticalCount": 8,
    "NumEdges": 70,
    "const32Bit": 86,
    "const64Bit": 2,
    "numConstZeroes": 42,
    "numConstOnes": 38,
    "UncondBranches": 32,
    "binaryConstArg": 8,
    "NumAShrInst": 0,
    "NumAddInst": 7,
    "NumAllocaInst": 22,
    "NumAndInst": 0,
    "BlockMid": 2,
    "BlockLow": 53,
    "NumBitCastInst": 5,
    "NumBrInst": 51,
    "NumCallInst": 11,
    "NumGetElementPtrInst": 19,
    "NumICmpInst": 19,
    "NumLShrInst": 0,
    "NumLoadInst": 65,
    "NumMulInst": 1,
    "NumOrInst": 0,
    "NumPHIInst": 2,
    "NumRetInst": 2,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 47,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 55,
    "TotalInsts": 253,
    "TotalMemInst": 164,
    "TotalFuncs": 11,
    "ArgsPhi": 4,
    "testUnary": 92
  },
  "baseline_oz_instcount": 254,
  "knowledge_base_entry": [
    "--inferattrs",
    "--gvn",
    "--mldst-motion",
    "--early-cse",
    "--newgvn",
    "--jump-threading",
    "--mem2reg",
    "--newgvn",
    "--inline",
    "--die"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--add-discriminators",
          "--early-cse-memssa",
          "--always-inline",
          "--post-inline-ee-instrument",
          "--dce",
          "--lcssa",
          "--libcalls-shrinkwrap",
          "--tailcallelim",
          "--reassociate",
          "--loop-vectorize",
          "--lower-matrix-intrinsics"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--add-discriminators",
      "--early-cse-memssa",
      "--always-inline",
      "--post-inline-ee-instrument",
      "--dce",
      "--lcssa",
      "--libcalls-shrinkwrap",
      "--tailcallelim",
      "--reassociate",
      "--loop-vectorize",
      "--lower-matrix-intrinsics"
    ],
    "performance_vs_Oz": "+0.4%"
  }
}
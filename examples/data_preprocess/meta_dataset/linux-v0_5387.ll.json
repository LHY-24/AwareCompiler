{
  "program_id": "linux-v0_5387.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 8,
    "onePredOneSuc": 6,
    "onePredTwoSuc": 2,
    "oneSuccessor": 8,
    "twoPred": 5,
    "twoPredOneSuc": 2,
    "twoEach": 0,
    "twoSuccessor": 5,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 20,
    "BeginPhi": 0,
    "BranchCount": 13,
    "returnInt": 3,
    "CriticalCount": 2,
    "NumEdges": 18,
    "const32Bit": 102,
    "const64Bit": 20,
    "numConstZeroes": 28,
    "numConstOnes": 50,
    "UncondBranches": 8,
    "binaryConstArg": 34,
    "NumAShrInst": 0,
    "NumAddInst": 9,
    "NumAllocaInst": 34,
    "NumAndInst": 9,
    "BlockMid": 7,
    "BlockLow": 13,
    "NumBitCastInst": 2,
    "NumBrInst": 13,
    "NumCallInst": 10,
    "NumGetElementPtrInst": 24,
    "NumICmpInst": 6,
    "NumLShrInst": 6,
    "NumLoadInst": 77,
    "NumMulInst": 7,
    "NumOrInst": 4,
    "NumPHIInst": 0,
    "NumRetInst": 7,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 3,
    "NumStoreInst": 43,
    "NumSubInst": 12,
    "NumTruncInst": 2,
    "NumXorInst": 2,
    "NumZExtInst": 16,
    "TotalBlocks": 20,
    "TotalInsts": 292,
    "TotalMemInst": 188,
    "TotalFuncs": 10,
    "ArgsPhi": 0,
    "testUnary": 132
  },
  "baseline_oz_instcount": 292,
  "knowledge_base_entry": [
    "--aggressive-instcombine",
    "--licm",
    "--dce",
    "--simplifycfg",
    "--flattencfg",
    "--early-cse",
    "--mldst-motion",
    "--elim-avail-extern",
    "--lower-expect",
    "--loop-rotate"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--elim-avail-extern",
          "--lower-constant-intrinsics",
          "--adce",
          "--argpromotion",
          "--loop-deletion",
          "--deadargelim",
          "--coro-elide",
          "--slp-vectorizer",
          "--loop-vectorize",
          "--inferattrs",
          "--lower-guard-intrinsic",
          "--loop-sink",
          "--early-cse-memssa",
          "--gvn",
          "--aggressive-instcombine",
          "--lower-widenable-condition",
          "--scalarizer",
          "--rpo-functionattrs",
          "--always-inline",
          "--strip"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--elim-avail-extern",
      "--lower-constant-intrinsics",
      "--adce",
      "--argpromotion",
      "--loop-deletion",
      "--deadargelim",
      "--coro-elide",
      "--slp-vectorizer",
      "--loop-vectorize",
      "--inferattrs",
      "--lower-guard-intrinsic",
      "--loop-sink",
      "--early-cse-memssa",
      "--gvn",
      "--aggressive-instcombine",
      "--lower-widenable-condition",
      "--scalarizer",
      "--rpo-functionattrs",
      "--always-inline",
      "--strip"
    ],
    "performance_vs_Oz": "+1.4%"
  }
}
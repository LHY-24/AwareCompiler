{
  "program_id": "github-v0_28244.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 7,
    "onePred": 109,
    "onePredOneSuc": 71,
    "onePredTwoSuc": 35,
    "oneSuccessor": 101,
    "twoPred": 47,
    "twoPredOneSuc": 26,
    "twoEach": 9,
    "twoSuccessor": 61,
    "morePreds": 8,
    "BB03Phi": 7,
    "BBHiPhi": 0,
    "BBNoPhi": 182,
    "BeginPhi": 7,
    "BranchCount": 162,
    "returnInt": 7,
    "CriticalCount": 30,
    "NumEdges": 236,
    "const32Bit": 214,
    "const64Bit": 25,
    "numConstZeroes": 75,
    "numConstOnes": 121,
    "UncondBranches": 101,
    "binaryConstArg": 18,
    "NumAShrInst": 0,
    "NumAddInst": 10,
    "NumAllocaInst": 93,
    "NumAndInst": 0,
    "BlockMid": 9,
    "BlockLow": 180,
    "NumBitCastInst": 14,
    "NumBrInst": 162,
    "NumCallInst": 39,
    "NumGetElementPtrInst": 41,
    "NumICmpInst": 61,
    "NumLShrInst": 0,
    "NumLoadInst": 229,
    "NumMulInst": 4,
    "NumOrInst": 0,
    "NumPHIInst": 7,
    "NumRetInst": 25,
    "NumSExtInst": 20,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 150,
    "NumSubInst": 6,
    "NumTruncInst": 8,
    "NumXorInst": 0,
    "NumZExtInst": 12,
    "TotalBlocks": 189,
    "TotalInsts": 886,
    "TotalMemInst": 552,
    "TotalFuncs": 33,
    "ArgsPhi": 14,
    "testUnary": 376
  },
  "baseline_oz_instcount": 886,
  "knowledge_base_entry": [
    "--hotcoldsplit",
    "--mergefunc",
    "--early-cse",
    "--memcpyopt",
    "--inline",
    "--sccp",
    "--early-cse",
    "--gvn",
    "--ipsccp",
    "--sccp",
    "--newgvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--slsr",
          "--tailcallelim",
          "--mergefunc",
          "--dse",
          "--functionattrs",
          "--loop-unswitch",
          "-loop-reduce",
          "--ipsccp",
          "--simple-loop-unswitch",
          "--guard-widening"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--slsr",
      "--tailcallelim",
      "--mergefunc",
      "--dse",
      "--functionattrs",
      "--loop-unswitch",
      "-loop-reduce",
      "--ipsccp",
      "--simple-loop-unswitch",
      "--guard-widening"
    ],
    "performance_vs_Oz": "+1.8%"
  }
}
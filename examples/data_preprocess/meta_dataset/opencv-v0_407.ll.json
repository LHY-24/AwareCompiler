{
  "program_id": "opencv-v0_407.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 0,
    "onePredOneSuc": 0,
    "onePredTwoSuc": 0,
    "oneSuccessor": 0,
    "twoPred": 0,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 0,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 6,
    "BeginPhi": 0,
    "BranchCount": 0,
    "returnInt": 0,
    "CriticalCount": 0,
    "NumEdges": 0,
    "const32Bit": 3,
    "const64Bit": 56,
    "numConstZeroes": 2,
    "numConstOnes": 2,
    "UncondBranches": 0,
    "binaryConstArg": 56,
    "NumAShrInst": 0,
    "NumAddInst": 5,
    "NumAllocaInst": 0,
    "NumAndInst": 11,
    "BlockMid": 4,
    "BlockLow": 2,
    "NumBitCastInst": 3,
    "NumBrInst": 0,
    "NumCallInst": 0,
    "NumGetElementPtrInst": 5,
    "NumICmpInst": 0,
    "NumLShrInst": 13,
    "NumLoadInst": 13,
    "NumMulInst": 5,
    "NumOrInst": 19,
    "NumPHIInst": 0,
    "NumRetInst": 6,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 16,
    "NumStoreInst": 16,
    "NumSubInst": 0,
    "NumTruncInst": 15,
    "NumXorInst": 0,
    "NumZExtInst": 12,
    "TotalBlocks": 6,
    "TotalInsts": 142,
    "TotalMemInst": 34,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 43
  },
  "baseline_oz_instcount": 142,
  "knowledge_base_entry": [
    "--early-cse-memssa",
    "--early-cse-memssa",
    "--early-cse-memssa",
    "--loop-fusion",
    "--nary-reassociate",
    "--slp-vectorizer",
    "--dse",
    "--slp-vectorizer",
    "--die",
    "--loop-instsimplify",
    "--inline",
    "--dce",
    "--lower-constant-intrinsics",
    "--prune-eh",
    "--reassociate",
    "--early-cse-memssa",
    "--flattencfg",
    "--mergefunc",
    "--globalopt",
    "--loop-deletion",
    "--sccp",
    "--simplifycfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-vectorize",
          "--inline",
          "--loop-unroll",
          "--strip-dead-prototypes",
          "--constmerge",
          "--add-discriminators",
          "--sroa",
          "--lowerswitch",
          "--ipsccp",
          "--simple-loop-unswitch",
          "--called-value-propagation",
          "--strip-nondebug",
          "--slp-vectorizer",
          "--break-crit-edges",
          "--functionattrs",
          "--nary-reassociate",
          "--loop-distribute",
          "--loop-predication",
          "--lcssa",
          "--partially-inline-libcalls"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-vectorize",
      "--inline",
      "--loop-unroll",
      "--strip-dead-prototypes",
      "--constmerge",
      "--add-discriminators",
      "--sroa",
      "--lowerswitch",
      "--ipsccp",
      "--simple-loop-unswitch",
      "--called-value-propagation",
      "--strip-nondebug",
      "--slp-vectorizer",
      "--break-crit-edges",
      "--functionattrs",
      "--nary-reassociate",
      "--loop-distribute",
      "--loop-predication",
      "--lcssa",
      "--partially-inline-libcalls"
    ],
    "performance_vs_Oz": "+1.4%"
  }
}
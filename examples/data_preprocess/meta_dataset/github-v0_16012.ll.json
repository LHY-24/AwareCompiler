{
  "program_id": "github-v0_16012.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 20,
    "onePredOneSuc": 11,
    "onePredTwoSuc": 9,
    "oneSuccessor": 19,
    "twoPred": 12,
    "twoPredOneSuc": 8,
    "twoEach": 2,
    "twoSuccessor": 14,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 36,
    "BeginPhi": 0,
    "BranchCount": 33,
    "returnInt": 4,
    "CriticalCount": 9,
    "NumEdges": 47,
    "const32Bit": 44,
    "const64Bit": 4,
    "numConstZeroes": 14,
    "numConstOnes": 29,
    "UncondBranches": 19,
    "binaryConstArg": 9,
    "NumAShrInst": 4,
    "NumAddInst": 2,
    "NumAllocaInst": 22,
    "NumAndInst": 0,
    "BlockMid": 2,
    "BlockLow": 34,
    "NumBitCastInst": 0,
    "NumBrInst": 33,
    "NumCallInst": 4,
    "NumGetElementPtrInst": 4,
    "NumICmpInst": 15,
    "NumLShrInst": 0,
    "NumLoadInst": 60,
    "NumMulInst": 1,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 27,
    "NumSelectInst": 1,
    "NumShlInst": 3,
    "NumStoreInst": 43,
    "NumSubInst": 3,
    "NumTruncInst": 11,
    "NumXorInst": 0,
    "NumZExtInst": 1,
    "TotalBlocks": 36,
    "TotalInsts": 237,
    "TotalMemInst": 133,
    "TotalFuncs": 4,
    "ArgsPhi": 0,
    "testUnary": 121
  },
  "baseline_oz_instcount": 237,
  "knowledge_base_entry": [
    "--lower-expect",
    "--newgvn",
    "--dce",
    "--licm",
    "--loop-instsimplify",
    "--dse",
    "--nary-reassociate",
    "--licm",
    "--gvn-hoist",
    "--die",
    "--aggressive-instcombine",
    "--globalopt",
    "--elim-avail-extern",
    "--jump-threading",
    "--memcpyopt",
    "--newgvn",
    "-loop-reduce",
    "--instcombine",
    "--dce",
    "--correlated-propagation",
    "--globalopt",
    "--loweratomic",
    "--early-cse-memssa",
    "--early-cse"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-unroll",
          "--elim-avail-extern",
          "--correlated-propagation",
          "--rpo-functionattrs",
          "--aggressive-instcombine",
          "--lowerswitch",
          "--constmerge",
          "--attributor",
          "--sccp",
          "--dce"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-unroll",
      "--elim-avail-extern",
      "--correlated-propagation",
      "--rpo-functionattrs",
      "--aggressive-instcombine",
      "--lowerswitch",
      "--constmerge",
      "--attributor",
      "--sccp",
      "--dce"
    ],
    "performance_vs_Oz": "+1.7%"
  }
}
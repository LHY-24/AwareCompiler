{
  "program_id": "github-v0_19311.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 36,
    "onePredOneSuc": 24,
    "onePredTwoSuc": 12,
    "oneSuccessor": 28,
    "twoPred": 6,
    "twoPredOneSuc": 0,
    "twoEach": 6,
    "twoSuccessor": 22,
    "morePreds": 8,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 55,
    "BeginPhi": 0,
    "BranchCount": 50,
    "returnInt": 5,
    "CriticalCount": 14,
    "NumEdges": 72,
    "const32Bit": 187,
    "const64Bit": 34,
    "numConstZeroes": 124,
    "numConstOnes": 56,
    "UncondBranches": 28,
    "binaryConstArg": 22,
    "NumAShrInst": 2,
    "NumAddInst": 8,
    "NumAllocaInst": 48,
    "NumAndInst": 0,
    "BlockMid": 19,
    "BlockLow": 36,
    "NumBitCastInst": 0,
    "NumBrInst": 50,
    "NumCallInst": 72,
    "NumGetElementPtrInst": 56,
    "NumICmpInst": 22,
    "NumLShrInst": 0,
    "NumLoadInst": 95,
    "NumMulInst": 4,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 5,
    "NumSExtInst": 28,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 51,
    "NumSubInst": 0,
    "NumTruncInst": 10,
    "NumXorInst": 8,
    "NumZExtInst": 10,
    "TotalBlocks": 55,
    "TotalInsts": 469,
    "TotalMemInst": 322,
    "TotalFuncs": 18,
    "ArgsPhi": 0,
    "testUnary": 191
  },
  "baseline_oz_instcount": 471,
  "knowledge_base_entry": [
    "--loweratomic",
    "--instcombine",
    "--aggressive-instcombine",
    "--newgvn",
    "--aggressive-instcombine",
    "--mem2reg",
    "--jump-threading",
    "--mldst-motion",
    "--slp-vectorizer",
    "--bdce",
    "--gvn-hoist",
    "--inline",
    "--memcpyopt",
    "--lower-constant-intrinsics",
    "--instsimplify",
    "--nary-reassociate"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--gvn",
          "--early-cse-memssa",
          "--loop-load-elim",
          "--cross-dso-cfi",
          "--loop-deletion",
          "--lower-guard-intrinsic",
          "--loop-unroll-and-jam",
          "--loop-data-prefetch",
          "--aggressive-instcombine",
          "--loop-idiom",
          "--loop-unroll",
          "--pgo-memop-opt",
          "--loop-reroll",
          "--loop-vectorize",
          "--prune-eh",
          "--strip-nondebug",
          "--licm",
          "--coro-cleanup",
          "--bdce",
          "--jump-threading",
          "--lowerinvoke",
          "--dce",
          "--instcombine",
          "--add-discriminators",
          "--lower-expect",
          "--inferattrs",
          "--load-store-vectorizer",
          "--rewrite-statepoints-for-gc",
          "--reassociate"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--gvn",
      "--early-cse-memssa",
      "--loop-load-elim",
      "--cross-dso-cfi",
      "--loop-deletion",
      "--lower-guard-intrinsic",
      "--loop-unroll-and-jam",
      "--loop-data-prefetch",
      "--aggressive-instcombine",
      "--loop-idiom",
      "--loop-unroll",
      "--pgo-memop-opt",
      "--loop-reroll",
      "--loop-vectorize",
      "--prune-eh",
      "--strip-nondebug",
      "--licm",
      "--coro-cleanup",
      "--bdce",
      "--jump-threading",
      "--lowerinvoke",
      "--dce",
      "--instcombine",
      "--add-discriminators",
      "--lower-expect",
      "--inferattrs",
      "--load-store-vectorizer",
      "--rewrite-statepoints-for-gc",
      "--reassociate"
    ],
    "performance_vs_Oz": "+3.4%"
  }
}
{
  "program_id": "github-v0_7692.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 15,
    "onePredOneSuc": 10,
    "onePredTwoSuc": 2,
    "oneSuccessor": 13,
    "twoPred": 6,
    "twoPredOneSuc": 2,
    "twoEach": 4,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 24,
    "BeginPhi": 0,
    "BranchCount": 20,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 27,
    "const32Bit": 40,
    "const64Bit": 29,
    "numConstZeroes": 32,
    "numConstOnes": 26,
    "UncondBranches": 13,
    "binaryConstArg": 14,
    "NumAShrInst": 0,
    "NumAddInst": 5,
    "NumAllocaInst": 14,
    "NumAndInst": 3,
    "BlockMid": 5,
    "BlockLow": 19,
    "NumBitCastInst": 4,
    "NumBrInst": 20,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 22,
    "NumICmpInst": 7,
    "NumLShrInst": 3,
    "NumLoadInst": 37,
    "NumMulInst": 0,
    "NumOrInst": 3,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 21,
    "NumSubInst": 0,
    "NumTruncInst": 6,
    "NumXorInst": 0,
    "NumZExtInst": 12,
    "TotalBlocks": 24,
    "TotalInsts": 173,
    "TotalMemInst": 101,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 76
  },
  "baseline_oz_instcount": 173,
  "knowledge_base_entry": [
    "--loop-fusion",
    "--loop-reroll",
    "--slp-vectorizer",
    "--newgvn",
    "--aggressive-instcombine",
    "--instcombine",
    "--aggressive-instcombine",
    "--early-cse",
    "--gvn",
    "--ipsccp",
    "--reassociate",
    "--early-cse-memssa",
    "--lower-constant-intrinsics",
    "--elim-avail-extern"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--add-discriminators",
          "--rewrite-statepoints-for-gc",
          "--aggressive-instcombine",
          "--called-value-propagation",
          "--nary-reassociate",
          "--partial-inliner",
          "--canonicalize-aliases",
          "--loop-data-prefetch",
          "--lcssa",
          "--globalsplit",
          "--prune-eh",
          "--loop-predication",
          "--lower-expect",
          "--loop-simplify",
          "--ee-instrument",
          "--sroa",
          "--partially-inline-libcalls",
          "--hotcoldsplit",
          "--rpo-functionattrs",
          "--loop-load-elim",
          "--post-inline-ee-instrument",
          "--adce",
          "--globaldce",
          "--elim-avail-extern",
          "--constprop",
          "--scalarizer"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+4.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--add-discriminators",
      "--rewrite-statepoints-for-gc",
      "--aggressive-instcombine",
      "--called-value-propagation",
      "--nary-reassociate",
      "--partial-inliner",
      "--canonicalize-aliases",
      "--loop-data-prefetch",
      "--lcssa",
      "--globalsplit",
      "--prune-eh",
      "--loop-predication",
      "--lower-expect",
      "--loop-simplify",
      "--ee-instrument",
      "--sroa",
      "--partially-inline-libcalls",
      "--hotcoldsplit",
      "--rpo-functionattrs",
      "--loop-load-elim",
      "--post-inline-ee-instrument",
      "--adce",
      "--globaldce",
      "--elim-avail-extern",
      "--constprop",
      "--scalarizer"
    ],
    "performance_vs_Oz": "+4.6%"
  }
}
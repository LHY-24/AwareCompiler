{
  "program_id": "linux-v0_5429.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 42,
    "onePredOneSuc": 17,
    "onePredTwoSuc": 25,
    "oneSuccessor": 30,
    "twoPred": 17,
    "twoPredOneSuc": 11,
    "twoEach": 4,
    "twoSuccessor": 33,
    "morePreds": 4,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 76,
    "BeginPhi": 0,
    "BranchCount": 63,
    "returnInt": 4,
    "CriticalCount": 28,
    "NumEdges": 96,
    "const32Bit": 166,
    "const64Bit": 34,
    "numConstZeroes": 64,
    "numConstOnes": 69,
    "UncondBranches": 30,
    "binaryConstArg": 31,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 37,
    "NumAndInst": 18,
    "BlockMid": 8,
    "BlockLow": 68,
    "NumBitCastInst": 5,
    "NumBrInst": 63,
    "NumCallInst": 22,
    "NumGetElementPtrInst": 53,
    "NumICmpInst": 36,
    "NumLShrInst": 2,
    "NumLoadInst": 127,
    "NumMulInst": 0,
    "NumOrInst": 3,
    "NumPHIInst": 0,
    "NumRetInst": 13,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 62,
    "NumSubInst": 2,
    "NumTruncInst": 5,
    "NumXorInst": 6,
    "NumZExtInst": 25,
    "TotalBlocks": 76,
    "TotalInsts": 481,
    "TotalMemInst": 301,
    "TotalFuncs": 22,
    "ArgsPhi": 0,
    "testUnary": 201
  },
  "baseline_oz_instcount": 481,
  "knowledge_base_entry": [
    "--prune-eh",
    "--aggressive-instcombine",
    "--sroa",
    "--loop-deletion",
    "--instcombine",
    "--sccp",
    "--lower-constant-intrinsics",
    "--reassociate",
    "--jump-threading",
    "--reassociate"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--memcpyopt",
          "--loop-rotate",
          "--strip-nondebug",
          "--constmerge",
          "--tailcallelim",
          "--simple-loop-unswitch",
          "--loop-distribute",
          "--correlated-propagation",
          "--dce",
          "--speculative-execution",
          "--always-inline",
          "--sink",
          "--alignment-from-assumptions",
          "--add-discriminators",
          "--loop-load-elim",
          "--guard-widening",
          "--inject-tli-mappings",
          "--globalsplit",
          "--loop-predication",
          "--loop-idiom",
          "--instcombine",
          "--instsimplify",
          "--partially-inline-libcalls",
          "--aggressive-instcombine",
          "--insert-gcov-profiling",
          "--forceattrs",
          "-loop-reduce"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--memcpyopt",
      "--loop-rotate",
      "--strip-nondebug",
      "--constmerge",
      "--tailcallelim",
      "--simple-loop-unswitch",
      "--loop-distribute",
      "--correlated-propagation",
      "--dce",
      "--speculative-execution",
      "--always-inline",
      "--sink",
      "--alignment-from-assumptions",
      "--add-discriminators",
      "--loop-load-elim",
      "--guard-widening",
      "--inject-tli-mappings",
      "--globalsplit",
      "--loop-predication",
      "--loop-idiom",
      "--instcombine",
      "--instsimplify",
      "--partially-inline-libcalls",
      "--aggressive-instcombine",
      "--insert-gcov-profiling",
      "--forceattrs",
      "-loop-reduce"
    ],
    "performance_vs_Oz": "+2.1%"
  }
}
{
  "program_id": "linux-v0_4837.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 26,
    "onePredOneSuc": 18,
    "onePredTwoSuc": 8,
    "oneSuccessor": 24,
    "twoPred": 11,
    "twoPredOneSuc": 5,
    "twoEach": 3,
    "twoSuccessor": 15,
    "morePreds": 2,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 42,
    "BeginPhi": 1,
    "BranchCount": 39,
    "returnInt": 4,
    "CriticalCount": 4,
    "NumEdges": 54,
    "const32Bit": 112,
    "const64Bit": 5,
    "numConstZeroes": 68,
    "numConstOnes": 24,
    "UncondBranches": 24,
    "binaryConstArg": 4,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 14,
    "NumAndInst": 4,
    "BlockMid": 1,
    "BlockLow": 42,
    "NumBitCastInst": 2,
    "NumBrInst": 39,
    "NumCallInst": 10,
    "NumGetElementPtrInst": 41,
    "NumICmpInst": 15,
    "NumLShrInst": 0,
    "NumLoadInst": 66,
    "NumMulInst": 0,
    "NumOrInst": 2,
    "NumPHIInst": 1,
    "NumRetInst": 4,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 26,
    "NumSubInst": 0,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 18,
    "TotalBlocks": 43,
    "TotalInsts": 244,
    "TotalMemInst": 157,
    "TotalFuncs": 7,
    "ArgsPhi": 2,
    "testUnary": 102
  },
  "baseline_oz_instcount": 244,
  "knowledge_base_entry": [
    "--aggressive-instcombine",
    "--mem2reg",
    "--aggressive-instcombine",
    "--early-cse-memssa",
    "--globalopt",
    "--gvn",
    "--load-store-vectorizer",
    "--bdce",
    "--loop-simplifycfg",
    "--sroa",
    "--inline",
    "--load-store-vectorizer",
    "--adce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-versioning-licm",
          "--loop-fusion",
          "--add-discriminators",
          "--strip-debug-declare",
          "--insert-gcov-profiling",
          "--globalopt",
          "--lower-matrix-intrinsics",
          "--called-value-propagation",
          "--globaldce",
          "--alignment-from-assumptions",
          "--callsite-splitting",
          "--newgvn",
          "--reassociate",
          "--coro-split",
          "--jump-threading",
          "--loop-unroll-and-jam",
          "--loop-unroll",
          "--lowerinvoke",
          "--aggressive-instcombine"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-versioning-licm",
      "--loop-fusion",
      "--add-discriminators",
      "--strip-debug-declare",
      "--insert-gcov-profiling",
      "--globalopt",
      "--lower-matrix-intrinsics",
      "--called-value-propagation",
      "--globaldce",
      "--alignment-from-assumptions",
      "--callsite-splitting",
      "--newgvn",
      "--reassociate",
      "--coro-split",
      "--jump-threading",
      "--loop-unroll-and-jam",
      "--loop-unroll",
      "--lowerinvoke",
      "--aggressive-instcombine"
    ],
    "performance_vs_Oz": "+1.6%"
  }
}
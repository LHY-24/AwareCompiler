{
  "program_id": "github-v0_47033.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 45,
    "onePredOneSuc": 29,
    "onePredTwoSuc": 9,
    "oneSuccessor": 43,
    "twoPred": 14,
    "twoPredOneSuc": 9,
    "twoEach": 4,
    "twoSuccessor": 15,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 68,
    "BeginPhi": 0,
    "BranchCount": 58,
    "returnInt": 2,
    "CriticalCount": 5,
    "NumEdges": 91,
    "const32Bit": 121,
    "const64Bit": 30,
    "numConstZeroes": 34,
    "numConstOnes": 46,
    "UncondBranches": 43,
    "binaryConstArg": 47,
    "NumAShrInst": 1,
    "NumAddInst": 12,
    "NumAllocaInst": 29,
    "NumAndInst": 13,
    "BlockMid": 10,
    "BlockLow": 58,
    "NumBitCastInst": 1,
    "NumBrInst": 58,
    "NumCallInst": 15,
    "NumGetElementPtrInst": 45,
    "NumICmpInst": 15,
    "NumLShrInst": 7,
    "NumLoadInst": 125,
    "NumMulInst": 0,
    "NumOrInst": 12,
    "NumPHIInst": 0,
    "NumRetInst": 6,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 3,
    "NumStoreInst": 84,
    "NumSubInst": 6,
    "NumTruncInst": 14,
    "NumXorInst": 0,
    "NumZExtInst": 27,
    "TotalBlocks": 68,
    "TotalInsts": 479,
    "TotalMemInst": 298,
    "TotalFuncs": 9,
    "ArgsPhi": 0,
    "testUnary": 198
  },
  "baseline_oz_instcount": 478,
  "knowledge_base_entry": [
    "--loop-deletion",
    "--gvn-hoist",
    "--mergefunc",
    "--early-cse",
    "--early-cse",
    "--sroa",
    "--early-cse-memssa",
    "--aggressive-instcombine",
    "--ipsccp",
    "--flattencfg",
    "--ipsccp",
    "--flattencfg",
    "--aggressive-instcombine",
    "--dse",
    "--loop-rotate",
    "--gvn",
    "--mem2reg",
    "--mergefunc",
    "--early-cse",
    "--early-cse",
    "--sroa",
    "--early-cse-memssa",
    "--aggressive-instcombine",
    "--ipsccp",
    "--flattencfg",
    "--ipsccp",
    "--globalopt",
    "--aggressive-instcombine",
    "--mergefunc",
    "--lower-constant-intrinsics"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--jump-threading",
          "--loop-unswitch",
          "--infer-address-spaces",
          "--forceattrs",
          "--loop-sink",
          "--mergereturn",
          "--partial-inliner",
          "--loop-instsimplify",
          "--early-cse",
          "--constmerge",
          "--mergefunc",
          "--constprop",
          "--lower-constant-intrinsics",
          "--partially-inline-libcalls",
          "--loop-vectorize",
          "--aggressive-instcombine",
          "--consthoist",
          "--inject-tli-mappings",
          "--gvn",
          "--loop-idiom",
          "--globalopt",
          "--argpromotion",
          "--irce",
          "--loop-reroll",
          "--coro-cleanup"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--jump-threading",
      "--loop-unswitch",
      "--infer-address-spaces",
      "--forceattrs",
      "--loop-sink",
      "--mergereturn",
      "--partial-inliner",
      "--loop-instsimplify",
      "--early-cse",
      "--constmerge",
      "--mergefunc",
      "--constprop",
      "--lower-constant-intrinsics",
      "--partially-inline-libcalls",
      "--loop-vectorize",
      "--aggressive-instcombine",
      "--consthoist",
      "--inject-tli-mappings",
      "--gvn",
      "--loop-idiom",
      "--globalopt",
      "--argpromotion",
      "--irce",
      "--loop-reroll",
      "--coro-cleanup"
    ],
    "performance_vs_Oz": "+0.8%"
  }
}
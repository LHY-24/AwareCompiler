{
  "program_id": "linux-v0_12449.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 98,
    "onePredOneSuc": 65,
    "onePredTwoSuc": 31,
    "oneSuccessor": 84,
    "twoPred": 31,
    "twoPredOneSuc": 13,
    "twoEach": 14,
    "twoSuccessor": 54,
    "morePreds": 9,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 150,
    "BeginPhi": 1,
    "BranchCount": 138,
    "returnInt": 20,
    "CriticalCount": 15,
    "NumEdges": 192,
    "const32Bit": 202,
    "const64Bit": 2,
    "numConstZeroes": 83,
    "numConstOnes": 85,
    "UncondBranches": 84,
    "binaryConstArg": 7,
    "NumAShrInst": 0,
    "NumAddInst": 4,
    "NumAllocaInst": 69,
    "NumAndInst": 2,
    "BlockMid": 6,
    "BlockLow": 145,
    "NumBitCastInst": 12,
    "NumBrInst": 138,
    "NumCallInst": 65,
    "NumGetElementPtrInst": 54,
    "NumICmpInst": 54,
    "NumLShrInst": 0,
    "NumLoadInst": 230,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 1,
    "NumRetInst": 13,
    "NumSExtInst": 7,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 108,
    "NumSubInst": 1,
    "NumTruncInst": 1,
    "NumXorInst": 1,
    "NumZExtInst": 0,
    "TotalBlocks": 151,
    "TotalInsts": 760,
    "TotalMemInst": 526,
    "TotalFuncs": 34,
    "ArgsPhi": 2,
    "testUnary": 319
  },
  "baseline_oz_instcount": 763,
  "knowledge_base_entry": [
    "--tailcallelim",
    "--gvn",
    "--correlated-propagation",
    "--globalopt",
    "--lower-expect",
    "--die",
    "--simplifycfg",
    "--early-cse-memssa",
    "--adce",
    "--instcombine",
    "--ipsccp",
    "--inline",
    "--aggressive-instcombine",
    "--reassociate",
    "--early-cse-memssa",
    "--newgvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--dse",
          "--aggressive-instcombine",
          "--instcombine",
          "--add-discriminators",
          "--globalsplit",
          "--instsimplify",
          "--instnamer",
          "--redundant-dbg-inst-elim",
          "--mergefunc",
          "--lcssa",
          "--functionattrs",
          "--tailcallelim",
          "--globalopt",
          "--lower-guard-intrinsic",
          "--nary-reassociate",
          "--lowerinvoke",
          "--loop-distribute"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--dse",
      "--aggressive-instcombine",
      "--instcombine",
      "--add-discriminators",
      "--globalsplit",
      "--instsimplify",
      "--instnamer",
      "--redundant-dbg-inst-elim",
      "--mergefunc",
      "--lcssa",
      "--functionattrs",
      "--tailcallelim",
      "--globalopt",
      "--lower-guard-intrinsic",
      "--nary-reassociate",
      "--lowerinvoke",
      "--loop-distribute"
    ],
    "performance_vs_Oz": "+0.7%"
  }
}
{
  "program_id": "linux-v0_5973.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 3,
    "onePred": 45,
    "onePredOneSuc": 34,
    "onePredTwoSuc": 11,
    "oneSuccessor": 37,
    "twoPred": 15,
    "twoPredOneSuc": 3,
    "twoEach": 8,
    "twoSuccessor": 23,
    "morePreds": 1,
    "BB03Phi": 3,
    "BBHiPhi": 0,
    "BBNoPhi": 71,
    "BeginPhi": 3,
    "BranchCount": 60,
    "returnInt": 8,
    "CriticalCount": 10,
    "NumEdges": 86,
    "const32Bit": 164,
    "const64Bit": 17,
    "numConstZeroes": 73,
    "numConstOnes": 77,
    "UncondBranches": 37,
    "binaryConstArg": 13,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 50,
    "NumAndInst": 2,
    "BlockMid": 8,
    "BlockLow": 66,
    "NumBitCastInst": 13,
    "NumBrInst": 60,
    "NumCallInst": 35,
    "NumGetElementPtrInst": 40,
    "NumICmpInst": 21,
    "NumLShrInst": 0,
    "NumLoadInst": 127,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 3,
    "NumRetInst": 13,
    "NumSExtInst": 10,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 74,
    "NumSubInst": 2,
    "NumTruncInst": 5,
    "NumXorInst": 8,
    "NumZExtInst": 12,
    "TotalBlocks": 74,
    "TotalInsts": 478,
    "TotalMemInst": 326,
    "TotalFuncs": 31,
    "ArgsPhi": 6,
    "testUnary": 217
  },
  "baseline_oz_instcount": 478,
  "knowledge_base_entry": [
    "-loop-reduce",
    "--jump-threading",
    "--sroa",
    "--lower-expect",
    "--gvn",
    "--slsr",
    "--nary-reassociate",
    "--inline",
    "--aggressive-instcombine",
    "--lower-constant-intrinsics",
    "--jump-threading",
    "--correlated-propagation"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--always-inline",
          "--aggressive-instcombine",
          "--callsite-splitting",
          "--simplifycfg",
          "--rewrite-statepoints-for-gc",
          "--loop-fusion",
          "--constprop",
          "--ee-instrument",
          "--lower-expect",
          "--loop-distribute",
          "--flattencfg",
          "--sroa",
          "--ipconstprop",
          "--coro-cleanup",
          "--memcpyopt",
          "--strip",
          "--insert-gcov-profiling",
          "--lower-matrix-intrinsics",
          "--alignment-from-assumptions",
          "--lowerinvoke",
          "--mem2reg",
          "--indvars",
          "--load-store-vectorizer",
          "--gvn-hoist",
          "--jump-threading",
          "--loop-unroll",
          "--infer-address-spaces"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--always-inline",
      "--aggressive-instcombine",
      "--callsite-splitting",
      "--simplifycfg",
      "--rewrite-statepoints-for-gc",
      "--loop-fusion",
      "--constprop",
      "--ee-instrument",
      "--lower-expect",
      "--loop-distribute",
      "--flattencfg",
      "--sroa",
      "--ipconstprop",
      "--coro-cleanup",
      "--memcpyopt",
      "--strip",
      "--insert-gcov-profiling",
      "--lower-matrix-intrinsics",
      "--alignment-from-assumptions",
      "--lowerinvoke",
      "--mem2reg",
      "--indvars",
      "--load-store-vectorizer",
      "--gvn-hoist",
      "--jump-threading",
      "--loop-unroll",
      "--infer-address-spaces"
    ],
    "performance_vs_Oz": "+0.8%"
  }
}
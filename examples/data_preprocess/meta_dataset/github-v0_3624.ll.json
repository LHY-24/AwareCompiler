{
  "program_id": "github-v0_3624.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 36,
    "onePredOneSuc": 25,
    "onePredTwoSuc": 9,
    "oneSuccessor": 34,
    "twoPred": 16,
    "twoPredOneSuc": 8,
    "twoEach": 7,
    "twoSuccessor": 17,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 55,
    "BeginPhi": 0,
    "BranchCount": 51,
    "returnInt": 5,
    "CriticalCount": 5,
    "NumEdges": 68,
    "const32Bit": 64,
    "const64Bit": 12,
    "numConstZeroes": 38,
    "numConstOnes": 22,
    "UncondBranches": 34,
    "binaryConstArg": 14,
    "NumAShrInst": 0,
    "NumAddInst": 11,
    "NumAllocaInst": 12,
    "NumAndInst": 0,
    "BlockMid": 3,
    "BlockLow": 52,
    "NumBitCastInst": 2,
    "NumBrInst": 51,
    "NumCallInst": 16,
    "NumGetElementPtrInst": 26,
    "NumICmpInst": 17,
    "NumLShrInst": 0,
    "NumLoadInst": 75,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 2,
    "NumSExtInst": 17,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 22,
    "NumSubInst": 6,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 6,
    "TotalBlocks": 55,
    "TotalInsts": 268,
    "TotalMemInst": 151,
    "TotalFuncs": 12,
    "ArgsPhi": 0,
    "testUnary": 114
  },
  "baseline_oz_instcount": 266,
  "knowledge_base_entry": [
    "--speculative-execution",
    "--newgvn",
    "--aggressive-instcombine",
    "--globaldce",
    "--aggressive-instcombine",
    "--licm",
    "--load-store-vectorizer",
    "--elim-avail-extern",
    "--aggressive-instcombine",
    "--licm",
    "--dce",
    "--sccp",
    "--bdce",
    "--correlated-propagation",
    "--ipsccp",
    "--instcombine",
    "--dce",
    "--dse",
    "--lower-expect",
    "--dce",
    "--sccp",
    "--newgvn",
    "--aggressive-instcombine",
    "--loop-instsimplify",
    "--mem2reg",
    "--loop-rotate",
    "--newgvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--strip-debug-declare",
          "--slsr",
          "--always-inline",
          "--strip",
          "--called-value-propagation",
          "--slp-vectorizer",
          "--inline",
          "--coro-split",
          "--sroa",
          "--mergeicmps",
          "--hotcoldsplit",
          "--argpromotion",
          "--aggressive-instcombine",
          "--loop-simplifycfg",
          "--rewrite-statepoints-for-gc",
          "--globalopt",
          "--alignment-from-assumptions"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--strip-debug-declare",
      "--slsr",
      "--always-inline",
      "--strip",
      "--called-value-propagation",
      "--slp-vectorizer",
      "--inline",
      "--coro-split",
      "--sroa",
      "--mergeicmps",
      "--hotcoldsplit",
      "--argpromotion",
      "--aggressive-instcombine",
      "--loop-simplifycfg",
      "--rewrite-statepoints-for-gc",
      "--globalopt",
      "--alignment-from-assumptions"
    ],
    "performance_vs_Oz": "+0.8%"
  }
}
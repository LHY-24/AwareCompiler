{
  "program_id": "github-v0_31009.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 0,
    "onePredOneSuc": 0,
    "onePredTwoSuc": 0,
    "oneSuccessor": 0,
    "twoPred": 0,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 0,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 5,
    "BeginPhi": 0,
    "BranchCount": 0,
    "returnInt": 9,
    "CriticalCount": 0,
    "NumEdges": 0,
    "const32Bit": 29,
    "const64Bit": 0,
    "numConstZeroes": 1,
    "numConstOnes": 20,
    "UncondBranches": 0,
    "binaryConstArg": 0,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 12,
    "NumAndInst": 0,
    "BlockMid": 4,
    "BlockLow": 1,
    "NumBitCastInst": 0,
    "NumBrInst": 0,
    "NumCallInst": 9,
    "NumGetElementPtrInst": 16,
    "NumICmpInst": 0,
    "NumLShrInst": 0,
    "NumLoadInst": 58,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 5,
    "NumSExtInst": 4,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 40,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 5,
    "TotalInsts": 144,
    "TotalMemInst": 135,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 74
  },
  "baseline_oz_instcount": 144,
  "knowledge_base_entry": [
    "--loop-simplify",
    "--early-cse",
    "--correlated-propagation",
    "--mergefunc",
    "--inline",
    "--ipsccp",
    "--adce",
    "--newgvn",
    "--indvars",
    "--early-cse",
    "--mldst-motion",
    "--sroa",
    "--jump-threading"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-data-prefetch",
          "--canonicalize-aliases",
          "--insert-gcov-profiling",
          "--strip",
          "--deadargelim",
          "--loop-distribute",
          "--lower-guard-intrinsic",
          "--reassociate",
          "--hotcoldsplit",
          "--lower-expect",
          "--inferattrs",
          "--loop-unroll-and-jam",
          "--post-inline-ee-instrument",
          "--instnamer",
          "--instcombine",
          "--indvars",
          "--licm",
          "--sccp",
          "--forceattrs",
          "--loweratomic",
          "--mergefunc",
          "--called-value-propagation",
          "--mergeicmps",
          "--loop-rotate",
          "--libcalls-shrinkwrap",
          "--functionattrs",
          "--loop-fusion",
          "--memcpyopt",
          "--constmerge",
          "--strip-nondebug"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+22.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-data-prefetch",
      "--canonicalize-aliases",
      "--insert-gcov-profiling",
      "--strip",
      "--deadargelim",
      "--loop-distribute",
      "--lower-guard-intrinsic",
      "--reassociate",
      "--hotcoldsplit",
      "--lower-expect",
      "--inferattrs",
      "--loop-unroll-and-jam",
      "--post-inline-ee-instrument",
      "--instnamer",
      "--instcombine",
      "--indvars",
      "--licm",
      "--sccp",
      "--forceattrs",
      "--loweratomic",
      "--mergefunc",
      "--called-value-propagation",
      "--mergeicmps",
      "--loop-rotate",
      "--libcalls-shrinkwrap",
      "--functionattrs",
      "--loop-fusion",
      "--memcpyopt",
      "--constmerge",
      "--strip-nondebug"
    ],
    "performance_vs_Oz": "+22.2%"
  }
}
{
  "program_id": "github-v0_48814.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 15,
    "onePredOneSuc": 10,
    "onePredTwoSuc": 2,
    "oneSuccessor": 13,
    "twoPred": 6,
    "twoPredOneSuc": 2,
    "twoEach": 4,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 24,
    "BeginPhi": 0,
    "BranchCount": 20,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 27,
    "const32Bit": 44,
    "const64Bit": 59,
    "numConstZeroes": 56,
    "numConstOnes": 27,
    "UncondBranches": 13,
    "binaryConstArg": 28,
    "NumAShrInst": 9,
    "NumAddInst": 4,
    "NumAllocaInst": 12,
    "NumAndInst": 9,
    "BlockMid": 7,
    "BlockLow": 17,
    "NumBitCastInst": 0,
    "NumBrInst": 20,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 33,
    "NumICmpInst": 7,
    "NumLShrInst": 0,
    "NumLoadInst": 48,
    "NumMulInst": 0,
    "NumOrInst": 8,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 10,
    "NumSelectInst": 0,
    "NumShlInst": 5,
    "NumStoreInst": 23,
    "NumSubInst": 0,
    "NumTruncInst": 19,
    "NumXorInst": 1,
    "NumZExtInst": 34,
    "TotalBlocks": 24,
    "TotalInsts": 253,
    "TotalMemInst": 123,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 123
  },
  "baseline_oz_instcount": 253,
  "knowledge_base_entry": [
    "--memcpyopt",
    "--licm",
    "--dse",
    "--reassociate",
    "--ipsccp",
    "--jump-threading",
    "--memcpyopt",
    "--early-cse",
    "--aggressive-instcombine",
    "--loop-instsimplify",
    "--newgvn",
    "--loop-simplifycfg",
    "--early-cse-memssa",
    "--lower-expect",
    "--jump-threading",
    "--die"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--correlated-propagation",
          "--slp-vectorizer",
          "--dse",
          "--mergeicmps",
          "--guard-widening",
          "--called-value-propagation",
          "--bdce",
          "--argpromotion",
          "--barrier",
          "--adce",
          "--cross-dso-cfi",
          "--jump-threading",
          "--post-inline-ee-instrument",
          "--inline",
          "--mergereturn",
          "--rpo-functionattrs",
          "--ee-instrument",
          "--dce",
          "--loop-distribute",
          "--loop-predication",
          "--die",
          "--loop-guard-widening",
          "--canonicalize-aliases",
          "--lcssa",
          "--partial-inliner",
          "--licm",
          "--loop-load-elim",
          "--aggressive-instcombine"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+9.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--correlated-propagation",
      "--slp-vectorizer",
      "--dse",
      "--mergeicmps",
      "--guard-widening",
      "--called-value-propagation",
      "--bdce",
      "--argpromotion",
      "--barrier",
      "--adce",
      "--cross-dso-cfi",
      "--jump-threading",
      "--post-inline-ee-instrument",
      "--inline",
      "--mergereturn",
      "--rpo-functionattrs",
      "--ee-instrument",
      "--dce",
      "--loop-distribute",
      "--loop-predication",
      "--die",
      "--loop-guard-widening",
      "--canonicalize-aliases",
      "--lcssa",
      "--partial-inliner",
      "--licm",
      "--loop-load-elim",
      "--aggressive-instcombine"
    ],
    "performance_vs_Oz": "+9.1%"
  }
}
{
  "program_id": "github-v0_29013.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 82,
    "onePredOneSuc": 62,
    "onePredTwoSuc": 1,
    "oneSuccessor": 82,
    "twoPred": 31,
    "twoPredOneSuc": 3,
    "twoEach": 24,
    "twoSuccessor": 31,
    "morePreds": 0,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 140,
    "BeginPhi": 1,
    "BranchCount": 113,
    "returnInt": 8,
    "CriticalCount": 0,
    "NumEdges": 144,
    "const32Bit": 205,
    "const64Bit": 20,
    "numConstZeroes": 46,
    "numConstOnes": 81,
    "UncondBranches": 82,
    "binaryConstArg": 91,
    "NumAShrInst": 2,
    "NumAddInst": 51,
    "NumAllocaInst": 56,
    "NumAndInst": 1,
    "BlockMid": 13,
    "BlockLow": 128,
    "NumBitCastInst": 0,
    "NumBrInst": 113,
    "NumCallInst": 30,
    "NumGetElementPtrInst": 38,
    "NumICmpInst": 31,
    "NumLShrInst": 0,
    "NumLoadInst": 195,
    "NumMulInst": 22,
    "NumOrInst": 0,
    "NumPHIInst": 1,
    "NumRetInst": 18,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 91,
    "NumSubInst": 2,
    "NumTruncInst": 10,
    "NumXorInst": 11,
    "NumZExtInst": 63,
    "TotalBlocks": 141,
    "TotalInsts": 786,
    "TotalMemInst": 410,
    "TotalFuncs": 22,
    "ArgsPhi": 2,
    "testUnary": 324
  },
  "baseline_oz_instcount": 775,
  "knowledge_base_entry": [
    "--ipconstprop",
    "--aggressive-instcombine",
    "--loop-simplifycfg",
    "--slp-vectorizer",
    "--inline",
    "--ipsccp",
    "--reassociate",
    "--bdce",
    "--simplifycfg",
    "--inline",
    "--ipsccp",
    "--loop-simplifycfg",
    "--correlated-propagation",
    "--ipsccp",
    "--reassociate",
    "--reassociate",
    "--load-store-vectorizer",
    "--instsimplify",
    "--nary-reassociate",
    "--loop-simplifycfg",
    "--dse",
    "--gvn-hoist",
    "--dce",
    "--ipsccp",
    "--loop-simplifycfg",
    "--correlated-propagation",
    "--newgvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--mergefunc",
          "--nary-reassociate",
          "--gvn-hoist",
          "--lower-constant-intrinsics",
          "--prune-eh",
          "--ipconstprop",
          "--always-inline",
          "--coro-split",
          "--loop-load-elim",
          "--mldst-motion",
          "--callsite-splitting",
          "--loop-instsimplify",
          "--guard-widening",
          "--loop-reroll",
          "--instsimplify",
          "--reg2mem",
          "--loop-versioning",
          "--loop-versioning-licm",
          "--barrier",
          "--lcssa",
          "--partially-inline-libcalls",
          "--aggressive-instcombine",
          "--ipsccp",
          "--scalarizer",
          "--loop-sink"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--mergefunc",
      "--nary-reassociate",
      "--gvn-hoist",
      "--lower-constant-intrinsics",
      "--prune-eh",
      "--ipconstprop",
      "--always-inline",
      "--coro-split",
      "--loop-load-elim",
      "--mldst-motion",
      "--callsite-splitting",
      "--loop-instsimplify",
      "--guard-widening",
      "--loop-reroll",
      "--instsimplify",
      "--reg2mem",
      "--loop-versioning",
      "--loop-versioning-licm",
      "--barrier",
      "--lcssa",
      "--partially-inline-libcalls",
      "--aggressive-instcombine",
      "--ipsccp",
      "--scalarizer",
      "--loop-sink"
    ],
    "performance_vs_Oz": "+3.1%"
  }
}
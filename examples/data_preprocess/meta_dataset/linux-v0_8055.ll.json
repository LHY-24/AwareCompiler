{
  "program_id": "linux-v0_8055.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 6,
    "onePredOneSuc": 4,
    "onePredTwoSuc": 1,
    "oneSuccessor": 6,
    "twoPred": 2,
    "twoPredOneSuc": 1,
    "twoEach": 0,
    "twoSuccessor": 2,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 10,
    "BeginPhi": 0,
    "BranchCount": 8,
    "returnInt": 0,
    "CriticalCount": 0,
    "NumEdges": 10,
    "const32Bit": 26,
    "const64Bit": 3,
    "numConstZeroes": 15,
    "numConstOnes": 8,
    "UncondBranches": 6,
    "binaryConstArg": 16,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 5,
    "NumAndInst": 10,
    "BlockMid": 2,
    "BlockLow": 8,
    "NumBitCastInst": 3,
    "NumBrInst": 8,
    "NumCallInst": 1,
    "NumGetElementPtrInst": 11,
    "NumICmpInst": 3,
    "NumLShrInst": 2,
    "NumLoadInst": 20,
    "NumMulInst": 0,
    "NumOrInst": 4,
    "NumPHIInst": 0,
    "NumRetInst": 2,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 10,
    "NumSubInst": 0,
    "NumTruncInst": 3,
    "NumXorInst": 1,
    "NumZExtInst": 5,
    "TotalBlocks": 10,
    "TotalInsts": 89,
    "TotalMemInst": 47,
    "TotalFuncs": 2,
    "ArgsPhi": 0,
    "testUnary": 36
  },
  "baseline_oz_instcount": 89,
  "knowledge_base_entry": [
    "--aggressive-instcombine",
    "--loop-simplifycfg",
    "--aggressive-instcombine",
    "--loop-rotate",
    "--sroa",
    "--flattencfg",
    "--adce",
    "--gvn",
    "-loop-reduce",
    "--early-cse-memssa",
    "--ipsccp",
    "--early-cse",
    "--dce",
    "--ipsccp",
    "--newgvn",
    "--loop-reroll",
    "--lower-constant-intrinsics",
    "--bdce",
    "--correlated-propagation",
    "--bdce",
    "--dse",
    "--inline",
    "--simplifycfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--gvn",
          "--add-discriminators",
          "--loop-load-elim",
          "--loop-deletion",
          "--pgo-memop-opt",
          "--correlated-propagation",
          "--loop-unroll-and-jam",
          "--called-value-propagation",
          "--consthoist",
          "--dce",
          "--loop-rotate",
          "--gvn-hoist",
          "--always-inline",
          "--loop-idiom",
          "--guard-widening",
          "--memcpyopt",
          "--irce",
          "--simple-loop-unswitch",
          "--aggressive-instcombine",
          "--functionattrs",
          "--tailcallelim",
          "--post-inline-ee-instrument",
          "--slp-vectorizer"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--gvn",
      "--add-discriminators",
      "--loop-load-elim",
      "--loop-deletion",
      "--pgo-memop-opt",
      "--correlated-propagation",
      "--loop-unroll-and-jam",
      "--called-value-propagation",
      "--consthoist",
      "--dce",
      "--loop-rotate",
      "--gvn-hoist",
      "--always-inline",
      "--loop-idiom",
      "--guard-widening",
      "--memcpyopt",
      "--irce",
      "--simple-loop-unswitch",
      "--aggressive-instcombine",
      "--functionattrs",
      "--tailcallelim",
      "--post-inline-ee-instrument",
      "--slp-vectorizer"
    ],
    "performance_vs_Oz": "+1.1%"
  }
}
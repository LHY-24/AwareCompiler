{
  "program_id": "linux-v0_12282.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 20,
    "onePredOneSuc": 17,
    "onePredTwoSuc": 3,
    "oneSuccessor": 22,
    "twoPred": 6,
    "twoPredOneSuc": 3,
    "twoEach": 1,
    "twoSuccessor": 6,
    "morePreds": 4,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 38,
    "BeginPhi": 0,
    "BranchCount": 28,
    "returnInt": 13,
    "CriticalCount": 6,
    "NumEdges": 44,
    "const32Bit": 127,
    "const64Bit": 11,
    "numConstZeroes": 72,
    "numConstOnes": 32,
    "UncondBranches": 22,
    "binaryConstArg": 18,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 18,
    "NumAndInst": 5,
    "BlockMid": 2,
    "BlockLow": 36,
    "NumBitCastInst": 9,
    "NumBrInst": 28,
    "NumCallInst": 16,
    "NumGetElementPtrInst": 35,
    "NumICmpInst": 7,
    "NumLShrInst": 0,
    "NumLoadInst": 72,
    "NumMulInst": 0,
    "NumOrInst": 7,
    "NumPHIInst": 0,
    "NumRetInst": 8,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 3,
    "NumStoreInst": 34,
    "NumSubInst": 3,
    "NumTruncInst": 1,
    "NumXorInst": 3,
    "NumZExtInst": 3,
    "TotalBlocks": 38,
    "TotalInsts": 254,
    "TotalMemInst": 175,
    "TotalFuncs": 22,
    "ArgsPhi": 0,
    "testUnary": 103
  },
  "baseline_oz_instcount": 254,
  "knowledge_base_entry": [
    "--instcombine",
    "--sccp",
    "--loop-simplifycfg",
    "--sccp",
    "--dce",
    "--aggressive-instcombine",
    "--mergefunc",
    "--globalopt",
    "--globaldce",
    "--aggressive-instcombine",
    "--mergefunc",
    "--globalopt",
    "--globaldce",
    "--mergefunc",
    "--early-cse",
    "--newgvn",
    "--die",
    "--correlated-propagation",
    "--gvn",
    "--reassociate",
    "--lower-expect"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--die",
          "--slp-vectorizer",
          "--loop-versioning",
          "--loop-idiom",
          "--argpromotion",
          "--strip-dead-prototypes",
          "--dce",
          "--aggressive-instcombine",
          "--canonicalize-aliases",
          "--lower-expect"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--die",
      "--slp-vectorizer",
      "--loop-versioning",
      "--loop-idiom",
      "--argpromotion",
      "--strip-dead-prototypes",
      "--dce",
      "--aggressive-instcombine",
      "--canonicalize-aliases",
      "--lower-expect"
    ],
    "performance_vs_Oz": "+0.8%"
  }
}
{
  "program_id": "linux-v0_9525.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 79,
    "onePredOneSuc": 54,
    "onePredTwoSuc": 23,
    "oneSuccessor": 66,
    "twoPred": 23,
    "twoPredOneSuc": 6,
    "twoEach": 9,
    "twoSuccessor": 42,
    "morePreds": 6,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 130,
    "BeginPhi": 2,
    "BranchCount": 108,
    "returnInt": 30,
    "CriticalCount": 20,
    "NumEdges": 150,
    "const32Bit": 335,
    "const64Bit": 20,
    "numConstZeroes": 156,
    "numConstOnes": 112,
    "UncondBranches": 66,
    "binaryConstArg": 16,
    "NumAShrInst": 0,
    "NumAddInst": 3,
    "NumAllocaInst": 75,
    "NumAndInst": 0,
    "BlockMid": 14,
    "BlockLow": 118,
    "NumBitCastInst": 7,
    "NumBrInst": 108,
    "NumCallInst": 86,
    "NumGetElementPtrInst": 103,
    "NumICmpInst": 43,
    "NumLShrInst": 0,
    "NumLoadInst": 233,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 2,
    "NumRetInst": 24,
    "NumSExtInst": 6,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 109,
    "NumSubInst": 1,
    "NumTruncInst": 6,
    "NumXorInst": 11,
    "NumZExtInst": 10,
    "TotalBlocks": 132,
    "TotalInsts": 836,
    "TotalMemInst": 606,
    "TotalFuncs": 46,
    "ArgsPhi": 4,
    "testUnary": 345
  },
  "baseline_oz_instcount": 837,
  "knowledge_base_entry": [
    "--correlated-propagation",
    "--early-cse",
    "--slsr",
    "--gvn-hoist",
    "--sroa",
    "--reassociate",
    "--early-cse-memssa",
    "--sroa",
    "--dse",
    "--simplifycfg",
    "--instcombine",
    "--aggressive-instcombine",
    "--inline",
    "--reassociate",
    "--adce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--memcpyopt",
          "--pgo-memop-opt",
          "--hotcoldsplit",
          "--instsimplify",
          "--strip",
          "--lowerswitch",
          "--inject-tli-mappings",
          "--gvn-hoist",
          "--globalsplit",
          "--loop-vectorize",
          "--inferattrs"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--memcpyopt",
      "--pgo-memop-opt",
      "--hotcoldsplit",
      "--instsimplify",
      "--strip",
      "--lowerswitch",
      "--inject-tli-mappings",
      "--gvn-hoist",
      "--globalsplit",
      "--loop-vectorize",
      "--inferattrs"
    ],
    "performance_vs_Oz": "+0.1%"
  }
}
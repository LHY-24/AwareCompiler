{
  "program_id": "linux-v0_11966.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 49,
    "onePredOneSuc": 35,
    "onePredTwoSuc": 9,
    "oneSuccessor": 43,
    "twoPred": 5,
    "twoPredOneSuc": 3,
    "twoEach": 0,
    "twoSuccessor": 13,
    "morePreds": 4,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 76,
    "BeginPhi": 0,
    "BranchCount": 56,
    "returnInt": 17,
    "CriticalCount": 1,
    "NumEdges": 78,
    "const32Bit": 200,
    "const64Bit": 12,
    "numConstZeroes": 89,
    "numConstOnes": 83,
    "UncondBranches": 43,
    "binaryConstArg": 9,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 61,
    "NumAndInst": 1,
    "BlockMid": 7,
    "BlockLow": 69,
    "NumBitCastInst": 28,
    "NumBrInst": 56,
    "NumCallInst": 45,
    "NumGetElementPtrInst": 59,
    "NumICmpInst": 14,
    "NumLShrInst": 2,
    "NumLoadInst": 135,
    "NumMulInst": 0,
    "NumOrInst": 3,
    "NumPHIInst": 0,
    "NumRetInst": 18,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 88,
    "NumSubInst": 1,
    "NumTruncInst": 1,
    "NumXorInst": 2,
    "NumZExtInst": 1,
    "TotalBlocks": 76,
    "TotalInsts": 525,
    "TotalMemInst": 388,
    "TotalFuncs": 44,
    "ArgsPhi": 0,
    "testUnary": 232
  },
  "baseline_oz_instcount": 525,
  "knowledge_base_entry": [
    "--loop-idiom",
    "--instcombine",
    "--adce",
    "--early-cse-memssa",
    "--gvn-hoist",
    "--loop-rotate",
    "--lower-expect",
    "--mergefunc",
    "--mem2reg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-versioning",
          "--lcssa",
          "--gvn",
          "--callsite-splitting",
          "--inferattrs",
          "--loop-deletion",
          "--float2int",
          "--sroa",
          "--coro-split",
          "--loop-unroll-and-jam",
          "--reassociate",
          "--simple-loop-unswitch",
          "--loop-unroll",
          "--called-value-propagation",
          "--sancov",
          "--cross-dso-cfi",
          "--lower-widenable-condition",
          "--elim-avail-extern",
          "--loop-reroll",
          "--deadargelim",
          "--mergefunc",
          "--strip-dead-prototypes",
          "--load-store-vectorizer",
          "--loweratomic",
          "--infer-address-spaces",
          "--partial-inliner",
          "--aggressive-instcombine",
          "--post-inline-ee-instrument",
          "--strip-debug-declare",
          "--irce"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-versioning",
      "--lcssa",
      "--gvn",
      "--callsite-splitting",
      "--inferattrs",
      "--loop-deletion",
      "--float2int",
      "--sroa",
      "--coro-split",
      "--loop-unroll-and-jam",
      "--reassociate",
      "--simple-loop-unswitch",
      "--loop-unroll",
      "--called-value-propagation",
      "--sancov",
      "--cross-dso-cfi",
      "--lower-widenable-condition",
      "--elim-avail-extern",
      "--loop-reroll",
      "--deadargelim",
      "--mergefunc",
      "--strip-dead-prototypes",
      "--load-store-vectorizer",
      "--loweratomic",
      "--infer-address-spaces",
      "--partial-inliner",
      "--aggressive-instcombine",
      "--post-inline-ee-instrument",
      "--strip-debug-declare",
      "--irce"
    ],
    "performance_vs_Oz": "+1.1%"
  }
}
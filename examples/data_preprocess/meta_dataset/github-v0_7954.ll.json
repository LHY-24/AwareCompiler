{
  "program_id": "github-v0_7954.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 13,
    "onePredOneSuc": 9,
    "onePredTwoSuc": 1,
    "oneSuccessor": 11,
    "twoPred": 5,
    "twoPredOneSuc": 1,
    "twoEach": 4,
    "twoSuccessor": 6,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 21,
    "BeginPhi": 0,
    "BranchCount": 17,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 23,
    "const32Bit": 31,
    "const64Bit": 24,
    "numConstZeroes": 25,
    "numConstOnes": 25,
    "UncondBranches": 11,
    "binaryConstArg": 8,
    "NumAShrInst": 0,
    "NumAddInst": 8,
    "NumAllocaInst": 14,
    "NumAndInst": 0,
    "BlockMid": 4,
    "BlockLow": 17,
    "NumBitCastInst": 4,
    "NumBrInst": 17,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 18,
    "NumICmpInst": 6,
    "NumLShrInst": 0,
    "NumLoadInst": 29,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 20,
    "NumSubInst": 0,
    "NumTruncInst": 4,
    "NumXorInst": 0,
    "NumZExtInst": 11,
    "TotalBlocks": 21,
    "TotalInsts": 145,
    "TotalMemInst": 88,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 65
  },
  "baseline_oz_instcount": 145,
  "knowledge_base_entry": [
    "--correlated-propagation",
    "--reassociate",
    "--early-cse",
    "--loop-instsimplify",
    "--sccp",
    "--reassociate",
    "--early-cse",
    "--reassociate",
    "--instcombine",
    "--early-cse-memssa",
    "--early-cse-memssa",
    "--aggressive-instcombine",
    "--early-cse",
    "--loop-instsimplify",
    "--sccp",
    "--newgvn",
    "--mergefunc",
    "--sroa",
    "--newgvn",
    "--dce",
    "--sccp",
    "--loop-instsimplify",
    "--lower-constant-intrinsics",
    "--jump-threading",
    "--load-store-vectorizer"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-distribute",
          "--sancov",
          "--post-inline-ee-instrument",
          "--rewrite-statepoints-for-gc",
          "--indvars",
          "--ipsccp",
          "--lcssa",
          "--mergeicmps",
          "--aggressive-instcombine",
          "--div-rem-pairs",
          "--dse",
          "--loop-predication",
          "--constmerge",
          "--loop-vectorize",
          "--forceattrs",
          "--break-crit-edges",
          "--nary-reassociate",
          "--add-discriminators",
          "--strip",
          "--mldst-motion"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+4.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-distribute",
      "--sancov",
      "--post-inline-ee-instrument",
      "--rewrite-statepoints-for-gc",
      "--indvars",
      "--ipsccp",
      "--lcssa",
      "--mergeicmps",
      "--aggressive-instcombine",
      "--div-rem-pairs",
      "--dse",
      "--loop-predication",
      "--constmerge",
      "--loop-vectorize",
      "--forceattrs",
      "--break-crit-edges",
      "--nary-reassociate",
      "--add-discriminators",
      "--strip",
      "--mldst-motion"
    ],
    "performance_vs_Oz": "+4.1%"
  }
}
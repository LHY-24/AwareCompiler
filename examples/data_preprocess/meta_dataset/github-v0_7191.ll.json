{
  "program_id": "github-v0_7191.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 90,
    "onePredOneSuc": 54,
    "onePredTwoSuc": 35,
    "oneSuccessor": 68,
    "twoPred": 26,
    "twoPredOneSuc": 9,
    "twoEach": 12,
    "twoSuccessor": 51,
    "morePreds": 3,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 131,
    "BeginPhi": 0,
    "BranchCount": 119,
    "returnInt": 1,
    "CriticalCount": 15,
    "NumEdges": 170,
    "const32Bit": 167,
    "const64Bit": 4,
    "numConstZeroes": 35,
    "numConstOnes": 57,
    "UncondBranches": 68,
    "binaryConstArg": 34,
    "NumAShrInst": 0,
    "NumAddInst": 21,
    "NumAllocaInst": 43,
    "NumAndInst": 3,
    "BlockMid": 1,
    "BlockLow": 130,
    "NumBitCastInst": 0,
    "NumBrInst": 119,
    "NumCallInst": 19,
    "NumGetElementPtrInst": 4,
    "NumICmpInst": 51,
    "NumLShrInst": 3,
    "NumLoadInst": 131,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 12,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 87,
    "NumSubInst": 8,
    "NumTruncInst": 13,
    "NumXorInst": 0,
    "NumZExtInst": 12,
    "TotalBlocks": 131,
    "TotalInsts": 534,
    "TotalMemInst": 284,
    "TotalFuncs": 13,
    "ArgsPhi": 0,
    "testUnary": 201
  },
  "baseline_oz_instcount": 534,
  "knowledge_base_entry": [
    "--globaldce",
    "--aggressive-instcombine",
    "--adce",
    "--inline",
    "--mldst-motion",
    "--gvn",
    "--gvn-hoist",
    "-loop-reduce",
    "--slsr",
    "--slp-vectorizer"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--ee-instrument",
          "--simplifycfg",
          "--forceattrs",
          "--aggressive-instcombine",
          "--ipconstprop",
          "--constmerge",
          "--inject-tli-mappings",
          "--consthoist",
          "--callsite-splitting",
          "--loop-guard-widening",
          "--partial-inliner",
          "--called-value-propagation",
          "--mergefunc",
          "--mergeicmps",
          "--instsimplify",
          "--reassociate",
          "--barrier",
          "--attributor",
          "--loop-sink",
          "--sink",
          "--coro-cleanup",
          "-loop-reduce",
          "--early-cse",
          "--ipsccp",
          "--coro-split",
          "--always-inline",
          "--lcssa",
          "--lower-widenable-condition",
          "--lower-expect",
          "--flattencfg"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--ee-instrument",
      "--simplifycfg",
      "--forceattrs",
      "--aggressive-instcombine",
      "--ipconstprop",
      "--constmerge",
      "--inject-tli-mappings",
      "--consthoist",
      "--callsite-splitting",
      "--loop-guard-widening",
      "--partial-inliner",
      "--called-value-propagation",
      "--mergefunc",
      "--mergeicmps",
      "--instsimplify",
      "--reassociate",
      "--barrier",
      "--attributor",
      "--loop-sink",
      "--sink",
      "--coro-cleanup",
      "-loop-reduce",
      "--early-cse",
      "--ipsccp",
      "--coro-split",
      "--always-inline",
      "--lcssa",
      "--lower-widenable-condition",
      "--lower-expect",
      "--flattencfg"
    ],
    "performance_vs_Oz": "+2.2%"
  }
}
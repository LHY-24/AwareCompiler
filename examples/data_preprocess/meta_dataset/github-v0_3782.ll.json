{
  "program_id": "github-v0_3782.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 7,
    "onePredOneSuc": 6,
    "onePredTwoSuc": 1,
    "oneSuccessor": 7,
    "twoPred": 4,
    "twoPredOneSuc": 1,
    "twoEach": 1,
    "twoSuccessor": 4,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 18,
    "BeginPhi": 0,
    "BranchCount": 10,
    "returnInt": 2,
    "CriticalCount": 2,
    "NumEdges": 15,
    "const32Bit": 37,
    "const64Bit": 1,
    "numConstZeroes": 8,
    "numConstOnes": 26,
    "UncondBranches": 7,
    "binaryConstArg": 2,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 19,
    "NumAndInst": 0,
    "BlockMid": 3,
    "BlockLow": 15,
    "NumBitCastInst": 4,
    "NumBrInst": 10,
    "NumCallInst": 4,
    "NumGetElementPtrInst": 6,
    "NumICmpInst": 1,
    "NumLShrInst": 0,
    "NumLoadInst": 23,
    "NumMulInst": 1,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 7,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 21,
    "NumSubInst": 1,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 18,
    "TotalInsts": 104,
    "TotalMemInst": 73,
    "TotalFuncs": 10,
    "ArgsPhi": 0,
    "testUnary": 47
  },
  "baseline_oz_instcount": 105,
  "knowledge_base_entry": [
    "--prune-eh",
    "--sroa",
    "--adce",
    "--gvn-hoist",
    "--early-cse",
    "--instsimplify",
    "--mldst-motion",
    "--simplifycfg",
    "--instcombine",
    "--newgvn",
    "--nary-reassociate",
    "--loop-reroll",
    "--loop-simplifycfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--div-rem-pairs",
          "--loop-unswitch",
          "--loop-load-elim",
          "--irce",
          "--loop-distribute",
          "--correlated-propagation",
          "--mem2reg",
          "--guard-widening",
          "--lowerinvoke",
          "--gvn"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.0%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--div-rem-pairs",
      "--loop-unswitch",
      "--loop-load-elim",
      "--irce",
      "--loop-distribute",
      "--correlated-propagation",
      "--mem2reg",
      "--guard-widening",
      "--lowerinvoke",
      "--gvn"
    ],
    "performance_vs_Oz": "+1.0%"
  }
}
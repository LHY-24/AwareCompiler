{
  "program_id": "github-v0_6798.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 9,
    "onePredOneSuc": 9,
    "onePredTwoSuc": 0,
    "oneSuccessor": 9,
    "twoPred": 2,
    "twoPredOneSuc": 0,
    "twoEach": 2,
    "twoSuccessor": 2,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 15,
    "BeginPhi": 0,
    "BranchCount": 11,
    "returnInt": 14,
    "CriticalCount": 1,
    "NumEdges": 17,
    "const32Bit": 34,
    "const64Bit": 0,
    "numConstZeroes": 14,
    "numConstOnes": 21,
    "UncondBranches": 9,
    "binaryConstArg": 10,
    "NumAShrInst": 1,
    "NumAddInst": 3,
    "NumAllocaInst": 12,
    "NumAndInst": 3,
    "BlockMid": 4,
    "BlockLow": 11,
    "NumBitCastInst": 1,
    "NumBrInst": 11,
    "NumCallInst": 24,
    "NumGetElementPtrInst": 5,
    "NumICmpInst": 2,
    "NumLShrInst": 0,
    "NumLoadInst": 76,
    "NumMulInst": 0,
    "NumOrInst": 2,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 22,
    "NumSubInst": 1,
    "NumTruncInst": 8,
    "NumXorInst": 0,
    "NumZExtInst": 13,
    "TotalBlocks": 15,
    "TotalInsts": 190,
    "TotalMemInst": 139,
    "TotalFuncs": 11,
    "ArgsPhi": 0,
    "testUnary": 110
  },
  "baseline_oz_instcount": 190,
  "knowledge_base_entry": [
    "--early-cse-memssa",
    "--aggressive-instcombine",
    "--simplifycfg",
    "--licm",
    "--loop-rotate",
    "--instcombine",
    "--bdce",
    "--die"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--div-rem-pairs",
          "--inline",
          "--always-inline",
          "--strip-debug-declare",
          "--aggressive-instcombine",
          "--mem2reg",
          "--infer-address-spaces",
          "--lower-matrix-intrinsics",
          "--simple-loop-unswitch",
          "--loop-deletion",
          "--loop-fusion",
          "--loop-rotate",
          "--lower-constant-intrinsics",
          "--globaldce",
          "--functionattrs",
          "--nary-reassociate",
          "--lower-widenable-condition",
          "--float2int",
          "--correlated-propagation",
          "--called-value-propagation",
          "--guard-widening",
          "--mergereturn",
          "--insert-gcov-profiling",
          "--indvars",
          "--memcpyopt",
          "--add-discriminators",
          "--bdce",
          "--dse",
          "--instcombine",
          "--loop-simplify"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+5.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--div-rem-pairs",
      "--inline",
      "--always-inline",
      "--strip-debug-declare",
      "--aggressive-instcombine",
      "--mem2reg",
      "--infer-address-spaces",
      "--lower-matrix-intrinsics",
      "--simple-loop-unswitch",
      "--loop-deletion",
      "--loop-fusion",
      "--loop-rotate",
      "--lower-constant-intrinsics",
      "--globaldce",
      "--functionattrs",
      "--nary-reassociate",
      "--lower-widenable-condition",
      "--float2int",
      "--correlated-propagation",
      "--called-value-propagation",
      "--guard-widening",
      "--mergereturn",
      "--insert-gcov-profiling",
      "--indvars",
      "--memcpyopt",
      "--add-discriminators",
      "--bdce",
      "--dse",
      "--instcombine",
      "--loop-simplify"
    ],
    "performance_vs_Oz": "+5.8%"
  }
}
{
  "program_id": "github-v0_16472.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 12,
    "onePredOneSuc": 10,
    "onePredTwoSuc": 1,
    "oneSuccessor": 12,
    "twoPred": 5,
    "twoPredOneSuc": 1,
    "twoEach": 3,
    "twoSuccessor": 5,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 19,
    "BeginPhi": 0,
    "BranchCount": 17,
    "returnInt": 9,
    "CriticalCount": 1,
    "NumEdges": 22,
    "const32Bit": 35,
    "const64Bit": 5,
    "numConstZeroes": 16,
    "numConstOnes": 14,
    "UncondBranches": 12,
    "binaryConstArg": 8,
    "NumAShrInst": 0,
    "NumAddInst": 4,
    "NumAllocaInst": 9,
    "NumAndInst": 0,
    "BlockMid": 1,
    "BlockLow": 18,
    "NumBitCastInst": 3,
    "NumBrInst": 17,
    "NumCallInst": 12,
    "NumGetElementPtrInst": 10,
    "NumICmpInst": 5,
    "NumLShrInst": 0,
    "NumLoadInst": 38,
    "NumMulInst": 1,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 2,
    "NumSExtInst": 5,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 15,
    "NumSubInst": 4,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 19,
    "TotalInsts": 132,
    "TotalMemInst": 84,
    "TotalFuncs": 9,
    "ArgsPhi": 0,
    "testUnary": 61
  },
  "baseline_oz_instcount": 132,
  "knowledge_base_entry": [
    "--inferattrs",
    "--dse",
    "--loop-rotate",
    "--aggressive-instcombine",
    "--jump-threading",
    "--instsimplify",
    "--bdce",
    "--sroa",
    "--jump-threading",
    "--flattencfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-distribute",
          "--early-cse-memssa",
          "--mergereturn",
          "--separate-const-offset-from-gep",
          "--elim-avail-extern",
          "--constmerge",
          "--prune-eh",
          "--memcpyopt",
          "--consthoist",
          "--deadargelim",
          "--loweratomic",
          "-loop-reduce",
          "--sancov",
          "--rpo-functionattrs",
          "--ee-instrument",
          "--post-inline-ee-instrument",
          "--add-discriminators",
          "--sccp",
          "--constprop",
          "--aggressive-instcombine",
          "--hotcoldsplit",
          "--loop-idiom",
          "--lower-constant-intrinsics",
          "--simplifycfg",
          "--alignment-from-assumptions",
          "--coro-cleanup",
          "--loop-instsimplify",
          "--simple-loop-unswitch",
          "--lower-matrix-intrinsics"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-distribute",
      "--early-cse-memssa",
      "--mergereturn",
      "--separate-const-offset-from-gep",
      "--elim-avail-extern",
      "--constmerge",
      "--prune-eh",
      "--memcpyopt",
      "--consthoist",
      "--deadargelim",
      "--loweratomic",
      "-loop-reduce",
      "--sancov",
      "--rpo-functionattrs",
      "--ee-instrument",
      "--post-inline-ee-instrument",
      "--add-discriminators",
      "--sccp",
      "--constprop",
      "--aggressive-instcombine",
      "--hotcoldsplit",
      "--loop-idiom",
      "--lower-constant-intrinsics",
      "--simplifycfg",
      "--alignment-from-assumptions",
      "--coro-cleanup",
      "--loop-instsimplify",
      "--simple-loop-unswitch",
      "--lower-matrix-intrinsics"
    ],
    "performance_vs_Oz": "+1.5%"
  }
}
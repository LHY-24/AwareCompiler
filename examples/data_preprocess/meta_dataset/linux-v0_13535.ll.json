{
  "program_id": "linux-v0_13535.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 27,
    "onePredOneSuc": 17,
    "onePredTwoSuc": 10,
    "oneSuccessor": 22,
    "twoPred": 10,
    "twoPredOneSuc": 3,
    "twoEach": 4,
    "twoSuccessor": 18,
    "morePreds": 3,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 55,
    "BeginPhi": 2,
    "BranchCount": 40,
    "returnInt": 14,
    "CriticalCount": 11,
    "NumEdges": 58,
    "const32Bit": 150,
    "const64Bit": 26,
    "numConstZeroes": 73,
    "numConstOnes": 77,
    "UncondBranches": 22,
    "binaryConstArg": 15,
    "NumAShrInst": 0,
    "NumAddInst": 3,
    "NumAllocaInst": 56,
    "NumAndInst": 4,
    "BlockMid": 8,
    "BlockLow": 49,
    "NumBitCastInst": 8,
    "NumBrInst": 40,
    "NumCallInst": 41,
    "NumGetElementPtrInst": 41,
    "NumICmpInst": 24,
    "NumLShrInst": 0,
    "NumLoadInst": 114,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 2,
    "NumRetInst": 17,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 65,
    "NumSubInst": 5,
    "NumTruncInst": 7,
    "NumXorInst": 5,
    "NumZExtInst": 16,
    "TotalBlocks": 57,
    "TotalInsts": 461,
    "TotalMemInst": 317,
    "TotalFuncs": 33,
    "ArgsPhi": 6,
    "testUnary": 208
  },
  "baseline_oz_instcount": 461,
  "knowledge_base_entry": [
    "--early-cse-memssa",
    "--mem2reg",
    "--licm",
    "--jump-threading",
    "--ipsccp",
    "--mem2reg",
    "--loop-simplifycfg",
    "--sroa",
    "--slp-vectorizer",
    "--mldst-motion",
    "--dse",
    "--inline",
    "--reassociate",
    "--instcombine",
    "--newgvn",
    "--simplifycfg",
    "--bdce",
    "--reassociate",
    "--aggressive-instcombine",
    "--gvn-hoist",
    "--simplifycfg",
    "--slsr",
    "--early-cse",
    "--inline",
    "--instcombine",
    "--lower-constant-intrinsics",
    "--loop-reroll",
    "--gvn",
    "--inline"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--instcombine",
          "--inject-tli-mappings",
          "--ee-instrument",
          "--aggressive-instcombine",
          "--slsr",
          "--barrier",
          "--loop-simplifycfg",
          "--adce",
          "--loop-data-prefetch",
          "--prune-eh",
          "--strip",
          "--indvars",
          "--correlated-propagation",
          "--sancov",
          "--loop-idiom",
          "--gvn-hoist",
          "--loop-distribute",
          "--globalsplit",
          "--partially-inline-libcalls",
          "--loop-vectorize",
          "--early-cse-memssa",
          "--inferattrs",
          "--deadargelim",
          "--infer-address-spaces",
          "--licm",
          "--ipconstprop",
          "--constprop",
          "--sccp",
          "--lower-constant-intrinsics",
          "--memcpyopt"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--instcombine",
      "--inject-tli-mappings",
      "--ee-instrument",
      "--aggressive-instcombine",
      "--slsr",
      "--barrier",
      "--loop-simplifycfg",
      "--adce",
      "--loop-data-prefetch",
      "--prune-eh",
      "--strip",
      "--indvars",
      "--correlated-propagation",
      "--sancov",
      "--loop-idiom",
      "--gvn-hoist",
      "--loop-distribute",
      "--globalsplit",
      "--partially-inline-libcalls",
      "--loop-vectorize",
      "--early-cse-memssa",
      "--inferattrs",
      "--deadargelim",
      "--infer-address-spaces",
      "--licm",
      "--ipconstprop",
      "--constprop",
      "--sccp",
      "--lower-constant-intrinsics",
      "--memcpyopt"
    ],
    "performance_vs_Oz": "+0.4%"
  }
}
{
  "program_id": "github-v0_40797.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 14,
    "onePredOneSuc": 8,
    "onePredTwoSuc": 3,
    "oneSuccessor": 12,
    "twoPred": 6,
    "twoPredOneSuc": 3,
    "twoEach": 3,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 23,
    "BeginPhi": 0,
    "BranchCount": 19,
    "returnInt": 4,
    "CriticalCount": 1,
    "NumEdges": 26,
    "const32Bit": 31,
    "const64Bit": 33,
    "numConstZeroes": 33,
    "numConstOnes": 23,
    "UncondBranches": 12,
    "binaryConstArg": 9,
    "NumAShrInst": 1,
    "NumAddInst": 4,
    "NumAllocaInst": 13,
    "NumAndInst": 1,
    "BlockMid": 5,
    "BlockLow": 18,
    "NumBitCastInst": 4,
    "NumBrInst": 19,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 23,
    "NumICmpInst": 7,
    "NumLShrInst": 1,
    "NumLoadInst": 34,
    "NumMulInst": 0,
    "NumOrInst": 2,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 4,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 19,
    "NumSubInst": 0,
    "NumTruncInst": 6,
    "NumXorInst": 1,
    "NumZExtInst": 17,
    "TotalBlocks": 23,
    "TotalInsts": 167,
    "TotalMemInst": 96,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 78
  },
  "baseline_oz_instcount": 167,
  "knowledge_base_entry": [
    "--partially-inline-libcalls",
    "--gvn",
    "--load-store-vectorizer",
    "--lower-expect",
    "--lower-constant-intrinsics",
    "--aggressive-instcombine",
    "--loop-instsimplify",
    "--dse",
    "--instsimplify",
    "--aggressive-instcombine",
    "--inline",
    "--mem2reg",
    "--lower-constant-intrinsics",
    "--globalopt",
    "--gvn-hoist",
    "--loop-deletion",
    "--elim-avail-extern",
    "--sccp",
    "--globalopt",
    "--instsimplify",
    "--globalopt",
    "--gvn",
    "--aggressive-instcombine",
    "--loop-instsimplify",
    "--dse",
    "--globalopt",
    "--elim-avail-extern",
    "--adce",
    "--lower-constant-intrinsics",
    "--lower-expect",
    "--lower-constant-intrinsics",
    "--aggressive-instcombine",
    "--simplifycfg",
    "--aggressive-instcombine",
    "--licm",
    "--sroa",
    "--loop-reroll",
    "-loop-reduce",
    "--reassociate",
    "--prune-eh",
    "--licm",
    "--ipsccp",
    "--licm",
    "--mem2reg",
    "--gvn",
    "--load-store-vectorizer",
    "--lower-expect",
    "--lower-constant-intrinsics",
    "--aggressive-instcombine",
    "--bdce",
    "--loop-instsimplify",
    "--lower-constant-intrinsics",
    "--gvn-hoist",
    "--slp-vectorizer",
    "--bdce",
    "--elim-avail-extern",
    "--sccp",
    "--globalopt",
    "--instsimplify",
    "--globalopt",
    "--gvn",
    "--aggressive-instcombine",
    "--loop-instsimplify",
    "--dse",
    "--globalopt",
    "--elim-avail-extern",
    "--adce",
    "--lower-constant-intrinsics",
    "--lower-expect",
    "--lower-constant-intrinsics",
    "--aggressive-instcombine",
    "--simplifycfg",
    "--aggressive-instcombine",
    "--licm",
    "--sroa",
    "--loop-reroll",
    "-loop-reduce",
    "--reassociate",
    "--prune-eh",
    "--licm",
    "--ipsccp",
    "--licm",
    "--mem2reg",
    "--gvn",
    "--load-store-vectorizer",
    "--lower-expect",
    "--lower-constant-intrinsics",
    "--aggressive-instcombine",
    "--bdce",
    "--loop-simplifycfg",
    "--mergefunc"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--name-anon-globals",
          "--ipconstprop",
          "--licm",
          "--guard-widening",
          "--adce",
          "--sroa",
          "--loop-unroll-and-jam",
          "--loop-idiom",
          "--rpo-functionattrs",
          "--memcpyopt",
          "--globalopt",
          "--infer-address-spaces",
          "--lowerswitch",
          "--insert-gcov-profiling",
          "--always-inline",
          "--loop-unswitch",
          "--loop-data-prefetch",
          "--instsimplify",
          "--instcombine",
          "--inferattrs",
          "--pgo-memop-opt",
          "--slsr",
          "--aggressive-instcombine",
          "--ipsccp",
          "--loop-load-elim"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--name-anon-globals",
      "--ipconstprop",
      "--licm",
      "--guard-widening",
      "--adce",
      "--sroa",
      "--loop-unroll-and-jam",
      "--loop-idiom",
      "--rpo-functionattrs",
      "--memcpyopt",
      "--globalopt",
      "--infer-address-spaces",
      "--lowerswitch",
      "--insert-gcov-profiling",
      "--always-inline",
      "--loop-unswitch",
      "--loop-data-prefetch",
      "--instsimplify",
      "--instcombine",
      "--inferattrs",
      "--pgo-memop-opt",
      "--slsr",
      "--aggressive-instcombine",
      "--ipsccp",
      "--loop-load-elim"
    ],
    "performance_vs_Oz": "+3.6%"
  }
}
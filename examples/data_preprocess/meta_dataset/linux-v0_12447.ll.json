{
  "program_id": "linux-v0_12447.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 22,
    "onePredOneSuc": 14,
    "onePredTwoSuc": 7,
    "oneSuccessor": 18,
    "twoPred": 7,
    "twoPredOneSuc": 3,
    "twoEach": 3,
    "twoSuccessor": 14,
    "morePreds": 3,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 38,
    "BeginPhi": 1,
    "BranchCount": 32,
    "returnInt": 21,
    "CriticalCount": 10,
    "NumEdges": 46,
    "const32Bit": 47,
    "const64Bit": 13,
    "numConstZeroes": 29,
    "numConstOnes": 23,
    "UncondBranches": 18,
    "binaryConstArg": 3,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 12,
    "NumAndInst": 0,
    "BlockMid": 0,
    "BlockLow": 39,
    "NumBitCastInst": 0,
    "NumBrInst": 32,
    "NumCallInst": 28,
    "NumGetElementPtrInst": 9,
    "NumICmpInst": 14,
    "NumLShrInst": 0,
    "NumLoadInst": 26,
    "NumMulInst": 0,
    "NumOrInst": 2,
    "NumPHIInst": 1,
    "NumRetInst": 7,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 23,
    "NumSubInst": 1,
    "NumTruncInst": 4,
    "NumXorInst": 0,
    "NumZExtInst": 1,
    "TotalBlocks": 39,
    "TotalInsts": 166,
    "TotalMemInst": 98,
    "TotalFuncs": 24,
    "ArgsPhi": 2,
    "testUnary": 49
  },
  "baseline_oz_instcount": 167,
  "knowledge_base_entry": [
    "--loop-unroll",
    "--newgvn",
    "--loop-deletion",
    "--elim-avail-extern",
    "--flattencfg",
    "--inline",
    "--flattencfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--inline",
          "--tailcallelim",
          "--instnamer",
          "--lower-guard-intrinsic",
          "--loop-interchange",
          "--coro-early",
          "--loop-load-elim",
          "--attributor",
          "--add-discriminators",
          "--inject-tli-mappings",
          "--separate-const-offset-from-gep",
          "--called-value-propagation",
          "--loop-versioning-licm",
          "--loop-data-prefetch",
          "-loop-reduce",
          "--redundant-dbg-inst-elim",
          "--deadargelim",
          "--cross-dso-cfi",
          "--lcssa",
          "--slsr",
          "--licm",
          "--constprop",
          "--irce",
          "--name-anon-globals",
          "--pgo-memop-opt",
          "--coro-cleanup",
          "--lower-widenable-condition",
          "--simple-loop-unswitch",
          "--callsite-splitting"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--inline",
      "--tailcallelim",
      "--instnamer",
      "--lower-guard-intrinsic",
      "--loop-interchange",
      "--coro-early",
      "--loop-load-elim",
      "--attributor",
      "--add-discriminators",
      "--inject-tli-mappings",
      "--separate-const-offset-from-gep",
      "--called-value-propagation",
      "--loop-versioning-licm",
      "--loop-data-prefetch",
      "-loop-reduce",
      "--redundant-dbg-inst-elim",
      "--deadargelim",
      "--cross-dso-cfi",
      "--lcssa",
      "--slsr",
      "--licm",
      "--constprop",
      "--irce",
      "--name-anon-globals",
      "--pgo-memop-opt",
      "--coro-cleanup",
      "--lower-widenable-condition",
      "--simple-loop-unswitch",
      "--callsite-splitting"
    ],
    "performance_vs_Oz": "+0.6%"
  }
}
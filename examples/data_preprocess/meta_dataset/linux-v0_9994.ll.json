{
  "program_id": "linux-v0_9994.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 69,
    "onePredOneSuc": 46,
    "onePredTwoSuc": 22,
    "oneSuccessor": 54,
    "twoPred": 10,
    "twoPredOneSuc": 4,
    "twoEach": 4,
    "twoSuccessor": 32,
    "morePreds": 7,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 111,
    "BeginPhi": 0,
    "BranchCount": 86,
    "returnInt": 28,
    "CriticalCount": 3,
    "NumEdges": 118,
    "const32Bit": 327,
    "const64Bit": 17,
    "numConstZeroes": 168,
    "numConstOnes": 83,
    "UncondBranches": 54,
    "binaryConstArg": 28,
    "NumAShrInst": 0,
    "NumAddInst": 6,
    "NumAllocaInst": 71,
    "NumAndInst": 6,
    "BlockMid": 11,
    "BlockLow": 100,
    "NumBitCastInst": 10,
    "NumBrInst": 86,
    "NumCallInst": 84,
    "NumGetElementPtrInst": 91,
    "NumICmpInst": 36,
    "NumLShrInst": 1,
    "NumLoadInst": 223,
    "NumMulInst": 0,
    "NumOrInst": 11,
    "NumPHIInst": 0,
    "NumRetInst": 25,
    "NumSExtInst": 11,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 111,
    "NumSubInst": 0,
    "NumTruncInst": 4,
    "NumXorInst": 4,
    "NumZExtInst": 9,
    "TotalBlocks": 111,
    "TotalInsts": 793,
    "TotalMemInst": 580,
    "TotalFuncs": 48,
    "ArgsPhi": 0,
    "testUnary": 330
  },
  "baseline_oz_instcount": 794,
  "knowledge_base_entry": [
    "--reassociate",
    "--aggressive-instcombine",
    "--adce",
    "--aggressive-instcombine",
    "--bdce",
    "--mergefunc",
    "--aggressive-instcombine",
    "--inline",
    "--instsimplify",
    "--mldst-motion",
    "--instcombine",
    "--adce",
    "--dce",
    "--jump-threading",
    "--elim-avail-extern",
    "--gvn",
    "--reassociate",
    "--aggressive-instcombine",
    "--adce",
    "--aggressive-instcombine",
    "--bdce",
    "--mergefunc",
    "--die",
    "--lower-constant-intrinsics",
    "--newgvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--coro-early",
          "--add-discriminators",
          "--lower-expect",
          "--deadargelim",
          "--coro-elide",
          "--coro-cleanup",
          "--insert-gcov-profiling",
          "--loop-simplify",
          "--functionattrs",
          "--loop-unswitch",
          "--lower-guard-intrinsic",
          "--slp-vectorizer",
          "--consthoist",
          "--tailcallelim",
          "--aggressive-instcombine",
          "--lowerswitch",
          "--loop-distribute",
          "--loop-unroll",
          "--licm",
          "--dce",
          "--loop-reroll",
          "--div-rem-pairs",
          "--sroa",
          "--gvn",
          "--gvn-hoist"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--coro-early",
      "--add-discriminators",
      "--lower-expect",
      "--deadargelim",
      "--coro-elide",
      "--coro-cleanup",
      "--insert-gcov-profiling",
      "--loop-simplify",
      "--functionattrs",
      "--loop-unswitch",
      "--lower-guard-intrinsic",
      "--slp-vectorizer",
      "--consthoist",
      "--tailcallelim",
      "--aggressive-instcombine",
      "--lowerswitch",
      "--loop-distribute",
      "--loop-unroll",
      "--licm",
      "--dce",
      "--loop-reroll",
      "--div-rem-pairs",
      "--sroa",
      "--gvn",
      "--gvn-hoist"
    ],
    "performance_vs_Oz": "+0.3%"
  }
}
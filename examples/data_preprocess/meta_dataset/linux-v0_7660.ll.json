{
  "program_id": "linux-v0_7660.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 26,
    "onePredOneSuc": 19,
    "onePredTwoSuc": 7,
    "oneSuccessor": 23,
    "twoPred": 7,
    "twoPredOneSuc": 1,
    "twoEach": 0,
    "twoSuccessor": 12,
    "morePreds": 2,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 51,
    "BeginPhi": 1,
    "BranchCount": 35,
    "returnInt": 15,
    "CriticalCount": 3,
    "NumEdges": 47,
    "const32Bit": 229,
    "const64Bit": 11,
    "numConstZeroes": 117,
    "numConstOnes": 75,
    "UncondBranches": 23,
    "binaryConstArg": 8,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 56,
    "NumAndInst": 3,
    "BlockMid": 11,
    "BlockLow": 41,
    "NumBitCastInst": 16,
    "NumBrInst": 35,
    "NumCallInst": 47,
    "NumGetElementPtrInst": 72,
    "NumICmpInst": 13,
    "NumLShrInst": 0,
    "NumLoadInst": 149,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 1,
    "NumRetInst": 17,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 75,
    "NumSubInst": 0,
    "NumTruncInst": 1,
    "NumXorInst": 4,
    "NumZExtInst": 3,
    "TotalBlocks": 52,
    "TotalInsts": 496,
    "TotalMemInst": 399,
    "TotalFuncs": 35,
    "ArgsPhi": 2,
    "testUnary": 228
  },
  "baseline_oz_instcount": 496,
  "knowledge_base_entry": [
    "--loop-predication",
    "--early-cse",
    "--aggressive-instcombine",
    "--elim-avail-extern",
    "--prune-eh",
    "--gvn-hoist",
    "--instsimplify",
    "--adce",
    "--lower-constant-intrinsics",
    "--mldst-motion",
    "--loop-simplifycfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--mergeicmps",
          "--instcombine",
          "--simple-loop-unswitch",
          "--redundant-dbg-inst-elim",
          "--callsite-splitting",
          "--strip",
          "--guard-widening",
          "--partially-inline-libcalls",
          "--loop-vectorize",
          "--post-inline-ee-instrument",
          "--sroa",
          "--alignment-from-assumptions",
          "--lower-widenable-condition",
          "--strip-nondebug",
          "--libcalls-shrinkwrap",
          "--prune-eh",
          "-loop-reduce",
          "--inline",
          "--aggressive-instcombine",
          "--loop-idiom",
          "--gvn",
          "--add-discriminators",
          "--loop-deletion",
          "--globaldce",
          "--loop-unroll-and-jam",
          "--loweratomic",
          "--lower-constant-intrinsics",
          "--loop-guard-widening",
          "--slp-vectorizer",
          "--partial-inliner"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--mergeicmps",
      "--instcombine",
      "--simple-loop-unswitch",
      "--redundant-dbg-inst-elim",
      "--callsite-splitting",
      "--strip",
      "--guard-widening",
      "--partially-inline-libcalls",
      "--loop-vectorize",
      "--post-inline-ee-instrument",
      "--sroa",
      "--alignment-from-assumptions",
      "--lower-widenable-condition",
      "--strip-nondebug",
      "--libcalls-shrinkwrap",
      "--prune-eh",
      "-loop-reduce",
      "--inline",
      "--aggressive-instcombine",
      "--loop-idiom",
      "--gvn",
      "--add-discriminators",
      "--loop-deletion",
      "--globaldce",
      "--loop-unroll-and-jam",
      "--loweratomic",
      "--lower-constant-intrinsics",
      "--loop-guard-widening",
      "--slp-vectorizer",
      "--partial-inliner"
    ],
    "performance_vs_Oz": "+0.4%"
  }
}
{
  "program_id": "github-v0_29820.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 11,
    "onePredOneSuc": 8,
    "onePredTwoSuc": 1,
    "oneSuccessor": 9,
    "twoPred": 4,
    "twoPredOneSuc": 1,
    "twoEach": 2,
    "twoSuccessor": 5,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 18,
    "BeginPhi": 0,
    "BranchCount": 14,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 19,
    "const32Bit": 38,
    "const64Bit": 34,
    "numConstZeroes": 37,
    "numConstOnes": 24,
    "UncondBranches": 9,
    "binaryConstArg": 18,
    "NumAShrInst": 5,
    "NumAddInst": 3,
    "NumAllocaInst": 11,
    "NumAndInst": 6,
    "BlockMid": 5,
    "BlockLow": 13,
    "NumBitCastInst": 0,
    "NumBrInst": 14,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 19,
    "NumICmpInst": 5,
    "NumLShrInst": 0,
    "NumLoadInst": 27,
    "NumMulInst": 0,
    "NumOrInst": 4,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 7,
    "NumSelectInst": 0,
    "NumShlInst": 4,
    "NumStoreInst": 17,
    "NumSubInst": 0,
    "NumTruncInst": 11,
    "NumXorInst": 0,
    "NumZExtInst": 13,
    "TotalBlocks": 18,
    "TotalInsts": 157,
    "TotalMemInst": 81,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 69
  },
  "baseline_oz_instcount": 157,
  "knowledge_base_entry": [
    "--aggressive-instcombine",
    "--inline",
    "--ipsccp",
    "--sccp",
    "--bdce",
    "--early-cse",
    "--dse",
    "--licm",
    "--nary-reassociate",
    "--loop-simplifycfg",
    "--loop-reroll",
    "--jump-threading",
    "--lower-expect",
    "--load-store-vectorizer",
    "--elim-avail-extern",
    "--memcpyopt"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--irce",
          "-loop-reduce",
          "--correlated-propagation",
          "--strip",
          "--globalopt",
          "--mergefunc",
          "--cross-dso-cfi",
          "--globalsplit",
          "--aggressive-instcombine",
          "--lower-widenable-condition"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+5.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--irce",
      "-loop-reduce",
      "--correlated-propagation",
      "--strip",
      "--globalopt",
      "--mergefunc",
      "--cross-dso-cfi",
      "--globalsplit",
      "--aggressive-instcombine",
      "--lower-widenable-condition"
    ],
    "performance_vs_Oz": "+5.1%"
  }
}
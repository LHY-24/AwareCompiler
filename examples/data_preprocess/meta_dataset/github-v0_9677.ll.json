{
  "program_id": "github-v0_9677.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 3,
    "onePred": 3,
    "onePredOneSuc": 2,
    "onePredTwoSuc": 1,
    "oneSuccessor": 2,
    "twoPred": 3,
    "twoPredOneSuc": 0,
    "twoEach": 3,
    "twoSuccessor": 5,
    "morePreds": 1,
    "BB03Phi": 3,
    "BBHiPhi": 0,
    "BBNoPhi": 5,
    "BeginPhi": 3,
    "BranchCount": 7,
    "returnInt": 0,
    "CriticalCount": 7,
    "NumEdges": 12,
    "const32Bit": 20,
    "const64Bit": 0,
    "numConstZeroes": 6,
    "numConstOnes": 2,
    "UncondBranches": 2,
    "binaryConstArg": 13,
    "NumAShrInst": 0,
    "NumAddInst": 5,
    "NumAllocaInst": 0,
    "NumAndInst": 1,
    "BlockMid": 1,
    "BlockLow": 7,
    "NumBitCastInst": 0,
    "NumBrInst": 7,
    "NumCallInst": 0,
    "NumGetElementPtrInst": 9,
    "NumICmpInst": 5,
    "NumLShrInst": 0,
    "NumLoadInst": 0,
    "NumMulInst": 0,
    "NumOrInst": 7,
    "NumPHIInst": 5,
    "NumRetInst": 1,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 9,
    "NumSubInst": 1,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 9,
    "TotalBlocks": 8,
    "TotalInsts": 59,
    "TotalMemInst": 18,
    "TotalFuncs": 1,
    "ArgsPhi": 10,
    "testUnary": 9
  },
  "baseline_oz_instcount": 51,
  "knowledge_base_entry": [
    "--scalarizer",
    "--early-cse-memssa",
    "--licm",
    "--slp-vectorizer",
    "-loop-reduce",
    "--instcombine",
    "--newgvn",
    "--indvars",
    "--nary-reassociate",
    "--newgvn",
    "--mem2reg",
    "--reassociate",
    "--mem2reg",
    "--reassociate",
    "--slsr",
    "--loop-reroll",
    "--instcombine",
    "--newgvn",
    "--indvars",
    "--nary-reassociate",
    "--newgvn",
    "--mem2reg",
    "--reassociate",
    "--mem2reg",
    "--reassociate",
    "--slsr",
    "--loop-reroll",
    "--instcombine",
    "--sroa",
    "--bdce",
    "--die",
    "--simplifycfg",
    "--mergefunc"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--inferattrs",
          "--lower-matrix-intrinsics",
          "--loop-guard-widening",
          "--loop-vectorize",
          "--loop-predication",
          "-loop-reduce",
          "--loop-interchange",
          "--correlated-propagation",
          "--loop-unroll-and-jam",
          "--gvn",
          "--indvars",
          "--coro-early",
          "--globaldce",
          "--lower-expect",
          "--mldst-motion",
          "--callsite-splitting",
          "--strip-dead-prototypes",
          "--lower-constant-intrinsics",
          "--partial-inliner"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+11.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--inferattrs",
      "--lower-matrix-intrinsics",
      "--loop-guard-widening",
      "--loop-vectorize",
      "--loop-predication",
      "-loop-reduce",
      "--loop-interchange",
      "--correlated-propagation",
      "--loop-unroll-and-jam",
      "--gvn",
      "--indvars",
      "--coro-early",
      "--globaldce",
      "--lower-expect",
      "--mldst-motion",
      "--callsite-splitting",
      "--strip-dead-prototypes",
      "--lower-constant-intrinsics",
      "--partial-inliner"
    ],
    "performance_vs_Oz": "+11.8%"
  }
}
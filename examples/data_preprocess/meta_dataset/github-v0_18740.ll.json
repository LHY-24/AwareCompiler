{
  "program_id": "github-v0_18740.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 15,
    "onePredOneSuc": 10,
    "onePredTwoSuc": 2,
    "oneSuccessor": 13,
    "twoPred": 6,
    "twoPredOneSuc": 2,
    "twoEach": 4,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 24,
    "BeginPhi": 0,
    "BranchCount": 20,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 27,
    "const32Bit": 32,
    "const64Bit": 73,
    "numConstZeroes": 66,
    "numConstOnes": 33,
    "UncondBranches": 13,
    "binaryConstArg": 8,
    "NumAShrInst": 0,
    "NumAddInst": 8,
    "NumAllocaInst": 15,
    "NumAndInst": 0,
    "BlockMid": 6,
    "BlockLow": 18,
    "NumBitCastInst": 20,
    "NumBrInst": 20,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 55,
    "NumICmpInst": 7,
    "NumLShrInst": 0,
    "NumLoadInst": 53,
    "NumMulInst": 1,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 31,
    "NumSubInst": 0,
    "NumTruncInst": 4,
    "NumXorInst": 0,
    "NumZExtInst": 22,
    "TotalBlocks": 24,
    "TotalInsts": 250,
    "TotalMemInst": 161,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 117
  },
  "baseline_oz_instcount": 250,
  "knowledge_base_entry": [
    "--loop-simplify",
    "--newgvn",
    "--aggressive-instcombine",
    "--bdce",
    "--jump-threading",
    "--aggressive-instcombine",
    "--loop-instsimplify",
    "--mem2reg",
    "--lower-constant-intrinsics",
    "--gvn",
    "--slp-vectorizer",
    "--gvn",
    "--newgvn",
    "--slp-vectorizer",
    "--slsr",
    "--loop-reroll",
    "--simplifycfg",
    "--aggressive-instcombine",
    "--mem2reg",
    "--loop-simplifycfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--aggressive-instcombine",
          "--deadargelim",
          "--strip-dead-prototypes",
          "--loop-unroll-and-jam",
          "--forceattrs",
          "--mldst-motion",
          "--inject-tli-mappings",
          "--correlated-propagation",
          "--redundant-dbg-inst-elim",
          "--irce"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--aggressive-instcombine",
      "--deadargelim",
      "--strip-dead-prototypes",
      "--loop-unroll-and-jam",
      "--forceattrs",
      "--mldst-motion",
      "--inject-tli-mappings",
      "--correlated-propagation",
      "--redundant-dbg-inst-elim",
      "--irce"
    ],
    "performance_vs_Oz": "+2.8%"
  }
}
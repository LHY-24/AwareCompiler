{
  "program_id": "linux-v0_9410.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 10,
    "onePredOneSuc": 5,
    "onePredTwoSuc": 5,
    "oneSuccessor": 7,
    "twoPred": 4,
    "twoPredOneSuc": 1,
    "twoEach": 2,
    "twoSuccessor": 8,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 16,
    "BeginPhi": 0,
    "BranchCount": 15,
    "returnInt": 1,
    "CriticalCount": 6,
    "NumEdges": 23,
    "const32Bit": 38,
    "const64Bit": 6,
    "numConstZeroes": 12,
    "numConstOnes": 14,
    "UncondBranches": 7,
    "binaryConstArg": 11,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 10,
    "NumAndInst": 2,
    "BlockMid": 3,
    "BlockLow": 13,
    "NumBitCastInst": 0,
    "NumBrInst": 15,
    "NumCallInst": 1,
    "NumGetElementPtrInst": 6,
    "NumICmpInst": 8,
    "NumLShrInst": 2,
    "NumLoadInst": 39,
    "NumMulInst": 0,
    "NumOrInst": 2,
    "NumPHIInst": 0,
    "NumRetInst": 1,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 27,
    "NumSubInst": 1,
    "NumTruncInst": 7,
    "NumXorInst": 0,
    "NumZExtInst": 3,
    "TotalBlocks": 16,
    "TotalInsts": 136,
    "TotalMemInst": 83,
    "TotalFuncs": 2,
    "ArgsPhi": 0,
    "testUnary": 59
  },
  "baseline_oz_instcount": 136,
  "knowledge_base_entry": [
    "--jump-threading",
    "--dse",
    "--load-store-vectorizer",
    "-loop-reduce",
    "--gvn",
    "--mem2reg",
    "--aggressive-instcombine",
    "--inline",
    "--mldst-motion"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-versioning",
          "--loop-unroll",
          "--simple-loop-unswitch",
          "--loop-distribute",
          "--tailcallelim",
          "--always-inline",
          "--aggressive-instcombine",
          "--globaldce",
          "--inject-tli-mappings",
          "--sroa",
          "--coro-early",
          "--memcpyopt",
          "--early-cse-memssa",
          "--loop-fusion",
          "--insert-gcov-profiling",
          "--loop-simplify",
          "--correlated-propagation",
          "--lowerinvoke",
          "--inferattrs",
          "--lower-matrix-intrinsics",
          "--functionattrs",
          "--loop-vectorize",
          "--alignment-from-assumptions",
          "--sccp",
          "--redundant-dbg-inst-elim",
          "--libcalls-shrinkwrap",
          "--infer-address-spaces"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-versioning",
      "--loop-unroll",
      "--simple-loop-unswitch",
      "--loop-distribute",
      "--tailcallelim",
      "--always-inline",
      "--aggressive-instcombine",
      "--globaldce",
      "--inject-tli-mappings",
      "--sroa",
      "--coro-early",
      "--memcpyopt",
      "--early-cse-memssa",
      "--loop-fusion",
      "--insert-gcov-profiling",
      "--loop-simplify",
      "--correlated-propagation",
      "--lowerinvoke",
      "--inferattrs",
      "--lower-matrix-intrinsics",
      "--functionattrs",
      "--loop-vectorize",
      "--alignment-from-assumptions",
      "--sccp",
      "--redundant-dbg-inst-elim",
      "--libcalls-shrinkwrap",
      "--infer-address-spaces"
    ],
    "performance_vs_Oz": "+1.5%"
  }
}
{
  "program_id": "github-v0_29407.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 19,
    "onePredOneSuc": 12,
    "onePredTwoSuc": 5,
    "oneSuccessor": 17,
    "twoPred": 8,
    "twoPredOneSuc": 5,
    "twoEach": 2,
    "twoSuccessor": 9,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 30,
    "BeginPhi": 0,
    "BranchCount": 26,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 35,
    "const32Bit": 60,
    "const64Bit": 78,
    "numConstZeroes": 84,
    "numConstOnes": 25,
    "UncondBranches": 17,
    "binaryConstArg": 36,
    "NumAShrInst": 6,
    "NumAddInst": 7,
    "NumAllocaInst": 11,
    "NumAndInst": 15,
    "BlockMid": 9,
    "BlockLow": 21,
    "NumBitCastInst": 0,
    "NumBrInst": 26,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 41,
    "NumICmpInst": 9,
    "NumLShrInst": 0,
    "NumLoadInst": 49,
    "NumMulInst": 2,
    "NumOrInst": 9,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 5,
    "NumSelectInst": 0,
    "NumShlInst": 9,
    "NumStoreInst": 25,
    "NumSubInst": 1,
    "NumTruncInst": 17,
    "NumXorInst": 1,
    "NumZExtInst": 35,
    "TotalBlocks": 30,
    "TotalInsts": 279,
    "TotalMemInst": 133,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 117
  },
  "baseline_oz_instcount": 279,
  "knowledge_base_entry": [
    "--reg2mem",
    "--sroa",
    "--loop-instsimplify",
    "--gvn",
    "--aggressive-instcombine",
    "--jump-threading",
    "--globalopt",
    "--elim-avail-extern",
    "--loop-simplifycfg",
    "--lower-expect"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-unroll-and-jam",
          "--elim-avail-extern",
          "--mldst-motion",
          "--nary-reassociate",
          "--hotcoldsplit",
          "--dce",
          "--slp-vectorizer",
          "--aggressive-instcombine",
          "--loweratomic",
          "--speculative-execution",
          "--redundant-dbg-inst-elim",
          "--lcssa",
          "-loop-reduce",
          "--functionattrs",
          "--forceattrs",
          "--strip-nondebug",
          "--instnamer",
          "--ipconstprop",
          "--instcombine",
          "--loop-deletion"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+8.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-unroll-and-jam",
      "--elim-avail-extern",
      "--mldst-motion",
      "--nary-reassociate",
      "--hotcoldsplit",
      "--dce",
      "--slp-vectorizer",
      "--aggressive-instcombine",
      "--loweratomic",
      "--speculative-execution",
      "--redundant-dbg-inst-elim",
      "--lcssa",
      "-loop-reduce",
      "--functionattrs",
      "--forceattrs",
      "--strip-nondebug",
      "--instnamer",
      "--ipconstprop",
      "--instcombine",
      "--loop-deletion"
    ],
    "performance_vs_Oz": "+8.2%"
  }
}
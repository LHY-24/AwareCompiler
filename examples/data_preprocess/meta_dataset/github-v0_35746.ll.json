{
  "program_id": "github-v0_35746.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 3,
    "onePred": 68,
    "onePredOneSuc": 43,
    "onePredTwoSuc": 24,
    "oneSuccessor": 63,
    "twoPred": 34,
    "twoPredOneSuc": 17,
    "twoEach": 12,
    "twoSuccessor": 43,
    "morePreds": 4,
    "BB03Phi": 3,
    "BBHiPhi": 0,
    "BBNoPhi": 112,
    "BeginPhi": 3,
    "BranchCount": 106,
    "returnInt": 10,
    "CriticalCount": 21,
    "NumEdges": 149,
    "const32Bit": 201,
    "const64Bit": 10,
    "numConstZeroes": 87,
    "numConstOnes": 60,
    "UncondBranches": 63,
    "binaryConstArg": 20,
    "NumAShrInst": 0,
    "NumAddInst": 14,
    "NumAllocaInst": 35,
    "NumAndInst": 0,
    "BlockMid": 9,
    "BlockLow": 106,
    "NumBitCastInst": 14,
    "NumBrInst": 106,
    "NumCallInst": 34,
    "NumGetElementPtrInst": 97,
    "NumICmpInst": 43,
    "NumLShrInst": 2,
    "NumLoadInst": 258,
    "NumMulInst": 5,
    "NumOrInst": 0,
    "NumPHIInst": 3,
    "NumRetInst": 9,
    "NumSExtInst": 41,
    "NumSelectInst": 0,
    "NumShlInst": 3,
    "NumStoreInst": 75,
    "NumSubInst": 0,
    "NumTruncInst": 4,
    "NumXorInst": 2,
    "NumZExtInst": 0,
    "TotalBlocks": 115,
    "TotalInsts": 745,
    "TotalMemInst": 499,
    "TotalFuncs": 17,
    "ArgsPhi": 6,
    "testUnary": 352
  },
  "baseline_oz_instcount": 746,
  "knowledge_base_entry": [
    "--aggressive-instcombine",
    "--dse",
    "--adce",
    "--lower-constant-intrinsics",
    "--early-cse",
    "--instsimplify",
    "--globalopt",
    "--loweratomic",
    "--globalopt",
    "--gvn",
    "--mldst-motion",
    "--gvn-hoist",
    "--nary-reassociate",
    "--early-cse",
    "--instsimplify",
    "--prune-eh",
    "--instcombine",
    "--inline"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-simplify",
          "--lower-expect",
          "--lower-matrix-intrinsics",
          "--die",
          "--lowerswitch",
          "--infer-address-spaces",
          "--early-cse-memssa",
          "--simple-loop-unswitch",
          "--libcalls-shrinkwrap",
          "--loop-reroll",
          "--constmerge",
          "--instnamer",
          "--aggressive-instcombine",
          "--barrier"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-simplify",
      "--lower-expect",
      "--lower-matrix-intrinsics",
      "--die",
      "--lowerswitch",
      "--infer-address-spaces",
      "--early-cse-memssa",
      "--simple-loop-unswitch",
      "--libcalls-shrinkwrap",
      "--loop-reroll",
      "--constmerge",
      "--instnamer",
      "--aggressive-instcombine",
      "--barrier"
    ],
    "performance_vs_Oz": "+0.8%"
  }
}
{
  "program_id": "linux-v0_6890.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 74,
    "onePredOneSuc": 65,
    "onePredTwoSuc": 4,
    "oneSuccessor": 74,
    "twoPred": 6,
    "twoPredOneSuc": 0,
    "twoEach": 2,
    "twoSuccessor": 6,
    "morePreds": 4,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 101,
    "BeginPhi": 0,
    "BranchCount": 80,
    "returnInt": 7,
    "CriticalCount": 3,
    "NumEdges": 106,
    "const32Bit": 349,
    "const64Bit": 17,
    "numConstZeroes": 192,
    "numConstOnes": 95,
    "UncondBranches": 74,
    "binaryConstArg": 3,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 78,
    "NumAndInst": 0,
    "BlockMid": 13,
    "BlockLow": 88,
    "NumBitCastInst": 80,
    "NumBrInst": 80,
    "NumCallInst": 66,
    "NumGetElementPtrInst": 116,
    "NumICmpInst": 3,
    "NumLShrInst": 0,
    "NumLoadInst": 200,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 17,
    "NumSExtInst": 6,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 112,
    "NumSubInst": 0,
    "NumTruncInst": 3,
    "NumXorInst": 0,
    "NumZExtInst": 2,
    "TotalBlocks": 101,
    "TotalInsts": 770,
    "TotalMemInst": 572,
    "TotalFuncs": 35,
    "ArgsPhi": 0,
    "testUnary": 369
  },
  "baseline_oz_instcount": 770,
  "knowledge_base_entry": [
    "--instcombine",
    "--licm",
    "--dse",
    "--gvn-hoist",
    "--mergefunc",
    "--gvn",
    "--bdce",
    "--ipsccp",
    "--adce",
    "--slp-vectorizer",
    "--slsr",
    "--loop-simplifycfg",
    "--lower-constant-intrinsics",
    "--licm",
    "--early-cse-memssa",
    "--newgvn",
    "--sccp",
    "--instsimplify",
    "--sccp"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--slsr",
          "--irce",
          "--loweratomic",
          "--rewrite-statepoints-for-gc",
          "--flattencfg",
          "--aggressive-instcombine",
          "--loop-reroll",
          "--infer-address-spaces",
          "--called-value-propagation",
          "--constmerge",
          "--loop-unswitch",
          "--newgvn",
          "--redundant-dbg-inst-elim",
          "--loop-rotate",
          "--partially-inline-libcalls",
          "--load-store-vectorizer",
          "--loop-load-elim",
          "--alignment-from-assumptions",
          "--inline",
          "--dse",
          "--mergefunc",
          "--loop-predication",
          "--dce",
          "--libcalls-shrinkwrap",
          "--pgo-memop-opt",
          "--ipsccp",
          "--gvn-hoist",
          "--instnamer"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--slsr",
      "--irce",
      "--loweratomic",
      "--rewrite-statepoints-for-gc",
      "--flattencfg",
      "--aggressive-instcombine",
      "--loop-reroll",
      "--infer-address-spaces",
      "--called-value-propagation",
      "--constmerge",
      "--loop-unswitch",
      "--newgvn",
      "--redundant-dbg-inst-elim",
      "--loop-rotate",
      "--partially-inline-libcalls",
      "--load-store-vectorizer",
      "--loop-load-elim",
      "--alignment-from-assumptions",
      "--inline",
      "--dse",
      "--mergefunc",
      "--loop-predication",
      "--dce",
      "--libcalls-shrinkwrap",
      "--pgo-memop-opt",
      "--ipsccp",
      "--gvn-hoist",
      "--instnamer"
    ],
    "performance_vs_Oz": "+0.8%"
  }
}
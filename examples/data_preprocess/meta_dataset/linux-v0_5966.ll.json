{
  "program_id": "linux-v0_5966.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 30,
    "onePredOneSuc": 18,
    "onePredTwoSuc": 12,
    "oneSuccessor": 18,
    "twoPred": 1,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 15,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 41,
    "BeginPhi": 0,
    "BranchCount": 33,
    "returnInt": 23,
    "CriticalCount": 0,
    "NumEdges": 48,
    "const32Bit": 60,
    "const64Bit": 0,
    "numConstZeroes": 32,
    "numConstOnes": 25,
    "UncondBranches": 18,
    "binaryConstArg": 2,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 18,
    "NumAndInst": 0,
    "BlockMid": 2,
    "BlockLow": 39,
    "NumBitCastInst": 0,
    "NumBrInst": 33,
    "NumCallInst": 24,
    "NumGetElementPtrInst": 8,
    "NumICmpInst": 15,
    "NumLShrInst": 0,
    "NumLoadInst": 69,
    "NumMulInst": 0,
    "NumOrInst": 2,
    "NumPHIInst": 0,
    "NumRetInst": 8,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 47,
    "NumSubInst": 0,
    "NumTruncInst": 3,
    "NumXorInst": 0,
    "NumZExtInst": 1,
    "TotalBlocks": 41,
    "TotalInsts": 228,
    "TotalMemInst": 166,
    "TotalFuncs": 21,
    "ArgsPhi": 0,
    "testUnary": 91
  },
  "baseline_oz_instcount": 228,
  "knowledge_base_entry": [
    "--inline",
    "--load-store-vectorizer",
    "--lower-constant-intrinsics",
    "--bdce",
    "--simplifycfg",
    "--aggressive-instcombine",
    "--loweratomic",
    "--instcombine",
    "--correlated-propagation",
    "--loop-reroll",
    "--early-cse",
    "--early-cse-memssa",
    "--aggressive-instcombine",
    "--loop-instsimplify",
    "--instcombine",
    "--sroa",
    "--mergefunc",
    "--loop-reroll",
    "--indvars",
    "--sroa",
    "--globalopt",
    "--flattencfg",
    "--inline",
    "--newgvn",
    "--jump-threading",
    "--elim-avail-extern",
    "--dce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--correlated-propagation",
          "--jump-threading",
          "--guard-widening",
          "--aggressive-instcombine",
          "--coro-cleanup",
          "--tailcallelim",
          "--loop-load-elim",
          "--lcssa",
          "--nary-reassociate",
          "--sroa",
          "--mldst-motion",
          "--loop-predication",
          "--instcombine",
          "--simple-loop-unswitch",
          "--called-value-propagation",
          "--consthoist",
          "--mem2reg",
          "--gvn",
          "--loweratomic",
          "--sancov",
          "--loop-unswitch",
          "--canonicalize-aliases"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--correlated-propagation",
      "--jump-threading",
      "--guard-widening",
      "--aggressive-instcombine",
      "--coro-cleanup",
      "--tailcallelim",
      "--loop-load-elim",
      "--lcssa",
      "--nary-reassociate",
      "--sroa",
      "--mldst-motion",
      "--loop-predication",
      "--instcombine",
      "--simple-loop-unswitch",
      "--called-value-propagation",
      "--consthoist",
      "--mem2reg",
      "--gvn",
      "--loweratomic",
      "--sancov",
      "--loop-unswitch",
      "--canonicalize-aliases"
    ],
    "performance_vs_Oz": "+0.9%"
  }
}
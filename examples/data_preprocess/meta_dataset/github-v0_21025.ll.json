{
  "program_id": "github-v0_21025.ll",
  "autophase_features": {
    "BBNumArgsHi": 1,
    "BBNumArgsLo": 1,
    "onePred": 1,
    "onePredOneSuc": 1,
    "onePredTwoSuc": 0,
    "oneSuccessor": 1,
    "twoPred": 2,
    "twoPredOneSuc": 0,
    "twoEach": 1,
    "twoSuccessor": 2,
    "morePreds": 0,
    "BB03Phi": 1,
    "BBHiPhi": 1,
    "BBNoPhi": 3,
    "BeginPhi": 2,
    "BranchCount": 3,
    "returnInt": 39,
    "CriticalCount": 3,
    "NumEdges": 5,
    "const32Bit": 48,
    "const64Bit": 83,
    "numConstZeroes": 35,
    "numConstOnes": 25,
    "UncondBranches": 1,
    "binaryConstArg": 57,
    "NumAShrInst": 0,
    "NumAddInst": 39,
    "NumAllocaInst": 0,
    "NumAndInst": 6,
    "BlockMid": 4,
    "BlockLow": 1,
    "NumBitCastInst": 0,
    "NumBrInst": 3,
    "NumCallInst": 39,
    "NumGetElementPtrInst": 5,
    "NumICmpInst": 17,
    "NumLShrInst": 0,
    "NumLoadInst": 4,
    "NumMulInst": 41,
    "NumOrInst": 0,
    "NumPHIInst": 6,
    "NumRetInst": 2,
    "NumSExtInst": 0,
    "NumSelectInst": 15,
    "NumShlInst": 0,
    "NumStoreInst": 6,
    "NumSubInst": 5,
    "NumTruncInst": 8,
    "NumXorInst": 0,
    "NumZExtInst": 12,
    "TotalBlocks": 5,
    "TotalInsts": 265,
    "TotalMemInst": 54,
    "TotalFuncs": 4,
    "ArgsPhi": 12,
    "testUnary": 34
  },
  "baseline_oz_instcount": 265,
  "knowledge_base_entry": [
    "--slp-vectorizer",
    "--instcombine",
    "--bdce",
    "--jump-threading",
    "--mem2reg",
    "--dse",
    "--gvn-hoist",
    "--load-store-vectorizer",
    "--aggressive-instcombine",
    "--prune-eh",
    "--elim-avail-extern",
    "--die"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-simplifycfg",
          "--memcpyopt",
          "--infer-address-spaces",
          "--float2int",
          "--die",
          "--called-value-propagation",
          "--nary-reassociate",
          "--forceattrs",
          "--functionattrs",
          "--coro-early",
          "--globalsplit",
          "--loop-idiom",
          "--dce",
          "--speculative-execution",
          "--strip-dead-prototypes",
          "--globalopt",
          "--attributor",
          "--pgo-memop-opt",
          "--loop-unroll-and-jam",
          "--strip-debug-declare",
          "--licm",
          "--slp-vectorizer",
          "--instcombine",
          "--guard-widening",
          "-loop-reduce",
          "--loop-interchange",
          "--mergefunc",
          "--loop-guard-widening"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+9.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-simplifycfg",
      "--memcpyopt",
      "--infer-address-spaces",
      "--float2int",
      "--die",
      "--called-value-propagation",
      "--nary-reassociate",
      "--forceattrs",
      "--functionattrs",
      "--coro-early",
      "--globalsplit",
      "--loop-idiom",
      "--dce",
      "--speculative-execution",
      "--strip-dead-prototypes",
      "--globalopt",
      "--attributor",
      "--pgo-memop-opt",
      "--loop-unroll-and-jam",
      "--strip-debug-declare",
      "--licm",
      "--slp-vectorizer",
      "--instcombine",
      "--guard-widening",
      "-loop-reduce",
      "--loop-interchange",
      "--mergefunc",
      "--loop-guard-widening"
    ],
    "performance_vs_Oz": "+9.1%"
  }
}
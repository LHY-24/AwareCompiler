{
  "program_id": "linux-v0_9132.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 48,
    "onePredOneSuc": 36,
    "onePredTwoSuc": 11,
    "oneSuccessor": 43,
    "twoPred": 20,
    "twoPredOneSuc": 5,
    "twoEach": 8,
    "twoSuccessor": 29,
    "morePreds": 4,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 94,
    "BeginPhi": 1,
    "BranchCount": 72,
    "returnInt": 31,
    "CriticalCount": 12,
    "NumEdges": 101,
    "const32Bit": 385,
    "const64Bit": 28,
    "numConstZeroes": 163,
    "numConstOnes": 97,
    "UncondBranches": 43,
    "binaryConstArg": 40,
    "NumAShrInst": 2,
    "NumAddInst": 2,
    "NumAllocaInst": 76,
    "NumAndInst": 19,
    "BlockMid": 16,
    "BlockLow": 79,
    "NumBitCastInst": 28,
    "NumBrInst": 72,
    "NumCallInst": 66,
    "NumGetElementPtrInst": 136,
    "NumICmpInst": 31,
    "NumLShrInst": 0,
    "NumLoadInst": 309,
    "NumMulInst": 4,
    "NumOrInst": 8,
    "NumPHIInst": 1,
    "NumRetInst": 23,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 3,
    "NumStoreInst": 137,
    "NumSubInst": 1,
    "NumTruncInst": 11,
    "NumXorInst": 2,
    "NumZExtInst": 22,
    "TotalBlocks": 95,
    "TotalInsts": 969,
    "TotalMemInst": 724,
    "TotalFuncs": 43,
    "ArgsPhi": 2,
    "testUnary": 456
  },
  "baseline_oz_instcount": 969,
  "knowledge_base_entry": [
    "--gvn-hoist",
    "--jump-threading",
    "--aggressive-instcombine",
    "--sroa",
    "--lower-expect",
    "--instcombine",
    "--lower-constant-intrinsics",
    "--sroa",
    "--load-store-vectorizer",
    "--mem2reg",
    "--gvn-hoist",
    "--loop-simplifycfg",
    "--correlated-propagation",
    "--nary-reassociate"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--attributor",
          "--called-value-propagation",
          "--slp-vectorizer",
          "--irce",
          "--ipsccp",
          "--dse",
          "--loweratomic",
          "--loop-data-prefetch",
          "--forceattrs",
          "--guard-widening",
          "--licm",
          "--nary-reassociate",
          "--loop-instsimplify",
          "--loop-interchange",
          "--div-rem-pairs",
          "--post-inline-ee-instrument",
          "--strip-debug-declare",
          "--inferattrs",
          "--hotcoldsplit",
          "--consthoist",
          "--libcalls-shrinkwrap",
          "--loop-unroll",
          "--die",
          "--lowerinvoke",
          "--loop-deletion",
          "--aggressive-instcombine",
          "--instnamer",
          "--rpo-functionattrs"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--attributor",
      "--called-value-propagation",
      "--slp-vectorizer",
      "--irce",
      "--ipsccp",
      "--dse",
      "--loweratomic",
      "--loop-data-prefetch",
      "--forceattrs",
      "--guard-widening",
      "--licm",
      "--nary-reassociate",
      "--loop-instsimplify",
      "--loop-interchange",
      "--div-rem-pairs",
      "--post-inline-ee-instrument",
      "--strip-debug-declare",
      "--inferattrs",
      "--hotcoldsplit",
      "--consthoist",
      "--libcalls-shrinkwrap",
      "--loop-unroll",
      "--die",
      "--lowerinvoke",
      "--loop-deletion",
      "--aggressive-instcombine",
      "--instnamer",
      "--rpo-functionattrs"
    ],
    "performance_vs_Oz": "+1.4%"
  }
}
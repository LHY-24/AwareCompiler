{
  "program_id": "linux-v0_3893.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 10,
    "onePredOneSuc": 9,
    "onePredTwoSuc": 1,
    "oneSuccessor": 9,
    "twoPred": 3,
    "twoPredOneSuc": 0,
    "twoEach": 1,
    "twoSuccessor": 5,
    "morePreds": 1,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 20,
    "BeginPhi": 1,
    "BranchCount": 14,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 19,
    "const32Bit": 41,
    "const64Bit": 10,
    "numConstZeroes": 11,
    "numConstOnes": 22,
    "UncondBranches": 9,
    "binaryConstArg": 10,
    "NumAShrInst": 0,
    "NumAddInst": 4,
    "NumAllocaInst": 19,
    "NumAndInst": 1,
    "BlockMid": 4,
    "BlockLow": 17,
    "NumBitCastInst": 6,
    "NumBrInst": 14,
    "NumCallInst": 12,
    "NumGetElementPtrInst": 8,
    "NumICmpInst": 5,
    "NumLShrInst": 1,
    "NumLoadInst": 38,
    "NumMulInst": 2,
    "NumOrInst": 1,
    "NumPHIInst": 1,
    "NumRetInst": 7,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 27,
    "NumSubInst": 1,
    "NumTruncInst": 3,
    "NumXorInst": 0,
    "NumZExtInst": 4,
    "TotalBlocks": 21,
    "TotalInsts": 156,
    "TotalMemInst": 104,
    "TotalFuncs": 13,
    "ArgsPhi": 2,
    "testUnary": 72
  },
  "baseline_oz_instcount": 156,
  "knowledge_base_entry": [
    "--hotcoldsplit",
    "--mergefunc",
    "--memcpyopt",
    "--elim-avail-extern",
    "--aggressive-instcombine",
    "--instsimplify",
    "--dce",
    "--sccp",
    "--loop-simplifycfg",
    "--flattencfg",
    "--globalopt",
    "--loweratomic"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--mergereturn",
          "--coro-cleanup",
          "--loop-fusion",
          "--loop-distribute",
          "--alignment-from-assumptions",
          "--strip-debug-declare",
          "--always-inline",
          "--attributor",
          "--aggressive-instcombine",
          "--strip",
          "-loop-reduce",
          "--inferattrs",
          "--barrier",
          "--elim-avail-extern"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--mergereturn",
      "--coro-cleanup",
      "--loop-fusion",
      "--loop-distribute",
      "--alignment-from-assumptions",
      "--strip-debug-declare",
      "--always-inline",
      "--attributor",
      "--aggressive-instcombine",
      "--strip",
      "-loop-reduce",
      "--inferattrs",
      "--barrier",
      "--elim-avail-extern"
    ],
    "performance_vs_Oz": "+2.6%"
  }
}
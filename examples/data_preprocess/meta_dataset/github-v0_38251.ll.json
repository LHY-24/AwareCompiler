{
  "program_id": "github-v0_38251.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 4,
    "onePredOneSuc": 3,
    "onePredTwoSuc": 1,
    "oneSuccessor": 3,
    "twoPred": 1,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 3,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 11,
    "BeginPhi": 0,
    "BranchCount": 6,
    "returnInt": 16,
    "CriticalCount": 2,
    "NumEdges": 9,
    "const32Bit": 108,
    "const64Bit": 0,
    "numConstZeroes": 33,
    "numConstOnes": 16,
    "UncondBranches": 3,
    "binaryConstArg": 50,
    "NumAShrInst": 7,
    "NumAddInst": 14,
    "NumAllocaInst": 9,
    "NumAndInst": 15,
    "BlockMid": 5,
    "BlockLow": 6,
    "NumBitCastInst": 0,
    "NumBrInst": 6,
    "NumCallInst": 27,
    "NumGetElementPtrInst": 23,
    "NumICmpInst": 3,
    "NumLShrInst": 0,
    "NumLoadInst": 65,
    "NumMulInst": 7,
    "NumOrInst": 2,
    "NumPHIInst": 0,
    "NumRetInst": 5,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 6,
    "NumStoreInst": 28,
    "NumSubInst": 1,
    "NumTruncInst": 19,
    "NumXorInst": 0,
    "NumZExtInst": 36,
    "TotalBlocks": 11,
    "TotalInsts": 285,
    "TotalMemInst": 152,
    "TotalFuncs": 10,
    "ArgsPhi": 0,
    "testUnary": 129
  },
  "baseline_oz_instcount": 285,
  "knowledge_base_entry": [
    "-loop-reduce",
    "--slsr",
    "--early-cse-memssa",
    "--aggressive-instcombine",
    "--loop-instsimplify",
    "--dse",
    "--globalopt",
    "--ipsccp",
    "--jump-threading",
    "--gvn",
    "--sroa",
    "--reassociate",
    "--slp-vectorizer",
    "--indvars",
    "--gvn-hoist",
    "--mldst-motion"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--mergereturn",
          "--div-rem-pairs",
          "--callsite-splitting",
          "--attributor",
          "--slsr",
          "--loop-distribute",
          "--argpromotion",
          "--indvars",
          "--always-inline",
          "--inject-tli-mappings",
          "--mergefunc",
          "--lower-widenable-condition",
          "--lowerinvoke",
          "--aggressive-instcombine",
          "--barrier",
          "--lowerswitch",
          "--mergeicmps",
          "--loop-reroll",
          "--scalarizer",
          "--memcpyopt",
          "--mem2reg",
          "--simplifycfg",
          "--tailcallelim",
          "--rewrite-statepoints-for-gc",
          "--canonicalize-aliases",
          "--functionattrs",
          "--lower-constant-intrinsics",
          "--strip-debug-declare",
          "--constprop"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+4.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--mergereturn",
      "--div-rem-pairs",
      "--callsite-splitting",
      "--attributor",
      "--slsr",
      "--loop-distribute",
      "--argpromotion",
      "--indvars",
      "--always-inline",
      "--inject-tli-mappings",
      "--mergefunc",
      "--lower-widenable-condition",
      "--lowerinvoke",
      "--aggressive-instcombine",
      "--barrier",
      "--lowerswitch",
      "--mergeicmps",
      "--loop-reroll",
      "--scalarizer",
      "--memcpyopt",
      "--mem2reg",
      "--simplifycfg",
      "--tailcallelim",
      "--rewrite-statepoints-for-gc",
      "--canonicalize-aliases",
      "--functionattrs",
      "--lower-constant-intrinsics",
      "--strip-debug-declare",
      "--constprop"
    ],
    "performance_vs_Oz": "+4.2%"
  }
}
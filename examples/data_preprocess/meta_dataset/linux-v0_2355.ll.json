{
  "program_id": "linux-v0_2355.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 7,
    "onePred": 60,
    "onePredOneSuc": 46,
    "onePredTwoSuc": 13,
    "oneSuccessor": 55,
    "twoPred": 36,
    "twoPredOneSuc": 9,
    "twoEach": 26,
    "twoSuccessor": 43,
    "morePreds": 2,
    "BB03Phi": 7,
    "BBHiPhi": 0,
    "BBNoPhi": 97,
    "BeginPhi": 7,
    "BranchCount": 98,
    "returnInt": 31,
    "CriticalCount": 28,
    "NumEdges": 141,
    "const32Bit": 162,
    "const64Bit": 165,
    "numConstZeroes": 129,
    "numConstOnes": 116,
    "UncondBranches": 55,
    "binaryConstArg": 44,
    "NumAShrInst": 0,
    "NumAddInst": 4,
    "NumAllocaInst": 35,
    "NumAndInst": 34,
    "BlockMid": 10,
    "BlockLow": 94,
    "NumBitCastInst": 5,
    "NumBrInst": 98,
    "NumCallInst": 46,
    "NumGetElementPtrInst": 124,
    "NumICmpInst": 42,
    "NumLShrInst": 8,
    "NumLoadInst": 169,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 7,
    "NumRetInst": 6,
    "NumSExtInst": 3,
    "NumSelectInst": 2,
    "NumShlInst": 0,
    "NumStoreInst": 103,
    "NumSubInst": 0,
    "NumTruncInst": 9,
    "NumXorInst": 0,
    "NumZExtInst": 49,
    "TotalBlocks": 104,
    "TotalInsts": 746,
    "TotalMemInst": 477,
    "TotalFuncs": 10,
    "ArgsPhi": 14,
    "testUnary": 272
  },
  "baseline_oz_instcount": 746,
  "knowledge_base_entry": [
    "--correlated-propagation",
    "--mergefunc",
    "--aggressive-instcombine",
    "--flattencfg",
    "--loop-simplifycfg",
    "--reassociate",
    "--dce",
    "--mem2reg",
    "--licm",
    "--sccp"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-sink",
          "--mergefunc",
          "--irce",
          "--loop-instsimplify",
          "--add-discriminators",
          "--loop-interchange",
          "--lower-widenable-condition",
          "--post-inline-ee-instrument",
          "--mergereturn",
          "--memcpyopt",
          "--aggressive-instcombine",
          "--early-cse-memssa",
          "--loop-distribute",
          "--loweratomic",
          "--infer-address-spaces",
          "--called-value-propagation",
          "--correlated-propagation",
          "--forceattrs",
          "--strip-dead-prototypes",
          "--speculative-execution",
          "--instnamer",
          "--separate-const-offset-from-gep",
          "--attributor",
          "--coro-early",
          "--callsite-splitting",
          "--coro-elide",
          "--loop-unswitch",
          "--scalarizer"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-sink",
      "--mergefunc",
      "--irce",
      "--loop-instsimplify",
      "--add-discriminators",
      "--loop-interchange",
      "--lower-widenable-condition",
      "--post-inline-ee-instrument",
      "--mergereturn",
      "--memcpyopt",
      "--aggressive-instcombine",
      "--early-cse-memssa",
      "--loop-distribute",
      "--loweratomic",
      "--infer-address-spaces",
      "--called-value-propagation",
      "--correlated-propagation",
      "--forceattrs",
      "--strip-dead-prototypes",
      "--speculative-execution",
      "--instnamer",
      "--separate-const-offset-from-gep",
      "--attributor",
      "--coro-early",
      "--callsite-splitting",
      "--coro-elide",
      "--loop-unswitch",
      "--scalarizer"
    ],
    "performance_vs_Oz": "+0.1%"
  }
}
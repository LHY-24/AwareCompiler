{
  "program_id": "github-v0_7114.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 47,
    "onePredOneSuc": 33,
    "onePredTwoSuc": 13,
    "oneSuccessor": 44,
    "twoPred": 21,
    "twoPredOneSuc": 7,
    "twoEach": 11,
    "twoSuccessor": 26,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 76,
    "BeginPhi": 0,
    "BranchCount": 70,
    "returnInt": 5,
    "CriticalCount": 7,
    "NumEdges": 96,
    "const32Bit": 156,
    "const64Bit": 3,
    "numConstZeroes": 74,
    "numConstOnes": 50,
    "UncondBranches": 44,
    "binaryConstArg": 7,
    "NumAShrInst": 0,
    "NumAddInst": 4,
    "NumAllocaInst": 33,
    "NumAndInst": 4,
    "BlockMid": 4,
    "BlockLow": 72,
    "NumBitCastInst": 10,
    "NumBrInst": 70,
    "NumCallInst": 14,
    "NumGetElementPtrInst": 51,
    "NumICmpInst": 26,
    "NumLShrInst": 0,
    "NumLoadInst": 143,
    "NumMulInst": 1,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 6,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 67,
    "NumSubInst": 0,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 11,
    "TotalBlocks": 76,
    "TotalInsts": 442,
    "TotalMemInst": 308,
    "TotalFuncs": 14,
    "ArgsPhi": 0,
    "testUnary": 199
  },
  "baseline_oz_instcount": 442,
  "knowledge_base_entry": [
    "--prune-eh",
    "--simplifycfg",
    "--loop-instsimplify",
    "--dse",
    "--dce",
    "--ipsccp",
    "--globaldce",
    "--aggressive-instcombine",
    "--die",
    "--reassociate",
    "--mem2reg",
    "--jump-threading",
    "--dse",
    "--dce",
    "--ipsccp",
    "--globaldce",
    "--aggressive-instcombine",
    "--die",
    "--reassociate",
    "--mem2reg",
    "--aggressive-instcombine",
    "--gvn",
    "--jump-threading",
    "--slp-vectorizer",
    "--correlated-propagation",
    "--gvn-hoist",
    "--lower-expect"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--instcombine",
          "--loop-load-elim",
          "--inline",
          "--cross-dso-cfi",
          "--div-rem-pairs",
          "--adce",
          "--ee-instrument",
          "--deadargelim",
          "--early-cse",
          "--float2int",
          "--pgo-memop-opt",
          "--ipsccp",
          "--strip-dead-prototypes",
          "--strip-nondebug",
          "--early-cse-memssa",
          "--aggressive-instcombine",
          "--bdce",
          "--attributor",
          "--lower-matrix-intrinsics",
          "--lower-expect"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--instcombine",
      "--loop-load-elim",
      "--inline",
      "--cross-dso-cfi",
      "--div-rem-pairs",
      "--adce",
      "--ee-instrument",
      "--deadargelim",
      "--early-cse",
      "--float2int",
      "--pgo-memop-opt",
      "--ipsccp",
      "--strip-dead-prototypes",
      "--strip-nondebug",
      "--early-cse-memssa",
      "--aggressive-instcombine",
      "--bdce",
      "--attributor",
      "--lower-matrix-intrinsics",
      "--lower-expect"
    ],
    "performance_vs_Oz": "+0.9%"
  }
}
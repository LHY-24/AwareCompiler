{
  "program_id": "linux-v0_13630.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 55,
    "onePredOneSuc": 33,
    "onePredTwoSuc": 21,
    "oneSuccessor": 44,
    "twoPred": 16,
    "twoPredOneSuc": 8,
    "twoEach": 8,
    "twoSuccessor": 31,
    "morePreds": 4,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 82,
    "BeginPhi": 1,
    "BranchCount": 75,
    "returnInt": 11,
    "CriticalCount": 18,
    "NumEdges": 106,
    "const32Bit": 120,
    "const64Bit": 63,
    "numConstZeroes": 55,
    "numConstOnes": 69,
    "UncondBranches": 44,
    "binaryConstArg": 50,
    "NumAShrInst": 0,
    "NumAddInst": 14,
    "NumAllocaInst": 50,
    "NumAndInst": 19,
    "BlockMid": 8,
    "BlockLow": 75,
    "NumBitCastInst": 3,
    "NumBrInst": 75,
    "NumCallInst": 19,
    "NumGetElementPtrInst": 27,
    "NumICmpInst": 31,
    "NumLShrInst": 5,
    "NumLoadInst": 127,
    "NumMulInst": 0,
    "NumOrInst": 5,
    "NumPHIInst": 1,
    "NumRetInst": 8,
    "NumSExtInst": 12,
    "NumSelectInst": 0,
    "NumShlInst": 4,
    "NumStoreInst": 82,
    "NumSubInst": 6,
    "NumTruncInst": 15,
    "NumXorInst": 0,
    "NumZExtInst": 8,
    "TotalBlocks": 83,
    "TotalInsts": 522,
    "TotalMemInst": 305,
    "TotalFuncs": 15,
    "ArgsPhi": 2,
    "testUnary": 226
  },
  "baseline_oz_instcount": 523,
  "knowledge_base_entry": [
    "--sink",
    "--newgvn",
    "--reassociate",
    "--jump-threading",
    "--simplifycfg",
    "--slp-vectorizer",
    "--load-store-vectorizer",
    "--gvn-hoist",
    "--elim-avail-extern",
    "--newgvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--lower-expect",
          "--lower-widenable-condition",
          "--sink",
          "--slp-vectorizer",
          "--inline",
          "--tailcallelim",
          "--add-discriminators",
          "--lcssa",
          "--sroa",
          "--guard-widening"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--lower-expect",
      "--lower-widenable-condition",
      "--sink",
      "--slp-vectorizer",
      "--inline",
      "--tailcallelim",
      "--add-discriminators",
      "--lcssa",
      "--sroa",
      "--guard-widening"
    ],
    "performance_vs_Oz": "+0.2%"
  }
}
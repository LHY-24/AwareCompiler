{
  "program_id": "linux-v0_1268.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 60,
    "onePredOneSuc": 43,
    "onePredTwoSuc": 15,
    "oneSuccessor": 54,
    "twoPred": 15,
    "twoPredOneSuc": 4,
    "twoEach": 7,
    "twoSuccessor": 24,
    "morePreds": 3,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 105,
    "BeginPhi": 0,
    "BranchCount": 78,
    "returnInt": 21,
    "CriticalCount": 4,
    "NumEdges": 102,
    "const32Bit": 338,
    "const64Bit": 12,
    "numConstZeroes": 169,
    "numConstOnes": 113,
    "UncondBranches": 54,
    "binaryConstArg": 12,
    "NumAShrInst": 0,
    "NumAddInst": 6,
    "NumAllocaInst": 84,
    "NumAndInst": 0,
    "BlockMid": 14,
    "BlockLow": 91,
    "NumBitCastInst": 16,
    "NumBrInst": 78,
    "NumCallInst": 53,
    "NumGetElementPtrInst": 116,
    "NumICmpInst": 29,
    "NumLShrInst": 0,
    "NumLoadInst": 233,
    "NumMulInst": 1,
    "NumOrInst": 3,
    "NumPHIInst": 0,
    "NumRetInst": 27,
    "NumSExtInst": 20,
    "NumSelectInst": 4,
    "NumShlInst": 0,
    "NumStoreInst": 119,
    "NumSubInst": 1,
    "NumTruncInst": 7,
    "NumXorInst": 2,
    "NumZExtInst": 10,
    "TotalBlocks": 105,
    "TotalInsts": 809,
    "TotalMemInst": 605,
    "TotalFuncs": 44,
    "ArgsPhi": 0,
    "testUnary": 370
  },
  "baseline_oz_instcount": 811,
  "knowledge_base_entry": [
    "--bdce",
    "--sccp",
    "--dse",
    "--instsimplify",
    "--instcombine",
    "--mem2reg",
    "--die",
    "--mem2reg",
    "--aggressive-instcombine",
    "--early-cse-memssa",
    "--sccp",
    "--gvn",
    "--slsr"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--aggressive-instcombine",
          "--callsite-splitting",
          "--mergefunc",
          "--constmerge",
          "--loop-vectorize",
          "--infer-address-spaces",
          "--loop-versioning",
          "--ipconstprop",
          "--slp-vectorizer",
          "--hotcoldsplit"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--aggressive-instcombine",
      "--callsite-splitting",
      "--mergefunc",
      "--constmerge",
      "--loop-vectorize",
      "--infer-address-spaces",
      "--loop-versioning",
      "--ipconstprop",
      "--slp-vectorizer",
      "--hotcoldsplit"
    ],
    "performance_vs_Oz": "+0.7%"
  }
}
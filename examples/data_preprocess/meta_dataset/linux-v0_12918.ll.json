{
  "program_id": "linux-v0_12918.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 45,
    "onePredOneSuc": 33,
    "onePredTwoSuc": 10,
    "oneSuccessor": 40,
    "twoPred": 11,
    "twoPredOneSuc": 4,
    "twoEach": 3,
    "twoSuccessor": 18,
    "morePreds": 5,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 87,
    "BeginPhi": 0,
    "BranchCount": 57,
    "returnInt": 20,
    "CriticalCount": 6,
    "NumEdges": 90,
    "const32Bit": 267,
    "const64Bit": 13,
    "numConstZeroes": 124,
    "numConstOnes": 94,
    "UncondBranches": 40,
    "binaryConstArg": 10,
    "NumAShrInst": 1,
    "NumAddInst": 1,
    "NumAllocaInst": 73,
    "NumAndInst": 2,
    "BlockMid": 10,
    "BlockLow": 77,
    "NumBitCastInst": 34,
    "NumBrInst": 57,
    "NumCallInst": 58,
    "NumGetElementPtrInst": 80,
    "NumICmpInst": 16,
    "NumLShrInst": 0,
    "NumLoadInst": 206,
    "NumMulInst": 0,
    "NumOrInst": 2,
    "NumPHIInst": 0,
    "NumRetInst": 26,
    "NumSExtInst": 5,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 120,
    "NumSubInst": 1,
    "NumTruncInst": 9,
    "NumXorInst": 2,
    "NumZExtInst": 8,
    "TotalBlocks": 87,
    "TotalInsts": 713,
    "TotalMemInst": 537,
    "TotalFuncs": 40,
    "ArgsPhi": 0,
    "testUnary": 339
  },
  "baseline_oz_instcount": 713,
  "knowledge_base_entry": [
    "--mem2reg",
    "--flattencfg",
    "--elim-avail-extern",
    "--newgvn",
    "--loop-fusion",
    "--instcombine",
    "--dce",
    "--aggressive-instcombine",
    "--jump-threading",
    "--ipsccp",
    "--bdce",
    "--simplifycfg",
    "--loop-rotate",
    "--aggressive-instcombine",
    "--jump-threading",
    "--ipsccp",
    "--bdce",
    "--simplifycfg",
    "--sccp",
    "--early-cse",
    "--memcpyopt",
    "--sroa",
    "--lower-constant-intrinsics",
    "--instsimplify",
    "--simplifycfg",
    "--slp-vectorizer",
    "--adce",
    "--early-cse-memssa",
    "--instcombine",
    "--memcpyopt",
    "--licm",
    "--flattencfg",
    "--elim-avail-extern",
    "--newgvn",
    "--loop-fusion",
    "--newgvn",
    "--mergefunc",
    "--licm",
    "--flattencfg",
    "--gvn-hoist",
    "--correlated-propagation",
    "--simplifycfg",
    "--loop-rotate",
    "--aggressive-instcombine",
    "--early-cse-memssa",
    "--reassociate",
    "--jump-threading",
    "--ipsccp",
    "--instcombine",
    "-loop-reduce",
    "--load-store-vectorizer"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--early-cse",
          "--canonicalize-aliases",
          "--rewrite-statepoints-for-gc",
          "--attributor",
          "--early-cse-memssa",
          "--add-discriminators",
          "--aggressive-instcombine",
          "--loop-load-elim",
          "--adce",
          "--coro-elide",
          "--called-value-propagation",
          "--loop-instsimplify",
          "--consthoist",
          "--slp-vectorizer",
          "--indvars",
          "--instnamer",
          "--elim-avail-extern",
          "--strip-debug-declare",
          "--ipsccp",
          "--mergefunc",
          "--always-inline",
          "--constmerge",
          "--sccp",
          "--ipconstprop",
          "--loop-guard-widening",
          "--loop-predication",
          "--irce",
          "--instcombine"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--early-cse",
      "--canonicalize-aliases",
      "--rewrite-statepoints-for-gc",
      "--attributor",
      "--early-cse-memssa",
      "--add-discriminators",
      "--aggressive-instcombine",
      "--loop-load-elim",
      "--adce",
      "--coro-elide",
      "--called-value-propagation",
      "--loop-instsimplify",
      "--consthoist",
      "--slp-vectorizer",
      "--indvars",
      "--instnamer",
      "--elim-avail-extern",
      "--strip-debug-declare",
      "--ipsccp",
      "--mergefunc",
      "--always-inline",
      "--constmerge",
      "--sccp",
      "--ipconstprop",
      "--loop-guard-widening",
      "--loop-predication",
      "--irce",
      "--instcombine"
    ],
    "performance_vs_Oz": "+0.4%"
  }
}
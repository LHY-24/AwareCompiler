{
  "program_id": "github-v0_49051.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 10,
    "onePredOneSuc": 7,
    "onePredTwoSuc": 3,
    "oneSuccessor": 8,
    "twoPred": 2,
    "twoPredOneSuc": 0,
    "twoEach": 1,
    "twoSuccessor": 6,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 20,
    "BeginPhi": 0,
    "BranchCount": 14,
    "returnInt": 3,
    "CriticalCount": 3,
    "NumEdges": 20,
    "const32Bit": 61,
    "const64Bit": 2,
    "numConstZeroes": 14,
    "numConstOnes": 35,
    "UncondBranches": 8,
    "binaryConstArg": 6,
    "NumAShrInst": 0,
    "NumAddInst": 10,
    "NumAllocaInst": 34,
    "NumAndInst": 0,
    "BlockMid": 5,
    "BlockLow": 15,
    "NumBitCastInst": 0,
    "NumBrInst": 14,
    "NumCallInst": 6,
    "NumGetElementPtrInst": 7,
    "NumICmpInst": 6,
    "NumLShrInst": 0,
    "NumLoadInst": 54,
    "NumMulInst": 2,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 6,
    "NumSExtInst": 1,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 41,
    "NumSubInst": 1,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 5,
    "TotalBlocks": 20,
    "TotalInsts": 189,
    "TotalMemInst": 142,
    "TotalFuncs": 9,
    "ArgsPhi": 0,
    "testUnary": 94
  },
  "baseline_oz_instcount": 189,
  "knowledge_base_entry": [
    "--mergefunc",
    "--loop-simplifycfg",
    "--dse",
    "--mergefunc",
    "--globaldce",
    "--aggressive-instcombine",
    "--simplifycfg",
    "--reassociate",
    "--early-cse",
    "--instcombine",
    "--jump-threading",
    "--early-cse-memssa",
    "--licm",
    "--lower-constant-intrinsics",
    "--loop-instsimplify",
    "--simplifycfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--guard-widening",
          "--licm",
          "--lower-expect",
          "--partial-inliner",
          "--indvars",
          "--globalopt",
          "--strip-debug-declare",
          "--constmerge",
          "--mergefunc",
          "--always-inline",
          "--strip-dead-prototypes",
          "--loop-idiom",
          "--slp-vectorizer",
          "--consthoist",
          "--post-inline-ee-instrument",
          "--strip-nondebug",
          "--instcombine"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--guard-widening",
      "--licm",
      "--lower-expect",
      "--partial-inliner",
      "--indvars",
      "--globalopt",
      "--strip-debug-declare",
      "--constmerge",
      "--mergefunc",
      "--always-inline",
      "--strip-dead-prototypes",
      "--loop-idiom",
      "--slp-vectorizer",
      "--consthoist",
      "--post-inline-ee-instrument",
      "--strip-nondebug",
      "--instcombine"
    ],
    "performance_vs_Oz": "+2.6%"
  }
}
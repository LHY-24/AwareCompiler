{
  "program_id": "poj104-v1_54_304.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 7,
    "onePredOneSuc": 4,
    "onePredTwoSuc": 2,
    "oneSuccessor": 7,
    "twoPred": 3,
    "twoPredOneSuc": 2,
    "twoEach": 1,
    "twoSuccessor": 3,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 13,
    "BeginPhi": 0,
    "BranchCount": 10,
    "returnInt": 4,
    "CriticalCount": 2,
    "NumEdges": 13,
    "const32Bit": 14,
    "const64Bit": 10,
    "numConstZeroes": 2,
    "numConstOnes": 12,
    "UncondBranches": 7,
    "binaryConstArg": 4,
    "NumAShrInst": 0,
    "NumAddInst": 3,
    "NumAllocaInst": 6,
    "NumAndInst": 0,
    "BlockMid": 1,
    "BlockLow": 12,
    "NumBitCastInst": 10,
    "NumBrInst": 10,
    "NumCallInst": 16,
    "NumGetElementPtrInst": 0,
    "NumICmpInst": 3,
    "NumLShrInst": 0,
    "NumLoadInst": 17,
    "NumMulInst": 1,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 9,
    "NumSubInst": 2,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 13,
    "TotalInsts": 82,
    "TotalMemInst": 48,
    "TotalFuncs": 10,
    "ArgsPhi": 0,
    "testUnary": 33
  },
  "baseline_oz_instcount": 38,
  "knowledge_base_entry": [
    "--mergefunc",
    "--sroa",
    "--globalopt",
    "--dse",
    "--early-cse-memssa",
    "--memcpyopt",
    "--mergefunc",
    "--lower-expect",
    "--sroa",
    "--dse",
    "--newgvn",
    "--correlated-propagation",
    "--jump-threading",
    "--lower-constant-intrinsics",
    "--loop-instsimplify",
    "--loop-simplifycfg",
    "--simplifycfg",
    "--instsimplify",
    "--inline",
    "--dce",
    "--ipsccp",
    "--loweratomic",
    "--early-cse-memssa",
    "--die",
    "--die",
    "--correlated-propagation",
    "--early-cse-memssa",
    "--slp-vectorizer"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-instsimplify",
          "--lower-expect",
          "--reassociate",
          "--lower-widenable-condition",
          "--instcombine",
          "--argpromotion",
          "--instsimplify",
          "--ipconstprop",
          "--rpo-functionattrs",
          "--inline",
          "--coro-cleanup",
          "--bdce",
          "--simplifycfg",
          "--sink",
          "--loop-load-elim",
          "--strip-nondebug",
          "--loweratomic",
          "--newgvn",
          "--mem2reg",
          "--dce",
          "--ee-instrument"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-instsimplify",
      "--lower-expect",
      "--reassociate",
      "--lower-widenable-condition",
      "--instcombine",
      "--argpromotion",
      "--instsimplify",
      "--ipconstprop",
      "--rpo-functionattrs",
      "--inline",
      "--coro-cleanup",
      "--bdce",
      "--simplifycfg",
      "--sink",
      "--loop-load-elim",
      "--strip-nondebug",
      "--loweratomic",
      "--newgvn",
      "--mem2reg",
      "--dce",
      "--ee-instrument"
    ],
    "performance_vs_Oz": "+2.6%"
  }
}
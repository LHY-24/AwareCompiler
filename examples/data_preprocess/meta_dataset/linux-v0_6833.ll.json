{
  "program_id": "linux-v0_6833.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 4,
    "onePred": 52,
    "onePredOneSuc": 32,
    "onePredTwoSuc": 18,
    "oneSuccessor": 43,
    "twoPred": 15,
    "twoPredOneSuc": 7,
    "twoEach": 5,
    "twoSuccessor": 31,
    "morePreds": 7,
    "BB03Phi": 4,
    "BBHiPhi": 0,
    "BBNoPhi": 87,
    "BeginPhi": 4,
    "BranchCount": 74,
    "returnInt": 4,
    "CriticalCount": 21,
    "NumEdges": 105,
    "const32Bit": 195,
    "const64Bit": 5,
    "numConstZeroes": 87,
    "numConstOnes": 65,
    "UncondBranches": 43,
    "binaryConstArg": 7,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 53,
    "NumAndInst": 6,
    "BlockMid": 9,
    "BlockLow": 82,
    "NumBitCastInst": 15,
    "NumBrInst": 74,
    "NumCallInst": 42,
    "NumGetElementPtrInst": 61,
    "NumICmpInst": 31,
    "NumLShrInst": 0,
    "NumLoadInst": 155,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 4,
    "NumRetInst": 17,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 74,
    "NumSubInst": 2,
    "NumTruncInst": 5,
    "NumXorInst": 0,
    "NumZExtInst": 15,
    "TotalBlocks": 91,
    "TotalInsts": 564,
    "TotalMemInst": 385,
    "TotalFuncs": 33,
    "ArgsPhi": 8,
    "testUnary": 252
  },
  "baseline_oz_instcount": 565,
  "knowledge_base_entry": [
    "--functionattrs",
    "--instsimplify",
    "--aggressive-instcombine",
    "--flattencfg",
    "--early-cse-memssa",
    "--instcombine",
    "--sccp",
    "--inline",
    "--dce",
    "--early-cse",
    "--prune-eh",
    "--jump-threading",
    "--die",
    "--reassociate",
    "--aggressive-instcombine",
    "--gvn",
    "--gvn-hoist",
    "--jump-threading",
    "--early-cse",
    "--prune-eh",
    "--jump-threading",
    "--die",
    "--aggressive-instcombine"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--strip-dead-prototypes",
          "--scalarizer",
          "--slsr",
          "--always-inline",
          "--libcalls-shrinkwrap",
          "--dce",
          "--ipconstprop",
          "--inferattrs",
          "--adce",
          "--alignment-from-assumptions",
          "--tailcallelim",
          "--aggressive-instcombine",
          "--sroa",
          "--argpromotion"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--strip-dead-prototypes",
      "--scalarizer",
      "--slsr",
      "--always-inline",
      "--libcalls-shrinkwrap",
      "--dce",
      "--ipconstprop",
      "--inferattrs",
      "--adce",
      "--alignment-from-assumptions",
      "--tailcallelim",
      "--aggressive-instcombine",
      "--sroa",
      "--argpromotion"
    ],
    "performance_vs_Oz": "+1.2%"
  }
}
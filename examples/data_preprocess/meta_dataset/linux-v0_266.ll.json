{
  "program_id": "linux-v0_266.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 50,
    "onePredOneSuc": 34,
    "onePredTwoSuc": 15,
    "oneSuccessor": 41,
    "twoPred": 15,
    "twoPredOneSuc": 5,
    "twoEach": 6,
    "twoSuccessor": 29,
    "morePreds": 5,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 91,
    "BeginPhi": 1,
    "BranchCount": 70,
    "returnInt": 30,
    "CriticalCount": 11,
    "NumEdges": 99,
    "const32Bit": 256,
    "const64Bit": 21,
    "numConstZeroes": 107,
    "numConstOnes": 86,
    "UncondBranches": 41,
    "binaryConstArg": 17,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 72,
    "NumAndInst": 5,
    "BlockMid": 10,
    "BlockLow": 82,
    "NumBitCastInst": 28,
    "NumBrInst": 70,
    "NumCallInst": 71,
    "NumGetElementPtrInst": 72,
    "NumICmpInst": 28,
    "NumLShrInst": 1,
    "NumLoadInst": 201,
    "NumMulInst": 0,
    "NumOrInst": 5,
    "NumPHIInst": 1,
    "NumRetInst": 22,
    "NumSExtInst": 4,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 123,
    "NumSubInst": 1,
    "NumTruncInst": 10,
    "NumXorInst": 3,
    "NumZExtInst": 10,
    "TotalBlocks": 92,
    "TotalInsts": 735,
    "TotalMemInst": 539,
    "TotalFuncs": 57,
    "ArgsPhi": 2,
    "testUnary": 331
  },
  "baseline_oz_instcount": 735,
  "knowledge_base_entry": [
    "--adce",
    "--ipsccp",
    "--jump-threading",
    "-loop-reduce",
    "--sroa",
    "--sccp",
    "--dce",
    "--mergefunc",
    "--gvn",
    "--reassociate",
    "--simplifycfg",
    "--inline",
    "--prune-eh",
    "--aggressive-instcombine",
    "--loop-instsimplify",
    "--instcombine",
    "--early-cse-memssa",
    "--load-store-vectorizer",
    "--loop-fusion"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--alignment-from-assumptions",
          "--loop-simplifycfg",
          "--globalsplit",
          "--coro-early",
          "--partial-inliner",
          "--guard-widening",
          "--lower-constant-intrinsics",
          "--mergefunc",
          "--coro-cleanup",
          "--strip-dead-prototypes",
          "--instcombine",
          "--pgo-memop-opt",
          "--div-rem-pairs",
          "--aggressive-instcombine",
          "--dse",
          "--strip-nondebug",
          "--consthoist",
          "--speculative-execution",
          "--coro-elide",
          "--irce",
          "--memcpyopt",
          "--deadargelim",
          "--elim-avail-extern",
          "--post-inline-ee-instrument",
          "--gvn",
          "--add-discriminators"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--alignment-from-assumptions",
      "--loop-simplifycfg",
      "--globalsplit",
      "--coro-early",
      "--partial-inliner",
      "--guard-widening",
      "--lower-constant-intrinsics",
      "--mergefunc",
      "--coro-cleanup",
      "--strip-dead-prototypes",
      "--instcombine",
      "--pgo-memop-opt",
      "--div-rem-pairs",
      "--aggressive-instcombine",
      "--dse",
      "--strip-nondebug",
      "--consthoist",
      "--speculative-execution",
      "--coro-elide",
      "--irce",
      "--memcpyopt",
      "--deadargelim",
      "--elim-avail-extern",
      "--post-inline-ee-instrument",
      "--gvn",
      "--add-discriminators"
    ],
    "performance_vs_Oz": "+0.3%"
  }
}
{
  "program_id": "github-v0_9062.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 30,
    "onePredOneSuc": 29,
    "onePredTwoSuc": 0,
    "oneSuccessor": 30,
    "twoPred": 10,
    "twoPredOneSuc": 0,
    "twoEach": 10,
    "twoSuccessor": 10,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 66,
    "BeginPhi": 0,
    "BranchCount": 40,
    "returnInt": 0,
    "CriticalCount": 0,
    "NumEdges": 50,
    "const32Bit": 129,
    "const64Bit": 16,
    "numConstZeroes": 26,
    "numConstOnes": 62,
    "UncondBranches": 30,
    "binaryConstArg": 59,
    "NumAShrInst": 0,
    "NumAddInst": 33,
    "NumAllocaInst": 50,
    "NumAndInst": 3,
    "BlockMid": 5,
    "BlockLow": 61,
    "NumBitCastInst": 7,
    "NumBrInst": 40,
    "NumCallInst": 10,
    "NumGetElementPtrInst": 6,
    "NumICmpInst": 10,
    "NumLShrInst": 0,
    "NumLoadInst": 102,
    "NumMulInst": 23,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 26,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 84,
    "NumSubInst": 0,
    "NumTruncInst": 12,
    "NumXorInst": 0,
    "NumZExtInst": 55,
    "TotalBlocks": 66,
    "TotalInsts": 485,
    "TotalMemInst": 252,
    "TotalFuncs": 26,
    "ArgsPhi": 0,
    "testUnary": 249
  },
  "baseline_oz_instcount": 485,
  "knowledge_base_entry": [
    "--break-crit-edges",
    "--simplifycfg",
    "--loop-deletion",
    "--mem2reg",
    "--globalopt",
    "--gvn-hoist",
    "--ipsccp",
    "--ipsccp",
    "--aggressive-instcombine",
    "--prune-eh",
    "--sroa",
    "--slp-vectorizer",
    "--loop-simplifycfg",
    "--flattencfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--consthoist",
          "--lower-widenable-condition",
          "--nary-reassociate",
          "--break-crit-edges",
          "--hotcoldsplit",
          "--constprop",
          "--loop-instsimplify",
          "--loop-data-prefetch",
          "--div-rem-pairs",
          "--speculative-execution",
          "--loop-unroll-and-jam",
          "--early-cse",
          "--globaldce",
          "--rewrite-statepoints-for-gc",
          "--loop-distribute",
          "--ipconstprop",
          "--lowerinvoke",
          "--loop-vectorize",
          "--float2int",
          "--licm",
          "--indvars",
          "--aggressive-instcombine"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--consthoist",
      "--lower-widenable-condition",
      "--nary-reassociate",
      "--break-crit-edges",
      "--hotcoldsplit",
      "--constprop",
      "--loop-instsimplify",
      "--loop-data-prefetch",
      "--div-rem-pairs",
      "--speculative-execution",
      "--loop-unroll-and-jam",
      "--early-cse",
      "--globaldce",
      "--rewrite-statepoints-for-gc",
      "--loop-distribute",
      "--ipconstprop",
      "--lowerinvoke",
      "--loop-vectorize",
      "--float2int",
      "--licm",
      "--indvars",
      "--aggressive-instcombine"
    ],
    "performance_vs_Oz": "+0.4%"
  }
}
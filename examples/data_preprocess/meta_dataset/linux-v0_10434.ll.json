{
  "program_id": "linux-v0_10434.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 55,
    "onePredOneSuc": 39,
    "onePredTwoSuc": 14,
    "oneSuccessor": 49,
    "twoPred": 15,
    "twoPredOneSuc": 7,
    "twoEach": 3,
    "twoSuccessor": 24,
    "morePreds": 6,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 108,
    "BeginPhi": 0,
    "BranchCount": 72,
    "returnInt": 26,
    "CriticalCount": 9,
    "NumEdges": 110,
    "const32Bit": 326,
    "const64Bit": 20,
    "numConstZeroes": 139,
    "numConstOnes": 136,
    "UncondBranches": 49,
    "binaryConstArg": 22,
    "NumAShrInst": 1,
    "NumAddInst": 4,
    "NumAllocaInst": 102,
    "NumAndInst": 5,
    "BlockMid": 17,
    "BlockLow": 91,
    "NumBitCastInst": 37,
    "NumBrInst": 72,
    "NumCallInst": 64,
    "NumGetElementPtrInst": 93,
    "NumICmpInst": 22,
    "NumLShrInst": 0,
    "NumLoadInst": 243,
    "NumMulInst": 1,
    "NumOrInst": 6,
    "NumPHIInst": 0,
    "NumRetInst": 32,
    "NumSExtInst": 8,
    "NumSelectInst": 1,
    "NumShlInst": 6,
    "NumStoreInst": 149,
    "NumSubInst": 0,
    "NumTruncInst": 15,
    "NumXorInst": 3,
    "NumZExtInst": 21,
    "TotalBlocks": 108,
    "TotalInsts": 895,
    "TotalMemInst": 651,
    "TotalFuncs": 49,
    "ArgsPhi": 0,
    "testUnary": 430
  },
  "baseline_oz_instcount": 895,
  "knowledge_base_entry": [
    "--sroa",
    "--aggressive-instcombine",
    "--ipsccp",
    "--sccp",
    "--gvn",
    "--inline",
    "--mem2reg",
    "--aggressive-instcombine",
    "--jump-threading",
    "--ipsccp",
    "--correlated-propagation",
    "--mergefunc",
    "--simplifycfg",
    "--licm",
    "--flattencfg",
    "--adce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--coro-split",
          "--mergefunc",
          "--lower-guard-intrinsic",
          "--simple-loop-unswitch",
          "--reassociate",
          "--mldst-motion",
          "--mergeicmps",
          "--coro-elide",
          "--coro-cleanup",
          "--aggressive-instcombine",
          "--globaldce",
          "--loop-rotate",
          "--newgvn",
          "--correlated-propagation",
          "--rpo-functionattrs",
          "--loop-guard-widening",
          "--speculative-execution",
          "--deadargelim",
          "--tailcallelim",
          "--partial-inliner",
          "--coro-early",
          "--argpromotion",
          "--hotcoldsplit",
          "--lowerinvoke",
          "--loop-unswitch",
          "--simplifycfg"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--coro-split",
      "--mergefunc",
      "--lower-guard-intrinsic",
      "--simple-loop-unswitch",
      "--reassociate",
      "--mldst-motion",
      "--mergeicmps",
      "--coro-elide",
      "--coro-cleanup",
      "--aggressive-instcombine",
      "--globaldce",
      "--loop-rotate",
      "--newgvn",
      "--correlated-propagation",
      "--rpo-functionattrs",
      "--loop-guard-widening",
      "--speculative-execution",
      "--deadargelim",
      "--tailcallelim",
      "--partial-inliner",
      "--coro-early",
      "--argpromotion",
      "--hotcoldsplit",
      "--lowerinvoke",
      "--loop-unswitch",
      "--simplifycfg"
    ],
    "performance_vs_Oz": "+0.4%"
  }
}
{
  "program_id": "github-v0_19010.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 15,
    "onePredOneSuc": 10,
    "onePredTwoSuc": 2,
    "oneSuccessor": 13,
    "twoPred": 6,
    "twoPredOneSuc": 2,
    "twoEach": 4,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 24,
    "BeginPhi": 0,
    "BranchCount": 20,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 27,
    "const32Bit": 36,
    "const64Bit": 63,
    "numConstZeroes": 56,
    "numConstOnes": 32,
    "UncondBranches": 13,
    "binaryConstArg": 10,
    "NumAShrInst": 0,
    "NumAddInst": 4,
    "NumAllocaInst": 15,
    "NumAndInst": 2,
    "BlockMid": 6,
    "BlockLow": 18,
    "NumBitCastInst": 16,
    "NumBrInst": 20,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 51,
    "NumICmpInst": 7,
    "NumLShrInst": 3,
    "NumLoadInst": 60,
    "NumMulInst": 0,
    "NumOrInst": 2,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 30,
    "NumSubInst": 0,
    "NumTruncInst": 4,
    "NumXorInst": 2,
    "NumZExtInst": 19,
    "TotalBlocks": 24,
    "TotalInsts": 249,
    "TotalMemInst": 163,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 117
  },
  "baseline_oz_instcount": 249,
  "knowledge_base_entry": [
    "--globalopt",
    "--globaldce",
    "--aggressive-instcombine",
    "--instsimplify",
    "--licm",
    "--loop-instsimplify",
    "--instcombine",
    "--nary-reassociate",
    "--gvn-hoist",
    "--simplifycfg",
    "--lower-constant-intrinsics",
    "--elim-avail-extern",
    "--loop-deletion"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--rpo-functionattrs",
          "--barrier",
          "--load-store-vectorizer",
          "--mergefunc",
          "--dce",
          "--loop-instsimplify",
          "--lower-widenable-condition",
          "--loop-idiom",
          "--aggressive-instcombine",
          "--lower-matrix-intrinsics",
          "--called-value-propagation",
          "--memcpyopt",
          "--prune-eh",
          "--gvn",
          "--elim-avail-extern",
          "--deadargelim",
          "--instcombine",
          "--lcssa",
          "--loop-versioning-licm",
          "--loop-simplify",
          "--infer-address-spaces",
          "--ipsccp",
          "--early-cse-memssa",
          "--reg2mem",
          "--scalarizer",
          "--mergereturn",
          "--loweratomic"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--rpo-functionattrs",
      "--barrier",
      "--load-store-vectorizer",
      "--mergefunc",
      "--dce",
      "--loop-instsimplify",
      "--lower-widenable-condition",
      "--loop-idiom",
      "--aggressive-instcombine",
      "--lower-matrix-intrinsics",
      "--called-value-propagation",
      "--memcpyopt",
      "--prune-eh",
      "--gvn",
      "--elim-avail-extern",
      "--deadargelim",
      "--instcombine",
      "--lcssa",
      "--loop-versioning-licm",
      "--loop-simplify",
      "--infer-address-spaces",
      "--ipsccp",
      "--early-cse-memssa",
      "--reg2mem",
      "--scalarizer",
      "--mergereturn",
      "--loweratomic"
    ],
    "performance_vs_Oz": "+1.6%"
  }
}
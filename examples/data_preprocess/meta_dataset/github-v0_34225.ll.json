{
  "program_id": "github-v0_34225.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 5,
    "onePredOneSuc": 3,
    "onePredTwoSuc": 2,
    "oneSuccessor": 4,
    "twoPred": 2,
    "twoPredOneSuc": 1,
    "twoEach": 0,
    "twoSuccessor": 4,
    "morePreds": 1,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 11,
    "BeginPhi": 1,
    "BranchCount": 8,
    "returnInt": 0,
    "CriticalCount": 3,
    "NumEdges": 12,
    "const32Bit": 43,
    "const64Bit": 0,
    "numConstZeroes": 23,
    "numConstOnes": 16,
    "UncondBranches": 4,
    "binaryConstArg": 0,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 7,
    "NumAndInst": 0,
    "BlockMid": 1,
    "BlockLow": 11,
    "NumBitCastInst": 0,
    "NumBrInst": 8,
    "NumCallInst": 0,
    "NumGetElementPtrInst": 13,
    "NumICmpInst": 6,
    "NumLShrInst": 0,
    "NumLoadInst": 21,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 1,
    "NumRetInst": 4,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 15,
    "NumSubInst": 0,
    "NumTruncInst": 1,
    "NumXorInst": 0,
    "NumZExtInst": 3,
    "TotalBlocks": 12,
    "TotalInsts": 79,
    "TotalMemInst": 56,
    "TotalFuncs": 4,
    "ArgsPhi": 3,
    "testUnary": 32
  },
  "baseline_oz_instcount": 79,
  "knowledge_base_entry": [
    "-loop-reduce",
    "--early-cse-memssa",
    "--instcombine",
    "--aggressive-instcombine",
    "--mem2reg",
    "--prune-eh",
    "--mem2reg",
    "--licm",
    "--memcpyopt",
    "--sroa",
    "--early-cse",
    "--die"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-vectorize",
          "--aggressive-instcombine",
          "--infer-address-spaces",
          "--strip-dead-prototypes",
          "--simple-loop-unswitch",
          "--lcssa",
          "--sink",
          "--coro-split",
          "--bdce",
          "--rpo-functionattrs",
          "--newgvn",
          "--dce",
          "--simplifycfg",
          "--loop-rotate",
          "--loop-load-elim",
          "--inline",
          "--indvars"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-vectorize",
      "--aggressive-instcombine",
      "--infer-address-spaces",
      "--strip-dead-prototypes",
      "--simple-loop-unswitch",
      "--lcssa",
      "--sink",
      "--coro-split",
      "--bdce",
      "--rpo-functionattrs",
      "--newgvn",
      "--dce",
      "--simplifycfg",
      "--loop-rotate",
      "--loop-load-elim",
      "--inline",
      "--indvars"
    ],
    "performance_vs_Oz": "+1.3%"
  }
}
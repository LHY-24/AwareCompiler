{
  "program_id": "linux-v0_10383.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 66,
    "onePredOneSuc": 47,
    "onePredTwoSuc": 18,
    "oneSuccessor": 54,
    "twoPred": 10,
    "twoPredOneSuc": 4,
    "twoEach": 1,
    "twoSuccessor": 27,
    "morePreds": 8,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 113,
    "BeginPhi": 1,
    "BranchCount": 80,
    "returnInt": 35,
    "CriticalCount": 8,
    "NumEdges": 124,
    "const32Bit": 409,
    "const64Bit": 13,
    "numConstZeroes": 183,
    "numConstOnes": 138,
    "UncondBranches": 54,
    "binaryConstArg": 16,
    "NumAShrInst": 0,
    "NumAddInst": 11,
    "NumAllocaInst": 97,
    "NumAndInst": 4,
    "BlockMid": 15,
    "BlockLow": 99,
    "NumBitCastInst": 13,
    "NumBrInst": 80,
    "NumCallInst": 68,
    "NumGetElementPtrInst": 99,
    "NumICmpInst": 30,
    "NumLShrInst": 1,
    "NumLoadInst": 264,
    "NumMulInst": 2,
    "NumOrInst": 1,
    "NumPHIInst": 1,
    "NumRetInst": 30,
    "NumSExtInst": 5,
    "NumSelectInst": 4,
    "NumShlInst": 1,
    "NumStoreInst": 159,
    "NumSubInst": 3,
    "NumTruncInst": 5,
    "NumXorInst": 0,
    "NumZExtInst": 7,
    "TotalBlocks": 114,
    "TotalInsts": 893,
    "TotalMemInst": 687,
    "TotalFuncs": 46,
    "ArgsPhi": 2,
    "testUnary": 392
  },
  "baseline_oz_instcount": 894,
  "knowledge_base_entry": [
    "--dce",
    "--aggressive-instcombine",
    "--bdce",
    "--instcombine",
    "--loop-deletion",
    "--gvn-hoist",
    "--mem2reg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-interchange",
          "--lowerinvoke",
          "--float2int",
          "--coro-split",
          "--div-rem-pairs",
          "--forceattrs",
          "--lower-matrix-intrinsics",
          "-loop-reduce",
          "--always-inline",
          "--elim-avail-extern",
          "--lower-expect",
          "--instcombine",
          "--die",
          "--aggressive-instcombine",
          "--load-store-vectorizer",
          "--correlated-propagation",
          "--coro-elide",
          "--loop-versioning-licm"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-interchange",
      "--lowerinvoke",
      "--float2int",
      "--coro-split",
      "--div-rem-pairs",
      "--forceattrs",
      "--lower-matrix-intrinsics",
      "-loop-reduce",
      "--always-inline",
      "--elim-avail-extern",
      "--lower-expect",
      "--instcombine",
      "--die",
      "--aggressive-instcombine",
      "--load-store-vectorizer",
      "--correlated-propagation",
      "--coro-elide",
      "--loop-versioning-licm"
    ],
    "performance_vs_Oz": "+1.3%"
  }
}
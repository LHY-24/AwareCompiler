{
  "program_id": "github-v0_41022.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 16,
    "onePredOneSuc": 9,
    "onePredTwoSuc": 4,
    "oneSuccessor": 14,
    "twoPred": 7,
    "twoPredOneSuc": 4,
    "twoEach": 3,
    "twoSuccessor": 8,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 26,
    "BeginPhi": 0,
    "BranchCount": 22,
    "returnInt": 4,
    "CriticalCount": 1,
    "NumEdges": 30,
    "const32Bit": 35,
    "const64Bit": 76,
    "numConstZeroes": 64,
    "numConstOnes": 26,
    "UncondBranches": 14,
    "binaryConstArg": 8,
    "NumAShrInst": 0,
    "NumAddInst": 4,
    "NumAllocaInst": 15,
    "NumAndInst": 0,
    "BlockMid": 6,
    "BlockLow": 20,
    "NumBitCastInst": 24,
    "NumBrInst": 22,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 62,
    "NumICmpInst": 8,
    "NumLShrInst": 2,
    "NumLoadInst": 62,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 33,
    "NumSubInst": 0,
    "NumTruncInst": 3,
    "NumXorInst": 1,
    "NumZExtInst": 18,
    "TotalBlocks": 26,
    "TotalInsts": 269,
    "TotalMemInst": 179,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 125
  },
  "baseline_oz_instcount": 269,
  "knowledge_base_entry": [
    "--newgvn",
    "--early-cse-memssa",
    "--ipsccp",
    "--aggressive-instcombine",
    "--instsimplify",
    "--newgvn",
    "--slp-vectorizer",
    "--inline",
    "--mergefunc",
    "--early-cse-memssa",
    "--slsr",
    "--gvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-load-elim",
          "--constprop",
          "--functionattrs",
          "--guard-widening",
          "--loop-fusion",
          "--loop-versioning-licm",
          "--sccp",
          "--aggressive-instcombine",
          "--div-rem-pairs",
          "--coro-elide",
          "--loop-simplifycfg",
          "--consthoist",
          "--infer-address-spaces",
          "--adce",
          "--speculative-execution",
          "--globalsplit",
          "--libcalls-shrinkwrap",
          "--loop-rotate",
          "--loop-simplify",
          "--instcombine",
          "--lower-expect",
          "--constmerge",
          "--mldst-motion",
          "--loop-predication",
          "--canonicalize-aliases",
          "--scalarizer",
          "--post-inline-ee-instrument",
          "--lowerinvoke"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-load-elim",
      "--constprop",
      "--functionattrs",
      "--guard-widening",
      "--loop-fusion",
      "--loop-versioning-licm",
      "--sccp",
      "--aggressive-instcombine",
      "--div-rem-pairs",
      "--coro-elide",
      "--loop-simplifycfg",
      "--consthoist",
      "--infer-address-spaces",
      "--adce",
      "--speculative-execution",
      "--globalsplit",
      "--libcalls-shrinkwrap",
      "--loop-rotate",
      "--loop-simplify",
      "--instcombine",
      "--lower-expect",
      "--constmerge",
      "--mldst-motion",
      "--loop-predication",
      "--canonicalize-aliases",
      "--scalarizer",
      "--post-inline-ee-instrument",
      "--lowerinvoke"
    ],
    "performance_vs_Oz": "+0.7%"
  }
}
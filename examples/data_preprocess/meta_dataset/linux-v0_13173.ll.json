{
  "program_id": "linux-v0_13173.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 32,
    "onePredOneSuc": 23,
    "onePredTwoSuc": 7,
    "oneSuccessor": 31,
    "twoPred": 13,
    "twoPredOneSuc": 5,
    "twoEach": 3,
    "twoSuccessor": 15,
    "morePreds": 1,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 58,
    "BeginPhi": 1,
    "BranchCount": 46,
    "returnInt": 9,
    "CriticalCount": 7,
    "NumEdges": 61,
    "const32Bit": 183,
    "const64Bit": 9,
    "numConstZeroes": 76,
    "numConstOnes": 65,
    "UncondBranches": 31,
    "binaryConstArg": 6,
    "NumAShrInst": 1,
    "NumAddInst": 5,
    "NumAllocaInst": 47,
    "NumAndInst": 1,
    "BlockMid": 12,
    "BlockLow": 47,
    "NumBitCastInst": 9,
    "NumBrInst": 46,
    "NumCallInst": 27,
    "NumGetElementPtrInst": 61,
    "NumICmpInst": 17,
    "NumLShrInst": 0,
    "NumLoadInst": 137,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 1,
    "NumRetInst": 13,
    "NumSExtInst": 6,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 70,
    "NumSubInst": 4,
    "NumTruncInst": 4,
    "NumXorInst": 0,
    "NumZExtInst": 10,
    "TotalBlocks": 59,
    "TotalInsts": 461,
    "TotalMemInst": 342,
    "TotalFuncs": 29,
    "ArgsPhi": 2,
    "testUnary": 215
  },
  "baseline_oz_instcount": 461,
  "knowledge_base_entry": [
    "--aggressive-instcombine",
    "--flattencfg",
    "--gvn-hoist",
    "--ipsccp",
    "--elim-avail-extern",
    "--globalopt",
    "--jump-threading",
    "-loop-reduce",
    "--early-cse-memssa",
    "--nary-reassociate"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--deadargelim",
          "--gvn",
          "--aggressive-instcombine",
          "--flattencfg",
          "--inject-tli-mappings",
          "--slsr",
          "--loop-versioning",
          "--loop-unroll",
          "--loop-distribute",
          "--inline",
          "--nary-reassociate",
          "--forceattrs",
          "--lower-guard-intrinsic",
          "--mergefunc",
          "--elim-avail-extern",
          "--partially-inline-libcalls",
          "--slp-vectorizer",
          "--sroa",
          "--correlated-propagation",
          "--mergereturn",
          "--lower-matrix-intrinsics",
          "--strip-dead-prototypes",
          "--mem2reg"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--deadargelim",
      "--gvn",
      "--aggressive-instcombine",
      "--flattencfg",
      "--inject-tli-mappings",
      "--slsr",
      "--loop-versioning",
      "--loop-unroll",
      "--loop-distribute",
      "--inline",
      "--nary-reassociate",
      "--forceattrs",
      "--lower-guard-intrinsic",
      "--mergefunc",
      "--elim-avail-extern",
      "--partially-inline-libcalls",
      "--slp-vectorizer",
      "--sroa",
      "--correlated-propagation",
      "--mergereturn",
      "--lower-matrix-intrinsics",
      "--strip-dead-prototypes",
      "--mem2reg"
    ],
    "performance_vs_Oz": "+0.4%"
  }
}
{
  "program_id": "linux-v0_12269.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 35,
    "onePredOneSuc": 30,
    "onePredTwoSuc": 4,
    "oneSuccessor": 34,
    "twoPred": 8,
    "twoPredOneSuc": 1,
    "twoEach": 2,
    "twoSuccessor": 13,
    "morePreds": 7,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 74,
    "BeginPhi": 0,
    "BranchCount": 45,
    "returnInt": 28,
    "CriticalCount": 8,
    "NumEdges": 74,
    "const32Bit": 173,
    "const64Bit": 7,
    "numConstZeroes": 57,
    "numConstOnes": 65,
    "UncondBranches": 34,
    "binaryConstArg": 23,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 54,
    "NumAndInst": 9,
    "BlockMid": 5,
    "BlockLow": 69,
    "NumBitCastInst": 9,
    "NumBrInst": 45,
    "NumCallInst": 45,
    "NumGetElementPtrInst": 28,
    "NumICmpInst": 11,
    "NumLShrInst": 0,
    "NumLoadInst": 113,
    "NumMulInst": 0,
    "NumOrInst": 9,
    "NumPHIInst": 0,
    "NumRetInst": 24,
    "NumSExtInst": 5,
    "NumSelectInst": 0,
    "NumShlInst": 1,
    "NumStoreInst": 81,
    "NumSubInst": 1,
    "NumTruncInst": 18,
    "NumXorInst": 2,
    "NumZExtInst": 18,
    "TotalBlocks": 74,
    "TotalInsts": 484,
    "TotalMemInst": 321,
    "TotalFuncs": 40,
    "ArgsPhi": 0,
    "testUnary": 221
  },
  "baseline_oz_instcount": 486,
  "knowledge_base_entry": [
    "--gvn",
    "--slp-vectorizer",
    "--mldst-motion",
    "--early-cse-memssa",
    "--instcombine",
    "--early-cse",
    "--loop-instsimplify",
    "--aggressive-instcombine",
    "--flattencfg",
    "--load-store-vectorizer",
    "--mem2reg",
    "--aggressive-instcombine",
    "--lower-constant-intrinsics"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--cross-dso-cfi",
          "--loop-deletion",
          "--aggressive-instcombine",
          "--functionattrs",
          "--dce",
          "--coro-early",
          "-loop-reduce",
          "--scalarizer",
          "--partially-inline-libcalls",
          "--loop-vectorize",
          "--forceattrs",
          "--barrier",
          "--redundant-dbg-inst-elim",
          "--early-cse",
          "--always-inline",
          "--called-value-propagation",
          "--loop-reroll",
          "--reassociate",
          "--load-store-vectorizer",
          "--simple-loop-unswitch",
          "--loop-unroll",
          "--loop-simplifycfg",
          "--loop-rotate",
          "--div-rem-pairs",
          "--licm",
          "--coro-elide",
          "--sink"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+4.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--cross-dso-cfi",
      "--loop-deletion",
      "--aggressive-instcombine",
      "--functionattrs",
      "--dce",
      "--coro-early",
      "-loop-reduce",
      "--scalarizer",
      "--partially-inline-libcalls",
      "--loop-vectorize",
      "--forceattrs",
      "--barrier",
      "--redundant-dbg-inst-elim",
      "--early-cse",
      "--always-inline",
      "--called-value-propagation",
      "--loop-reroll",
      "--reassociate",
      "--load-store-vectorizer",
      "--simple-loop-unswitch",
      "--loop-unroll",
      "--loop-simplifycfg",
      "--loop-rotate",
      "--div-rem-pairs",
      "--licm",
      "--coro-elide",
      "--sink"
    ],
    "performance_vs_Oz": "+4.5%"
  }
}
{
  "program_id": "github-v0_17679.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 52,
    "onePredOneSuc": 34,
    "onePredTwoSuc": 18,
    "oneSuccessor": 43,
    "twoPred": 18,
    "twoPredOneSuc": 9,
    "twoEach": 9,
    "twoSuccessor": 30,
    "morePreds": 3,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 79,
    "BeginPhi": 0,
    "BranchCount": 73,
    "returnInt": 10,
    "CriticalCount": 8,
    "NumEdges": 103,
    "const32Bit": 409,
    "const64Bit": 41,
    "numConstZeroes": 307,
    "numConstOnes": 114,
    "UncondBranches": 43,
    "binaryConstArg": 30,
    "NumAShrInst": 11,
    "NumAddInst": 4,
    "NumAllocaInst": 70,
    "NumAndInst": 11,
    "BlockMid": 17,
    "BlockLow": 62,
    "NumBitCastInst": 14,
    "NumBrInst": 73,
    "NumCallInst": 30,
    "NumGetElementPtrInst": 169,
    "NumICmpInst": 30,
    "NumLShrInst": 2,
    "NumLoadInst": 239,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 6,
    "NumSExtInst": 17,
    "NumSelectInst": 0,
    "NumShlInst": 3,
    "NumStoreInst": 134,
    "NumSubInst": 6,
    "NumTruncInst": 9,
    "NumXorInst": 7,
    "NumZExtInst": 27,
    "TotalBlocks": 79,
    "TotalInsts": 863,
    "TotalMemInst": 642,
    "TotalFuncs": 8,
    "ArgsPhi": 0,
    "testUnary": 377
  },
  "baseline_oz_instcount": 863,
  "knowledge_base_entry": [
    "-loop-reduce",
    "--gvn",
    "--mergefunc",
    "--aggressive-instcombine",
    "--sroa",
    "--globalopt",
    "--instsimplify",
    "--lower-expect",
    "--load-store-vectorizer",
    "--loop-simplifycfg",
    "--memcpyopt",
    "--simplifycfg",
    "--correlated-propagation",
    "--gvn-hoist",
    "--slp-vectorizer"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-predication",
          "--partial-inliner",
          "--ee-instrument",
          "--lower-widenable-condition",
          "--tailcallelim",
          "--correlated-propagation",
          "--ipconstprop",
          "--aggressive-instcombine",
          "-loop-reduce",
          "--lower-expect",
          "--loop-sink",
          "--pgo-memop-opt",
          "--called-value-propagation",
          "--instsimplify",
          "--lowerswitch"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.0%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-predication",
      "--partial-inliner",
      "--ee-instrument",
      "--lower-widenable-condition",
      "--tailcallelim",
      "--correlated-propagation",
      "--ipconstprop",
      "--aggressive-instcombine",
      "-loop-reduce",
      "--lower-expect",
      "--loop-sink",
      "--pgo-memop-opt",
      "--called-value-propagation",
      "--instsimplify",
      "--lowerswitch"
    ],
    "performance_vs_Oz": "+1.0%"
  }
}
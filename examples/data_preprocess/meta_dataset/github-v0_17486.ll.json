{
  "program_id": "github-v0_17486.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 9,
    "onePredOneSuc": 8,
    "onePredTwoSuc": 1,
    "oneSuccessor": 9,
    "twoPred": 1,
    "twoPredOneSuc": 1,
    "twoEach": 0,
    "twoSuccessor": 1,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 12,
    "BeginPhi": 0,
    "BranchCount": 10,
    "returnInt": 0,
    "CriticalCount": 0,
    "NumEdges": 18,
    "const32Bit": 45,
    "const64Bit": 0,
    "numConstZeroes": 7,
    "numConstOnes": 7,
    "UncondBranches": 9,
    "binaryConstArg": 14,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 2,
    "NumAndInst": 9,
    "BlockMid": 1,
    "BlockLow": 11,
    "NumBitCastInst": 0,
    "NumBrInst": 10,
    "NumCallInst": 9,
    "NumGetElementPtrInst": 0,
    "NumICmpInst": 1,
    "NumLShrInst": 1,
    "NumLoadInst": 16,
    "NumMulInst": 0,
    "NumOrInst": 4,
    "NumPHIInst": 0,
    "NumRetInst": 1,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 4,
    "NumStoreInst": 5,
    "NumSubInst": 0,
    "NumTruncInst": 3,
    "NumXorInst": 0,
    "NumZExtInst": 15,
    "TotalBlocks": 12,
    "TotalInsts": 81,
    "TotalMemInst": 32,
    "TotalFuncs": 4,
    "ArgsPhi": 0,
    "testUnary": 36
  },
  "baseline_oz_instcount": 81,
  "knowledge_base_entry": [
    "--gvn-hoist",
    "--newgvn",
    "--aggressive-instcombine",
    "--gvn",
    "--slp-vectorizer",
    "--mem2reg",
    "--aggressive-instcombine",
    "--gvn-hoist",
    "--newgvn",
    "--aggressive-instcombine",
    "--globaldce",
    "--aggressive-instcombine",
    "--lower-constant-intrinsics",
    "--loop-simplifycfg",
    "--memcpyopt"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--forceattrs",
          "--add-discriminators",
          "--loop-rotate",
          "--elim-avail-extern",
          "--loop-sink",
          "--infer-address-spaces",
          "--sink",
          "--constmerge",
          "--simplifycfg",
          "--constprop",
          "--aggressive-instcombine",
          "--lower-matrix-intrinsics",
          "--bdce",
          "--loweratomic",
          "--loop-load-elim",
          "--ipsccp",
          "--cross-dso-cfi",
          "--irce",
          "--loop-data-prefetch",
          "--loop-fusion",
          "--float2int",
          "--correlated-propagation",
          "--pgo-memop-opt",
          "--inferattrs",
          "--coro-split",
          "--strip-nondebug",
          "--instnamer",
          "--load-store-vectorizer"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+7.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--forceattrs",
      "--add-discriminators",
      "--loop-rotate",
      "--elim-avail-extern",
      "--loop-sink",
      "--infer-address-spaces",
      "--sink",
      "--constmerge",
      "--simplifycfg",
      "--constprop",
      "--aggressive-instcombine",
      "--lower-matrix-intrinsics",
      "--bdce",
      "--loweratomic",
      "--loop-load-elim",
      "--ipsccp",
      "--cross-dso-cfi",
      "--irce",
      "--loop-data-prefetch",
      "--loop-fusion",
      "--float2int",
      "--correlated-propagation",
      "--pgo-memop-opt",
      "--inferattrs",
      "--coro-split",
      "--strip-nondebug",
      "--instnamer",
      "--load-store-vectorizer"
    ],
    "performance_vs_Oz": "+7.4%"
  }
}
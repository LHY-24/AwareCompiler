{
  "program_id": "linux-v0_11360.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 4,
    "onePred": 24,
    "onePredOneSuc": 13,
    "onePredTwoSuc": 11,
    "oneSuccessor": 20,
    "twoPred": 11,
    "twoPredOneSuc": 7,
    "twoEach": 4,
    "twoSuccessor": 16,
    "morePreds": 1,
    "BB03Phi": 4,
    "BBHiPhi": 0,
    "BBNoPhi": 41,
    "BeginPhi": 4,
    "BranchCount": 36,
    "returnInt": 4,
    "CriticalCount": 9,
    "NumEdges": 52,
    "const32Bit": 181,
    "const64Bit": 66,
    "numConstZeroes": 137,
    "numConstOnes": 51,
    "UncondBranches": 20,
    "binaryConstArg": 6,
    "NumAShrInst": 0,
    "NumAddInst": 5,
    "NumAllocaInst": 20,
    "NumAndInst": 0,
    "BlockMid": 5,
    "BlockLow": 40,
    "NumBitCastInst": 3,
    "NumBrInst": 36,
    "NumCallInst": 23,
    "NumGetElementPtrInst": 100,
    "NumICmpInst": 16,
    "NumLShrInst": 0,
    "NumLoadInst": 113,
    "NumMulInst": 0,
    "NumOrInst": 2,
    "NumPHIInst": 4,
    "NumRetInst": 9,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 43,
    "NumSubInst": 4,
    "NumTruncInst": 1,
    "NumXorInst": 0,
    "NumZExtInst": 1,
    "TotalBlocks": 45,
    "TotalInsts": 380,
    "TotalMemInst": 299,
    "TotalFuncs": 21,
    "ArgsPhi": 8,
    "testUnary": 138
  },
  "baseline_oz_instcount": 380,
  "knowledge_base_entry": [
    "--aggressive-instcombine",
    "--licm",
    "--elim-avail-extern",
    "--adce",
    "--instsimplify",
    "--sccp",
    "--inline",
    "--aggressive-instcombine",
    "--lower-constant-intrinsics",
    "--mergefunc",
    "--globaldce",
    "--ipsccp",
    "--loop-instsimplify",
    "--lower-constant-intrinsics",
    "--loop-rotate",
    "--sroa",
    "--nary-reassociate",
    "--gvn",
    "--dce",
    "--simplifycfg",
    "--loop-reroll",
    "-loop-reduce",
    "--mergefunc"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--consthoist",
          "--sroa",
          "--indvars",
          "--loop-sink",
          "--simplifycfg",
          "--dce",
          "--early-cse",
          "--aggressive-instcombine",
          "--pgo-memop-opt",
          "--loweratomic",
          "--memcpyopt"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--consthoist",
      "--sroa",
      "--indvars",
      "--loop-sink",
      "--simplifycfg",
      "--dce",
      "--early-cse",
      "--aggressive-instcombine",
      "--pgo-memop-opt",
      "--loweratomic",
      "--memcpyopt"
    ],
    "performance_vs_Oz": "+0.5%"
  }
}
{
  "program_id": "github-v0_42511.ll",
  "autophase_features": {
    "BBNumArgsHi": 1,
    "BBNumArgsLo": 1,
    "onePred": 1,
    "onePredOneSuc": 1,
    "onePredTwoSuc": 0,
    "oneSuccessor": 1,
    "twoPred": 2,
    "twoPredOneSuc": 0,
    "twoEach": 1,
    "twoSuccessor": 2,
    "morePreds": 0,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 2,
    "BeginPhi": 2,
    "BranchCount": 3,
    "returnInt": 7,
    "CriticalCount": 3,
    "NumEdges": 5,
    "const32Bit": 30,
    "const64Bit": 47,
    "numConstZeroes": 5,
    "numConstOnes": 6,
    "UncondBranches": 1,
    "binaryConstArg": 67,
    "NumAShrInst": 16,
    "NumAddInst": 24,
    "NumAllocaInst": 0,
    "NumAndInst": 0,
    "BlockMid": 2,
    "BlockLow": 2,
    "NumBitCastInst": 4,
    "NumBrInst": 3,
    "NumCallInst": 25,
    "NumGetElementPtrInst": 37,
    "NumICmpInst": 2,
    "NumLShrInst": 0,
    "NumLoadInst": 34,
    "NumMulInst": 4,
    "NumOrInst": 15,
    "NumPHIInst": 4,
    "NumRetInst": 1,
    "NumSExtInst": 19,
    "NumSelectInst": 0,
    "NumShlInst": 20,
    "NumStoreInst": 3,
    "NumSubInst": 0,
    "NumTruncInst": 4,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 4,
    "TotalInsts": 215,
    "TotalMemInst": 99,
    "TotalFuncs": 7,
    "ArgsPhi": 8,
    "testUnary": 61
  },
  "baseline_oz_instcount": 208,
  "knowledge_base_entry": [
    "--licm",
    "--instcombine",
    "--loop-reroll",
    "--lower-constant-intrinsics",
    "--simplifycfg",
    "--load-store-vectorizer",
    "--newgvn",
    "--globalopt",
    "--instsimplify",
    "--die",
    "--mem2reg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--inject-tli-mappings",
          "--instcombine",
          "--slsr",
          "--sink",
          "--loop-versioning",
          "--early-cse-memssa",
          "--coro-split",
          "--slp-vectorizer",
          "--gvn",
          "--strip-debug-declare"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--inject-tli-mappings",
      "--instcombine",
      "--slsr",
      "--sink",
      "--loop-versioning",
      "--early-cse-memssa",
      "--coro-split",
      "--slp-vectorizer",
      "--gvn",
      "--strip-debug-declare"
    ],
    "performance_vs_Oz": "+3.8%"
  }
}
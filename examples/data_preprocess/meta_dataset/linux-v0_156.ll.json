{
  "program_id": "linux-v0_156.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 70,
    "onePredOneSuc": 36,
    "onePredTwoSuc": 33,
    "oneSuccessor": 50,
    "twoPred": 24,
    "twoPredOneSuc": 10,
    "twoEach": 11,
    "twoSuccessor": 54,
    "morePreds": 10,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 122,
    "BeginPhi": 0,
    "BranchCount": 104,
    "returnInt": 18,
    "CriticalCount": 41,
    "NumEdges": 158,
    "const32Bit": 321,
    "const64Bit": 47,
    "numConstZeroes": 159,
    "numConstOnes": 129,
    "UncondBranches": 50,
    "binaryConstArg": 40,
    "NumAShrInst": 2,
    "NumAddInst": 18,
    "NumAllocaInst": 84,
    "NumAndInst": 18,
    "BlockMid": 19,
    "BlockLow": 103,
    "NumBitCastInst": 13,
    "NumBrInst": 104,
    "NumCallInst": 40,
    "NumGetElementPtrInst": 108,
    "NumICmpInst": 54,
    "NumLShrInst": 4,
    "NumLoadInst": 306,
    "NumMulInst": 0,
    "NumOrInst": 3,
    "NumPHIInst": 0,
    "NumRetInst": 18,
    "NumSExtInst": 28,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 132,
    "NumSubInst": 10,
    "NumTruncInst": 3,
    "NumXorInst": 0,
    "NumZExtInst": 40,
    "TotalBlocks": 122,
    "TotalInsts": 992,
    "TotalMemInst": 670,
    "TotalFuncs": 34,
    "ArgsPhi": 0,
    "testUnary": 479
  },
  "baseline_oz_instcount": 995,
  "knowledge_base_entry": [
    "--loweratomic",
    "--aggressive-instcombine",
    "--bdce",
    "--lower-expect",
    "--correlated-propagation",
    "--simplifycfg",
    "--prune-eh",
    "--lower-constant-intrinsics",
    "--reassociate",
    "--mem2reg",
    "--early-cse-memssa"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--jump-threading",
          "--globaldce",
          "--inline",
          "--gvn-hoist",
          "--strip-dead-prototypes",
          "--globalsplit",
          "--alignment-from-assumptions",
          "--div-rem-pairs",
          "--newgvn",
          "--instsimplify"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--jump-threading",
      "--globaldce",
      "--inline",
      "--gvn-hoist",
      "--strip-dead-prototypes",
      "--globalsplit",
      "--alignment-from-assumptions",
      "--div-rem-pairs",
      "--newgvn",
      "--instsimplify"
    ],
    "performance_vs_Oz": "+0.3%"
  }
}
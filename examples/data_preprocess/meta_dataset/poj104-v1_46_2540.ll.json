{
  "program_id": "poj104-v1_46_2540.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 32,
    "onePredOneSuc": 26,
    "onePredTwoSuc": 4,
    "oneSuccessor": 27,
    "twoPred": 8,
    "twoPredOneSuc": 0,
    "twoEach": 7,
    "twoSuccessor": 13,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 50,
    "BeginPhi": 0,
    "BranchCount": 40,
    "returnInt": 3,
    "CriticalCount": 1,
    "NumEdges": 53,
    "const32Bit": 47,
    "const64Bit": 27,
    "numConstZeroes": 21,
    "numConstOnes": 31,
    "UncondBranches": 27,
    "binaryConstArg": 17,
    "NumAShrInst": 0,
    "NumAddInst": 15,
    "NumAllocaInst": 18,
    "NumAndInst": 0,
    "BlockMid": 6,
    "BlockLow": 44,
    "NumBitCastInst": 19,
    "NumBrInst": 40,
    "NumCallInst": 38,
    "NumGetElementPtrInst": 17,
    "NumICmpInst": 13,
    "NumLShrInst": 0,
    "NumLoadInst": 81,
    "NumMulInst": 1,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 9,
    "NumSExtInst": 10,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 34,
    "NumSubInst": 8,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 1,
    "TotalBlocks": 50,
    "TotalInsts": 305,
    "TotalMemInst": 188,
    "TotalFuncs": 20,
    "ArgsPhi": 0,
    "testUnary": 129
  },
  "baseline_oz_instcount": 171,
  "knowledge_base_entry": [
    "--loop-guard-widening",
    "--newgvn",
    "--early-cse",
    "--slsr",
    "--jump-threading",
    "--early-cse",
    "--instcombine",
    "--ipsccp",
    "--jump-threading",
    "--dse",
    "--elim-avail-extern",
    "--mergefunc",
    "--flattencfg",
    "--ipsccp",
    "--adce",
    "--mem2reg",
    "--slp-vectorizer",
    "--jump-threading",
    "--newgvn",
    "--sccp",
    "--die",
    "--load-store-vectorizer",
    "--loop-fusion",
    "--simplifycfg",
    "--nary-reassociate",
    "--early-cse-memssa",
    "--elim-avail-extern",
    "--inline"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--always-inline",
          "--irce",
          "--scalarizer",
          "--sink",
          "--pgo-memop-opt",
          "--slp-vectorizer",
          "--sroa",
          "--instcombine",
          "--float2int",
          "--forceattrs",
          "--barrier",
          "--mldst-motion",
          "--coro-cleanup",
          "--elim-avail-extern",
          "--loop-versioning-licm",
          "--correlated-propagation",
          "--cross-dso-cfi",
          "--called-value-propagation",
          "--mergefunc"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--always-inline",
      "--irce",
      "--scalarizer",
      "--sink",
      "--pgo-memop-opt",
      "--slp-vectorizer",
      "--sroa",
      "--instcombine",
      "--float2int",
      "--forceattrs",
      "--barrier",
      "--mldst-motion",
      "--coro-cleanup",
      "--elim-avail-extern",
      "--loop-versioning-licm",
      "--correlated-propagation",
      "--cross-dso-cfi",
      "--called-value-propagation",
      "--mergefunc"
    ],
    "performance_vs_Oz": "+1.8%"
  }
}
{
  "program_id": "github-v0_18805.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 15,
    "onePredOneSuc": 10,
    "onePredTwoSuc": 2,
    "oneSuccessor": 13,
    "twoPred": 6,
    "twoPredOneSuc": 2,
    "twoEach": 4,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 24,
    "BeginPhi": 0,
    "BranchCount": 20,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 27,
    "const32Bit": 32,
    "const64Bit": 32,
    "numConstZeroes": 40,
    "numConstOnes": 18,
    "UncondBranches": 13,
    "binaryConstArg": 6,
    "NumAShrInst": 0,
    "NumAddInst": 8,
    "NumAllocaInst": 12,
    "NumAndInst": 0,
    "BlockMid": 3,
    "BlockLow": 21,
    "NumBitCastInst": 0,
    "NumBrInst": 20,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 22,
    "NumICmpInst": 7,
    "NumLShrInst": 0,
    "NumLoadInst": 35,
    "NumMulInst": 1,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 19,
    "NumSubInst": 1,
    "NumTruncInst": 8,
    "NumXorInst": 0,
    "NumZExtInst": 21,
    "TotalBlocks": 24,
    "TotalInsts": 168,
    "TotalMemInst": 95,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 79
  },
  "baseline_oz_instcount": 168,
  "knowledge_base_entry": [
    "--load-store-vectorizer",
    "--aggressive-instcombine",
    "--sroa",
    "--flattencfg",
    "--simplifycfg",
    "--die",
    "--dse",
    "--newgvn",
    "--gvn-hoist",
    "--reassociate",
    "--sccp",
    "--die"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--ipconstprop",
          "--loop-vectorize",
          "--constmerge",
          "--pgo-memop-opt",
          "--add-discriminators",
          "--coro-split",
          "--loop-reroll",
          "--loop-fusion",
          "--aggressive-instcombine",
          "--hotcoldsplit",
          "--instsimplify",
          "--mergereturn",
          "--strip-debug-declare",
          "--infer-address-spaces",
          "--loop-unroll",
          "--lower-expect",
          "--name-anon-globals",
          "--irce",
          "--rewrite-statepoints-for-gc",
          "--reassociate",
          "--separate-const-offset-from-gep",
          "--constprop",
          "--loop-deletion",
          "--tailcallelim",
          "--speculative-execution",
          "--loop-predication",
          "--insert-gcov-profiling"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+10.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--ipconstprop",
      "--loop-vectorize",
      "--constmerge",
      "--pgo-memop-opt",
      "--add-discriminators",
      "--coro-split",
      "--loop-reroll",
      "--loop-fusion",
      "--aggressive-instcombine",
      "--hotcoldsplit",
      "--instsimplify",
      "--mergereturn",
      "--strip-debug-declare",
      "--infer-address-spaces",
      "--loop-unroll",
      "--lower-expect",
      "--name-anon-globals",
      "--irce",
      "--rewrite-statepoints-for-gc",
      "--reassociate",
      "--separate-const-offset-from-gep",
      "--constprop",
      "--loop-deletion",
      "--tailcallelim",
      "--speculative-execution",
      "--loop-predication",
      "--insert-gcov-profiling"
    ],
    "performance_vs_Oz": "+10.7%"
  }
}
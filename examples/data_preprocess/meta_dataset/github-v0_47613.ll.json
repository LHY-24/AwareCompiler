{
  "program_id": "github-v0_47613.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 32,
    "onePredOneSuc": 17,
    "onePredTwoSuc": 9,
    "oneSuccessor": 32,
    "twoPred": 16,
    "twoPredOneSuc": 10,
    "twoEach": 6,
    "twoSuccessor": 16,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 57,
    "BeginPhi": 0,
    "BranchCount": 48,
    "returnInt": 5,
    "CriticalCount": 5,
    "NumEdges": 64,
    "const32Bit": 49,
    "const64Bit": 20,
    "numConstZeroes": 22,
    "numConstOnes": 23,
    "UncondBranches": 32,
    "binaryConstArg": 11,
    "NumAShrInst": 0,
    "NumAddInst": 12,
    "NumAllocaInst": 14,
    "NumAndInst": 1,
    "BlockMid": 2,
    "BlockLow": 55,
    "NumBitCastInst": 0,
    "NumBrInst": 48,
    "NumCallInst": 22,
    "NumGetElementPtrInst": 13,
    "NumICmpInst": 16,
    "NumLShrInst": 0,
    "NumLoadInst": 66,
    "NumMulInst": 1,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 4,
    "NumSExtInst": 10,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 35,
    "NumSubInst": 0,
    "NumTruncInst": 5,
    "NumXorInst": 0,
    "NumZExtInst": 7,
    "TotalBlocks": 57,
    "TotalInsts": 262,
    "TotalMemInst": 150,
    "TotalFuncs": 10,
    "ArgsPhi": 0,
    "testUnary": 104
  },
  "baseline_oz_instcount": 257,
  "knowledge_base_entry": [
    "--globaldce",
    "--aggressive-instcombine",
    "--globalopt",
    "--sccp",
    "--bdce",
    "--early-cse",
    "--mem2reg",
    "--lower-constant-intrinsics",
    "--early-cse-memssa",
    "--aggressive-instcombine",
    "--loop-simplifycfg",
    "--die",
    "--loop-simplifycfg",
    "--memcpyopt",
    "--gvn"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--jump-threading",
          "--lower-matrix-intrinsics",
          "--partially-inline-libcalls",
          "--canonicalize-aliases",
          "--strip-nondebug",
          "--lower-guard-intrinsic",
          "--loop-instsimplify",
          "--partial-inliner",
          "--ipsccp",
          "--constprop",
          "--newgvn",
          "--aggressive-instcombine",
          "--mldst-motion",
          "--guard-widening",
          "--post-inline-ee-instrument",
          "--bdce",
          "--loop-interchange",
          "--slp-vectorizer",
          "--loop-unroll",
          "--load-store-vectorizer",
          "--loop-unroll-and-jam",
          "--mergeicmps",
          "--div-rem-pairs",
          "--cross-dso-cfi",
          "--coro-cleanup",
          "--alignment-from-assumptions",
          "--argpromotion",
          "--deadargelim",
          "--strip-debug-declare",
          "--dce"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--jump-threading",
      "--lower-matrix-intrinsics",
      "--partially-inline-libcalls",
      "--canonicalize-aliases",
      "--strip-nondebug",
      "--lower-guard-intrinsic",
      "--loop-instsimplify",
      "--partial-inliner",
      "--ipsccp",
      "--constprop",
      "--newgvn",
      "--aggressive-instcombine",
      "--mldst-motion",
      "--guard-widening",
      "--post-inline-ee-instrument",
      "--bdce",
      "--loop-interchange",
      "--slp-vectorizer",
      "--loop-unroll",
      "--load-store-vectorizer",
      "--loop-unroll-and-jam",
      "--mergeicmps",
      "--div-rem-pairs",
      "--cross-dso-cfi",
      "--coro-cleanup",
      "--alignment-from-assumptions",
      "--argpromotion",
      "--deadargelim",
      "--strip-debug-declare",
      "--dce"
    ],
    "performance_vs_Oz": "+1.9%"
  }
}
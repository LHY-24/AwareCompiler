{
  "program_id": "linux-v0_10013.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 3,
    "onePred": 43,
    "onePredOneSuc": 30,
    "onePredTwoSuc": 13,
    "oneSuccessor": 34,
    "twoPred": 11,
    "twoPredOneSuc": 4,
    "twoEach": 2,
    "twoSuccessor": 24,
    "morePreds": 4,
    "BB03Phi": 3,
    "BBHiPhi": 0,
    "BBNoPhi": 78,
    "BeginPhi": 3,
    "BranchCount": 58,
    "returnInt": 25,
    "CriticalCount": 7,
    "NumEdges": 82,
    "const32Bit": 224,
    "const64Bit": 9,
    "numConstZeroes": 88,
    "numConstOnes": 98,
    "UncondBranches": 34,
    "binaryConstArg": 5,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 84,
    "NumAndInst": 1,
    "BlockMid": 8,
    "BlockLow": 73,
    "NumBitCastInst": 20,
    "NumBrInst": 58,
    "NumCallInst": 47,
    "NumGetElementPtrInst": 55,
    "NumICmpInst": 25,
    "NumLShrInst": 0,
    "NumLoadInst": 156,
    "NumMulInst": 0,
    "NumOrInst": 2,
    "NumPHIInst": 3,
    "NumRetInst": 23,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 110,
    "NumSubInst": 0,
    "NumTruncInst": 3,
    "NumXorInst": 2,
    "NumZExtInst": 5,
    "TotalBlocks": 81,
    "TotalInsts": 600,
    "TotalMemInst": 452,
    "TotalFuncs": 41,
    "ArgsPhi": 6,
    "testUnary": 273
  },
  "baseline_oz_instcount": 600,
  "knowledge_base_entry": [
    "--dse",
    "--sccp",
    "--instcombine",
    "--lower-constant-intrinsics",
    "--early-cse",
    "--lower-expect",
    "--loop-instsimplify",
    "--load-store-vectorizer",
    "--nary-reassociate",
    "--lower-expect",
    "--instcombine",
    "--slp-vectorizer",
    "--simplifycfg",
    "--aggressive-instcombine",
    "--jump-threading",
    "--early-cse",
    "--load-store-vectorizer",
    "--elim-avail-extern"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--load-store-vectorizer",
          "--mergereturn",
          "--ipconstprop",
          "--lower-matrix-intrinsics",
          "--dce",
          "--partial-inliner",
          "--attributor",
          "--prune-eh",
          "--adce",
          "--indvars",
          "--newgvn",
          "--instsimplify",
          "--aggressive-instcombine",
          "--loop-predication",
          "--strip-nondebug",
          "--loop-simplifycfg",
          "--simplifycfg",
          "--lower-expect",
          "--memcpyopt",
          "--called-value-propagation",
          "--strip-dead-prototypes",
          "--post-inline-ee-instrument"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--load-store-vectorizer",
      "--mergereturn",
      "--ipconstprop",
      "--lower-matrix-intrinsics",
      "--dce",
      "--partial-inliner",
      "--attributor",
      "--prune-eh",
      "--adce",
      "--indvars",
      "--newgvn",
      "--instsimplify",
      "--aggressive-instcombine",
      "--loop-predication",
      "--strip-nondebug",
      "--loop-simplifycfg",
      "--simplifycfg",
      "--lower-expect",
      "--memcpyopt",
      "--called-value-propagation",
      "--strip-dead-prototypes",
      "--post-inline-ee-instrument"
    ],
    "performance_vs_Oz": "+0.3%"
  }
}
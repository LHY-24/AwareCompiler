{
  "program_id": "github-v0_40571.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 19,
    "onePredOneSuc": 12,
    "onePredTwoSuc": 5,
    "oneSuccessor": 17,
    "twoPred": 8,
    "twoPredOneSuc": 5,
    "twoEach": 2,
    "twoSuccessor": 9,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 30,
    "BeginPhi": 0,
    "BranchCount": 26,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 35,
    "const32Bit": 55,
    "const64Bit": 124,
    "numConstZeroes": 114,
    "numConstOnes": 42,
    "UncondBranches": 17,
    "binaryConstArg": 24,
    "NumAShrInst": 0,
    "NumAddInst": 3,
    "NumAllocaInst": 16,
    "NumAndInst": 9,
    "BlockMid": 7,
    "BlockLow": 23,
    "NumBitCastInst": 28,
    "NumBrInst": 26,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 79,
    "NumICmpInst": 9,
    "NumLShrInst": 8,
    "NumLoadInst": 52,
    "NumMulInst": 0,
    "NumOrInst": 4,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 3,
    "NumStoreInst": 38,
    "NumSubInst": 0,
    "NumTruncInst": 5,
    "NumXorInst": 1,
    "NumZExtInst": 4,
    "TotalBlocks": 30,
    "TotalInsts": 299,
    "TotalMemInst": 192,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 108
  },
  "baseline_oz_instcount": 299,
  "knowledge_base_entry": [
    "--reg2mem",
    "--gvn-hoist",
    "--loop-reroll",
    "--load-store-vectorizer",
    "--aggressive-instcombine",
    "--elim-avail-extern",
    "--simplifycfg",
    "--slsr",
    "--early-cse",
    "--instsimplify",
    "--load-store-vectorizer",
    "--simplifycfg",
    "--load-store-vectorizer",
    "--simplifycfg",
    "--jump-threading",
    "-loop-reduce",
    "--slsr",
    "--newgvn",
    "--indvars",
    "--instcombine",
    "--lower-constant-intrinsics",
    "--globalopt",
    "--early-cse-memssa"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-predication",
          "--lowerinvoke",
          "--simplifycfg",
          "--ipsccp",
          "--mldst-motion",
          "--lcssa",
          "--rpo-functionattrs",
          "--flattencfg",
          "--loop-idiom",
          "--partially-inline-libcalls",
          "--ee-instrument",
          "--gvn-hoist",
          "--aggressive-instcombine",
          "--rewrite-statepoints-for-gc",
          "--mem2reg",
          "--sancov",
          "--nary-reassociate",
          "--inject-tli-mappings",
          "--loop-versioning-licm",
          "--instsimplify",
          "--libcalls-shrinkwrap",
          "--lower-constant-intrinsics",
          "--partial-inliner",
          "--correlated-propagation",
          "--canonicalize-aliases",
          "--lowerswitch",
          "--dse",
          "--instcombine",
          "--functionattrs"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-predication",
      "--lowerinvoke",
      "--simplifycfg",
      "--ipsccp",
      "--mldst-motion",
      "--lcssa",
      "--rpo-functionattrs",
      "--flattencfg",
      "--loop-idiom",
      "--partially-inline-libcalls",
      "--ee-instrument",
      "--gvn-hoist",
      "--aggressive-instcombine",
      "--rewrite-statepoints-for-gc",
      "--mem2reg",
      "--sancov",
      "--nary-reassociate",
      "--inject-tli-mappings",
      "--loop-versioning-licm",
      "--instsimplify",
      "--libcalls-shrinkwrap",
      "--lower-constant-intrinsics",
      "--partial-inliner",
      "--correlated-propagation",
      "--canonicalize-aliases",
      "--lowerswitch",
      "--dse",
      "--instcombine",
      "--functionattrs"
    ],
    "performance_vs_Oz": "+2.7%"
  }
}
{
  "program_id": "linux-v0_2762.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 34,
    "onePredOneSuc": 24,
    "onePredTwoSuc": 8,
    "oneSuccessor": 31,
    "twoPred": 15,
    "twoPredOneSuc": 3,
    "twoEach": 7,
    "twoSuccessor": 21,
    "morePreds": 3,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 73,
    "BeginPhi": 0,
    "BranchCount": 52,
    "returnInt": 5,
    "CriticalCount": 18,
    "NumEdges": 73,
    "const32Bit": 418,
    "const64Bit": 31,
    "numConstZeroes": 207,
    "numConstOnes": 114,
    "UncondBranches": 31,
    "binaryConstArg": 30,
    "NumAShrInst": 3,
    "NumAddInst": 3,
    "NumAllocaInst": 96,
    "NumAndInst": 17,
    "BlockMid": 25,
    "BlockLow": 48,
    "NumBitCastInst": 19,
    "NumBrInst": 52,
    "NumCallInst": 71,
    "NumGetElementPtrInst": 139,
    "NumICmpInst": 20,
    "NumLShrInst": 0,
    "NumLoadInst": 235,
    "NumMulInst": 1,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 21,
    "NumSExtInst": 1,
    "NumSelectInst": 2,
    "NumShlInst": 4,
    "NumStoreInst": 118,
    "NumSubInst": 2,
    "NumTruncInst": 15,
    "NumXorInst": 1,
    "NumZExtInst": 14,
    "TotalBlocks": 73,
    "TotalInsts": 836,
    "TotalMemInst": 659,
    "TotalFuncs": 59,
    "ArgsPhi": 0,
    "testUnary": 380
  },
  "baseline_oz_instcount": 825,
  "knowledge_base_entry": [
    "--licm",
    "--flattencfg",
    "--inline",
    "--instcombine",
    "--flattencfg",
    "--adce",
    "--ipsccp",
    "--die",
    "--die",
    "--sccp",
    "--dce",
    "--dse",
    "--lower-constant-intrinsics",
    "--adce",
    "--aggressive-instcombine",
    "--globaldce",
    "--mergefunc",
    "--reassociate",
    "--jump-threading",
    "--flattencfg",
    "--ipsccp",
    "--newgvn",
    "--adce",
    "--lower-expect",
    "--early-cse-memssa",
    "--memcpyopt",
    "--elim-avail-extern",
    "--simplifycfg",
    "--elim-avail-extern",
    "--instcombine",
    "--slsr"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--mldst-motion",
          "--early-cse-memssa",
          "--sroa",
          "--instsimplify",
          "--mergereturn",
          "--dse",
          "--loop-sink",
          "--newgvn",
          "--loop-interchange",
          "--loop-vectorize",
          "--sancov",
          "--globalopt",
          "--globalsplit",
          "--hotcoldsplit",
          "--libcalls-shrinkwrap",
          "--early-cse",
          "--gvn-hoist",
          "--div-rem-pairs",
          "--constmerge",
          "--aggressive-instcombine",
          "--loop-versioning-licm",
          "--flattencfg",
          "--sccp"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--mldst-motion",
      "--early-cse-memssa",
      "--sroa",
      "--instsimplify",
      "--mergereturn",
      "--dse",
      "--loop-sink",
      "--newgvn",
      "--loop-interchange",
      "--loop-vectorize",
      "--sancov",
      "--globalopt",
      "--globalsplit",
      "--hotcoldsplit",
      "--libcalls-shrinkwrap",
      "--early-cse",
      "--gvn-hoist",
      "--div-rem-pairs",
      "--constmerge",
      "--aggressive-instcombine",
      "--loop-versioning-licm",
      "--flattencfg",
      "--sccp"
    ],
    "performance_vs_Oz": "+0.5%"
  }
}
{
  "program_id": "github-v0_9726.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 4,
    "onePred": 4,
    "onePredOneSuc": 2,
    "onePredTwoSuc": 2,
    "oneSuccessor": 4,
    "twoPred": 5,
    "twoPredOneSuc": 2,
    "twoEach": 2,
    "twoSuccessor": 5,
    "morePreds": 0,
    "BB03Phi": 4,
    "BBHiPhi": 0,
    "BBNoPhi": 6,
    "BeginPhi": 4,
    "BranchCount": 9,
    "returnInt": 4,
    "CriticalCount": 6,
    "NumEdges": 14,
    "const32Bit": 17,
    "const64Bit": 5,
    "numConstZeroes": 13,
    "numConstOnes": 5,
    "UncondBranches": 4,
    "binaryConstArg": 5,
    "NumAShrInst": 0,
    "NumAddInst": 3,
    "NumAllocaInst": 0,
    "NumAndInst": 0,
    "BlockMid": 2,
    "BlockLow": 8,
    "NumBitCastInst": 0,
    "NumBrInst": 9,
    "NumCallInst": 20,
    "NumGetElementPtrInst": 4,
    "NumICmpInst": 3,
    "NumLShrInst": 0,
    "NumLoadInst": 3,
    "NumMulInst": 2,
    "NumOrInst": 1,
    "NumPHIInst": 6,
    "NumRetInst": 1,
    "NumSExtInst": 1,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 1,
    "NumSubInst": 1,
    "NumTruncInst": 3,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 10,
    "TotalInsts": 89,
    "TotalMemInst": 28,
    "TotalFuncs": 8,
    "ArgsPhi": 12,
    "testUnary": 15
  },
  "baseline_oz_instcount": 91,
  "knowledge_base_entry": [
    "--loop-unroll-and-jam",
    "--instcombine",
    "--bdce",
    "--sroa",
    "--nary-reassociate",
    "-loop-reduce",
    "--jump-threading",
    "--newgvn",
    "--memcpyopt",
    "--instsimplify",
    "--dse",
    "--ipsccp",
    "--lower-constant-intrinsics",
    "--die",
    "--lower-constant-intrinsics",
    "--simplifycfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--functionattrs",
          "--simple-loop-unswitch",
          "--float2int",
          "--gvn-hoist",
          "--nary-reassociate",
          "--strip-dead-prototypes",
          "--loop-predication",
          "--die",
          "--mergeicmps",
          "--partial-inliner",
          "--loop-vectorize",
          "--globalsplit",
          "--strip-nondebug",
          "--lower-expect",
          "--newgvn",
          "--loop-data-prefetch",
          "--lower-guard-intrinsic",
          "--called-value-propagation",
          "--name-anon-globals",
          "--sancov",
          "--coro-early",
          "--scalarizer",
          "--insert-gcov-profiling",
          "--loop-instsimplify",
          "--jump-threading",
          "--coro-elide",
          "--prune-eh",
          "--pgo-memop-opt",
          "--early-cse",
          "--sink"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+5.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--functionattrs",
      "--simple-loop-unswitch",
      "--float2int",
      "--gvn-hoist",
      "--nary-reassociate",
      "--strip-dead-prototypes",
      "--loop-predication",
      "--die",
      "--mergeicmps",
      "--partial-inliner",
      "--loop-vectorize",
      "--globalsplit",
      "--strip-nondebug",
      "--lower-expect",
      "--newgvn",
      "--loop-data-prefetch",
      "--lower-guard-intrinsic",
      "--called-value-propagation",
      "--name-anon-globals",
      "--sancov",
      "--coro-early",
      "--scalarizer",
      "--insert-gcov-profiling",
      "--loop-instsimplify",
      "--jump-threading",
      "--coro-elide",
      "--prune-eh",
      "--pgo-memop-opt",
      "--early-cse",
      "--sink"
    ],
    "performance_vs_Oz": "+5.5%"
  }
}
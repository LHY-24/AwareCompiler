{
  "program_id": "github-v0_36117.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 22,
    "onePredOneSuc": 17,
    "onePredTwoSuc": 3,
    "oneSuccessor": 22,
    "twoPred": 11,
    "twoPredOneSuc": 4,
    "twoEach": 6,
    "twoSuccessor": 11,
    "morePreds": 0,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 36,
    "BeginPhi": 1,
    "BranchCount": 33,
    "returnInt": 0,
    "CriticalCount": 5,
    "NumEdges": 44,
    "const32Bit": 142,
    "const64Bit": 84,
    "numConstZeroes": 132,
    "numConstOnes": 50,
    "UncondBranches": 22,
    "binaryConstArg": 47,
    "NumAShrInst": 0,
    "NumAddInst": 16,
    "NumAllocaInst": 12,
    "NumAndInst": 15,
    "BlockMid": 9,
    "BlockLow": 28,
    "NumBitCastInst": 1,
    "NumBrInst": 33,
    "NumCallInst": 3,
    "NumGetElementPtrInst": 85,
    "NumICmpInst": 11,
    "NumLShrInst": 8,
    "NumLoadInst": 141,
    "NumMulInst": 3,
    "NumOrInst": 3,
    "NumPHIInst": 1,
    "NumRetInst": 4,
    "NumSExtInst": 21,
    "NumSelectInst": 0,
    "NumShlInst": 2,
    "NumStoreInst": 48,
    "NumSubInst": 7,
    "NumTruncInst": 13,
    "NumXorInst": 15,
    "NumZExtInst": 20,
    "TotalBlocks": 37,
    "TotalInsts": 462,
    "TotalMemInst": 289,
    "TotalFuncs": 5,
    "ArgsPhi": 2,
    "testUnary": 208
  },
  "baseline_oz_instcount": 462,
  "knowledge_base_entry": [
    "--loop-reroll",
    "--simplifycfg",
    "--loop-instsimplify",
    "--gvn",
    "--aggressive-instcombine",
    "--bdce",
    "--lower-expect",
    "--globalopt",
    "--mem2reg",
    "--sccp",
    "--simplifycfg",
    "--loop-rotate"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--rpo-functionattrs",
          "--tailcallelim",
          "--functionattrs",
          "--scalarizer",
          "--reassociate",
          "--loop-versioning-licm",
          "--aggressive-instcombine",
          "--lower-constant-intrinsics",
          "--cross-dso-cfi",
          "--loop-unroll-and-jam",
          "--constprop",
          "--lower-matrix-intrinsics",
          "--inline",
          "--slp-vectorizer",
          "--instcombine",
          "--ee-instrument",
          "--inferattrs",
          "--slsr",
          "--attributor",
          "--loop-unroll",
          "--forceattrs"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--rpo-functionattrs",
      "--tailcallelim",
      "--functionattrs",
      "--scalarizer",
      "--reassociate",
      "--loop-versioning-licm",
      "--aggressive-instcombine",
      "--lower-constant-intrinsics",
      "--cross-dso-cfi",
      "--loop-unroll-and-jam",
      "--constprop",
      "--lower-matrix-intrinsics",
      "--inline",
      "--slp-vectorizer",
      "--instcombine",
      "--ee-instrument",
      "--inferattrs",
      "--slsr",
      "--attributor",
      "--loop-unroll",
      "--forceattrs"
    ],
    "performance_vs_Oz": "+3.7%"
  }
}
{
  "program_id": "linux-v0_3030.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 34,
    "onePredOneSuc": 24,
    "onePredTwoSuc": 10,
    "oneSuccessor": 29,
    "twoPred": 8,
    "twoPredOneSuc": 3,
    "twoEach": 2,
    "twoSuccessor": 17,
    "morePreds": 4,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 66,
    "BeginPhi": 0,
    "BranchCount": 46,
    "returnInt": 23,
    "CriticalCount": 5,
    "NumEdges": 63,
    "const32Bit": 142,
    "const64Bit": 22,
    "numConstZeroes": 65,
    "numConstOnes": 65,
    "UncondBranches": 29,
    "binaryConstArg": 12,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 52,
    "NumAndInst": 3,
    "BlockMid": 7,
    "BlockLow": 59,
    "NumBitCastInst": 10,
    "NumBrInst": 46,
    "NumCallInst": 45,
    "NumGetElementPtrInst": 39,
    "NumICmpInst": 18,
    "NumLShrInst": 1,
    "NumLoadInst": 119,
    "NumMulInst": 1,
    "NumOrInst": 4,
    "NumPHIInst": 0,
    "NumRetInst": 20,
    "NumSExtInst": 4,
    "NumSelectInst": 1,
    "NumShlInst": 3,
    "NumStoreInst": 73,
    "NumSubInst": 0,
    "NumTruncInst": 3,
    "NumXorInst": 2,
    "NumZExtInst": 5,
    "TotalBlocks": 66,
    "TotalInsts": 455,
    "TotalMemInst": 328,
    "TotalFuncs": 37,
    "ArgsPhi": 0,
    "testUnary": 197
  },
  "baseline_oz_instcount": 455,
  "knowledge_base_entry": [
    "--dce",
    "--aggressive-instcombine",
    "--lower-constant-intrinsics",
    "--mergefunc",
    "--loop-reroll",
    "--slsr",
    "--instcombine",
    "--loop-simplifycfg",
    "--loop-instsimplify",
    "--gvn-hoist",
    "--bdce",
    "--jump-threading",
    "--simplifycfg",
    "--loop-reroll",
    "--gvn",
    "--licm",
    "--die",
    "--lower-expect",
    "--sccp",
    "--instsimplify",
    "--aggressive-instcombine",
    "--loop-rotate"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--infer-address-spaces",
          "--strip",
          "--load-store-vectorizer",
          "--canonicalize-aliases",
          "--guard-widening",
          "--loop-predication",
          "--add-discriminators",
          "--dse",
          "--reassociate",
          "--name-anon-globals",
          "--loop-reroll",
          "--pgo-memop-opt",
          "--aggressive-instcombine",
          "--loop-fusion",
          "--slp-vectorizer",
          "--mldst-motion",
          "--lcssa",
          "--strip-nondebug",
          "--loop-versioning",
          "--sccp",
          "--loop-rotate",
          "--sink",
          "--loop-load-elim",
          "--strip-debug-declare",
          "--memcpyopt",
          "--die",
          "--indvars",
          "--coro-elide",
          "--always-inline"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--infer-address-spaces",
      "--strip",
      "--load-store-vectorizer",
      "--canonicalize-aliases",
      "--guard-widening",
      "--loop-predication",
      "--add-discriminators",
      "--dse",
      "--reassociate",
      "--name-anon-globals",
      "--loop-reroll",
      "--pgo-memop-opt",
      "--aggressive-instcombine",
      "--loop-fusion",
      "--slp-vectorizer",
      "--mldst-motion",
      "--lcssa",
      "--strip-nondebug",
      "--loop-versioning",
      "--sccp",
      "--loop-rotate",
      "--sink",
      "--loop-load-elim",
      "--strip-debug-declare",
      "--memcpyopt",
      "--die",
      "--indvars",
      "--coro-elide",
      "--always-inline"
    ],
    "performance_vs_Oz": "+0.9%"
  }
}
{
  "program_id": "github-v0_50427.ll",
  "autophase_features": {
    "BBNumArgsHi": 16,
    "BBNumArgsLo": 15,
    "onePred": 42,
    "onePredOneSuc": 24,
    "onePredTwoSuc": 18,
    "oneSuccessor": 32,
    "twoPred": 36,
    "twoPredOneSuc": 6,
    "twoEach": 25,
    "twoSuccessor": 56,
    "morePreds": 10,
    "BB03Phi": 21,
    "BBHiPhi": 10,
    "BBNoPhi": 66,
    "BeginPhi": 31,
    "BranchCount": 88,
    "returnInt": 38,
    "CriticalCount": 70,
    "NumEdges": 144,
    "const32Bit": 123,
    "const64Bit": 8,
    "numConstZeroes": 48,
    "numConstOnes": 30,
    "UncondBranches": 32,
    "binaryConstArg": 61,
    "NumAShrInst": 0,
    "NumAddInst": 56,
    "NumAllocaInst": 0,
    "NumAndInst": 13,
    "BlockMid": 8,
    "BlockLow": 89,
    "NumBitCastInst": 0,
    "NumBrInst": 88,
    "NumCallInst": 48,
    "NumGetElementPtrInst": 58,
    "NumICmpInst": 86,
    "NumLShrInst": 0,
    "NumLoadInst": 62,
    "NumMulInst": 4,
    "NumOrInst": 0,
    "NumPHIInst": 77,
    "NumRetInst": 9,
    "NumSExtInst": 0,
    "NumSelectInst": 56,
    "NumShlInst": 1,
    "NumStoreInst": 30,
    "NumSubInst": 8,
    "NumTruncInst": 15,
    "NumXorInst": 0,
    "NumZExtInst": 35,
    "TotalBlocks": 97,
    "TotalInsts": 654,
    "TotalMemInst": 198,
    "TotalFuncs": 18,
    "ArgsPhi": 160,
    "testUnary": 118
  },
  "baseline_oz_instcount": 652,
  "knowledge_base_entry": [
    "--loop-idiom",
    "--newgvn",
    "--loop-reroll",
    "--correlated-propagation",
    "--nary-reassociate",
    "--simplifycfg",
    "--sroa",
    "--lower-expect",
    "--reassociate",
    "--simplifycfg",
    "--die",
    "--early-cse-memssa",
    "--ipsccp",
    "--globalopt",
    "--sroa",
    "--jump-threading",
    "--mldst-motion",
    "--gvn",
    "--lower-expect",
    "--reassociate",
    "--simplifycfg",
    "--die",
    "--early-cse-memssa",
    "--early-cse",
    "--mergefunc",
    "--newgvn",
    "--instcombine",
    "--die"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--sccp",
          "--newgvn",
          "--cross-dso-cfi",
          "--simplifycfg",
          "--attributor",
          "--called-value-propagation",
          "--partial-inliner",
          "--rewrite-statepoints-for-gc",
          "--memcpyopt",
          "--coro-early"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--sccp",
      "--newgvn",
      "--cross-dso-cfi",
      "--simplifycfg",
      "--attributor",
      "--called-value-propagation",
      "--partial-inliner",
      "--rewrite-statepoints-for-gc",
      "--memcpyopt",
      "--coro-early"
    ],
    "performance_vs_Oz": "+1.8%"
  }
}
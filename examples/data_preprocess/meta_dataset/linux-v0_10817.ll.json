{
  "program_id": "linux-v0_10817.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 1,
    "onePred": 65,
    "onePredOneSuc": 46,
    "onePredTwoSuc": 18,
    "oneSuccessor": 58,
    "twoPred": 28,
    "twoPredOneSuc": 9,
    "twoEach": 5,
    "twoSuccessor": 40,
    "morePreds": 5,
    "BB03Phi": 1,
    "BBHiPhi": 0,
    "BBNoPhi": 121,
    "BeginPhi": 1,
    "BranchCount": 98,
    "returnInt": 33,
    "CriticalCount": 18,
    "NumEdges": 138,
    "const32Bit": 269,
    "const64Bit": 9,
    "numConstZeroes": 118,
    "numConstOnes": 76,
    "UncondBranches": 58,
    "binaryConstArg": 20,
    "NumAShrInst": 3,
    "NumAddInst": 2,
    "NumAllocaInst": 59,
    "NumAndInst": 9,
    "BlockMid": 10,
    "BlockLow": 112,
    "NumBitCastInst": 12,
    "NumBrInst": 98,
    "NumCallInst": 79,
    "NumGetElementPtrInst": 71,
    "NumICmpInst": 41,
    "NumLShrInst": 0,
    "NumLoadInst": 199,
    "NumMulInst": 0,
    "NumOrInst": 7,
    "NumPHIInst": 1,
    "NumRetInst": 24,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 101,
    "NumSubInst": 0,
    "NumTruncInst": 9,
    "NumXorInst": 2,
    "NumZExtInst": 11,
    "TotalBlocks": 122,
    "TotalInsts": 735,
    "TotalMemInst": 509,
    "TotalFuncs": 50,
    "ArgsPhi": 2,
    "testUnary": 297
  },
  "baseline_oz_instcount": 735,
  "knowledge_base_entry": [
    "--tailcallelim",
    "--gvn-hoist",
    "--mem2reg",
    "--memcpyopt",
    "--loop-simplifycfg",
    "--slp-vectorizer",
    "--early-cse",
    "--licm",
    "--slp-vectorizer",
    "--lower-constant-intrinsics",
    "--aggressive-instcombine",
    "--elim-avail-extern",
    "--jump-threading",
    "--sccp",
    "--adce",
    "--correlated-propagation",
    "--reassociate",
    "--adce",
    "--correlated-propagation",
    "--early-cse-memssa",
    "--prune-eh",
    "--aggressive-instcombine"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-versioning-licm",
          "--slsr",
          "--lower-matrix-intrinsics",
          "--loop-data-prefetch",
          "--aggressive-instcombine",
          "--post-inline-ee-instrument",
          "--memcpyopt",
          "--consthoist",
          "--loop-distribute",
          "--float2int",
          "--mergeicmps",
          "--functionattrs",
          "--flattencfg",
          "--instnamer",
          "--rewrite-statepoints-for-gc",
          "--strip",
          "--adce",
          "--loop-vectorize",
          "--scalarizer",
          "--load-store-vectorizer",
          "--inline",
          "--bdce",
          "--div-rem-pairs",
          "--coro-split",
          "--loop-guard-widening"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-versioning-licm",
      "--slsr",
      "--lower-matrix-intrinsics",
      "--loop-data-prefetch",
      "--aggressive-instcombine",
      "--post-inline-ee-instrument",
      "--memcpyopt",
      "--consthoist",
      "--loop-distribute",
      "--float2int",
      "--mergeicmps",
      "--functionattrs",
      "--flattencfg",
      "--instnamer",
      "--rewrite-statepoints-for-gc",
      "--strip",
      "--adce",
      "--loop-vectorize",
      "--scalarizer",
      "--load-store-vectorizer",
      "--inline",
      "--bdce",
      "--div-rem-pairs",
      "--coro-split",
      "--loop-guard-widening"
    ],
    "performance_vs_Oz": "+0.3%"
  }
}
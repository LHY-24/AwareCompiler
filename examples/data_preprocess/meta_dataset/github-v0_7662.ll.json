{
  "program_id": "github-v0_7662.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 15,
    "onePredOneSuc": 10,
    "onePredTwoSuc": 3,
    "oneSuccessor": 13,
    "twoPred": 6,
    "twoPredOneSuc": 3,
    "twoEach": 2,
    "twoSuccessor": 7,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 24,
    "BeginPhi": 0,
    "BranchCount": 20,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 27,
    "const32Bit": 44,
    "const64Bit": 38,
    "numConstZeroes": 43,
    "numConstOnes": 27,
    "UncondBranches": 13,
    "binaryConstArg": 22,
    "NumAShrInst": 8,
    "NumAddInst": 3,
    "NumAllocaInst": 11,
    "NumAndInst": 8,
    "BlockMid": 5,
    "BlockLow": 19,
    "NumBitCastInst": 0,
    "NumBrInst": 20,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 21,
    "NumICmpInst": 7,
    "NumLShrInst": 0,
    "NumLoadInst": 29,
    "NumMulInst": 0,
    "NumOrInst": 4,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 7,
    "NumSelectInst": 0,
    "NumShlInst": 3,
    "NumStoreInst": 17,
    "NumSubInst": 0,
    "NumTruncInst": 11,
    "NumXorInst": 0,
    "NumZExtInst": 15,
    "TotalBlocks": 24,
    "TotalInsts": 175,
    "TotalMemInst": 85,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 73
  },
  "baseline_oz_instcount": 175,
  "knowledge_base_entry": [
    "--globaldce",
    "--aggressive-instcombine",
    "--inline",
    "--adce",
    "--loop-instsimplify",
    "--reassociate",
    "--licm",
    "--aggressive-instcombine",
    "--loop-simplifycfg",
    "--dse",
    "--nary-reassociate",
    "--simplifycfg",
    "--inline",
    "--reassociate",
    "--early-cse",
    "--ipsccp",
    "--adce",
    "--slp-vectorizer",
    "--simplifycfg",
    "--nary-reassociate",
    "--slsr",
    "--simplifycfg",
    "--elim-avail-extern",
    "--mergefunc",
    "--early-cse-memssa"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--rewrite-statepoints-for-gc",
          "--pgo-memop-opt",
          "--globalsplit",
          "--argpromotion",
          "--loop-vectorize",
          "--instcombine",
          "--loweratomic",
          "--loop-rotate",
          "--div-rem-pairs",
          "--loop-unroll-and-jam",
          "--aggressive-instcombine",
          "--add-discriminators",
          "--break-crit-edges",
          "--post-inline-ee-instrument",
          "--inject-tli-mappings",
          "--loop-interchange",
          "--jump-threading",
          "--sccp",
          "--infer-address-spaces",
          "--gvn-hoist",
          "--loop-versioning-licm",
          "--inferattrs"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+4.6%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--rewrite-statepoints-for-gc",
      "--pgo-memop-opt",
      "--globalsplit",
      "--argpromotion",
      "--loop-vectorize",
      "--instcombine",
      "--loweratomic",
      "--loop-rotate",
      "--div-rem-pairs",
      "--loop-unroll-and-jam",
      "--aggressive-instcombine",
      "--add-discriminators",
      "--break-crit-edges",
      "--post-inline-ee-instrument",
      "--inject-tli-mappings",
      "--loop-interchange",
      "--jump-threading",
      "--sccp",
      "--infer-address-spaces",
      "--gvn-hoist",
      "--loop-versioning-licm",
      "--inferattrs"
    ],
    "performance_vs_Oz": "+4.6%"
  }
}
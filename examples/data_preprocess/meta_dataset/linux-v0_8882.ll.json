{
  "program_id": "linux-v0_8882.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 60,
    "onePredOneSuc": 43,
    "onePredTwoSuc": 14,
    "oneSuccessor": 60,
    "twoPred": 28,
    "twoPredOneSuc": 15,
    "twoEach": 9,
    "twoSuccessor": 28,
    "morePreds": 1,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 99,
    "BeginPhi": 2,
    "BranchCount": 88,
    "returnInt": 8,
    "CriticalCount": 16,
    "NumEdges": 124,
    "const32Bit": 239,
    "const64Bit": 33,
    "numConstZeroes": 57,
    "numConstOnes": 71,
    "UncondBranches": 60,
    "binaryConstArg": 115,
    "NumAShrInst": 0,
    "NumAddInst": 3,
    "NumAllocaInst": 45,
    "NumAndInst": 44,
    "BlockMid": 7,
    "BlockLow": 94,
    "NumBitCastInst": 2,
    "NumBrInst": 88,
    "NumCallInst": 23,
    "NumGetElementPtrInst": 51,
    "NumICmpInst": 30,
    "NumLShrInst": 25,
    "NumLoadInst": 172,
    "NumMulInst": 1,
    "NumOrInst": 31,
    "NumPHIInst": 2,
    "NumRetInst": 12,
    "NumSExtInst": 8,
    "NumSelectInst": 1,
    "NumShlInst": 4,
    "NumStoreInst": 114,
    "NumSubInst": 0,
    "NumTruncInst": 15,
    "NumXorInst": 11,
    "NumZExtInst": 18,
    "TotalBlocks": 101,
    "TotalInsts": 701,
    "TotalMemInst": 405,
    "TotalFuncs": 23,
    "ArgsPhi": 4,
    "testUnary": 260
  },
  "baseline_oz_instcount": 701,
  "knowledge_base_entry": [
    "--mergefunc",
    "--bdce",
    "--mergefunc",
    "--ipsccp",
    "--gvn",
    "--loop-reroll",
    "--slsr",
    "--load-store-vectorizer",
    "--aggressive-instcombine",
    "--early-cse-memssa",
    "--reassociate",
    "--lower-constant-intrinsics",
    "--instcombine",
    "--prune-eh",
    "--loop-simplifycfg",
    "--inline",
    "--elim-avail-extern",
    "--die",
    "--inline",
    "--globalopt",
    "--correlated-propagation",
    "--dse"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-unswitch",
          "--die",
          "--indvars",
          "--aggressive-instcombine",
          "--instcombine",
          "--lower-widenable-condition",
          "--strip-dead-prototypes",
          "--consthoist",
          "--float2int",
          "--loop-guard-widening",
          "--slp-vectorizer",
          "--mem2reg",
          "--licm",
          "--sink",
          "--post-inline-ee-instrument",
          "--early-cse",
          "--libcalls-shrinkwrap",
          "--speculative-execution",
          "--loop-idiom",
          "--loop-reroll",
          "--prune-eh",
          "--mldst-motion",
          "--loop-load-elim",
          "-loop-reduce",
          "--early-cse-memssa",
          "--always-inline",
          "--lowerinvoke",
          "--partially-inline-libcalls"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.1%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-unswitch",
      "--die",
      "--indvars",
      "--aggressive-instcombine",
      "--instcombine",
      "--lower-widenable-condition",
      "--strip-dead-prototypes",
      "--consthoist",
      "--float2int",
      "--loop-guard-widening",
      "--slp-vectorizer",
      "--mem2reg",
      "--licm",
      "--sink",
      "--post-inline-ee-instrument",
      "--early-cse",
      "--libcalls-shrinkwrap",
      "--speculative-execution",
      "--loop-idiom",
      "--loop-reroll",
      "--prune-eh",
      "--mldst-motion",
      "--loop-load-elim",
      "-loop-reduce",
      "--early-cse-memssa",
      "--always-inline",
      "--lowerinvoke",
      "--partially-inline-libcalls"
    ],
    "performance_vs_Oz": "+3.1%"
  }
}
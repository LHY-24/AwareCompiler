{
  "program_id": "linux-v0_7374.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 33,
    "onePredOneSuc": 26,
    "onePredTwoSuc": 5,
    "oneSuccessor": 30,
    "twoPred": 4,
    "twoPredOneSuc": 0,
    "twoEach": 1,
    "twoSuccessor": 8,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 55,
    "BeginPhi": 0,
    "BranchCount": 37,
    "returnInt": 11,
    "CriticalCount": 2,
    "NumEdges": 46,
    "const32Bit": 208,
    "const64Bit": 9,
    "numConstZeroes": 74,
    "numConstOnes": 88,
    "UncondBranches": 30,
    "binaryConstArg": 4,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 74,
    "NumAndInst": 0,
    "BlockMid": 10,
    "BlockLow": 45,
    "NumBitCastInst": 19,
    "NumBrInst": 37,
    "NumCallInst": 43,
    "NumGetElementPtrInst": 52,
    "NumICmpInst": 8,
    "NumLShrInst": 0,
    "NumLoadInst": 118,
    "NumMulInst": 1,
    "NumOrInst": 1,
    "NumPHIInst": 0,
    "NumRetInst": 17,
    "NumSExtInst": 2,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 86,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 2,
    "TotalBlocks": 55,
    "TotalInsts": 469,
    "TotalMemInst": 373,
    "TotalFuncs": 41,
    "ArgsPhi": 0,
    "testUnary": 221
  },
  "baseline_oz_instcount": 470,
  "knowledge_base_entry": [
    "--instcombine",
    "--sccp",
    "--elim-avail-extern",
    "--lower-constant-intrinsics",
    "--nary-reassociate",
    "--licm",
    "--instcombine",
    "--lower-constant-intrinsics",
    "--mem2reg",
    "--instcombine",
    "--sroa",
    "--load-store-vectorizer",
    "-loop-reduce",
    "--reassociate"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--alignment-from-assumptions",
          "--reassociate",
          "--loop-load-elim",
          "--always-inline",
          "--coro-split",
          "--loop-predication",
          "--lowerinvoke",
          "--coro-elide",
          "--redundant-dbg-inst-elim",
          "--strip-nondebug",
          "--float2int"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--alignment-from-assumptions",
      "--reassociate",
      "--loop-load-elim",
      "--always-inline",
      "--coro-split",
      "--loop-predication",
      "--lowerinvoke",
      "--coro-elide",
      "--redundant-dbg-inst-elim",
      "--strip-nondebug",
      "--float2int"
    ],
    "performance_vs_Oz": "+0.2%"
  }
}
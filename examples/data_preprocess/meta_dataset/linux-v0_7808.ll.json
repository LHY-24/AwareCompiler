{
  "program_id": "linux-v0_7808.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 51,
    "onePredOneSuc": 35,
    "onePredTwoSuc": 13,
    "oneSuccessor": 43,
    "twoPred": 12,
    "twoPredOneSuc": 4,
    "twoEach": 6,
    "twoSuccessor": 23,
    "morePreds": 3,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 91,
    "BeginPhi": 0,
    "BranchCount": 66,
    "returnInt": 30,
    "CriticalCount": 8,
    "NumEdges": 89,
    "const32Bit": 242,
    "const64Bit": 45,
    "numConstZeroes": 109,
    "numConstOnes": 117,
    "UncondBranches": 43,
    "binaryConstArg": 36,
    "NumAShrInst": 0,
    "NumAddInst": 5,
    "NumAllocaInst": 87,
    "NumAndInst": 7,
    "BlockMid": 11,
    "BlockLow": 80,
    "NumBitCastInst": 14,
    "NumBrInst": 66,
    "NumCallInst": 64,
    "NumGetElementPtrInst": 70,
    "NumICmpInst": 27,
    "NumLShrInst": 1,
    "NumLoadInst": 224,
    "NumMulInst": 8,
    "NumOrInst": 6,
    "NumPHIInst": 0,
    "NumRetInst": 25,
    "NumSExtInst": 9,
    "NumSelectInst": 2,
    "NumShlInst": 3,
    "NumStoreInst": 119,
    "NumSubInst": 2,
    "NumTruncInst": 16,
    "NumXorInst": 10,
    "NumZExtInst": 27,
    "TotalBlocks": 91,
    "TotalInsts": 803,
    "TotalMemInst": 564,
    "TotalFuncs": 36,
    "ArgsPhi": 0,
    "testUnary": 381
  },
  "baseline_oz_instcount": 803,
  "knowledge_base_entry": [
    "--prune-eh",
    "--aggressive-instcombine",
    "--globalopt",
    "--dse",
    "--mldst-motion",
    "--loop-simplifycfg",
    "--simplifycfg",
    "--ipsccp",
    "--early-cse-memssa"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--lower-widenable-condition",
          "--aggressive-instcombine",
          "--load-store-vectorizer",
          "--adce",
          "--slp-vectorizer",
          "--coro-split",
          "--jump-threading",
          "--rewrite-statepoints-for-gc",
          "--prune-eh",
          "--functionattrs",
          "--loop-versioning-licm",
          "--elim-avail-extern",
          "--add-discriminators",
          "--lower-constant-intrinsics",
          "--strip-nondebug",
          "--loop-sink",
          "--newgvn",
          "--loop-reroll",
          "--infer-address-spaces",
          "--loop-guard-widening",
          "--simple-loop-unswitch",
          "--lower-expect",
          "--mergeicmps",
          "--ipsccp",
          "--coro-cleanup",
          "--instsimplify",
          "--deadargelim"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.0%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--lower-widenable-condition",
      "--aggressive-instcombine",
      "--load-store-vectorizer",
      "--adce",
      "--slp-vectorizer",
      "--coro-split",
      "--jump-threading",
      "--rewrite-statepoints-for-gc",
      "--prune-eh",
      "--functionattrs",
      "--loop-versioning-licm",
      "--elim-avail-extern",
      "--add-discriminators",
      "--lower-constant-intrinsics",
      "--strip-nondebug",
      "--loop-sink",
      "--newgvn",
      "--loop-reroll",
      "--infer-address-spaces",
      "--loop-guard-widening",
      "--simple-loop-unswitch",
      "--lower-expect",
      "--mergeicmps",
      "--ipsccp",
      "--coro-cleanup",
      "--instsimplify",
      "--deadargelim"
    ],
    "performance_vs_Oz": "+1.0%"
  }
}
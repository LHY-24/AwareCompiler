{
  "program_id": "poj104-v1_64_2251.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 50,
    "onePredOneSuc": 25,
    "onePredTwoSuc": 24,
    "oneSuccessor": 30,
    "twoPred": 12,
    "twoPredOneSuc": 2,
    "twoEach": 10,
    "twoSuccessor": 38,
    "morePreds": 6,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 72,
    "BeginPhi": 0,
    "BranchCount": 68,
    "returnInt": 4,
    "CriticalCount": 35,
    "NumEdges": 106,
    "const32Bit": 49,
    "const64Bit": 173,
    "numConstZeroes": 141,
    "numConstOnes": 46,
    "UncondBranches": 30,
    "binaryConstArg": 18,
    "NumAShrInst": 0,
    "NumAddInst": 16,
    "NumAllocaInst": 21,
    "NumAndInst": 0,
    "BlockMid": 7,
    "BlockLow": 65,
    "NumBitCastInst": 34,
    "NumBrInst": 68,
    "NumCallInst": 42,
    "NumGetElementPtrInst": 139,
    "NumICmpInst": 9,
    "NumLShrInst": 0,
    "NumLoadInst": 295,
    "NumMulInst": 1,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 4,
    "NumSExtInst": 139,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 73,
    "NumSubInst": 1,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 72,
    "TotalInsts": 886,
    "TotalMemInst": 570,
    "TotalFuncs": 12,
    "ArgsPhi": 0,
    "testUnary": 495
  },
  "baseline_oz_instcount": 403,
  "knowledge_base_entry": [
    "--separate-const-offset-from-gep",
    "--gvn",
    "--bdce",
    "--early-cse-memssa",
    "--aggressive-instcombine",
    "--loop-instsimplify",
    "--inline",
    "--loop-simplifycfg",
    "--loop-instsimplify",
    "--newgvn",
    "--newgvn",
    "--early-cse-memssa",
    "--globalopt",
    "--licm",
    "--gvn",
    "--loop-deletion",
    "--early-cse",
    "--dse",
    "--die",
    "--slp-vectorizer",
    "--instcombine",
    "--loop-deletion",
    "--newgvn",
    "--sccp",
    "--early-cse",
    "--loop-deletion",
    "--instcombine",
    "--simplifycfg",
    "--mldst-motion"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--coro-cleanup",
          "--sccp",
          "--reg2mem",
          "--slsr",
          "--loop-simplify",
          "--forceattrs",
          "--sancov",
          "--globalopt",
          "--strip",
          "--name-anon-globals",
          "--loop-versioning-licm",
          "--functionattrs",
          "--irce",
          "--loop-versioning",
          "--insert-gcov-profiling",
          "--globalsplit",
          "--called-value-propagation",
          "--inferattrs",
          "--loop-unswitch",
          "--always-inline",
          "--gvn",
          "--libcalls-shrinkwrap",
          "--newgvn",
          "--loop-deletion",
          "--argpromotion",
          "--loop-reroll",
          "--adce",
          "--instnamer",
          "--canonicalize-aliases",
          "--simplifycfg"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+27.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--coro-cleanup",
      "--sccp",
      "--reg2mem",
      "--slsr",
      "--loop-simplify",
      "--forceattrs",
      "--sancov",
      "--globalopt",
      "--strip",
      "--name-anon-globals",
      "--loop-versioning-licm",
      "--functionattrs",
      "--irce",
      "--loop-versioning",
      "--insert-gcov-profiling",
      "--globalsplit",
      "--called-value-propagation",
      "--inferattrs",
      "--loop-unswitch",
      "--always-inline",
      "--gvn",
      "--libcalls-shrinkwrap",
      "--newgvn",
      "--loop-deletion",
      "--argpromotion",
      "--loop-reroll",
      "--adce",
      "--instnamer",
      "--canonicalize-aliases",
      "--simplifycfg"
    ],
    "performance_vs_Oz": "+27.5%"
  }
}
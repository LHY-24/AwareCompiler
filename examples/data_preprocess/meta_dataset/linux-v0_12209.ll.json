{
  "program_id": "linux-v0_12209.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 3,
    "onePred": 81,
    "onePredOneSuc": 53,
    "onePredTwoSuc": 27,
    "oneSuccessor": 72,
    "twoPred": 26,
    "twoPredOneSuc": 12,
    "twoEach": 7,
    "twoSuccessor": 42,
    "morePreds": 8,
    "BB03Phi": 3,
    "BBHiPhi": 0,
    "BBNoPhi": 129,
    "BeginPhi": 3,
    "BranchCount": 114,
    "returnInt": 19,
    "CriticalCount": 25,
    "NumEdges": 159,
    "const32Bit": 363,
    "const64Bit": 10,
    "numConstZeroes": 217,
    "numConstOnes": 83,
    "UncondBranches": 72,
    "binaryConstArg": 15,
    "NumAShrInst": 0,
    "NumAddInst": 2,
    "NumAllocaInst": 61,
    "NumAndInst": 4,
    "BlockMid": 6,
    "BlockLow": 126,
    "NumBitCastInst": 12,
    "NumBrInst": 114,
    "NumCallInst": 37,
    "NumGetElementPtrInst": 134,
    "NumICmpInst": 41,
    "NumLShrInst": 1,
    "NumLoadInst": 212,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 3,
    "NumRetInst": 17,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 101,
    "NumSubInst": 1,
    "NumTruncInst": 1,
    "NumXorInst": 8,
    "NumZExtInst": 12,
    "TotalBlocks": 132,
    "TotalInsts": 767,
    "TotalMemInst": 545,
    "TotalFuncs": 34,
    "ArgsPhi": 6,
    "testUnary": 302
  },
  "baseline_oz_instcount": 767,
  "knowledge_base_entry": [
    "--loop-versioning-licm",
    "--gvn-hoist",
    "--mergefunc",
    "--mergefunc",
    "--loop-simplifycfg",
    "--bdce",
    "--load-store-vectorizer",
    "--loop-instsimplify",
    "--simplifycfg",
    "-loop-reduce",
    "--instcombine",
    "--mergefunc",
    "--bdce",
    "--load-store-vectorizer",
    "--indvars",
    "--gvn-hoist"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--partially-inline-libcalls",
          "--functionattrs",
          "--partial-inliner",
          "--dce",
          "--attributor",
          "--lowerinvoke",
          "--mldst-motion",
          "--separate-const-offset-from-gep",
          "--speculative-execution",
          "--lower-guard-intrinsic",
          "--mergereturn",
          "--argpromotion",
          "--mergefunc",
          "--loop-instsimplify",
          "--cross-dso-cfi",
          "--loop-data-prefetch",
          "--loop-versioning-licm",
          "--loop-distribute",
          "--elim-avail-extern",
          "--coro-early",
          "--slsr",
          "--hotcoldsplit",
          "--always-inline",
          "--sancov",
          "--add-discriminators"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--partially-inline-libcalls",
      "--functionattrs",
      "--partial-inliner",
      "--dce",
      "--attributor",
      "--lowerinvoke",
      "--mldst-motion",
      "--separate-const-offset-from-gep",
      "--speculative-execution",
      "--lower-guard-intrinsic",
      "--mergereturn",
      "--argpromotion",
      "--mergefunc",
      "--loop-instsimplify",
      "--cross-dso-cfi",
      "--loop-data-prefetch",
      "--loop-versioning-licm",
      "--loop-distribute",
      "--elim-avail-extern",
      "--coro-early",
      "--slsr",
      "--hotcoldsplit",
      "--always-inline",
      "--sancov",
      "--add-discriminators"
    ],
    "performance_vs_Oz": "+0.4%"
  }
}
{
  "program_id": "linux-v0_6303.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 30,
    "onePredOneSuc": 16,
    "onePredTwoSuc": 14,
    "oneSuccessor": 20,
    "twoPred": 6,
    "twoPredOneSuc": 4,
    "twoEach": 2,
    "twoSuccessor": 18,
    "morePreds": 2,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 42,
    "BeginPhi": 0,
    "BranchCount": 38,
    "returnInt": 2,
    "CriticalCount": 6,
    "NumEdges": 56,
    "const32Bit": 57,
    "const64Bit": 16,
    "numConstZeroes": 21,
    "numConstOnes": 30,
    "UncondBranches": 20,
    "binaryConstArg": 9,
    "NumAShrInst": 1,
    "NumAddInst": 2,
    "NumAllocaInst": 17,
    "NumAndInst": 2,
    "BlockMid": 4,
    "BlockLow": 38,
    "NumBitCastInst": 0,
    "NumBrInst": 38,
    "NumCallInst": 2,
    "NumGetElementPtrInst": 19,
    "NumICmpInst": 18,
    "NumLShrInst": 0,
    "NumLoadInst": 65,
    "NumMulInst": 4,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 4,
    "NumSExtInst": 4,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 41,
    "NumSubInst": 0,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 22,
    "TotalBlocks": 42,
    "TotalInsts": 241,
    "TotalMemInst": 144,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 110
  },
  "baseline_oz_instcount": 241,
  "knowledge_base_entry": [
    "--aggressive-instcombine",
    "--loop-instsimplify",
    "--dce",
    "--early-cse",
    "--flattencfg",
    "--early-cse",
    "--loop-reroll",
    "--loop-simplifycfg",
    "--lower-constant-intrinsics",
    "--sroa"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-load-elim",
          "--globalopt",
          "--coro-elide",
          "--coro-cleanup",
          "--mergefunc",
          "--reassociate",
          "--sroa",
          "--lcssa",
          "--lower-guard-intrinsic",
          "--loop-sink",
          "--loop-interchange",
          "--aggressive-instcombine",
          "--barrier",
          "--tailcallelim",
          "--coro-split"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-load-elim",
      "--globalopt",
      "--coro-elide",
      "--coro-cleanup",
      "--mergefunc",
      "--reassociate",
      "--sroa",
      "--lcssa",
      "--lower-guard-intrinsic",
      "--loop-sink",
      "--loop-interchange",
      "--aggressive-instcombine",
      "--barrier",
      "--tailcallelim",
      "--coro-split"
    ],
    "performance_vs_Oz": "+0.4%"
  }
}
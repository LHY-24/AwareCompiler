{
  "program_id": "github-v0_24903.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 1,
    "onePredOneSuc": 1,
    "onePredTwoSuc": 0,
    "oneSuccessor": 1,
    "twoPred": 1,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 1,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 10,
    "BeginPhi": 0,
    "BranchCount": 2,
    "returnInt": 8,
    "CriticalCount": 1,
    "NumEdges": 3,
    "const32Bit": 54,
    "const64Bit": 4,
    "numConstZeroes": 19,
    "numConstOnes": 20,
    "UncondBranches": 1,
    "binaryConstArg": 8,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 17,
    "NumAndInst": 4,
    "BlockMid": 3,
    "BlockLow": 7,
    "NumBitCastInst": 13,
    "NumBrInst": 2,
    "NumCallInst": 20,
    "NumGetElementPtrInst": 10,
    "NumICmpInst": 1,
    "NumLShrInst": 1,
    "NumLoadInst": 29,
    "NumMulInst": 0,
    "NumOrInst": 3,
    "NumPHIInst": 0,
    "NumRetInst": 8,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 24,
    "NumSubInst": 0,
    "NumTruncInst": 3,
    "NumXorInst": 0,
    "NumZExtInst": 4,
    "TotalBlocks": 10,
    "TotalInsts": 139,
    "TotalMemInst": 100,
    "TotalFuncs": 19,
    "ArgsPhi": 0,
    "testUnary": 66
  },
  "baseline_oz_instcount": 139,
  "knowledge_base_entry": [
    "--hotcoldsplit",
    "--mergefunc",
    "--slp-vectorizer",
    "--load-store-vectorizer",
    "--lower-constant-intrinsics",
    "--prune-eh",
    "--gvn-hoist",
    "--adce",
    "--aggressive-instcombine",
    "--inline",
    "--bdce",
    "--reassociate",
    "--adce",
    "--elim-avail-extern",
    "--mldst-motion",
    "--slp-vectorizer",
    "--mem2reg",
    "--nary-reassociate",
    "--loop-reroll",
    "--early-cse"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--nary-reassociate",
          "--callsite-splitting",
          "--lowerinvoke",
          "--infer-address-spaces",
          "--loop-unroll",
          "--lower-constant-intrinsics",
          "--constmerge",
          "--slsr",
          "--lcssa",
          "--elim-avail-extern",
          "--simplifycfg",
          "--pgo-memop-opt",
          "--loop-versioning",
          "--always-inline",
          "--loop-data-prefetch",
          "--licm",
          "--loop-simplify",
          "--scalarizer",
          "--aggressive-instcombine",
          "--globalsplit",
          "--loop-guard-widening",
          "--loop-rotate",
          "--slp-vectorizer",
          "--prune-eh",
          "--flattencfg",
          "--tailcallelim",
          "--loop-simplifycfg",
          "--loop-load-elim"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+2.9%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--nary-reassociate",
      "--callsite-splitting",
      "--lowerinvoke",
      "--infer-address-spaces",
      "--loop-unroll",
      "--lower-constant-intrinsics",
      "--constmerge",
      "--slsr",
      "--lcssa",
      "--elim-avail-extern",
      "--simplifycfg",
      "--pgo-memop-opt",
      "--loop-versioning",
      "--always-inline",
      "--loop-data-prefetch",
      "--licm",
      "--loop-simplify",
      "--scalarizer",
      "--aggressive-instcombine",
      "--globalsplit",
      "--loop-guard-widening",
      "--loop-rotate",
      "--slp-vectorizer",
      "--prune-eh",
      "--flattencfg",
      "--tailcallelim",
      "--loop-simplifycfg",
      "--loop-load-elim"
    ],
    "performance_vs_Oz": "+2.9%"
  }
}
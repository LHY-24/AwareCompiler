{
  "program_id": "github-v0_24499.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 3,
    "onePredOneSuc": 2,
    "onePredTwoSuc": 1,
    "oneSuccessor": 2,
    "twoPred": 1,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 3,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 15,
    "BeginPhi": 0,
    "BranchCount": 5,
    "returnInt": 0,
    "CriticalCount": 3,
    "NumEdges": 8,
    "const32Bit": 15,
    "const64Bit": 15,
    "numConstZeroes": 12,
    "numConstOnes": 17,
    "UncondBranches": 2,
    "binaryConstArg": 2,
    "NumAShrInst": 0,
    "NumAddInst": 0,
    "NumAllocaInst": 15,
    "NumAndInst": 0,
    "BlockMid": 4,
    "BlockLow": 11,
    "NumBitCastInst": 5,
    "NumBrInst": 5,
    "NumCallInst": 8,
    "NumGetElementPtrInst": 13,
    "NumICmpInst": 3,
    "NumLShrInst": 0,
    "NumLoadInst": 39,
    "NumMulInst": 4,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 10,
    "NumSExtInst": 11,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 18,
    "NumSubInst": 0,
    "NumTruncInst": 1,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 15,
    "TotalInsts": 136,
    "TotalMemInst": 93,
    "TotalFuncs": 12,
    "ArgsPhi": 0,
    "testUnary": 75
  },
  "baseline_oz_instcount": 136,
  "knowledge_base_entry": [
    "--early-cse-memssa",
    "--aggressive-instcombine",
    "--instcombine",
    "--instsimplify",
    "--dce",
    "--load-store-vectorizer",
    "--indvars",
    "--simplifycfg",
    "--load-store-vectorizer",
    "--loop-instsimplify",
    "--lower-expect",
    "--mem2reg",
    "--nary-reassociate",
    "--newgvn",
    "--indvars",
    "--slp-vectorizer",
    "--inline",
    "--mem2reg",
    "--reassociate",
    "--adce",
    "--ipsccp"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--strip",
          "--loop-idiom",
          "--barrier",
          "--infer-address-spaces",
          "--strip-debug-declare",
          "--loop-versioning",
          "--aggressive-instcombine",
          "--lower-widenable-condition",
          "--lower-constant-intrinsics",
          "--globaldce",
          "--rpo-functionattrs",
          "--early-cse",
          "--constmerge",
          "--called-value-propagation",
          "--alignment-from-assumptions",
          "--instcombine",
          "--consthoist",
          "--reassociate",
          "--cross-dso-cfi",
          "--dce",
          "--argpromotion",
          "--redundant-dbg-inst-elim",
          "--loweratomic",
          "--mergefunc",
          "--licm",
          "--mergeicmps"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--strip",
      "--loop-idiom",
      "--barrier",
      "--infer-address-spaces",
      "--strip-debug-declare",
      "--loop-versioning",
      "--aggressive-instcombine",
      "--lower-widenable-condition",
      "--lower-constant-intrinsics",
      "--globaldce",
      "--rpo-functionattrs",
      "--early-cse",
      "--constmerge",
      "--called-value-propagation",
      "--alignment-from-assumptions",
      "--instcombine",
      "--consthoist",
      "--reassociate",
      "--cross-dso-cfi",
      "--dce",
      "--argpromotion",
      "--redundant-dbg-inst-elim",
      "--loweratomic",
      "--mergefunc",
      "--licm",
      "--mergeicmps"
    ],
    "performance_vs_Oz": "+1.5%"
  }
}
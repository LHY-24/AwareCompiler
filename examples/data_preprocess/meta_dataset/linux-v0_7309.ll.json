{
  "program_id": "linux-v0_7309.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 6,
    "onePredOneSuc": 5,
    "onePredTwoSuc": 0,
    "oneSuccessor": 7,
    "twoPred": 1,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 0,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 20,
    "BeginPhi": 0,
    "BranchCount": 7,
    "returnInt": 8,
    "CriticalCount": 0,
    "NumEdges": 11,
    "const32Bit": 79,
    "const64Bit": 7,
    "numConstZeroes": 28,
    "numConstOnes": 33,
    "UncondBranches": 7,
    "binaryConstArg": 8,
    "NumAShrInst": 0,
    "NumAddInst": 1,
    "NumAllocaInst": 30,
    "NumAndInst": 2,
    "BlockMid": 5,
    "BlockLow": 15,
    "NumBitCastInst": 6,
    "NumBrInst": 7,
    "NumCallInst": 24,
    "NumGetElementPtrInst": 16,
    "NumICmpInst": 1,
    "NumLShrInst": 0,
    "NumLoadInst": 40,
    "NumMulInst": 0,
    "NumOrInst": 2,
    "NumPHIInst": 0,
    "NumRetInst": 12,
    "NumSExtInst": 0,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 44,
    "NumSubInst": 1,
    "NumTruncInst": 3,
    "NumXorInst": 0,
    "NumZExtInst": 7,
    "TotalBlocks": 20,
    "TotalInsts": 202,
    "TotalMemInst": 154,
    "TotalFuncs": 21,
    "ArgsPhi": 0,
    "testUnary": 89
  },
  "baseline_oz_instcount": 202,
  "knowledge_base_entry": [
    "--prune-eh",
    "--aggressive-instcombine",
    "--die",
    "--load-store-vectorizer",
    "--instsimplify",
    "--slp-vectorizer",
    "--dse",
    "--instsimplify",
    "--adce",
    "--early-cse-memssa",
    "--loop-rotate",
    "--aggressive-instcombine",
    "--loop-rotate",
    "--gvn-hoist",
    "--loop-reroll",
    "--early-cse",
    "--sccp",
    "--instcombine",
    "--loop-instsimplify",
    "--lower-expect",
    "--elim-avail-extern",
    "--dce"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--constmerge",
          "--consthoist",
          "--sink",
          "--hotcoldsplit",
          "--aggressive-instcombine",
          "--inline",
          "--coro-split",
          "--loop-unroll",
          "--loop-instsimplify",
          "--loop-predication",
          "--reassociate",
          "--sccp",
          "--strip-nondebug",
          "--alignment-from-assumptions",
          "--loop-simplifycfg",
          "--loop-distribute",
          "--early-cse",
          "--newgvn"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+3.0%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--constmerge",
      "--consthoist",
      "--sink",
      "--hotcoldsplit",
      "--aggressive-instcombine",
      "--inline",
      "--coro-split",
      "--loop-unroll",
      "--loop-instsimplify",
      "--loop-predication",
      "--reassociate",
      "--sccp",
      "--strip-nondebug",
      "--alignment-from-assumptions",
      "--loop-simplifycfg",
      "--loop-distribute",
      "--early-cse",
      "--newgvn"
    ],
    "performance_vs_Oz": "+3.0%"
  }
}
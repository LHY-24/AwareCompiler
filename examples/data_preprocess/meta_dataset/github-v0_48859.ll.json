{
  "program_id": "github-v0_48859.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 13,
    "onePredOneSuc": 8,
    "onePredTwoSuc": 2,
    "oneSuccessor": 11,
    "twoPred": 5,
    "twoPredOneSuc": 2,
    "twoEach": 3,
    "twoSuccessor": 6,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 21,
    "BeginPhi": 0,
    "BranchCount": 17,
    "returnInt": 4,
    "CriticalCount": 0,
    "NumEdges": 23,
    "const32Bit": 31,
    "const64Bit": 46,
    "numConstZeroes": 44,
    "numConstOnes": 25,
    "UncondBranches": 11,
    "binaryConstArg": 8,
    "NumAShrInst": 0,
    "NumAddInst": 7,
    "NumAllocaInst": 14,
    "NumAndInst": 0,
    "BlockMid": 5,
    "BlockLow": 16,
    "NumBitCastInst": 8,
    "NumBrInst": 17,
    "NumCallInst": 7,
    "NumGetElementPtrInst": 33,
    "NumICmpInst": 6,
    "NumLShrInst": 0,
    "NumLoadInst": 40,
    "NumMulInst": 3,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 3,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 23,
    "NumSubInst": 0,
    "NumTruncInst": 6,
    "NumXorInst": 0,
    "NumZExtInst": 19,
    "TotalBlocks": 21,
    "TotalInsts": 190,
    "TotalMemInst": 117,
    "TotalFuncs": 6,
    "ArgsPhi": 0,
    "testUnary": 90
  },
  "baseline_oz_instcount": 190,
  "knowledge_base_entry": [
    "--prune-eh",
    "--reassociate",
    "--slsr",
    "--newgvn",
    "--load-store-vectorizer",
    "--correlated-propagation",
    "--early-cse",
    "--loop-rotate",
    "--lower-constant-intrinsics",
    "--jump-threading",
    "--loop-simplifycfg",
    "--aggressive-instcombine",
    "--instcombine"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-versioning-licm",
          "--strip-dead-prototypes",
          "--speculative-execution",
          "--irce",
          "--add-discriminators",
          "--aggressive-instcombine",
          "--consthoist",
          "--loop-interchange",
          "--lower-guard-intrinsic",
          "--libcalls-shrinkwrap"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+6.3%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-versioning-licm",
      "--strip-dead-prototypes",
      "--speculative-execution",
      "--irce",
      "--add-discriminators",
      "--aggressive-instcombine",
      "--consthoist",
      "--loop-interchange",
      "--lower-guard-intrinsic",
      "--libcalls-shrinkwrap"
    ],
    "performance_vs_Oz": "+6.3%"
  }
}
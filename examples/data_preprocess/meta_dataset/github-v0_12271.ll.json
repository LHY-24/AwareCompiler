{
  "program_id": "github-v0_12271.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 51,
    "onePredOneSuc": 35,
    "onePredTwoSuc": 16,
    "oneSuccessor": 50,
    "twoPred": 24,
    "twoPredOneSuc": 14,
    "twoEach": 6,
    "twoSuccessor": 28,
    "morePreds": 4,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 86,
    "BeginPhi": 2,
    "BranchCount": 78,
    "returnInt": 6,
    "CriticalCount": 21,
    "NumEdges": 121,
    "const32Bit": 220,
    "const64Bit": 10,
    "numConstZeroes": 102,
    "numConstOnes": 66,
    "UncondBranches": 50,
    "binaryConstArg": 10,
    "NumAShrInst": 0,
    "NumAddInst": 4,
    "NumAllocaInst": 43,
    "NumAndInst": 4,
    "BlockMid": 11,
    "BlockLow": 77,
    "NumBitCastInst": 10,
    "NumBrInst": 78,
    "NumCallInst": 21,
    "NumGetElementPtrInst": 64,
    "NumICmpInst": 29,
    "NumLShrInst": 0,
    "NumLoadInst": 177,
    "NumMulInst": 0,
    "NumOrInst": 1,
    "NumPHIInst": 2,
    "NumRetInst": 9,
    "NumSExtInst": 14,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 88,
    "NumSubInst": 5,
    "NumTruncInst": 7,
    "NumXorInst": 0,
    "NumZExtInst": 1,
    "TotalBlocks": 88,
    "TotalInsts": 558,
    "TotalMemInst": 393,
    "TotalFuncs": 20,
    "ArgsPhi": 4,
    "testUnary": 252
  },
  "baseline_oz_instcount": 559,
  "knowledge_base_entry": [
    "--slp-vectorizer",
    "--correlated-propagation",
    "--die",
    "--gvn",
    "--instsimplify",
    "--mergefunc"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--prune-eh",
          "--strip",
          "--coro-split",
          "--inline",
          "--dse",
          "--loop-distribute",
          "--always-inline",
          "--partially-inline-libcalls",
          "--mem2reg",
          "--coro-elide",
          "--load-store-vectorizer"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--prune-eh",
      "--strip",
      "--coro-split",
      "--inline",
      "--dse",
      "--loop-distribute",
      "--always-inline",
      "--partially-inline-libcalls",
      "--mem2reg",
      "--coro-elide",
      "--load-store-vectorizer"
    ],
    "performance_vs_Oz": "+0.2%"
  }
}
{
  "program_id": "poj104-v1_81_1294.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 24,
    "onePredOneSuc": 18,
    "onePredTwoSuc": 6,
    "oneSuccessor": 21,
    "twoPred": 8,
    "twoPredOneSuc": 1,
    "twoEach": 6,
    "twoSuccessor": 12,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 36,
    "BeginPhi": 0,
    "BranchCount": 33,
    "returnInt": 7,
    "CriticalCount": 6,
    "NumEdges": 45,
    "const32Bit": 33,
    "const64Bit": 26,
    "numConstZeroes": 23,
    "numConstOnes": 13,
    "UncondBranches": 21,
    "binaryConstArg": 6,
    "NumAShrInst": 0,
    "NumAddInst": 6,
    "NumAllocaInst": 7,
    "NumAndInst": 0,
    "BlockMid": 2,
    "BlockLow": 34,
    "NumBitCastInst": 12,
    "NumBrInst": 33,
    "NumCallInst": 21,
    "NumGetElementPtrInst": 14,
    "NumICmpInst": 12,
    "NumLShrInst": 0,
    "NumLoadInst": 37,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 3,
    "NumSExtInst": 14,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 16,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 36,
    "TotalInsts": 175,
    "TotalMemInst": 95,
    "TotalFuncs": 10,
    "ArgsPhi": 0,
    "testUnary": 70
  },
  "baseline_oz_instcount": 132,
  "knowledge_base_entry": [
    "--globalopt",
    "--mem2reg",
    "--newgvn",
    "--jump-threading",
    "--correlated-propagation",
    "--gvn",
    "--loop-rotate",
    "--instcombine",
    "--loop-deletion",
    "--early-cse",
    "--lower-constant-intrinsics",
    "--ipsccp",
    "--nary-reassociate",
    "--indvars",
    "--simplifycfg",
    "--loop-rotate",
    "--licm",
    "--sroa",
    "--gvn-hoist",
    "--flattencfg",
    "--sroa",
    "--memcpyopt",
    "--licm",
    "--lower-expect",
    "--nary-reassociate",
    "--load-store-vectorizer",
    "--aggressive-instcombine",
    "--globaldce",
    "--aggressive-instcombine",
    "--prune-eh",
    "--inline",
    "--dce",
    "--elim-avail-extern",
    "--instsimplify",
    "--dce",
    "--lower-expect",
    "--newgvn",
    "--instcombine",
    "--elim-avail-extern",
    "--early-cse",
    "--early-cse-memssa",
    "--reassociate",
    "--gvn",
    "--early-cse-memssa",
    "--correlated-propagation",
    "--early-cse-memssa",
    "--die",
    "--elim-avail-extern",
    "--die",
    "--sroa",
    "--instcombine",
    "--mem2reg",
    "--die",
    "--early-cse",
    "--instsimplify",
    "--mergefunc",
    "--newgvn",
    "--correlated-propagation",
    "--mergefunc",
    "--simplifycfg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--rpo-functionattrs",
          "--coro-elide",
          "--jump-threading",
          "--mergeicmps",
          "--lower-widenable-condition",
          "--loop-versioning-licm",
          "--loop-vectorize",
          "--called-value-propagation",
          "--mldst-motion",
          "--loop-unroll-and-jam",
          "--argpromotion",
          "--partially-inline-libcalls",
          "--cross-dso-cfi",
          "--dce",
          "--correlated-propagation",
          "--indvars",
          "--elim-avail-extern",
          "--die",
          "--lower-matrix-intrinsics",
          "--gvn",
          "--lcssa",
          "--add-discriminators",
          "--coro-cleanup",
          "--slp-vectorizer",
          "--mem2reg",
          "--strip-dead-prototypes"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+23.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--rpo-functionattrs",
      "--coro-elide",
      "--jump-threading",
      "--mergeicmps",
      "--lower-widenable-condition",
      "--loop-versioning-licm",
      "--loop-vectorize",
      "--called-value-propagation",
      "--mldst-motion",
      "--loop-unroll-and-jam",
      "--argpromotion",
      "--partially-inline-libcalls",
      "--cross-dso-cfi",
      "--dce",
      "--correlated-propagation",
      "--indvars",
      "--elim-avail-extern",
      "--die",
      "--lower-matrix-intrinsics",
      "--gvn",
      "--lcssa",
      "--add-discriminators",
      "--coro-cleanup",
      "--slp-vectorizer",
      "--mem2reg",
      "--strip-dead-prototypes"
    ],
    "performance_vs_Oz": "+23.5%"
  }
}
{
  "program_id": "linux-v0_3952.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 56,
    "onePredOneSuc": 43,
    "onePredTwoSuc": 13,
    "oneSuccessor": 51,
    "twoPred": 17,
    "twoPredOneSuc": 5,
    "twoEach": 9,
    "twoSuccessor": 26,
    "morePreds": 4,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 88,
    "BeginPhi": 2,
    "BranchCount": 77,
    "returnInt": 3,
    "CriticalCount": 11,
    "NumEdges": 103,
    "const32Bit": 243,
    "const64Bit": 15,
    "numConstZeroes": 120,
    "numConstOnes": 95,
    "UncondBranches": 51,
    "binaryConstArg": 16,
    "NumAShrInst": 0,
    "NumAddInst": 3,
    "NumAllocaInst": 72,
    "NumAndInst": 1,
    "BlockMid": 14,
    "BlockLow": 76,
    "NumBitCastInst": 17,
    "NumBrInst": 77,
    "NumCallInst": 37,
    "NumGetElementPtrInst": 83,
    "NumICmpInst": 31,
    "NumLShrInst": 0,
    "NumLoadInst": 194,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 2,
    "NumRetInst": 13,
    "NumSExtInst": 10,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 100,
    "NumSubInst": 2,
    "NumTruncInst": 9,
    "NumXorInst": 14,
    "NumZExtInst": 18,
    "TotalBlocks": 90,
    "TotalInsts": 686,
    "TotalMemInst": 486,
    "TotalFuncs": 23,
    "ArgsPhi": 4,
    "testUnary": 323
  },
  "baseline_oz_instcount": 687,
  "knowledge_base_entry": [
    "--gvn",
    "--adce",
    "--sccp",
    "--instsimplify",
    "--globalopt",
    "--newgvn",
    "--loop-reroll",
    "--memcpyopt",
    "--simplifycfg",
    "--sccp",
    "--gvn-hoist",
    "--globalopt",
    "--inline",
    "--early-cse",
    "--aggressive-instcombine",
    "--die",
    "--mem2reg",
    "--reassociate",
    "--loop-simplifycfg",
    "--nary-reassociate",
    "--newgvn",
    "--loop-reroll",
    "--memcpyopt",
    "--simplifycfg",
    "--sccp",
    "--gvn-hoist",
    "--newgvn",
    "--load-store-vectorizer"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--ee-instrument",
          "--strip-nondebug",
          "--strip-debug-declare",
          "--coro-early",
          "--loop-rotate",
          "--loweratomic",
          "--rewrite-statepoints-for-gc",
          "--loop-interchange",
          "--attributor",
          "--rpo-functionattrs",
          "--add-discriminators",
          "--lower-widenable-condition",
          "--mergefunc",
          "--lower-expect",
          "--early-cse",
          "--globalopt",
          "--consthoist",
          "--inject-tli-mappings",
          "--aggressive-instcombine",
          "--loop-unroll-and-jam",
          "--lower-guard-intrinsic",
          "--loop-instsimplify",
          "--coro-split",
          "--slsr",
          "--loop-idiom",
          "--mergeicmps"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.7%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--ee-instrument",
      "--strip-nondebug",
      "--strip-debug-declare",
      "--coro-early",
      "--loop-rotate",
      "--loweratomic",
      "--rewrite-statepoints-for-gc",
      "--loop-interchange",
      "--attributor",
      "--rpo-functionattrs",
      "--add-discriminators",
      "--lower-widenable-condition",
      "--mergefunc",
      "--lower-expect",
      "--early-cse",
      "--globalopt",
      "--consthoist",
      "--inject-tli-mappings",
      "--aggressive-instcombine",
      "--loop-unroll-and-jam",
      "--lower-guard-intrinsic",
      "--loop-instsimplify",
      "--coro-split",
      "--slsr",
      "--loop-idiom",
      "--mergeicmps"
    ],
    "performance_vs_Oz": "+0.7%"
  }
}
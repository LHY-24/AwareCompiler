{
  "program_id": "poj104-v1_4_1798.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 2,
    "onePred": 20,
    "onePredOneSuc": 19,
    "onePredTwoSuc": 0,
    "oneSuccessor": 20,
    "twoPred": 8,
    "twoPredOneSuc": 0,
    "twoEach": 8,
    "twoSuccessor": 8,
    "morePreds": 0,
    "BB03Phi": 2,
    "BBHiPhi": 0,
    "BBNoPhi": 29,
    "BeginPhi": 2,
    "BranchCount": 28,
    "returnInt": 5,
    "CriticalCount": 2,
    "NumEdges": 36,
    "const32Bit": 23,
    "const64Bit": 16,
    "numConstZeroes": 15,
    "numConstOnes": 16,
    "UncondBranches": 20,
    "binaryConstArg": 7,
    "NumAShrInst": 0,
    "NumAddInst": 8,
    "NumAllocaInst": 8,
    "NumAndInst": 0,
    "BlockMid": 1,
    "BlockLow": 30,
    "NumBitCastInst": 10,
    "NumBrInst": 28,
    "NumCallInst": 17,
    "NumGetElementPtrInst": 6,
    "NumICmpInst": 8,
    "NumLShrInst": 0,
    "NumLoadInst": 34,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 2,
    "NumRetInst": 3,
    "NumSExtInst": 6,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 15,
    "NumSubInst": 3,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 31,
    "TotalInsts": 148,
    "TotalMemInst": 80,
    "TotalFuncs": 10,
    "ArgsPhi": 4,
    "testUnary": 58
  },
  "baseline_oz_instcount": 86,
  "knowledge_base_entry": [
    "--loop-vectorize",
    "--jump-threading",
    "--gvn-hoist",
    "--correlated-propagation",
    "--reassociate",
    "--gvn-hoist",
    "--loop-instsimplify",
    "--ipsccp",
    "--correlated-propagation",
    "--reassociate",
    "--dse",
    "--mem2reg",
    "--instcombine",
    "--inline",
    "--mem2reg",
    "--inline",
    "--simplifycfg",
    "--bdce",
    "--lower-expect",
    "--early-cse-memssa",
    "--mldst-motion",
    "--early-cse-memssa",
    "--instcombine",
    "--dce",
    "--die",
    "--simplifycfg",
    "--lower-expect"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--gvn",
          "--strip",
          "--partial-inliner",
          "--deadargelim",
          "--inline",
          "--inject-tli-mappings",
          "--constmerge",
          "--mem2reg",
          "--gvn-hoist",
          "--loop-deletion",
          "--simplifycfg",
          "--cross-dso-cfi",
          "--coro-cleanup",
          "--coro-split"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+1.2%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--gvn",
      "--strip",
      "--partial-inliner",
      "--deadargelim",
      "--inline",
      "--inject-tli-mappings",
      "--constmerge",
      "--mem2reg",
      "--gvn-hoist",
      "--loop-deletion",
      "--simplifycfg",
      "--cross-dso-cfi",
      "--coro-cleanup",
      "--coro-split"
    ],
    "performance_vs_Oz": "+1.2%"
  }
}
{
  "program_id": "poj104-v1_46_1440.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 42,
    "onePredOneSuc": 32,
    "onePredTwoSuc": 7,
    "oneSuccessor": 34,
    "twoPred": 8,
    "twoPredOneSuc": 0,
    "twoEach": 6,
    "twoSuccessor": 16,
    "morePreds": 1,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 61,
    "BeginPhi": 0,
    "BranchCount": 50,
    "returnInt": 3,
    "CriticalCount": 0,
    "NumEdges": 66,
    "const32Bit": 95,
    "const64Bit": 41,
    "numConstZeroes": 62,
    "numConstOnes": 60,
    "UncondBranches": 34,
    "binaryConstArg": 20,
    "NumAShrInst": 0,
    "NumAddInst": 12,
    "NumAllocaInst": 20,
    "NumAndInst": 0,
    "BlockMid": 7,
    "BlockLow": 54,
    "NumBitCastInst": 13,
    "NumBrInst": 50,
    "NumCallInst": 41,
    "NumGetElementPtrInst": 37,
    "NumICmpInst": 16,
    "NumLShrInst": 0,
    "NumLoadInst": 96,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 10,
    "NumSExtInst": 30,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 41,
    "NumSubInst": 8,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 1,
    "TotalBlocks": 61,
    "TotalInsts": 376,
    "TotalMemInst": 235,
    "TotalFuncs": 21,
    "ArgsPhi": 0,
    "testUnary": 160
  },
  "baseline_oz_instcount": 174,
  "knowledge_base_entry": [
    "--separate-const-offset-from-gep",
    "--early-cse-memssa",
    "--early-cse",
    "--bdce",
    "--early-cse-memssa",
    "--jump-threading",
    "--loop-simplifycfg",
    "--die",
    "--mergefunc",
    "--instcombine",
    "--early-cse-memssa",
    "--elim-avail-extern",
    "--inline",
    "--dse",
    "--slp-vectorizer",
    "--dse",
    "--ipsccp",
    "--bdce",
    "--simplifycfg",
    "--mem2reg",
    "--lower-expect",
    "--jump-threading",
    "--mergefunc",
    "--sroa",
    "--mldst-motion",
    "--simplifycfg",
    "--adce",
    "--mergefunc",
    "--globaldce",
    "--aggressive-instcombine"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--inferattrs",
          "--sink",
          "--jump-threading",
          "--loop-simplifycfg",
          "--globaldce",
          "--called-value-propagation",
          "--gvn",
          "--die",
          "--loop-instsimplify",
          "--lower-matrix-intrinsics",
          "--aggressive-instcombine",
          "--elim-avail-extern",
          "--correlated-propagation",
          "--alignment-from-assumptions",
          "--strip-nondebug",
          "--lowerinvoke",
          "--coro-elide",
          "--redundant-dbg-inst-elim",
          "--instsimplify",
          "--instcombine"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+7.5%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--inferattrs",
      "--sink",
      "--jump-threading",
      "--loop-simplifycfg",
      "--globaldce",
      "--called-value-propagation",
      "--gvn",
      "--die",
      "--loop-instsimplify",
      "--lower-matrix-intrinsics",
      "--aggressive-instcombine",
      "--elim-avail-extern",
      "--correlated-propagation",
      "--alignment-from-assumptions",
      "--strip-nondebug",
      "--lowerinvoke",
      "--coro-elide",
      "--redundant-dbg-inst-elim",
      "--instsimplify",
      "--instcombine"
    ],
    "performance_vs_Oz": "+7.5%"
  }
}
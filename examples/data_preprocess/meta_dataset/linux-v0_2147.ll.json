{
  "program_id": "linux-v0_2147.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 33,
    "onePredOneSuc": 20,
    "onePredTwoSuc": 12,
    "oneSuccessor": 24,
    "twoPred": 8,
    "twoPredOneSuc": 3,
    "twoEach": 2,
    "twoSuccessor": 21,
    "morePreds": 4,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 58,
    "BeginPhi": 0,
    "BranchCount": 45,
    "returnInt": 10,
    "CriticalCount": 11,
    "NumEdges": 66,
    "const32Bit": 232,
    "const64Bit": 13,
    "numConstZeroes": 108,
    "numConstOnes": 64,
    "UncondBranches": 24,
    "binaryConstArg": 28,
    "NumAShrInst": 0,
    "NumAddInst": 8,
    "NumAllocaInst": 47,
    "NumAndInst": 9,
    "BlockMid": 7,
    "BlockLow": 51,
    "NumBitCastInst": 3,
    "NumBrInst": 45,
    "NumCallInst": 28,
    "NumGetElementPtrInst": 63,
    "NumICmpInst": 23,
    "NumLShrInst": 1,
    "NumLoadInst": 133,
    "NumMulInst": 0,
    "NumOrInst": 3,
    "NumPHIInst": 0,
    "NumRetInst": 13,
    "NumSExtInst": 1,
    "NumSelectInst": 2,
    "NumShlInst": 0,
    "NumStoreInst": 66,
    "NumSubInst": 5,
    "NumTruncInst": 2,
    "NumXorInst": 0,
    "NumZExtInst": 12,
    "TotalBlocks": 58,
    "TotalInsts": 476,
    "TotalMemInst": 337,
    "TotalFuncs": 15,
    "ArgsPhi": 0,
    "testUnary": 198
  },
  "baseline_oz_instcount": 476,
  "knowledge_base_entry": [
    "--globalopt",
    "--newgvn",
    "--slsr",
    "--jump-threading",
    "--licm",
    "--loop-simplifycfg",
    "--loop-instsimplify",
    "--aggressive-instcombine",
    "--dce",
    "--mergefunc",
    "--jump-threading",
    "--gvn",
    "-loop-reduce",
    "--simplifycfg",
    "--loop-instsimplify",
    "--aggressive-instcombine",
    "--mergefunc",
    "--dce",
    "--early-cse",
    "--inline",
    "--nary-reassociate",
    "--loop-simplifycfg",
    "--mem2reg"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--loop-versioning-licm",
          "--mldst-motion",
          "--lower-constant-intrinsics",
          "--attributor",
          "--globalopt",
          "--indvars",
          "--lower-matrix-intrinsics",
          "--infer-address-spaces",
          "--loop-unroll-and-jam",
          "--loop-unroll",
          "--coro-early",
          "--forceattrs",
          "--inferattrs",
          "--lcssa",
          "--partial-inliner",
          "--inject-tli-mappings",
          "--gvn",
          "--gvn-hoist",
          "--loop-versioning",
          "--jump-threading",
          "--lowerinvoke",
          "--slp-vectorizer",
          "--loop-predication",
          "--loop-rotate",
          "--globaldce",
          "--loop-vectorize",
          "--aggressive-instcombine",
          "-loop-reduce",
          "--correlated-propagation"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+0.4%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--loop-versioning-licm",
      "--mldst-motion",
      "--lower-constant-intrinsics",
      "--attributor",
      "--globalopt",
      "--indvars",
      "--lower-matrix-intrinsics",
      "--infer-address-spaces",
      "--loop-unroll-and-jam",
      "--loop-unroll",
      "--coro-early",
      "--forceattrs",
      "--inferattrs",
      "--lcssa",
      "--partial-inliner",
      "--inject-tli-mappings",
      "--gvn",
      "--gvn-hoist",
      "--loop-versioning",
      "--jump-threading",
      "--lowerinvoke",
      "--slp-vectorizer",
      "--loop-predication",
      "--loop-rotate",
      "--globaldce",
      "--loop-vectorize",
      "--aggressive-instcombine",
      "-loop-reduce",
      "--correlated-propagation"
    ],
    "performance_vs_Oz": "+0.4%"
  }
}
{
  "program_id": "github-v0_46634.ll",
  "autophase_features": {
    "BBNumArgsHi": 0,
    "BBNumArgsLo": 0,
    "onePred": 4,
    "onePredOneSuc": 2,
    "onePredTwoSuc": 1,
    "oneSuccessor": 4,
    "twoPred": 1,
    "twoPredOneSuc": 0,
    "twoEach": 0,
    "twoSuccessor": 1,
    "morePreds": 0,
    "BB03Phi": 0,
    "BBHiPhi": 0,
    "BBNoPhi": 26,
    "BeginPhi": 0,
    "BranchCount": 5,
    "returnInt": 10,
    "CriticalCount": 0,
    "NumEdges": 6,
    "const32Bit": 56,
    "const64Bit": 0,
    "numConstZeroes": 12,
    "numConstOnes": 43,
    "UncondBranches": 4,
    "binaryConstArg": 9,
    "NumAShrInst": 0,
    "NumAddInst": 9,
    "NumAllocaInst": 31,
    "NumAndInst": 0,
    "BlockMid": 0,
    "BlockLow": 26,
    "NumBitCastInst": 0,
    "NumBrInst": 5,
    "NumCallInst": 33,
    "NumGetElementPtrInst": 0,
    "NumICmpInst": 1,
    "NumLShrInst": 0,
    "NumLoadInst": 21,
    "NumMulInst": 0,
    "NumOrInst": 0,
    "NumPHIInst": 0,
    "NumRetInst": 21,
    "NumSExtInst": 7,
    "NumSelectInst": 0,
    "NumShlInst": 0,
    "NumStoreInst": 41,
    "NumSubInst": 0,
    "NumTruncInst": 0,
    "NumXorInst": 0,
    "NumZExtInst": 0,
    "TotalBlocks": 26,
    "TotalInsts": 169,
    "TotalMemInst": 126,
    "TotalFuncs": 26,
    "ArgsPhi": 0,
    "testUnary": 59
  },
  "baseline_oz_instcount": 169,
  "knowledge_base_entry": [
    "--flattencfg",
    "--mem2reg",
    "--mergefunc",
    "--adce",
    "--gvn-hoist",
    "--loop-reroll",
    "--indvars",
    "--slsr",
    "--simplifycfg",
    "--loop-instsimplify",
    "--die",
    "--loop-simplifycfg",
    "--slp-vectorizer",
    "--sroa",
    "--lower-expect"
  ],
  "trajectory": [
    {
      "turn": 1,
      "thought": "Based on the program's characteristics and my experience, I'll formulate a strong initial optimization sequence.",
      "action": "GENERATE_SEQUENCE",
      "action_input": {
        "pass_sequence": [
          "--mergereturn",
          "--coro-cleanup",
          "--constmerge",
          "--speculative-execution",
          "--aggressive-instcombine",
          "--coro-split",
          "--partial-inliner",
          "--strip-dead-prototypes",
          "--licm",
          "--inline",
          "--mldst-motion",
          "--elim-avail-extern",
          "--lowerinvoke",
          "--sink",
          "--gvn",
          "--loop-sink",
          "--sccp",
          "--jump-threading",
          "--div-rem-pairs",
          "--functionattrs",
          "--loop-reroll",
          "--load-store-vectorizer",
          "--mergefunc",
          "--loop-load-elim",
          "--lower-constant-intrinsics",
          "--correlated-propagation",
          "--slsr",
          "--simplifycfg",
          "--scalarizer"
        ]
      },
      "observation": {
        "status": "BetterThanOz",
        "performance_vs_Oz": "+27.8%",
        "is_crash": false
      }
    }
  ],
  "final_answer": {
    "pass_sequence": [
      "--mergereturn",
      "--coro-cleanup",
      "--constmerge",
      "--speculative-execution",
      "--aggressive-instcombine",
      "--coro-split",
      "--partial-inliner",
      "--strip-dead-prototypes",
      "--licm",
      "--inline",
      "--mldst-motion",
      "--elim-avail-extern",
      "--lowerinvoke",
      "--sink",
      "--gvn",
      "--loop-sink",
      "--sccp",
      "--jump-threading",
      "--div-rem-pairs",
      "--functionattrs",
      "--loop-reroll",
      "--load-store-vectorizer",
      "--mergefunc",
      "--loop-load-elim",
      "--lower-constant-intrinsics",
      "--correlated-propagation",
      "--slsr",
      "--simplifycfg",
      "--scalarizer"
    ],
    "performance_vs_Oz": "+27.8%"
  }
}